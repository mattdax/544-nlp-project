{"question":{"0":"Find all airlines that have at least 10 flights.","1":"What are the different first names and ages of the students who do have pets?","2":"What are all the song names by singers who are older than average?","3":"Give the airline with abbreviation 'UAL'.","4":"What are the names of the countries with no car makers?","5":"How many flights land in Aberdeen or Abilene?","6":"What is the number of the cars with horsepower more than 150?","7":"What are all the makers and models?","8":"Give the code of the airport with the least flights.","9":"Which model has the most version(make) of cars?","10":"Find the abbreviation and country of the airline that has fewest number of flights?","11":"Which makers designed more than 3 car models? List full name and the id.","12":"Find the name of the makers that produced some cars in the year of 1970?","13":"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?","14":"What is the number of car models that are produced by each maker and what is the id and full name of each maker?","15":"Give the flight numbers of flights leaving from Aberdeen.","16":"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?","17":"Find all airlines that have fewer than 200 flights.","18":"What is the first name of every student who has a dog but does not have a cat?","19":"What is the name and capacity for the stadium with the highest average attendance?","20":"What is the maker of the carr produced in the earliest year and what year was it?","21":"What is the average, minimum, and maximum age for all French singers?","22":"What is the average weight of cars each year?","23":"What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?","24":"What are all distinct countries where singers above age 20 are from?","25":"For the cars with 4 cylinders, which model has the largest horsepower?","26":"how many cars were produced in 1980?","27":"How much does the youngest dog weigh?","28":"What is the last name of the student who has a cat that is 3 years old?","29":"What are the ids of the students who do not own cats as pets?","30":"How many pets are owned by students that have an age greater than 20?","31":"What is the average horsepower for all cars produced before 1980 ?","32":"How many United Airlines flights go to City 'Aberdeen'?","33":"What are the airline names and abbreviations for airlines in the USA?","34":"How many countries are listed?","35":"What are the number of concerts that occurred in the stadium with the largest capacity ?","36":"Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.","37":"What is the average and maximum capacities for all stadiums ?","38":"What type of pet is the youngest animal, and how much does it weigh?","39":"How much does the car accelerate that makes amc hornet sportabout (sw)?","40":"Find the number of flights landing in the city of Aberdeen or Abilene.","41":"Find the first name and age of students who have a pet.","42":"Give the number of Jetblue Airways flights.","43":"Which year has most number of concerts?","44":"How many flights have destination ATO?","45":"How many singers are from each country?","46":"How many countries does each continent have? List the continent id, continent name and the number of countries.","47":"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?","48":"Find the number of dog pets that are raised by female students (with sex F).","49":"What are flight numbers of flights departing from Airport \"APG\"?","50":"How many car models were produced by the maker with full name American Motor Company?","51":"What is the count of the car models produced in the United States?","52":"How many car makers are there in each continents? List the continent name and the count.","53":"Find the number of pets for each student who has any pet and student id.","54":"What are airport names at City 'Aberdeen'?","55":"What is the horsepower of the car with the greatest accelerate?","56":"How many concerts occurred in 2014 or 2015?","57":"What are flight numbers of Airline \"United Airlines\"?","58":"Return the number of airlines in the USA.","59":"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?","60":"Find the weight of the youngest dog.","61":"What are the names of the singers and number of concerts for each person?","62":"What are the names and ids of all countries with at least one car maker?","63":"In 1980, how many cars were made?","64":"For all of the 4 cylinder cars, which model has the most horsepower?","65":"Return the number of United Airlines flights leaving from AHD Airport.","66":"How many singers do we have?","67":"How many flights does airline 'JetBlue Airways' have?","68":"For each continent, list its id, name, and how many countries it has?","69":"List singer names and number of concerts for each singer.","70":"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?","71":"How many flights arriving in Aberdeen city?","72":"Show the name and the release year of the song by the youngest singer.","73":"How many 'United Airlines' flights depart from Airport 'AHD'?","74":"How many pets have a greater weight than 10?","75":"Show names for all stadiums except for stadiums having a concert in year 2014.","76":"How many countries exist?","77":"Count the number of flights into ATO.","78":"What is the number of cars with more than 4 cylinders?","79":"What are the students' first names who have both cats and dogs as pets?","80":"What is the average age for all students who do not own any pets ?","81":"How many car makers are there in france?","82":"Find all airlines that have flights from both airports 'APG' and 'CVO'.","83":"What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?","84":"Show countries where a singer above age 40 and a singer below 30 are from.","85":"What is the name of each continent and how many car makers are there in each one?","86":"Which flight numbers correspond to United Airlines flights?","87":"What is the average and maximum age for each pet type?","88":"What is the average weight for each type of pet?","89":"For a volvo model, how many cylinders does the version with least accelerate have?","90":"Find the type and weight of the youngest pet.","91":"What are the names and ids of all makers with more than 3 models?","92":"What are the names , themes , and number of singers for every concert ?","93":"How many airlines do we have?","94":"How many different types of pet are there?","95":"What is the name of the country with the most car makers?","96":"What are the names, countries, and ages for every singer in descending order of age?","97":"What is the smallest weight of the car produced with 8 cylinders on 1974 ?","98":"What is the maximum horsepower and the make of the car models with 3 cylinders?","99":"Which city has most number of departing flights?","100":"What are the names of all European countries with at least 3 manufacturers?","101":"What is the minimum weight of the car with 8 cylinders produced in 1974 ?","102":"What are the different models for the cards produced after 1980?","103":"List all song names by singers above the average age.","104":"Find the first name of students who have cat or dog pet.","105":"Find the number of distinct type of pets.","106":"Find the average and maximum age for each type of pet.","107":"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?","108":"Which city has the most frequent destination airport?","109":"What are flight numbers of flights departing from City \"Aberdeen \"?","110":"How many cars have a larger accelerate than the car with the largest horsepower?","111":"How many flights depart from 'APG'?","112":"What is the average weight and year for each year?","113":"Which airline has most number of flights?","114":"Which airlines have departures from CVO but not from APG airports?","115":"Give the flight numbers of flights landing at APG.","116":"What is the airport name for airport 'AKO'?","117":"Which model of the car has the minimum horsepower?","118":"What is the number of carsw ith over 6 cylinders?","119":"How many 'United Airlines' flights go to Airport 'ASY'?","120":"What are airlines that have some flight departing from airport 'AHD'?","121":"Show the stadium name and the number of concerts in each stadium.","122":"What is the id and weight of every pet who is older than 1?","123":"Give the city and country for the Alton airport.","124":"Show location and name for all stadiums with a capacity between 5000 and 10000.","125":"Which countries in europe have at least 3 car manufacturers?","126":"Which airlines have a flight with destination airport AHD?","127":"Show the name and theme for all concerts and the number of singers in each concert.","128":"What is the model of the car with the smallest amount of horsepower?","129":"What is the total number of singers?","130":"Find the average weight for each pet type.","131":"What are the first names of every student who has a cat or dog as a pet?","132":"Return the name of the airport with code 'AKO'.","133":"What airline serves the most flights?","134":"What is the total number of airlines?","135":"What is the accelerate of the car make amc hornet sportabout (sw)?","136":"Find the make and production time of the cars that were produced in the earliest year?","137":"What is the abbreviation of Airline \"JetBlue Airways\"?","138":"What model has the most different versions?","139":"Find the first name and gender of student who have more than one pet.","140":"What are the names of all stadiums that did not have a concert in 2014?","141":"Return the number of  airports.","142":"Which airlines have departing flights from both APG and CVO airports?","143":"List all airline names and their abbreviations in \"USA\".","144":"How many concerts are there in year 2014 or 2015?","145":"What is the average edispl of the cars of model volvo?","146":"What is the number of makers of care in France?","147":"For students who have pets , how many pets does each student have ? list their ids instead of names .","148":"What are airlines that have flights arriving at airport 'AHD'?","149":"Find the last name of the student who has a cat that is age 3.","150":"What is the number of countries with more than 2 car makers ?","151":"What is the car model with the highest mpg ?","152":"What is the abbreviation of the airilne has the fewest flights and what country is it in?","153":"What are the name of the countries where there is not a single car maker?","154":"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","155":"Find the first name and age of students who have a dog but do not have a cat as a pet.","156":"What are the makers and models?","157":"Which airlines have at least 10 flights?","158":"How many airlines are from USA?","159":"Give the flight numbers of flights arriving in Aberdeen.","160":"Show name, country, age for all singers ordered by age from the oldest to the youngest.","161":"What is the maximum accelerate for all the different cylinders?","162":"Show the stadium names without any concert.","163":"What are  the different countries with singers above age 20?","164":"How many countries has more than 2 car makers ?","165":"What is the code of airport that has the highest number of flights?","166":"How many airports do we have?","167":"What is the number of car models created by the car maker American Motor Company?","168":"Which distinct car models are the produced after 1980?","169":"How many car models are produced by each maker ? Only list the count and the maker full name .","170":"In which years cars were produced weighing no less than 3000 and no more than 4000 ?","171":"What are flight numbers of flights arriving at Airport \"APG\"?","172":"Find the maximum weight for each type of pet. List the maximum weight and pet type.","173":"What is the code of airport that has fewest number of flights?","174":"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","175":"Which airlines have a flight with source airport AHD?","176":"What are flight numbers of flights arriving at City \"Aberdeen\"?","177":"Which abbreviation corresponds to Jetblue Airways?","178":"What is the average miles per gallon(mpg) of the cars with 4 cylinders?","179":"What is the number of cars with a horsepower greater than 150?","180":"What is the name and capacity of the stadium with the most concerts after 2013 ?","181":"What is the id of the pet owned by the student whose last name is 'Smith'?","182":"How many car models are produced in the usa?","183":"How many continents are there?","184":"Which of the countries has the most car makers? List the country name.","185":"Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .","186":"For each stadium, how many concerts play there?","187":"Return the number of flights departing from Aberdeen.","188":"Find the model of the car whose weight is below the average weight.","189":"What are the names of airports in Aberdeen?","190":"Which city and country is the Alton airport at?","191":"Show all countries and the number of singers in each country.","192":"What is the airport code of the airport with the most flights?","193":"How many flights depart from City Aberdeen?","194":"How many dog pets are raised by female students?","195":"What are the different models created by either the car maker General Motors or weighed more than 3500?","196":"What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?","197":"Give the airport code and airport name corresonding to the city Anthony.","198":"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.","199":"What is the maximum capacity and the average of all stadiums ?","200":"Count the number of flights departing from 'APG'.","201":"What major is every student who does not own a cat as a pet, and also how old are they?","202":"What is the average edispl for all volvos?","203":"What is the average miles per gallon of all the cards with 4 cylinders?","204":"What is the first name and gender of the all the students who have more than one pet?","205":"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?","206":"What is the name and capacity for the stadium with highest average attendance?","207":"what is the name and nation of the singer who have a song having 'Hey' in its name?","208":"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?","209":"Find the id of the pet owned by student whose last name is \u2018Smith\u2019.","210":"Count the number of United Airlines flights that arrive in Aberdeen.","211":"Find the id and weight of all pets whose age is older than 1.","212":"What are the names of the singers who performed in a concert in 2014?","213":"What are the names of the stadiums without any concerts?","214":"Which city has most number of arriving flights?","215":"List all singer names in concerts in year 2014.","216":"What are the countries having at least one car maker? List name and id.","217":"What are the locations and names of all stations with capacity between 5000 and 10000?","218":"What is the model for the car with a weight smaller than the average?","219":"What is the year that had the most concerts?","220":"What is the full name of each car maker, along with its id and how many models it produces?","221":"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?","222":"How many models does each car maker produce? List maker full name, id and the number.","223":"Which city is the most frequent source airport?","224":"What is the number of continents?","225":"List the maximum weight and type for each type of pet.","226":"What is the number of cars with a greater accelerate than the one with the most horsepower?","227":"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?","228":"Find the major and age of students who do not have a cat pet.","229":"Find the average age of students who do not have any pet .","230":"What is the average horsepower of the cars before 1980?","231":"Give the flight numbers of flights leaving from APG.","232":"How many flights do we have?","233":"Which airlines have less than 200 flights?","234":"What is the maximum accelerate for different number of cylinders?","235":"What is the name of the different car makers who produced a car in 1970?","236":"Show the stadium name and capacity with most number of concerts in year 2014 or after.","237":"Find the name of airports which do not have any flight in and out.","238":"Return the number of flights.","239":"Find number of pets owned by students who are older than 20.","240":"Which airline has abbreviation 'UAL'?","241":"Which country does Airline \"JetBlue Airways\" belong to?","242":"Find the number of concerts happened in the stadium with the highest capacity .","243":"How many cars has over 6 cylinders?","244":"What country is Jetblue Airways affiliated with?","245":"How many cars have more than 4 cylinders?","246":"Find the number of pets whose weight is heavier than 10.","247":"What are the names and release years for all the songs of the youngest singer?","248":"Find the first name of students who have both cat and dog pets .","249":"Count the number of United Airlines flights arriving in ASY Airport.","250":"What is the average, minimum, and maximum age of all singers from France?","251":"Return the number of flights arriving in Aberdeen.","252":"Find the id of students who do not have a cat pet.","253":"What is the horsepower of the car with the largest accelerate?","254":"How many flights fly from Aberdeen to Ashley?","255":"List the airport code and name in the city of Anthony.","256":"For model volvo, how many cylinders does the car with the least accelerate have?","257":"What are the codes of template types that are not used for any document?","258":"How is the math course described?","259":"List all document ids with at least two paragraphs.","260":"What are the opening year and staff number of the museum named Plaza Museum?","261":"Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.","262":"What are the full names of all players, sorted by birth date?","263":"How many visitors below age 30 are there?","264":"Which airports do not have departing or arriving flights?","265":"What is the total ticket expense of the visitors whose membership level is 1?","266":"What is the first name and country code of the player with the most tours?","267":"What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?","268":"Find the total number of tours for each ranking date.","269":"What is the hometown of the youngest teacher?","270":"Find the first name and country code of the oldest player.","271":"What is the template type code for template type description \"Book\".","272":"How many employees are there?","273":"Show all distinct template type codes for all templates.","274":"What are the names of documents that use templates with the code BK?","275":"What are the first names and birth dates of players from the USA?","276":"What are the full names of all left handed players, in order of birth date?","277":"Show all template type codes and descriptions.","278":"What is the id and type code for the template used by the most documents?","279":"Find the highest rank of losers in all matches.","280":"Show names of teachers that teach at least two courses.","281":"How many teachers are there?","282":"What are the different template type codes?","283":"find the minimum and maximum number of products of all stores.","284":"Which year had the most matches?","285":"What are the names of the teachers who are aged either 32 or 33?","286":"What is the document id with least number of paragraphs?","287":"Find the cities that have more than one employee under age 30.","288":"What is the template type descriptions for template type code \"AD\".","289":"Find the id and name of the museum that has the most staff members?","290":"Count the number of documents.","291":"Find the average age of losers and winners of all matches.","292":"What are the paragraph texts for the document with the name 'Customer reviews'?","293":"What is the template type code of the template used by document with the name \"Data base\"?","294":"What are the first names and country codes for players who won both the WTA Championships and the Australian Open?","295":"What are the names of the winner and loser who played in the longest match?","296":"What are the descriptions for all the math courses?","297":"How many ships ended up being 'Captured'?","298":"How many templates do we have?","299":"Give me all the information about hiring.","300":"What are the ids for templates that are not used in any documents?","301":"Count the number of distinct store locations.","302":"How many players are there?","303":"Show all paragraph ids and texts for the document with name 'Welcome to NY'.","304":"Find the codes of countries that have more than 50 players.","305":"Sort all the shops by number products in descending order, and return the name, location and district of each shop.","306":"What are the details for the paragraph that includes the text 'Korea ' ?","307":"What is the document id with 1 to 2 paragraphs?","308":"Return the name, location and district of all shops in descending order of number of products.","309":"Show the name of teachers aged either 32 or 33?","310":"Show ids for all templates that are used by more than one document.","311":"Return the lowest version number, along with its corresponding template type code.","312":"List the first name and birth date of all players from the country with code USA.","313":"What are the names of players who won in both 2013 and 2016?","314":"Show all template ids and number of documents using each template.","315":"What is the name of each teacher and what course they teach?","316":"Find the number of left handed winners who participated in the WTA Championships.","317":"List the name of teachers whose hometown is not `` Little Lever Urban District '' .","318":"List the names of teachers who have not been arranged to teach courses.","319":"What are the template ids with template type description \"Presentation\".","320":"What is the first name and country code of the oldest player?","321":"Show all template type codes that are not used by any document.","322":"Return the id and type code of the template that is used for the greatest number of documents.","323":"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","324":"Return the version numbers and template type codes of templates with a version number greater than 5.","325":"Which shops run with no employees? Find the shop names","326":"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","327":"Find the manager name and district of the shop whose number of products is the largest.","328":"Give the ids of documents that have between one and two paragraphs.","329":"How many battles did not lose any ship with tonnage '225'?","330":"What are the names of the teachers whose courses have not been arranged?","331":"What is the first and second line for all addresses?","332":"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.","333":"List the number of all matches who played in years of 2013 or 2016.","334":"What are the average ages of losers and winners across matches?","335":"Which template type code is used by most number of documents?","336":"For each hometown, how many teachers are there?","337":"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.","338":"Find the name of tourney that has more than 10 matches.","339":"Find the number of matches happened in each year.","340":"What are the names of tournaments that have more than 10 matches?","341":"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","342":"What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?","343":"Which department offers the most number of degrees? List department name and id.","344":"What are the ids and names of the battles that led to more than 10 people killed in total.","345":"What are the first names of all players, and their total ranking points?","346":"Show all document names using templates with template type code BK.","347":"What are all different template ids used for documents, and how many times were each of them used?","348":"Return the type code of the template type that the most templates belong to.","349":"find the name of employee who was awarded the most times in the evaluation.","350":"Find the total amount of bonus given in all the evaluations.","351":"Return the document id, template id, and description for the document with the name Robbin CV.","352":"Return the different descriptions for templates that have been used in a document.","353":"What are the distinct template type descriptions for the templates ever used by any document?","354":"Count the number of employees","355":"What are the towns from which at least two teachers come from?","356":"What is the name of the winner with the most rank points who participated in the Australian Open tournament?","357":"find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.","358":"How many templates have template type code CV?","359":"What are the different ids and names of the battles that lost any 'Brig' type shipes?","360":"How many documents do we have?","361":"List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'","362":"What are the first names of all players, and their average rankings?","363":"What are the ids, names, and descriptions for all documents?","364":"Return the template type code of the template that is used by a document named Data base.","365":"List the names of employees and sort in ascending order of age.","366":"What is the document id and name with greatest number of paragraphs?","367":"How many courses in total are listed?","368":"What is the name of the museum that had no visitor yet?","369":"Return the code of the template type that is most commonly used in documents.","370":"What are the different template type codes, and how many templates correspond to each?","371":"What is maximum and minimum death toll caused each time?","372":"How many players are from each country?","373":"Return the names and template ids for documents that contain the letter w in their description.","374":"Count the number of documents that use the PPT template type.","375":"What are the different template type codes, and how many documents use each type?","376":"find the names of loser and winner who played in the match with greatest number of minutes.","377":"Count the number of different templates used for documents.","378":"Show the document id with paragraph text 'Brazil' and 'Ireland'.","379":"What is total bonus given in all evaluations?","380":"Find the number of distinct name of losers.","381":"What are the codes of template types that have fewer than 3 templates?","382":"What are the notes of the death events which has substring 'East'?","383":"Return the type code of the template type with the description \"Book\".","384":"What is the number of employees from each city?","385":"Return the template type description of the template type with the code AD.","386":"What are the ids, version numbers, and type codes for each template?","387":"Find the name and rank points of the winner who won the most times.","388":"What is the age and hometown of every teacher?","389":"Show the hometowns shared by at least two teachers.","390":"Count the number of employees for each city.","391":"Count the number of matches.","392":"What are the id and name of the museum visited most times?","393":"How many total tours were there for each ranking date?","394":"What is the version number and template type code for the template with version number later than 5?","395":"Where is the youngest teacher from?","396":"Find the year that has the most number of matches.","397":"Show all template type codes and the number of documents using each type.","398":"What are the manager name and district of the shop that sells the largest number of products?","399":"What are the names of the people who teach math courses?","400":"find the number of distinct country codes of all players.","401":"What are the ids and names of each document, as well as the number of paragraphs in each?","402":"What is the average age of the visitors whose membership level is not higher than 4?","403":"What is the document name and template id for document with description with the letter 'w' in it?","404":"What is the code of the country with the most players?","405":"Show names of teachers and the courses they are arranged to teach.","406":"What the smallest version number and its template type code?","407":"What is all the information about hiring?","408":"Show all paragraph texts for the document \"Customer reviews\".","409":"what are all the addresses including line 1 and line 2?","410":"How many different winners both participated in the WTA Championships and were left handed?","411":"Return the id and name of the document with the most paragraphs.","412":"Return the id of the document with the fewest paragraphs.","413":"Find the total number of players.","414":"find the id, name and age for visitors who visited some museums more than once.","415":"What is the most commmon hometowns for teachers?","416":"What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?","417":"Which template type code has most number of templates?","418":"What are the names of the employees who never received any evaluation?","419":"Show all document ids and the number of paragraphs in each document. Order by document id.","420":"find the number of players for each country.","421":"How many players are there for each hand type?","422":"Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.","423":"What are the ids of templates with template type code PP or PPT?","424":"Find the name of the shops that do not hire any employee.","425":"List the name, date and result of each battle.","426":"Count the number of paragraphs.","427":"Which shop has the most employees? Give me the shop name.","428":"List the names of all winners who played in both 2013 and 2016.","429":"How many different results are there for the battles?","430":"List document IDs, document names, and document descriptions for all documents.","431":"What are the names and ranks of the three youngest winners across all matches?","432":"How many paragraphs in total?","433":"Return the ids of templates that have the code PP or PPT.","434":"How many documents are using the template with type code 'PPT'?","435":"What are the name and results of the battles when the bulgarian commander is not 'Boril'","436":"Show names of teachers and the number of courses they teach.","437":"Find the names of stores whose number products is more than the average number of products.","438":"What is the average number of injuries caused each time?","439":"How many courses are there?","440":"What are the codes of countries with more than 50 players?","441":"How many different store locations are there?","442":"Show paragraph details for paragraph with text 'Korea ' .","443":"List the first and last name of all players who are left \/ L hand in the order of birth date.","444":"Show all template type codes with less than three templates.","445":"What are the names of the teachers who teach at least two courses?","446":"How many different templates do all document use?","447":"Find the average ranking for each player and their first name.","448":"List the first and last name of all players in the order of birth date.","449":"What is the ship id and name that caused most total injuries?","450":"What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?","451":"Show different hometown of teachers and the number of teachers from each hometown.","452":"List the names of teachers in ascending order of age.","453":"What is the zip code of the address in the city Port Chelsea?","454":"What is the document id, template id and description for document named \"Robbin CV\"?","455":"Find the first name and country code of the player who did the most number of tours.","456":"How many museums were opened after 2013 or before 2008?","457":"What are the names of the teachers ordered by ascending age?","458":"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","459":"Show the name of the teacher for the math course.","460":"What is the average rank for winners in all matches?","461":"Which employee received the most awards in evaluations? Give me the employee name.","462":"Find the number of players for each hand type.","463":"How many different loser names are there?","464":"What are the death and injury situations caused by the ship with tonnage 't'?","465":"How many distinct countries do players come from?","466":"What is the best rank of losers across all matches?","467":"Show all template type codes and number of templates for each.","468":"What is the name of the winner who has won the most matches, and how many rank points does this player have?","469":"What is the total count of teachers?","470":"Find the number of employees hired in each shop; show the shop name as well.","471":"What are the names of the teachers and how many courses do they teach?","472":"Which employee received the biggest bonus? Give me the employee name.","473":"Count the number of templates of the type CV.","474":"What is the name of the shop that is hiring the largest number of employees?","475":"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?","476":"What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?","477":"Which district has both stores with less than 3000 products and stores with more than 10000 products?","478":"How many matches were played in 2013 or 2016?","479":"What are the minimum and maximum number of products across all the shops?","480":"Return the ids corresponding to templates with the description 'Presentation'.","481":"Find the name and age of the visitor who bought the most tickets at once.","482":"Show template ids, version numbers, and template type codes for all templates.","483":"Show all document ids, names and the number of paragraphs in each document.","484":"What are the age and hometown of teachers?","485":"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","486":"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?","487":"List the name and tonnage ordered by in descending alphaetical order for the names.","488":"What are the average and maximum number of tickets bought in all visits?","489":"How many shops are there in each location?","490":"find the code of the country where has the greatest number of players.","491":"For each shop, return the number of employees working there and the name of the shop.","492":"What are the template ids of any templates used in more than a single document?","493":"Find the name and rank of the 3 youngest winners across all matches.","494":"Find the average number of staff working for the museums that were open before 2009.","495":"Which cities do more than one employee under age 30 come from?","496":"Find the average rank of winners in all matches.","497":"How many matches were played in each year?","498":"What are the ids of documents that have 2 or more paragraphs?","499":"List the most common hometown of teachers.","500":"Find the total number of matches.","501":"Find the number of shops in each location.","502":"Find the number of visitors who did not visit any museum opened after 2010.","503":"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","504":"Count the number of paragraphs in the document named 'Summer Show'.","505":"Count the number of templates.","506":"Sort employee names by their age in ascending order.","507":"What are the type codes and descriptions for all template types?","508":"Show ids for all templates not used by any document.","509":"Find the name of the employee who got the highest one time bonus.","510":"What is the zip code for Port Chelsea?","511":"How many paragraphs for the document with name 'Summer Show'?","512":"Find the names of employees who never won any award in the evaluation.","513":"Which shops' number products is above the average? Give me the shop names.","514":"Find the total ranking points for each player and their first name.","515":"What is minimum and maximum share of TV series?","516":"What are the nationalities that are shared by at least two people?","517":"When is the first transcript released? List the date and details.","518":"What are different nationalities of people and the corresponding number of people from each nation?","519":"What is the most populace city that speaks English?","520":"What region is Kabul in?","521":"What is the number of nations that use English and Dutch?","522":"What is the average GNP and total population in all nations whose government is US territory?","523":"What are the last name of the students who live in North Carolina but have not registered in any degree programs?","524":"List the final tables made and the best finishes of poker players.","525":"How many cartoons were written by \"Joseph Kuhr\"?","526":"What is the produdction code and channel of the most recent cartoon ?","527":"What is the earliest date of a transcript release, and what details can you tell me?","528":"How many transcripts are released?","529":"Which languages are spoken by only one country in republic governments?","530":"What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?","531":"Which regions speak Dutch or English?","532":"List the section_name in reversed lexicographical order.","533":"Give the names of the nations that were founded after 1950.","534":"What is the first, middle, and last name of the first student to register?","535":"How many languages are spoken in Aruba?","536":"What other details can you tell me about students in reverse alphabetical order?","537":"List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".","538":"What are the regions that use English or Dutch?","539":"What are the package options and the name of the series for the TV Channel that supports high definition TV?","540":"What is the phone number of the man with the first name Timmothy and the last name Ward?","541":"What's the name of the course with most number of enrollments?","542":"How many continents speak Chinese?","543":"which countries' tv channels are not playing any cartoon written by Todd Casey?","544":"What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?","545":"find id of the tv channels that from the countries where have more than two tv channels.","546":"List the names of people that are not poker players.","547":"What are 3 most highly rated episodes in the TV series table and what were those ratings?","548":"What are the names of people who are not from Russia?","549":"How many official languages are spoken in Afghanistan?","550":"What is the name and directors of all the cartoons that are ordered by air date?","551":"What are the number of votes from state 'NY' or 'CA'?","552":"Describe the section h.","553":"Give the mean GNP and total population of nations which are considered US territory.","554":"How many contestants did not get voted?","555":"What are the first, middle, and last names for everybody enrolled in a Bachelors program?","556":"What is the description for the section named h?","557":"List the contestant numbers and names, ordered by contestant name descending.","558":"What is the number of cartoones written by Joseph Kuhr?","559":"What are the names of the sections in reverse alphabetical order?","560":"Give the total surface area covered by countries in Asia or Europe.","561":"How many unique languages are spoken in the world?","562":"What are the names of poker players, ordered ascending by the number of final tables they have made?","563":"What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.","564":"What is the money rank of the poker player with the highest earnings?","565":"What is the first name of the student whose permanent address is different from his or her current one?","566":"Give the average life expectancy for countries in Africa which are republics?","567":"Return the names of all the poker players.","568":"For the countries founded before 1930, what is the total number of distinct official languages?","569":"How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.","570":"What are the titles of the cartoons sorted alphabetically?","571":"Show the date and id of the transcript with at least 2 course results.","572":"What are the names and birth dates of people, ordered by their names in alphabetical order?","573":"What are the distinct states and create time of all votes?","574":"Find the city with the largest population that uses English.","575":"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","576":"What is the semester which most student registered in? Show both the name and the id.","577":"What is the id, line 1, and line 2 of the address with the most students?","578":"What is the maximum number of final tables made among poker players with earnings less than 200000?","579":"Which countries have either English or Dutch as an official language?","580":"What is the id of the semester that had both Masters and Bachelors students enrolled?","581":"What is the official language used in the country the name of whose head of state is Beatrix.","582":"What is the number of distinct languages used around the world?","583":"Which semesters do not have any student enrolled? List the semester name.","584":"What is the total number of unique official languages spoken in the countries that are founded before 1930?","585":"Count the number of poker players.","586":"List the earnings of poker players in descending order.","587":"Return the names of poker players sorted by their earnings descending.","588":"What is the birth date of the poker player with the lowest earnings?","589":"What is the maximum and minimum share for the TV series?","590":"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?","591":"What is the money rank of the tallest poker player?","592":"Give the names of countries with English and French as official languages.","593":"list all cartoon titles and their directors ordered by their air date","594":"What is the name of the semester with no students enrolled?","595":"Return the money rank of the poker player with the greatest height.","596":"find the pixel aspect ratio and nation of the tv channels that do not use English.","597":"Give the mean life expectancy of countries in which English is not the official language.","598":"What is last date created of votes from the state 'CA'?","599":"What are the region and population of Angola?","600":"What is the number of distinct continents where Chinese is spoken?","601":"Give the names of poker players who have earnings above 300000.","602":"Which language is the most popular on the Asian continent?","603":"Find the production code and channel of the most recently aired cartoon .","604":"How many distinct nationalities are there?","605":"What is the total population and maximum GNP in Asia?","606":"Return the average earnings across all poker players.","607":"How many different degrees are offered?","608":"What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?","609":"What is the country with the most number of TV Channels and how many does it have?","610":"What are the names of poker players in descending order of earnings?","611":"Which continent speaks the most languages?","612":"Who is the first student to register? List the first name, middle name and last name.","613":"Who is the earliest graduate of the school? List the first name, middle name and last name.","614":"What is the continent name which Anguilla belongs to?","615":"What is the content of the series Sky Radio?","616":"find the package option of the tv channel that do not have any cartoon directed by Ben Jones.","617":"List all cartoon directed by \"Ben Jones\".","618":"What are the final tables made and best finishes for all poker players?","619":"What are the names of people who do not play poker?","620":"Which region is the city Kabul located in?","621":"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","622":"Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.","623":"What are the Package Options of the TV Channels whose series names are Sky Radio?","624":"What are the names of nations speak both English and French?","625":"What are all the course names of the courses which ever have students enrolled in?","626":"What are the earnings of poker players, ordered descending by value?","627":"What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?","628":"What are the countries that have cartoons on TV that were written by Todd Casey?","629":"List the language used least number of TV Channel. List language and number of TV Channel.","630":"What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?","631":"What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?","632":"What is the date and id of the transcript with at least 2 courses listed?","633":"What is the name of country that has the shortest life expectancy in Asia?","634":"What are all of the episodes ordered by ratings?","635":"List each language and the number of TV Channels using it.","636":"Find the semester when both Master students and Bachelor students got enrolled in.","637":"What is the name of the course with the most students enrolled?","638":"Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?","639":"What is the total surface area of the countries in the Caribbean region?","640":"Show names of people whose nationality is not \"Russia\".","641":"What is the last transcript release date?","642":"What is the program id and the summary of the degree that has the most students enrolled?","643":"How many TV Channel using language English?","644":"What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?","645":"What are the names of all cartoons directed by Ben Jones?","646":"How many degrees does the engineering department have?","647":"What is the degree summary name that has the most number of students enrolled?","648":"What is the name and id of the department with the most number of degrees ?","649":"How many countries speak both English and Dutch?","650":"Which country has the most of TV Channels? List the country and number of TV Channels it has.","651":"How many different series and contents are listed in the TV Channel table?","652":"How many people live in Asia, and what is the largest GNP among them?","653":"What is the most common nationality of people?","654":"When was the last transcript released?","655":"What are the names of all the countries that became independent after 1950?","656":"Which address holds the most number of students currently? List the address id and all lines.","657":"How many cartoons did each director create?","658":"Find the program which most number of students are enrolled in. List both the id and the summary.","659":"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","660":"How many states are there?","661":"What is the weekly rank for the episode \"A Love of a Lifetime\"?","662":"List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".","663":"What is the average transcript date?","664":"What is the average earnings of poker players?","665":"Which continent is Anguilla in?","666":"Count the number of different nationalities.","667":"What is the total number of people living in the nations that do not use English?","668":"When did the episode \"A Love of a Lifetime\" air?","669":"What is the description of the department whose name has the substring the computer?","670":"What language is predominantly spoken in Aruba?","671":"How many degrees does the engineering department offer?","672":"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","673":"Give average earnings of poker players who are taller than 200.","674":"What are the names of the contestants whose names are not 'Jessie Alloway'","675":"List the number of different series names and contents in the TV Channel table.","676":"Which language is the most popular in Aruba?","677":"List the Episode of all TV series sorted by rating.","678":"What is name of the country that speaks the largest number of languages?","679":"What is the total population of Gelderland district?","680":"What are the countries that have greater surface area than any country in Europe?","681":"Find the number of cartoons directed by each of the listed directors.","682":"List the names of poker players ordered by the final tables made in ascending order.","683":"Which countries have greater area than that of any country in Europe?","684":"Return the money rank of the player with the greatest earnings.","685":"What is the official language spoken in the country whose head of state is Beatrix?","686":"What are the countries that are not playing cartoons written by Todd Casey?","687":"What are the names and ids of every course with less than 2 sections?","688":"Give the name of the nation that uses the greatest amount of languages.","689":"What is the total surface area of the continents Asia and Europe?","690":"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?","691":"What is the name of the series that has the episode \"A Love of a Lifetime\"?","692":"What are the countries where either English or Dutch is the official language ?","693":"Find the package choice and series name of the TV channel that has high definition TV.","694":"What is the episode for the TV series named \"Sky Radio\"?","695":"which countries' tv channels are playing some cartoon written by Todd Casey?","696":"List the title of all cartoons in alphabetical order.","697":"Return the names of the contestants whose names contain the substring 'Al' .","698":"Whose permanent address is different from his or her current address? List his or her first name.","699":"Return the nationalities for which there are two or more people.","700":"What is the total number of languages used in Aruba?","701":"What is the average life expectancy in African countries that are republics?","702":"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?","703":"How many people are there of each nationality?","704":"How many people live in Gelderland district?","705":"What is the area code in which the most voters voted?","706":"How much surface area do the countires in the Carribean cover together?","707":"What are the ids of all tv channels that have more than 2 TV channels?","708":"Give the names of nations that speak both English and French.","709":"What is the first, middle, and last name of the earliest school graduate?","710":"List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.","711":"How many type of governments are in Africa?","712":"On average, when were the transcripts printed?","713":"How many departments offer any degree?","714":"Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .","715":"How many countries have governments that are republics?","716":"What are the names and descriptions of all the sections?","717":"What is the air date of TV series with Episode \"A Love of a Lifetime\"?","718":"What are the names of poker players?","719":"Which continent has the most diverse languages?","720":"What is the date and id of the transcript with the least number of results?","721":"Return the birth date of the poker player with the lowest earnings.","722":"What are the languages used by the least number of TV Channels and how many channels use it?","723":"What is the language that is used by the largest number of Asian nations?","724":"find the id of tv channels that do not play any cartoon directed by Ben Jones.","725":"How many poker players are there?","726":"List top 3 highest Rating  TV series. List the TV series's Episode and Rating.","727":"What are the names and descriptions for all the sections?","728":"Show the date of the transcript which shows the least number of results, also list the id.","729":"What are the maximum and minimum values of area codes?","730":"What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?","731":"Return the maximum final tables made across all poker players who have earnings below 200000.","732":"What languages are only used by a single country with a republic government?","733":"Find the name, population and expected life length of asian country with the largest area?","734":"What are the contestant numbers and names of the contestants who had at least two votes?","735":"What is the pixel aspect ratio and country of origin for all TV channels that do not use English?","736":"How many official languages does Afghanistan have?","737":"Give me Brazil\u2019s population and life expectancies.","738":"How many different degree names are offered?","739":"How many different forms of governments are there in Africa?","740":"What is average life expectancy in the countries where English is not the official language?","741":"How many people live in countries that do not speak English?","742":"What is the average earnings of poker players with height higher than 200?","743":"For each language, list the number of TV Channels that use it.","744":"What is the department description for the one whose name has the word computer?","745":"Give the name of the country in Asia with the lowest life expectancy.","746":"What are the names of all courses that have some students enrolled?","747":"What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?","748":"What region does Angola belong to and what is its population?","749":"How many TV Channels use the English language?","750":"List all the student details in reversed lexicographical order.","751":"How many countries have a republic as their form of government?","752":"Find the kind of program which most number of students are enrolled in?","753":"How many different departments offer degrees?","754":"How long is the people\u2019s average life expectancy in Central Africa?","755":"How many transcripts are listed?","756":"List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".","757":"What are the names and id of courses having at most 2 sections?","758":"What are the names of nations where both English and French are official languages?","759":"List the vote ids, phone numbers and states of all votes.","760":"For each semester, what is the name and id of the one with the most students registered?","761":"What is the average expected life expectancy for countries in the region of Central Africa?","762":"What are the names of poker players whose earnings is higher than 300000?","763":"What are the different addresses that have students living there?","764":"List the names and birth dates of people in ascending alphabetical order of name.","765":"What are the population and life expectancies in Brazil?","766":"Give the nationality that is most common across all people.","767":"What are the name, population, and life expectancy of the largest Asian country by land?","768":"What is the Package Option of TV Channel with serial name \"Sky Radio\"?","769":"What is the content of TV Channel with serial name \"Sky Radio\"?","770":"What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.","771":"What is the mobile phone number of the student named Timmothy Ward ?","772":"Show the number of high schoolers for each grade.","773":"What are the names of conductors who have conducted at more than one orchestra?","774":"What are all the possible breed type and size type combinations?","775":"Return the record companies of orchestras, sorted descending by the years in which they were founded.","776":"What are the names of conductors as well as the corresonding orchestras that they have conducted?","777":"For each singer name, what is the total sales for their songs?","778":"What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?","779":"Find the number of professionals who have not treated any dogs.","780":"How much does each charge type costs? List both charge type and amount.","781":"What is the count of singers?","782":"What is the total number of countries where Spanish is spoken by the largest percentage of people?","783":"What are the names of conductors whose nationalities are not \"USA\"?","784":"What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?","785":"What are the names and areas of countries with the top 5 largest area?","786":"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.","787":"What is the sname of every sing that does not have any song?","788":"Show distinct names of singers that have songs with sales more than 300000.","789":"Return the codes of countries that do not speak English and do not have Republics for governments.","790":"Which Asian countries have a population that is larger than any country in Africa?","791":"How many dogs have an age below the average?","792":"Return the names of conductors that do not have the nationality \"USA\".","793":"How many high schoolers are there?","794":"What are the names of conductors, sorted descending by the number of years they have worked?","795":"Which professional did not operate any treatment on dogs? List the professional's id, role and email.","796":"List each charge type and its amount.","797":"Which language is spoken by the largest number of countries?","798":"Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.","799":"List the arrival date and the departure date for all the dogs.","800":"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","801":"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","802":"Show the names of all high schoolers in grade 10.","803":"Which grades have 4 or more high schoolers?","804":"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","805":"What are the orchestras that do not have any performances?","806":"List the record company shared by the most number of orchestras.","807":"What are the names of properties that are either houses or apartments with more than 1 room?","808":"What are the arriving date and the departing date of all the dogs?","809":"What is the name of the singer with the largest net worth?","810":"Show me all grades that have at least 4 students.","811":"Return the average attendance across all shows.","812":"Return the number of likes that the high schooler named Kyle has.","813":"Return the names of cities that have a population between 160000 and 900000 .","814":"What is the record company used by the greatest number of orchestras?","815":"What are the names of conductors, ordered by age?","816":"Please show the most common citizenship of singers.","817":"Show the names of conductors that have conducted more than one orchestras.","818":"Return the names of the 3 most populated countries.","819":"How many friends does the high school student Kyle have?","820":"List the name of the conductor with the most years of work.","821":"Give me the description of the treatment type whose total cost is the lowest.","822":"What is the name of the conductor who has conducted the most orchestras?","823":"For each citizenship, what is the maximum net worth?","824":"List the last name of the owner owning the youngest dog.","825":"Give the name, year of independence, and surface area of the country that has the lowest population.","826":"What are the names of all high schoolers in grade 10?","827":"What are each professional's first name and description of the treatment they have performed?","828":"List names of conductors in descending order of years of work.","829":"Show names of all high school students who do not have any friends.","830":"What is the feature type name of feature AirCon?","831":"Return the grade that has the greatest number of high schoolers.","832":"Find the arriving date and the departing date of the dogs that received a treatment.","833":"What is the average attendance of shows?","834":"Show the ID of the high schooler named Kyle.","835":"Find the average grade of all students who have some friends.","836":"How many dogs went through any treatments?","837":"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","838":"How many different nationalities do conductors have?","839":"Show titles of songs and names of singers.","840":"What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?","841":"Show the names of high schoolers who have at least 3 friends.","842":"What are the names of students who have no friends?","843":"Give me the id, role and email of the professionals who did not perform any treatment on dogs.","844":"What is the name of the high schooler who has the greatest number of friends?","845":"What is the name of the high schooler who has the greatest number of likes?","846":"What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?","847":"What are the names of the countries that are in the continent of Europe and have a population of 80000?","848":"Count the number of orchestras that have CD or DVD as their record format.","849":"Give the name of the student with the most likes.","850":"Find the first names of owners living in Virginia and the names of dogs they own.","851":"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.","852":"Show name of all students who have some friends and also are liked by someone else.","853":"Return the names and surface areas of the 5 largest countries.","854":"What is the grade of each high schooler?","855":"Return the names of friends of the high school student Kyle.","856":"What are the codes of the countries that do not speak English and whose government forms are not Republic?","857":"Find the government form name and total population for each government form whose average life expectancy is longer than 72.","858":"Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.","859":"What are the record companies of orchestras in descending order of years in which they were founded?","860":"Show the name of the conductor that has conducted the most number of orchestras.","861":"Show the names and grades of each high schooler.","862":"What is the name of the singer who is worth the most?","863":"What are names of countries with the top 3 largest population?","864":"What are the ids of students who both have friends and are liked?","865":"Return the codes of countries for which Spanish is the predominantly spoken language.","866":"Show the citizenship shared by singers with birth year before 1945 and after 1955.","867":"What are the email, cell phone and home phone of each professional?","868":"What is the name of the breed with the most dogs?","869":"Which owner owns the most dogs? List the owner id, first name and last name.","870":"How many likes correspond to each student id?","871":"Tell me the age of the oldest dog.","872":"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?","873":"Show the years in which orchestras that have given more than one performance are founded.","874":"What are the names of students who have 2 or more likes?","875":"Give the language that is spoken in the most countries.","876":"Which cities are in European countries where English is not the official language?","877":"Find the states where both owners and professionals live.","878":"How many orchestras does each record company manage?","879":"What are the country codes of countries where people use languages other than English?","880":"What are the cost and treatment type description of each treatment?","881":"Return the country codes for countries that do not speak English.","882":"List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.","883":"Show the names of high schoolers who have likes, and numbers of likes for each.","884":"How many conductors are there?","885":"Return the name of the high school student with the most friends.","886":"How many high schoolers are there in grade 9 or 10?","887":"What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?","888":"Show all the grades of the high schoolers.","889":"What is the language spoken by the largest percentage of people in each country?","890":"What are the names of cities in Europe for which English is not the official language?","891":"List the first name of all the professionals along with the description of the treatment they have done.","892":"Find the distinct breed type and size type combinations for dogs.","893":"Show the record companies shared by orchestras founded before 2003 and after 2003.","894":"Count the number of friends Kyle has.","895":"List the names of the dogs of the rarest breed and the treatment dates of them.","896":"Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.","897":"What are the names of the high schoolers and how many friends does each have?","898":"Show the names of all of the high schooler Kyle's friends.","899":"Find the number of orchestras whose record format is \"CD\" or \"DVD\".","900":"Show different citizenships and the maximum net worth of singers of each citizenship.","901":"Count the number of dogs that went through a treatment.","902":"Show the names of high school students and their corresponding number of friends.","903":"What are the names of high schoolers who have 3 or more friends?","904":"What is Kyle's id?","905":"What grade is Kyle in?","906":"Count the number of likes for each student id.","907":"What are the names of the nations with the 3 lowest populations?","908":"Show the name of singers whose birth year is either 1948 or 1949?","909":"Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?","910":"Which dogs are of the rarest breed? Show their names and treatment dates.","911":"Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.","912":"List the name of singers whose citizenship is not \"France\".","913":"What are the names of the singers whose birth years are either 1948 or 1949?","914":"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.","915":"Count the number of countries in Asia.","916":"how many countries are in Asia?","917":"What are the names of high schoolers who both have friends and are liked?","918":"What is the description of the treatment type that costs the least money in total?","919":"List the names of orchestras that have no performance.","920":"For each citizenship, how many singers are from that country?","921":"Find the first names that are used for professionals or owners but are not used as dog names.","922":"What are the id, role, and first name of the professionals who have performed two or more treatments?","923":"How many owners temporarily do not have any dogs?","924":"Which breed do the most dogs have? Give me the breed name.","925":"Show the names of students who have at least 2 likes.","926":"Show ids of all students who do not have any friends.","927":"Find the average age of the dogs who went through treatments.","928":"List each owner's first name, last name, and the size of his for her dog.","929":"What are the date and the operating professional's first name of each treatment?","930":"How many professionals have performed any treatment to dogs?","931":"Count the number of dogs of an age below the average.","932":"What are the first name and last name of the professionals who have done treatment with cost below average?","933":"What are the names of the singers who are not French citizens?","934":"List the name of singers that do not have any song.","935":"Tell me the number of dogs that have not received any treatment .","936":"Show the ids of high schoolers who have friends and are also liked by someone else.","937":"Show the names of conductors and the orchestras they have conducted.","938":"How much does the most recent treatment cost?","939":"How many high schoolers are in each grade?","940":"Which African countries have a smaller population than that of any country in Asia?","941":"What are the name, independence year, and surface area of the country with the smallest population?","942":"Who owns the youngest dog? Give me his or her last name.","943":"What is the age of the oldest dog?","944":"How many professionals did not operate any treatment on dogs?","945":"Find the id and cell phone of the professionals who operate two or more types of treatments.","946":"Find the number of cities in each district whose population is greater than the average population of cities?","947":"Find the minimum grade of students who have no friends.","948":"List the cost of each treatment and the corresponding treatment type description.","949":"Show the student IDs and numbers of friends corresponding to each.","950":"What are the country codes for countries that do not speak English?","951":"Please show the record formats of orchestras in ascending order of count.","952":"Which professionals have done at least two types of treatments? List the professional id and cell phone.","953":"Which professionals have done at least two treatments? List the professional's id, role, and first name.","954":"Return the different names of cities that are in Asia and for which Chinese is the official language.","955":"How many cities in each district have a population that is above the average population across all cities?","956":"What are the names of singers ordered by ascending net worth?","957":"What are the names of conductors who have conducted orchestras founded after the year 2008?","958":"Show the names of singers and the total sales of their songs.","959":"Count the number of high schoolers.","960":"What are the names and grades for each high schooler?","961":"Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.","962":"What are the major record formats of orchestras, sorted by their frequency?","963":"List pairs of the owner's first name and the dogs's name.","964":"Find the number of professionals who have ever treated dogs.","965":"What is the lowest grade of students who do not have any friends?","966":"What are the African countries that have a  population less than any country in Asia?","967":"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","968":"Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.","969":"List the email, cell phone and home phone of all the professionals.","970":"Show the names of singers that have more than one song.","971":"what are the different names of the singers that have sales more than 300000?","972":"How many singers are there?","973":"Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.","974":"Please show the name of the conductor that has conducted orchestras founded after 2008.","975":"What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?","976":"What is the average grade of students who have friends?","977":"Which grade has the most high schoolers?","978":"Which states have both owners and professionals living there?","979":"Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .","980":"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?","981":"Show different citizenship of singers and the number of singers of each citizenship.","982":"Show me the cost of the most recently performed treatment.","983":"What are the birth years and citizenships of the singers?","984":"Show the names of students who have a grade higher than 5 and have at least 2 friends.","985":"List the name of singers in ascending order of net worth.","986":"How many dogs have not gone through any treatment?","987":"Give the names of countries that are in Europe and have a population equal to 80000.","988":"What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?","989":"Count the number of countries for which Spanish is the predominantly spoken language.","990":"Return the owner id, first name and last name of the owner who has the most dogs.","991":"Please show the different record companies and the corresponding number of orchestras.","992":"What are the song titles and singer names?","993":"Compute the average age of all the dogs.","994":"What are the names of high schoolers who have likes, and how many likes does each have?","995":"What are the names of the singers that have more than one songs?","996":"What is the average age of the dogs who have gone through any treatments?","997":"Count the number of conductors.","998":"Which first names are used for professionals or owners but are not used as dog names?","999":"What are the population, name and leader of the country with the largest area?","1000":"How many likes does Kyle have?","1001":"Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .","1002":"Give the country codes for countries in which people speak langauges that are not English.","1003":"What are the arriving date and the departing date of the dogs who have gone through a treatment?","1004":"What are years of founding for orchestras that have had more than a single performance?","1005":"Count the number of high schoolers in grades 9 or 10.","1006":"What is the name of the conductor who has worked the greatest number of years?","1007":"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","1008":"What is the average age of all the dogs?","1009":"How many friends does each student have?","1010":"What are the birth year and citizenship of singers?","1011":"List the names of conductors in ascending order of age.","1012":"Show the property type descriptions of properties belonging to that code.","1013":"How much does the most expensive charge type costs?","1014":"Give the name, population, and head of state for the country that has the largest area.","1015":"What are the Asian countries which have a population larger than that of any country in Africa?","1016":"What is the most common singer citizenship ?","1017":"Count the number of different nationalities of conductors.","1018":"What are each owner's first name and their dogs's name?","1019":"What are the cities whose population is between 160000 and 900000?","1020":"How many available features are there in total?","1021":"List the date of each treatment, together with the first name of the professional who operated it.","1022":"What are the codes of countries where Spanish is spoken by the largest percentage of people?","1023":"What are the maximum and minimum share of performances whose type is not \"Live final\".","1024":"Find the number of owners who do not own any dogs at this moment.","1025":"Which unique cities are in Asian countries where Chinese is the official language ?","1026":"Return the names of the 3 countries with the fewest people.","1027":"What is the charge amount of the most expensive charge type?","1028":"Return the grade for the high schooler named Kyle.","1029":"What are the ids of high school students who do not have friends?","1030":"Return the maximum and minimum shares for performances that do not have the type \"Live final\".","1031":"What are each owner's first name, last name, and the size of their dog?","1032":"Find all airlines that have flights from airport 'CVO' but not from 'APG'.","1033":"How many different addresses do the students currently live?"},"schema_links":{"0":"[airlines.Airline, flights.Airline]","1":"[Student.Fname, Student.Age, HasPet.StuID = Student.StuID]","2":"[singer.SongName, singer.Age]","3":"[airlines.Airline, airlines.Abbreviation, 'UAL']","4":"[countries.CountryName, carmakers.Country = countries.CountryId]","5":"[flights.DestAirport, airports.AirportCode, airports.City, 'Aberdeen', 'Abilene']","6":"[carsdata.Horsepower, carsdata.Id, 150]","7":"[carmakers.Maker, modellist.Model, modellist.Maker = carmakers.Id]","8":"[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]","9":"[modellist.Model, modellist.Maker, carnames.Make, carnames.Model = modellist.Model]","10":"[airlines.Abbreviation, airlines.Country, flights.Airline = airlines.Airline]","11":"[carmakers.Id, carmakers.FullName, modellist.Maker = carmakers.Id]","12":"[carmakers.Maker,carsdata.Year,carsdata.Id = carnames.MakeId,carnames.Model = modellist.Model,modellist.Maker = carmakers.Id,1970]","13":"[modellist.Model, carmakers.FullName, carmakers.Id = modellist.Maker, carsdata.Weight, 3500, 'General Motors']","14":"[carmakers.Id, carmakers.FullName, modellist.Maker = carmakers.Id]","15":"[flights.FlightNo, flights.SourceAirport, airports.AirportCode, airports.City, Aberdeen]","16":"[airports.City, airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'Aberdeen', 'Ashley']","17":"[airlines.Airline, flights.Airline, 200]","18":"[Student.Fname, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType, 'dog', Pets.PetType, 'cat']","19":"[stadium.Name, stadium.Capacity, stadium.Average]","20":"[carmakers.Maker,carsdata.Year,carsdata.Id = carnames.MakeId,carnames.Model = modellist.Model,modellist.Maker = carmakers.Id]","21":"[singer.Age,singer.Country,'French']","22":"[carsdata.Weight,carsdata.Year]","23":"[singer.Name, singer.Country, singer.SongName, 'Hey']","24":"[singer.Country,singer.Age,20]","25":"[carsdata.Horsepower, carsdata.Id = carnames.MakeId, carnames.Model = modellist.Model, modellist.Maker = carmakers.Id, carmakers.Country = countries.CountryId, countries.Continent = continents.ContId, carsdata.Cylinders, 4]","26":"[carsdata.Year,carsdata.Id]","27":"[Pets.weight, Pets.PetType, Pets.petage, HasPet.PetID = Pets.PetID]","28":"[Student.LName, Pets.PetType, Pets.petage, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, 'cat', 3]","29":"[Student.StuID, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType, 'cat']","30":"[Student.Age, HasPet.StuID = Student.StuID, HasPet.PetID]","31":"[carsdata.Horsepower,carsdata.Year,1980]","32":"[flights.Airline, flights.DestAirport, airports.City, airports.AirportCode, 'Aberdeen', 'United Airlines']","33":"[airlines.Airline, airlines.Abbreviation, airlines.Country = 'USA']","34":"[countries.CountryId, countries.CountryName]","35":"[stadium.Capacity, concert.concertID, concert.StadiumID = stadium.StadiumID]","36":"[stadium.Location, stadium.Name, concert.StadiumID = stadium.StadiumID, concert.Year, 2014, 2015]","37":"[stadium.Capacity, stadium.StadiumID]","38":"[Pets.PetType, Pets.petage, Pets.weight, HasPet.PetID = Pets.PetID]","39":"[carsdata.Accelerate, carnames.Model, carsdata.Id = carnames.MakeId, modellist.Maker = carmakers.Id, carnames.Model = modellist.Model]","40":"[flights.DestAirport, airports.City, flights.DestAirport = airports.AirportCode, 'Aberdeen', 'Abilene']","41":"[Student.Fname, Student.Age, HasPet.StuID = Student.StuID]","42":"[flights.Airline, flights.FlightNo, flights.Airline = 'Jetblue Airways']","43":"[concert.Year, concert.concertID, singerinconcert.concertID = concert.concertID]","44":"[flights.DestAirport, airports.AirportCode, flights.DestAirport = 'ATO']","45":"[singer.Country, singer.SingerID]","46":"[continents.ContId, continents.Continent, countries.Continent = continents.ContId]","47":"[modellist.Model,carsdata.Weight,carsdata.Id = carnames.MakeId,carnames.Model = modellist.Model,modellist.Maker = carmakers.Id,carsdata.Weight,3500,'Ford Motor Company']","48":"[Pets.PetType, HasPet.StuID, Student.Sex, HasPet.StuID = Student.StuID, 'F', 'dog']","49":"[flights.FlightNo, flights.SourceAirport, airports.AirportCode, APG]","50":"[carmakers.FullName, modellist.ModelId, modellist.Maker = carmakers.Id, 'American Motor Company']","51":"[modellist.Maker, carmakers.Country, countries.CountryName, modellist.Maker = carmakers.Id, carmakers.Country = countries.CountryId, 'United States']","52":"[continents.Continent,countries.CountryId,carmakers.Country = countries.CountryId]","53":"[Student.StuID, HasPet.StuID, HasPet.PetID, Pets.PetID]","54":"[airports.AirportName, airports.City, Aberdeen]","55":"[carsdata.Horsepower,carsdata.Accelerate]","56":"[concert.Year, concert.concertID]","57":"[flights.FlightNo, flights.Airline, 'United Airlines']","58":"[airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country]","59":"[carsdata.MPG,carsdata.Cylinders,carsdata.Year,8,1980]","60":"[Pets.weight, Pets.PetType, HasPet.PetID = Pets.PetID, HasPet.StuID = Student.StuID, Student.StuID]","61":"[singer.Name, singerinconcert.concertID, singer.SingerID = singerinconcert.SingerID]","62":"[countries.CountryId, countries.CountryName, carmakers.Country = countries.CountryId]","63":"[carsdata.Year,carsdata.Id = carnames.MakeId]","64":"[modellist.Model,carsdata.Horsepower,carsdata.Cylinders,modellist.Maker = carnames.Model,carsdata.Id = carnames.MakeId,4]","65":"[flights.Airline, flights.SourceAirport, flights.Airline = 'United Airlines', flights.SourceAirport = 'AHD']","66":"[singer.SingerID, singer.Name]","67":"[flights.Airline, flights.FlightNo, 'JetBlue Airways']","68":"[continents.ContId, continents.Continent, countries.Continent = continents.ContId]","69":"[singer.Name, singerinconcert.concertID, concert.concertID]","70":"[carsdata.Year,carsdata.Weight,4000,3000]","71":"[flights.DestAirport, airports.City, airports.AirportCode, Aberdeen]","72":"[singer.Name, singer.Songreleaseyear, singer.Age]","73":"[flights.Airline, flights.SourceAirport, airports.AirportCode, 'United Airlines', 'AHD']","74":"[Pets.weight, 10]","75":"[stadium.Name, concert.Year, 2014, concert.StadiumID = stadium.StadiumID]","76":"[countries.CountryId,countries.CountryName]","77":"[flights.DestAirport, airports.AirportCode, 'ATO']","78":"[carsdata.Id,carsdata.Cylinders,4]","79":"[Student.Fname, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType]","80":"[Student.Age, HasPet.StuID = Student.StuID]","81":"[carmakers.Id, carmakers.Country, countries.CountryName, countries.Continent, 'France']","82":"[airlines.uid, airlines.Airline, flights.SourceAirport, flights.DestAirport, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode, 'APG', 'CVO']","83":"[carmakers.Id, carmakers.Maker, modellist.Maker = carmakers.Id, carnames.Model = modellist.Model, carsdata.Id = carnames.MakeId]","84":"[singer.Country,singer.Age,40,30]","85":"[continents.Continent, carmakers.Id, countries.CountryId = carmakers.Country, countries.Continent = continents.ContId]","86":"[flights.FlightNo, flights.Airline, United Airlines]","87":"[Pets.PetType,Pets.petage]","88":"[Pets.PetType, Pets.weight, HasPet.PetID = Pets.PetID]","89":"[carnames.Model,carsdata.Cylinders,carsdata.Accelerate,carsdata.Id = carnames.MakeId,'volvo']","90":"[Pets.PetType,Pets.weight,Pets.petage]","91":"[carmakers.Id, carmakers.Maker, modellist.Maker = carmakers.Id]","92":"[concert.concertName, concert.Theme, singerinconcert.concertID = concert.concertID]","93":"[airlines.uid, airlines.Airline]","94":"[Pets.PetType]","95":"[countries.CountryName, carmakers.Country = countries.CountryId]","96":"[singer.Name, singer.Country, singer.Age]","97":"[carsdata.Weight, carsdata.Cylinders, carsdata.Year, 8, 1974]","98":"[carsdata.Horsepower, carnames.Make, carnames.Model = modellist.Model, modellist.Maker = carmakers.Id, carsdata.Id = carnames.MakeId, modellist.Cylinders, 3]","99":"[airports.City, flights.SourceAirport, airports.AirportCode = flights.SourceAirport]","100":"[countries.CountryName, countries.Continent = continents.ContId, carmakers.Country = countries.CountryId]","101":"[carsdata.Weight, carsdata.Cylinders, carsdata.Year, 8, 1974]","102":"[carsdata.Year, carsdata.Id = carnames.MakeId, carnames.Model = modellist.Model]","103":"[singer.SongName, singer.Age]","104":"[Student.Fname, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType, 'cat', 'dog']","105":"[Pets.PetType]","106":"[Pets.PetType, Pets.petage, HasPet.PetID = Pets.PetID]","107":"[modellist.Model,carsdata.Weight,modellist.Maker = carmakers.Id,carsdata.Id = carnames.MakeId,carnames.Model = modellist.Model,3500,carmakers.Maker != 'Ford Motor Company']","108":"[airports.City, flights.DestAirport = airports.AirportCode]","109":"[flights.FlightNo, flights.SourceAirport, airports.City, Aberdeen]","110":"[carsdata.Accelerate, carsdata.Horsepower]","111":"[flights.SourceAirport, flights.Airline, flights.FlightNo, 'APG']","112":"[carsdata.Weight, carsdata.Year]","113":"[flights.Airline, flights.Airline]","114":"[flights.Airline, flights.SourceAirport, CVO, APG]","115":"[flights.FlightNo, flights.DestAirport, airports.AirportCode, 'APG']","116":"[airports.AirportName, airports.AirportCode, 'AKO']","117":"[carsdata.Horsepower, carnames.Model, carsdata.Id = carnames.MakeId]","118":"[carsdata.Id,carsdata.Cylinders,6]","119":"[flights.Airline, flights.DestAirport, airports.AirportCode, 'United Airlines', 'ASY']","120":"[flights.Airline, flights.SourceAirport, airports.AirportCode, 'AHD']","121":"[stadium.Name, concert.concertID, concert.StadiumID = stadium.StadiumID]","122":"[Pets.PetID, Pets.weight, Pets.petage, Pets.petage,1]","123":"[airports.City, airports.Country, airports.AirportCode]","124":"[stadium.Location, stadium.Name, stadium.Capacity, 5000, 10000]","125":"[countries.CountryName, countries.Continent = continents.ContId, carmakers.Country = countries.CountryId]","126":"[flights.Airline, flights.DestAirport, airports.AirportCode, AHD]","127":"[concert.concertName, concert.Theme, singerinconcert.concertID = concert.concertID, singerinconcert.SingerID = singer.SingerID]","128":"[carsdata.Horsepower, carnames.Model, carsdata.Id = carnames.MakeId]","129":"[singer.SingerID, singer.Name]","130":"[Pets.PetType, Pets.weight]","131":"[Student.Fname, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType]","132":"[airports.AirportName, airports.AirportCode, 'AKO']","133":"[flights.Airline, flights.Airline]","134":"[airlines.uid, airlines.Airline, airlines.Abbreviation, airlines.Country]","135":"[carsdata.Accelerate, carnames.Model, modellist.Model, carmakers.Maker, carnames.MakeId = carsdata.Id]","136":"[carnames.Make, carsdata.Year, carsdata.Id = carnames.MakeId]","137":"[airlines.Abbreviation, airlines.Airline, 'JetBlue Airways']","138":"[modellist.Model, carnames.Model, carsdata.Id, carnames.Model = modellist.Model, carsdata.Id = carnames.MakeId]","139":"[Student.Fname, Student.Sex, HasPet.StuID = Student.StuID]","140":"[stadium.Name, concert.Year, concert.StadiumID = stadium.StadiumID, 2014]","141":"[airports.AirportCode, airports.City, airports.Country]","142":"[flights.Airline, flights.SourceAirport, 'APG', 'CVO']","143":"[airlines.Airline, airlines.Abbreviation, airlines.Country = 'USA']","144":"[concert.Year, concert.concertID, 2014, 2015]","145":"[carsdata.Edispl, carnames.Model, modellist.Maker = carnames.Model, modellist.Model = 'volvo']","146":"[carmakers.Country,countries.CountryName,countries.Continent = continents.ContId,carmakers.Id]","147":"[Student.StuID, HasPet.StuID, HasPet.PetID]","148":"[airlines.Airline, flights.Airline, flights.DestAirport, airports.AirportCode, 'AHD']","149":"[Student.LName, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType, Pets.petage, 'cat', 3]","150":"[countries.CountryId, carmakers.Country, carmakers.Country = countries.CountryId]","151":"[carsdata.MPG, carnames.Model, carsdata.Id = carnames.MakeId]","152":"[airlines.Abbreviation, airlines.Country, flights.Airline = airlines.Airline]","153":"[countries.CountryName, carmakers.Country = countries.CountryId]","154":"[carnames.MakeId, carmakers.Maker, carsdata.Cylinders, carsdata.Horsepower, carsdata.Cylinders < 4, carsdata.Horsepower > minimumhorsepower]","155":"[Student.Fname, Student.Age, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType = 'dog', HasPet.StuID NOT IN (SELECT StuID FROM HasPet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat']","156":"[carmakers.Maker, modellist.Model, modellist.Maker = carmakers.Id]","157":"[airlines.Airline, flights.Airline]","158":"[airlines.Country, airlines.uid, 'USA']","159":"[flights.FlightNo, flights.DestAirport, airports.AirportCode, airports.City, Aberdeen]","160":"[singer.Name, singer.Country, singer.Age]","161":"[carsdata.Accelerate,carsdata.Cylinders]","162":"[stadium.Name, concert.StadiumID = stadium.StadiumID]","163":"[singer.Country,singer.Age,20]","164":"[countries.CountryId, carmakers.Country, countries.CountryId = carmakers.Country]","165":"[flights.SourceAirport, flights.DestAirport, airports.AirportCode]","166":"[airports.AirportCode, airports.City, airports.AirportName, airports.Country]","167":"[carmakers.Maker, modellist.Model, modellist.Maker = carmakers.Id, 'American Motor Company']","168":"[modellist.Model, carsdata.Year, carsdata.Id = carnames.MakeId, carsdata.Year, 1980]","169":"[modellist.Maker, modellist.Model, carmakers.FullName, modellist.Maker = carmakers.Id]","170":"[carsdata.Year,carsdata.Weight,3000,4000]","171":"[flights.FlightNo, flights.DestAirport, airports.AirportCode, 'APG']","172":"[Pets.PetType,Pets.weight]","173":"[airports.AirportCode, flights.SourceAirport, flights.DestAirport]","174":"[carsdata.Id = carnames.MakeId, carsdata.Horsepower, carsdata.Cylinders, carmakers.Maker, carnames.MakeId]","175":"[airlines.uid, flights.Airline, flights.SourceAirport, AHD]","176":"[flights.FlightNo, airports.City, flights.DestAirport = airports.AirportCode, 'Aberdeen']","177":"[airlines.Abbreviation, airlines.Airline, Jetblue Airways]","178":"[carsdata.MPG, carsdata.Cylinders, 4]","179":"[carsdata.Horsepower, carsdata.Id, 150]","180":"[stadium.Name, stadium.Capacity, concert.Year, concert.StadiumID = stadium.StadiumID]","181":"[Student.StuID, HasPet.StuID = Student.StuID, HasPet.PetID, Pets.PetID, Student.LName, 'Smith']","182":"[modellist.Maker, carmakers.Country, countries.CountryName, 'usa']","183":"[continents.ContId, continents.Continent]","184":"[countries.CountryName, carmakers.Country, carmakers.Country = countries.CountryId]","185":"[carmakers.Id, carmakers.Maker, modellist.Maker = carmakers.Id]","186":"[stadium.StadiumID, concert.StadiumID, concert.concertID]","187":"[flights.SourceAirport, airports.City, airports.AirportCode, Aberdeen]","188":"[carsdata.Weight, carsdata.Id = carnames.MakeId, carnames.Model]","189":"[airports.AirportName, airports.City, Aberdeen]","190":"[airports.City, airports.Country, airports.AirportCode]","191":"[singer.Country, singer.SingerID]","192":"[flights.SourceAirport, flights.DestAirport, airports.AirportCode]","193":"[flights.SourceAirport, airports.City, airports.AirportCode, Aberdeen]","194":"[Pets.PetType, Student.Sex, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, 'dog', 'female']","195":"[carmakers.Maker, modellist.Model, carsdata.Weight, modellist.Maker = carmakers.Id, carnames.Model = modellist.Model, carsdata.Id = carnames.MakeId, General Motors, 3500]","196":"[stadium.Name, stadium.Location, concert.Year, concert.StadiumID = stadium.StadiumID, 2014, 2015]","197":"[airports.AirportCode, airports.AirportName, airports.City, 'Anthony']","198":"[carsdata.MPG, carnames.Model, carsdata.Id = carnames.MakeId]","199":"[stadium.Capacity, stadium.StadiumID]","200":"[flights.SourceAirport, flights.Airline, flights.FlightNo, 'APG']","201":"[Student.Major, Student.Age, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType, 'cat']","202":"[carsdata.Edispl, carnames.Model, modellist.Maker, carmakers.Maker = 'Volvo']","203":"[carsdata.MPG,carsdata.Cylinders,4]","204":"[Student.Fname, Student.Sex, HasPet.StuID = Student.StuID]","205":"[countries.CountryId, countries.CountryName, carmakers.Country = countries.CountryId, carnames.Model = 'fiat']","206":"[stadium.Name, stadium.Capacity, stadium.Average]","207":"[singer.Name, singer.Country, singer.SongName]","208":"[countries.CountryId, countries.CountryName, carmakers.Country = countries.CountryId, carnames.Model = 'fiat']","209":"[Student.LName, HasPet.StuID = Student.StuID, HasPet.PetID, HasPet.PetID = Pets.PetID, 'Smith']","210":"[flights.Airline, flights.DestAirport, airports.AirportName, airports.AirportCode, 'United Airlines', 'Aberdeen']","211":"[Pets.PetID, Pets.weight, Pets.petage, 1]","212":"[singer.Name, singerinconcert.SingerID = singer.SingerID, concert.Year, concert.concertID = singerinconcert.concertID, 2014]","213":"[stadium.Name, concert.StadiumID = stadium.StadiumID]","214":"[airports.City, flights.DestAirport = airports.AirportCode]","215":"[singer.Name, concert.Year, singerinconcert.concertID = concert.concertID, singerinconcert.SingerID = singer.SingerID, 2014]","216":"[countries.CountryId,countries.CountryName,carmakers.Country = countries.CountryId]","217":"[stadium.Location, stadium.Name, stadium.Capacity, 5000, 10000]","218":"[carnames.Model, carsdata.Weight, carsdata.Id = carnames.MakeId]","219":"[concert.Year, concert.concertID]","220":"[carmakers.FullName, carmakers.Id, modellist.Maker = carmakers.Id]","221":"[carsdata.Horsepower, carsdata.Cylinders, carnames.Make, carsdata.Id = carnames.MakeId, 3]","222":"[carmakers.FullName, carmakers.Id, modellist.Maker = carmakers.Id]","223":"[airports.City, flights.SourceAirport = airports.AirportCode]","224":"[continents.ContId, continents.Continent]","225":"[Pets.PetType,Pets.weight]","226":"[carsdata.Accelerate, carsdata.Horsepower]","227":"[carsdata.MPG, carsdata.Cylinders, carsdata.Year, 8, 1980]","228":"[Student.Major, Student.Age, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType]","229":"[Student.Age, HasPet.StuID = Student.StuID]","230":"[carsdata.Horsepower,carsdata.Year,1980]","231":"[flights.FlightNo, flights.SourceAirport, airports.AirportCode, APG]","232":"[flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport]","233":"[airlines.Airline, flights.Airline, 200]","234":"[carsdata.Accelerate,carsdata.Cylinders]","235":"[carmakers.Maker,carsdata.Year,1970]","236":"[stadium.Name, stadium.Capacity, concert.StadiumID = stadium.StadiumID, concert.Year, 2014]","237":"[airports.AirportName, flights.SourceAirport, flights.DestAirport, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]","238":"[flights.Airline, flights.FlightNo, flights.SourceAirport, flights.DestAirport]","239":"[Student.Age, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID]","240":"[airlines.Airline, airlines.Abbreviation, 'UAL']","241":"[airlines.Country, airlines.Airline, JetBlue Airways]","242":"[stadium.Capacity, concert.concertID, concert.StadiumID = stadium.StadiumID]","243":"[carsdata.Id,carsdata.Cylinders,6]","244":"[airlines.Country, airlines.Airline, Jetblue Airways]","245":"[carsdata.Id,carsdata.Cylinders,4]","246":"[Pets.weight, Pets.PetID, 10]","247":"[singer.Name, singer.SongName, singer.Songreleaseyear, singer.Age, singer.SingerID = singerinconcert.SingerID, singerinconcert.concertID = concert.concertID]","248":"[Student.Fname, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType]","249":"[flights.Airline, flights.DestAirport, airports.AirportCode, 'United Airlines', 'ASY']","250":"[singer.Age,singer.Country,France]","251":"[flights.DestAirport, airports.City, airports.AirportCode, Aberdeen]","252":"[Student.StuID, HasPet.StuID = Student.StuID, HasPet.PetID = Pets.PetID, Pets.PetType]","253":"[carsdata.Horsepower,carsdata.Accelerate]","254":"[flights.SourceAirport, flights.DestAirport, airports.AirportCode, airports.AirportCode, Aberdeen, Ashley]","255":"[airports.AirportCode, airports.AirportName, airports.City, 'Anthony']","256":"[modellist.Model, carnames.MakeId = modellist.Model, carsdata.Id = carnames.MakeId, carsdata.Accelerate, carsdata.Cylinders, volvo]","257":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","258":"[Courses.courseid, Courses.coursename, Courses.coursedescription, Sections.courseid = Courses.courseid]","259":"[Documents.DocumentID, Paragraphs.DocumentID, Paragraphs.DocumentID = Documents.DocumentID]","260":"[museum.OpenYear,museum.NumofStaff,museum.Name = 'Plaza Museum']","261":"[players.firstname, players.lastname, matches.winnerid = players.playerid, matches.tourneyname, matches.tourneyname = 'Australian Open']","262":"[players.firstname, players.lastname, players.birthdate]","263":"[visitor.ID, visitor.Age, 30]","264":"[airports.AirportCode, flights.SourceAirport = airports.AirportCode, flights.DestAirport = airports.AirportCode]","265":"[visitor.Levelofmembership, visit.Totalspent, visit.visitorID = visitor.ID, 1]","266":"[players.firstname, players.countrycode, rankings.playerid = players.playerid]","267":"[Documents.DocumentID, Paragraphs.ParagraphText, Documents.TemplateID = Templates.TemplateID, Paragraphs.DocumentID = Documents.DocumentID, 'Brazil', 'Ireland']","268":"[rankings.rankingdate, rankings.tours]","269":"[teacher.Hometown, teacher.Age]","270":"[players.firstname, players.countrycode, players.birthdate]","271":"[RefTemplateTypes.TemplateTypeCode, RefTemplateTypes.TemplateTypeDescription, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode, 'Book']","272":"[employee.EmployeeID]","273":"[Templates.TemplateTypeCode]","274":"[Documents.DocumentName, Documents.TemplateID = Templates.TemplateID, Templates.TemplateTypeCode, RefTemplateTypes.TemplateTypeCode, BK]","275":"[players.firstname, players.birthdate, players.countrycode = 'USA']","276":"[players.firstname, players.lastname, players.hand, players.birthdate, players.hand = 'left']","277":"[RefTemplateTypes.TemplateTypeCode, RefTemplateTypes.TemplateTypeDescription]","278":"[Templates.TemplateID, Templates.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID]","279":"[rankings.ranking, matches.loserid = players.playerid]","280":"[teacher.Name, coursearrange.TeacherID, coursearrange.CourseID]","281":"[teacher.TeacherID, teacher.Name]","282":"[RefTemplateTypes.TemplateTypeCode]","283":"[shop.Numberproducts]","284":"[matches.year, matches.matchnum]","285":"[teacher.Name, teacher.Age, 32, 33]","286":"[Documents.DocumentID, Paragraphs.DocumentID = Documents.DocumentID]","287":"[employee.City, employee.Age, hiring.EmployeeID = employee.EmployeeID]","288":"[RefTemplateTypes.TemplateTypeDescription, RefTemplateTypes.TemplateTypeCode, 'AD']","289":"[museum.MuseumID, museum.Name, museum.NumofStaff]","290":"[Documents.DocumentID]","291":"[players.playerid = matches.loserid, players.playerid = matches.winnerid, matches.loserage, matches.winnerage]","292":"[Paragraphs.ParagraphText, Documents.DocumentName, Paragraphs.DocumentID = Documents.DocumentID, 'Customer reviews']","293":"[Documents.TemplateID, Templates.TemplateTypeCode, Documents.DocumentName, \"Data base\", Documents.TemplateID = Templates.TemplateID]","294":"[players.firstname, players.countrycode, matches.winnerid = players.playerid, matches.tourneyname]","295":"[matches.minutes, matches.winnerid, matches.loserid, players.firstname, players.lastname, matches.minutes]","296":"[Courses.coursedescription, Courses.coursename]","297":"[ship.dispositionofship, ship.lostinbattle = battle.id, 'Captured']","298":"[Templates.TemplateID]","299":"[hiring.ShopID, hiring.EmployeeID, hiring.Startfrom, hiring.Isfulltime]","300":"[Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","301":"[shop.Location]","302":"[players.playerid]","303":"[Paragraphs.ParagraphID, Paragraphs.ParagraphText, Documents.DocumentName, Documents.DocumentID, Documents.DocumentName = 'Welcome to NY']","304":"[players.countrycode, players.playerid]","305":"[shop.Name, shop.Location, shop.District, shop.Numberproducts]","306":"[Paragraphs.ParagraphText, Paragraphs.DocumentID, Documents.DocumentID]","307":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID]","308":"[shop.Name, shop.Location, shop.District, shop.Numberproducts]","309":"[teacher.Name, teacher.Age, 32, 33]","310":"[Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","311":"[Templates.VersionNumber, Templates.TemplateTypeCode]","312":"[players.firstname, players.birthdate, players.countrycode = 'USA']","313":"[players.firstname, players.lastname, matches.winnerid = players.playerid, matches.tourneydate, 2013, 2016]","314":"[Templates.TemplateID, Documents.TemplateID, Templates.TemplateID = Documents.TemplateID]","315":"[teacher.Name, course.Course, coursearrange.TeacherID = teacher.TeacherID, coursearrange.CourseID = course.CourseID]","316":"[players.hand, matches.winnerid = players.playerid, matches.tourneyname, left, WTA Championships]","317":"[teacher.Name, teacher.Hometown, 'Little Lever Urban District']","318":"[teacher.Name, coursearrange.TeacherID = teacher.TeacherID]","319":"[Templates.TemplateID, RefTemplateTypes.TemplateTypeDescription, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode, 'Presentation']","320":"[players.firstname, players.countrycode, players.birthdate]","321":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID]","322":"[Templates.TemplateID, Templates.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID]","323":"[players.firstname, players.countrycode, players.birthdate, matches.winnerid = players.playerid, matches.winnerrankpoints]","324":"[Templates.VersionNumber, Templates.TemplateTypeCode, 5]","325":"[shop.Name, hiring.ShopID = shop.ShopID]","326":"[visitor.ID, visitor.Name, visitor.Levelofmembership, visit.Totalspent, visit.visitorID = visitor.ID]","327":"[shop.Managername, shop.District, shop.Numberproducts]","328":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID, 1, 2]","329":"[battle.id, ship.lostinbattle, ship.tonnage, 225]","330":"[teacher.Name, coursearrange.TeacherID = teacher.TeacherID]","331":"[Addresses.line1, Addresses.line2]","332":"[visitor.Name, visitor.Levelofmembership, visitor.Levelofmembership > 4]","333":"[matches.year, 2013, 2016]","334":"[matches.winnerage, matches.loserage, matches.winnerid = players.playerid, matches.loserid = players.playerid]","335":"[Documents.TemplateID, Templates.TemplateTypeCode, Documents.DocumentID = Paragraphs.DocumentID]","336":"[teacher.Hometown, teacher.TeacherID]","337":"[teacher.Name, course.Course, coursearrange.TeacherID = teacher.TeacherID, coursearrange.CourseID = course.CourseID]","338":"[matches.tourneyname, matches.tourneyname]","339":"[matches.year]","340":"[matches.tourneyname, matches.tourneyid]","341":"[players.firstname, players.countrycode, players.birthdate, rankings.rankingpoints, matches.winnerid = players.playerid, rankings.playerid = players.playerid]","342":"[battle.name,battle.bulgariancommander,battle.latincommander,'Kaloyan','Baldwin I']","343":"[Departments.departmentid, Departments.departmentname, DegreePrograms.departmentid = Departments.departmentid]","344":"[battle.id, battle.name, death.killed, death.causedbyshipid = ship.id, ship.lostinbattle = battle.id]","345":"[players.firstname, rankings.rankingpoints, rankings.playerid = players.playerid]","346":"[Documents.DocumentName, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode, Templates.TemplateID = Documents.TemplateID, RefTemplateTypes.TemplateTypeCode, BK]","347":"[Documents.TemplateID, Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","348":"[Templates.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID]","349":"[employee.Name, evaluation.EmployeeID, evaluation.Yearawarded]","350":"[evaluation.Bonus]","351":"[Documents.DocumentID, Documents.TemplateID, Documents.DocumentDescription, Documents.DocumentName, Templates.TemplateID = Documents.TemplateID, Documents.DocumentName = 'Robbin CV']","352":"[Templates.TemplateTypeDescription, Documents.TemplateID = Templates.TemplateID]","353":"[RefTemplateTypes.TemplateTypeDescription, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID]","354":"[employee.EmployeeID]","355":"[teacher.Hometown, teacher.TeacherID]","356":"[players.firstname, players.lastname, matches.winnerid = players.playerid, rankings.playerid = players.playerid, matches.tourneyname, 'Australian Open']","357":"[museum.Name, museum.NumofStaff, museum.OpenYear, 2010]","358":"[Templates.TemplateTypeCode, Templates.VersionNumber, Templates.TemplateID, CV]","359":"[battle.id, battle.name, ship.shiptype, ship.lostinbattle = battle.id, Brig]","360":"[Documents.DocumentID]","361":"[battle.name, battle.date, ship.name, ship.lostinbattle = battle.id, 'Lettice', 'HMS Atalanta']","362":"[players.firstname, rankings.playerid = players.playerid, rankings.ranking]","363":"[Documents.DocumentID, Documents.DocumentName, Documents.DocumentDescription]","364":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID, Documents.DocumentName]","365":"[employee.Name, employee.Age]","366":"[Documents.DocumentID, Documents.DocumentName, Paragraphs.DocumentID = Documents.DocumentID]","367":"[Courses.courseid]","368":"[museum.Name, visit.MuseumID = museum.MuseumID, visit.visitorID = visitor.ID]","369":"[RefTemplateTypes.TemplateTypeCode, Documents.TemplateID = Templates.TemplateID, Templates.TemplateTypeCode]","370":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeCode, Templates.TemplateID]","371":"[battle.id, death.killed, death.injured, death.causedbyshipid = ship.id, ship.lostinbattle = battle.id]","372":"[players.countrycode, players.playerid]","373":"[Documents.DocumentName, Documents.TemplateID, Documents.DocumentDescription, 'w']","374":"[Documents.DocumentID, Templates.TemplateID = Documents.TemplateID, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode, RefTemplateTypes.TemplateTypeDescription, 'PPT']","375":"[RefTemplateTypes.TemplateTypeCode, Documents.TemplateID, Templates.TemplateID = Documents.TemplateID, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode]","376":"[players.firstname, players.lastname, matches.minutes, matches.winnerid = players.playerid, matches.loserid = players.playerid]","377":"[Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","378":"[Documents.DocumentID, Paragraphs.ParagraphText, Paragraphs.DocumentID = Documents.DocumentID, 'Brazil', 'Ireland']","379":"[evaluation.Bonus]","380":"[matches.losername, matches.loserid = players.playerid]","381":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeCode, Templates.TemplateID]","382":"[death.note, death.causedbyshipid = ship.id, ship.id = death.causedbyshipid, 'East']","383":"[RefTemplateTypes.TemplateTypeCode, RefTemplateTypes.TemplateTypeDescription, 'Book']","384":"[employee.City, hiring.EmployeeID = employee.EmployeeID]","385":"[RefTemplateTypes.TemplateTypeDescription, RefTemplateTypes.TemplateTypeCode, 'AD']","386":"[Templates.TemplateID, Templates.VersionNumber, Templates.TemplateTypeCode]","387":"[players.firstname, players.lastname, rankings.rankingpoints, matches.winnerid = players.playerid]","388":"[teacher.Age, teacher.Hometown]","389":"[teacher.Hometown, teacher.TeacherID]","390":"[employee.City, hiring.EmployeeID = employee.EmployeeID]","391":"[matches.matchnum]","392":"[museum.MuseumID, museum.Name, visit.MuseumID = museum.MuseumID]","393":"[rankings.rankingdate, rankings.tours]","394":"[Templates.VersionNumber, Templates.TemplateTypeCode, 5]","395":"[teacher.Hometown, teacher.Age, coursearrange.TeacherID = teacher.TeacherID]","396":"[matches.year, matches.matchnum]","397":"[RefTemplateTypes.TemplateTypeCode, Documents.TemplateID, Templates.TemplateID = Documents.TemplateID, Templates.TemplateTypeCode = RefTemplateTypes.TemplateTypeCode]","398":"[shop.Managername, shop.District, shop.Numberproducts]","399":"[teacher.Name, course.Course, coursearrange.CourseID = course.CourseID, coursearrange.TeacherID = teacher.TeacherID]","400":"[players.countrycode]","401":"[Documents.DocumentID, Documents.DocumentName, Documents.TemplateID = Templates.TemplateID, Paragraphs.DocumentID = Documents.DocumentID]","402":"[visitor.Age, visitor.Levelofmembership, visit.visitorID = visitor.ID, visitor.Levelofmembership, 4]","403":"[Documents.DocumentName, Documents.TemplateID, Documents.DocumentDescription, 'w']","404":"[players.countrycode]","405":"[teacher.Name, course.Course, coursearrange.TeacherID = teacher.TeacherID, coursearrange.CourseID = course.CourseID]","406":"[Templates.VersionNumber, Templates.TemplateTypeCode]","407":"[hiring.ShopID, hiring.EmployeeID, hiring.Startfrom, hiring.Isfulltime]","408":"[Paragraphs.ParagraphText, Documents.DocumentID = Paragraphs.DocumentID, Documents.DocumentName]","409":"[Addresses.line1, Addresses.line2]","410":"[matches.winnerid, matches.tourneyname, players.hand, matches.winnerid = players.playerid, WTA Championships, left]","411":"[Documents.DocumentID, Documents.DocumentName, Paragraphs.DocumentID = Documents.DocumentID]","412":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID]","413":"[players.playerid]","414":"[visitor.ID, visitor.Name, visitor.Age, visit.visitorID = visitor.ID]","415":"[teacher.Hometown]","416":"[players.countrycode, players.firstname, matches.winnerid = players.playerid]","417":"[Templates.TemplateTypeCode, Templates.TemplateID, RefTemplateTypes.TemplateTypeCode]","418":"[employee.Name, evaluation.EmployeeID = employee.EmployeeID]","419":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID]","420":"[players.countrycode, players.playerid]","421":"[players.hand, players.playerid]","422":"[shop.District, shop.Numberproducts, shop.Numberproducts, shop.Numberproducts]","423":"[Templates.TemplateID, Templates.TemplateTypeCode, RefTemplateTypes.TemplateTypeCode, PP, PPT]","424":"[shop.Name, hiring.ShopID = shop.ShopID]","425":"[battle.name, battle.date, battle.result]","426":"[Paragraphs.ParagraphID]","427":"[shop.Name, hiring.ShopID = shop.ShopID, hiring.EmployeeID]","428":"[players.firstname, players.lastname, matches.winnerid = players.playerid, matches.year, 2013, 2016]","429":"[battle.result]","430":"[Documents.DocumentID, Documents.DocumentName, Documents.DocumentDescription]","431":"[players.firstname, players.lastname, rankings.ranking, matches.winnerid = players.playerid, rankings.playerid = players.playerid, matches.winnerid = rankings.playerid]","432":"[Paragraphs.ParagraphID]","433":"[Templates.TemplateID, Templates.TemplateTypeCode, RefTemplateTypes.TemplateTypeCode, PP, PPT]","434":"[Documents.TemplateID, Templates.TemplateTypeCode, 'PPT']","435":"[battle.name, battle.result, battle.bulgariancommander, 'Boril']","436":"[teacher.Name, coursearrange.TeacherID, coursearrange.CourseID]","437":"[shop.Name, shop.Numberproducts, employee.EmployeeID, hiring.ShopID = shop.ShopID]","438":"[death.injured, ship.id = death.causedbyshipid, battle.id = ship.lostinbattle]","439":"[Courses.courseid]","440":"[players.countrycode, players.playerid]","441":"[shop.Location]","442":"[Paragraphs.ParagraphText, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID, 'Korea']","443":"[players.firstname, players.lastname, players.hand, players.birthdate, left]","444":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeCode, Templates.TemplateID]","445":"[teacher.Name, coursearrange.TeacherID, coursearrange.CourseID = course.CourseID]","446":"[Templates.TemplateID, Documents.TemplateID, Documents.TemplateID = Templates.TemplateID]","447":"[players.firstname, rankings.playerid = players.playerid, rankings.ranking]","448":"[players.firstname, players.lastname, players.birthdate]","449":"[ship.id, ship.name, death.injured, death.causedbyshipid = ship.id]","450":"[Paragraphs.ParagraphID, Paragraphs.ParagraphText, Documents.DocumentName, Documents.DocumentID = Paragraphs.DocumentID]","451":"[teacher.Hometown, teacher.Name]","452":"[teacher.Name, teacher.Age]","453":"[Addresses.zippostcode, Addresses.city, 'Port Chelsea']","454":"[Documents.DocumentID, Documents.TemplateID, Documents.DocumentName, \"Robbin CV\"]","455":"[players.firstname, players.countrycode, rankings.playerid = players.playerid]","456":"[museum.OpenYear, 2013, 2008]","457":"[teacher.Name, teacher.Age]","458":"[battle.name, battle.result, battle.bulgariancommander, ship.location, ship.lostinbattle = battle.id, 'English Channel']","459":"[teacher.Name, course.Course, coursearrange.TeacherID = teacher.TeacherID, coursearrange.CourseID = course.CourseID]","460":"[rankings.ranking, matches.winnerid = players.playerid]","461":"[employee.Name, evaluation.EmployeeID, evaluation.Yearawarded]","462":"[players.hand, players.playerid]","463":"[matches.losername]","464":"[death.killed, death.injured, ship.tonnage, ship.id = death.causedbyshipid, ship.lostinbattle = battle.id, 't']","465":"[players.countrycode]","466":"[matches.loserrank, matches.loserid = players.playerid]","467":"[RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeCode, Templates.TemplateID]","468":"[players.firstname, players.lastname, rankings.rankingpoints, matches.winnerid = players.playerid]","469":"[teacher.TeacherID, teacher.Name, teacher.Age, teacher.Hometown]","470":"[shop.Name, hiring.ShopID, hiring.EmployeeID, employee.EmployeeID]","471":"[teacher.Name, coursearrange.TeacherID, coursearrange.CourseID]","472":"[employee.Name, evaluation.Bonus, evaluation.EmployeeID = employee.EmployeeID]","473":"[Templates.TemplateID, Templates.TemplateTypeCode, RefTemplateTypes.TemplateTypeCode, 'CV']","474":"[shop.Name, hiring.ShopID = shop.ShopID, hiring.EmployeeID, employee.EmployeeID]","475":"[visitor.Name, visit.MuseumID, museum.OpenYear, visit.visitorID = visitor.ID, visit.MuseumID = museum.MuseumID, 2009, 2011]","476":"[teacher.Name, teacher.Hometown, teacher.Hometown, 'Little Lever Urban District']","477":"[shop.District, shop.Numberproducts, 3000, 10000]","478":"[matches.year, 2013, 2016]","479":"[shop.Numberproducts]","480":"[Templates.TemplateID, Templates.TemplateTypeCode, RefTemplateTypes.TemplateTypeCode, Templates.TemplateTypeDescription, 'Presentation']","481":"[visitor.Name, visitor.Age, visit.NumofTicket, visit.visitorID = visitor.ID]","482":"[Templates.TemplateID, Templates.VersionNumber, Templates.TemplateTypeCode]","483":"[Documents.DocumentID, Documents.DocumentName, Paragraphs.DocumentID = Documents.DocumentID]","484":"[teacher.Age, teacher.Hometown]","485":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID]","486":"[teacher.Name, course.Course, coursearrange.TeacherID = teacher.TeacherID, coursearrange.CourseID = course.CourseID]","487":"[ship.name, ship.tonnage, ship.id = battle.id]","488":"[visit.NumofTicket, AVG(visit.NumofTicket), MAX(visit.NumofTicket]","489":"[shop.Location, shop.ShopID]","490":"[players.countrycode, players.playerid]","491":"[shop.Name,hiring.ShopID = shop.ShopID,hiring.EmployeeID,employee.EmployeeID]","492":"[Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","493":"[matches.winnername, matches.winnerid, players.birthdate, rankings.ranking, matches.winnerid = players.playerid, rankings.playerid = players.playerid]","494":"[museum.NumofStaff,museum.OpenYear,2009]","495":"[employee.City, employee.Age, 30]","496":"[rankings.ranking, matches.winnerid = players.playerid]","497":"[matches.year, matches.matchnum]","498":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentID = Paragraphs.DocumentID]","499":"[teacher.Hometown]","500":"[matches.matchnum]","501":"[shop.Location, shop.ShopID]","502":"[museum.OpenYear, visitor.ID, visit.visitorID = visitor.ID, visit.MuseumID = museum.MuseumID, 2010]","503":"[visitor.Name, visitor.Levelofmembership, visitor.Age, visit.visitorID = visitor.ID, visitor.Levelofmembership, 4]","504":"[Documents.DocumentName, Paragraphs.ParagraphID, Documents.DocumentID = Paragraphs.DocumentID]","505":"[Templates.TemplateID]","506":"[employee.Name, employee.Age]","507":"[RefTemplateTypes.TemplateTypeCode, RefTemplateTypes.TemplateTypeDescription]","508":"[Templates.TemplateID, Documents.TemplateID = Templates.TemplateID]","509":"[employee.Name, evaluation.Bonus, evaluation.EmployeeID = employee.EmployeeID]","510":"[Addresses.zippostcode, Addresses.city, Port Chelsea]","511":"[Documents.DocumentID, Paragraphs.DocumentID, Documents.DocumentName, 'Summer Show']","512":"[employee.Name, evaluation.EmployeeID = employee.EmployeeID]","513":"[shop.Name, shop.Numberproducts]","514":"[players.firstname, rankings.rankingpoints, rankings.playerid = players.playerid]","515":"[TVseries.Share]","516":"[people.Nationality, people.PeopleID, pokerplayer.PeopleID = people.PeopleID]","517":"[Transcripts.transcriptdate, Transcripts.otherdetails]","518":"[people.Nationality, people.PeopleID]","519":"[city.Population, city.Name, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, English]","520":"[country.Region, city.Name, city.CountryCode = country.Code]","521":"[country.Code, countrylanguage.CountryCode, countrylanguage.Language, 'English', 'Dutch']","522":"[country.GNP, country.Population]","523":"[Students.lastname, Addresses.stateprovincecounty, Students.permanentaddressid = Addresses.addressid, StudentEnrolment.studentid = Students.studentid]","524":"[pokerplayer.FinalTableMade, pokerplayer.BestFinish]","525":"[Cartoon.Writtenby, Cartoon.id, Cartoon.Writtenby = 'Joseph Kuhr']","526":"[Cartoon.Productioncode, Cartoon.Channel, Cartoon.Originalairdate]","527":"[Transcripts.transcriptdate, Transcripts.otherdetails]","528":"[Transcripts.transcriptid]","529":"[countrylanguage.Language, country.GovernmentForm, countrylanguage.Percentage, country.Code, countrylanguage.CountryCode = country.Code, country.GovernmentForm = 'Republic', countrylanguage.Percentage = 100]","530":"[Students.firstname, Addresses.country, Students.cellmobilenumber, Students.permanentaddressid = Addresses.addressid, 'Haiti', '09700166582']","531":"[country.Region, countrylanguage.Language, countrylanguage.Percentage, countrylanguage.CountryCode = country.Code, city.CountryCode = country.Code, 'Dutch', 'English']","532":"[Sections.sectionname]","533":"[country.Name, country.IndepYear, 1950]","534":"[Students.firstname, Students.middlename, Students.lastname, Students.datefirstregistered]","535":"[countrylanguage.Language, countrylanguage.CountryCode = country.Code, country.Name, 'Aruba']","536":"[Students.otherstudentdetails, Students.firstname, Students.middlename, Students.lastname]","537":"[Cartoon.Title, Cartoon.Directedby, Cartoon.Channel = TVChannel.id, 'Ben Jones', 'Brandon Vietti']","538":"[country.Region, countrylanguage.Language, countrylanguage.Percentage, countrylanguage.CountryCode = country.Code, city.CountryCode = country.Code, English, Dutch]","539":"[TVChannel.PackageOption, TVChannel.seriesname, TVChannel.HightdefinitionTV]","540":"[Students.cellmobilenumber, Students.firstname, Students.lastname, 'Timmothy', 'Ward']","541":"[Courses.coursename, StudentEnrolmentCourses.courseid, StudentEnrolmentCourses.courseid = Courses.courseid]","542":"[country.Continent,countrylanguage.Language,countrylanguage.Percentage,'Chinese']","543":"[TVChannel.Country, Cartoon.Writtenby, TVChannel.id = Cartoon.Channel, 'Todd Casey']","544":"[TVChannel.seriesname, Cartoon.Title, Cartoon.Channel = TVChannel.id]","545":"[TVChannel.id, TVChannel.Country]","546":"[people.Name, pokerplayer.PeopleID = people.PeopleID]","547":"[TVseries.Episode, TVseries.Rating, TVseries.AirDate]","548":"[people.Name, people.Nationality, 'Russia']","549":"[countrylanguage.Language,countrylanguage.IsOfficial,country.Code = city.CountryCode,country.Name,'Afghanistan']","550":"[Cartoon.Title, Cartoon.Directedby, Cartoon.Channel = TVChannel.id, Cartoon.Originalairdate]","551":"[VOTES.state, VOTES.voteid, 'NY', 'CA']","552":"[Sections.sectionid, Sections.courseid, Sections.sectionname, Sections.sectiondescription]","553":"[country.GNP, country.Population, USTerritoryCondition]","554":"[CONTESTANTS.contestantnumber, VOTES.contestantnumber]","555":"[Students.firstname, Students.middlename, Students.lastname, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid, DegreePrograms.degreesummaryname]","556":"[Sections.sectiondescription, Sections.sectionname, h]","557":"[CONTESTANTS.contestantnumber, CONTESTANTS.contestantname]","558":"[Cartoon.Writtenby, Cartoon.id, Cartoon.Writtenby = 'Joseph Kuhr']","559":"[Sections.sectionname]","560":"[country.SurfaceArea, country.Continent, 'Asia', 'Europe']","561":"[countrylanguage.Language]","562":"[people.Name, pokerplayer.FinalTableMade, pokerplayer.PeopleID = people.PeopleID]","563":"[Cartoon.Title, Cartoon.Channel, TVChannel.seriesname, Cartoon.Channel = TVChannel.id]","564":"[pokerplayer.MoneyRank, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID]","565":"[Students.firstname, Students.permanentaddressid, Students.currentaddressid, Students.permanentaddressid != Students.currentaddressid]","566":"[country.LifeExpectancy,country.Continent,country.GovernmentForm,city.CountryCode = country.Code,country.Continent = 'Africa',country.GovernmentForm = 'Republic']","567":"[people.Name, pokerplayer.PeopleID = people.PeopleID]","568":"[country.Code, country.Name, country.IndepYear, countrylanguage.CountryCode = country.Code, countrylanguage.IsOfficial]","569":"[Transcripts.transcriptid, StudentEnrolmentCourses.studentcourseid, TranscriptContents.studentcourseid = StudentEnrolmentCourses.studentcourseid]","570":"[Cartoon.Title]","571":"[Transcripts.transcriptid, Transcripts.transcriptdate, TranscriptContents.transcriptid = Transcripts.transcriptid]","572":"[people.Name, people.BirthDate]","573":"[VOTES.state, VOTES.created, VOTES.contestantnumber = CONTESTANTS.contestantnumber, VOTES.state = AREACODESTATE.state]","574":"[city.Population, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, English]","575":"[Students.studentid, Students.firstname, Students.middlename, Students.lastname, StudentEnrolment.studentid = Students.studentid, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid]","576":"[Semesters.semesterid, Semesters.semestername, StudentEnrolment.semesterid = Semesters.semesterid]","577":"[Addresses.addressid, Addresses.line1, Addresses.line2, Students.permanentaddressid = Addresses.addressid, Students.currentaddressid = Addresses.addressid]","578":"[pokerplayer.FinalTableMade, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID, 200000]","579":"[country.Name, countrylanguage.Language, countrylanguage.IsOfficial, countrylanguage.CountryCode = country.Code, English, Dutch, 1]","580":"[Semesters.semesterid, StudentEnrolment.semesterid = Semesters.semesterid, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid, Students.studentid = StudentEnrolment.studentid, DegreePrograms.degreesummaryname, 'Masters', 'Bachelors']","581":"[country.HeadOfState,countrylanguage.IsOfficial,country.Code = countrylanguage.CountryCode]","582":"[countrylanguage.Language]","583":"[Semesters.semestername, StudentEnrolment.semesterid = Semesters.semesterid]","584":"[countrylanguage.Language,country.IndepYear,1930]","585":"[pokerplayer.PokerPlayerID]","586":"[pokerplayer.Earnings]","587":"[people.Name, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID]","588":"[people.BirthDate, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID]","589":"[TVseries.Share, TVseries.Rating, TVseries.Channel = TVChannel.id]","590":"[Students.studentid, Students.firstname, Students.middlename, Students.lastname, StudentEnrolment.studentid]","591":"[people.Height, pokerplayer.MoneyRank, pokerplayer.PeopleID = people.PeopleID]","592":"[country.Name, countrylanguage.CountryCode = country.Code, countrylanguage.Language, countrylanguage.IsOfficial, 'English', 'French']","593":"[Cartoon.Title, Cartoon.Directedby, Cartoon.Originalairdate, Cartoon.Channel = TVChannel.id]","594":"[Semesters.semestername, StudentEnrolment.semesterid = Semesters.semesterid]","595":"[people.Height, pokerplayer.MoneyRank, pokerplayer.PeopleID = people.PeopleID]","596":"[TVChannel.PixelaspectratioPAR, TVChannel.Country, TVChannel.Language, English]","597":"[country.LifeExpectancy, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, 'English', 0]","598":"[VOTES.created,VOTES.state,CONTESTANTS.contestantnumber = VOTES.contestantnumber,AREACODESTATE.state = VOTES.state,'CA']","599":"[country.Region, country.Population, country.Code = city.CountryCode, city.CountryCode = country.Code]","600":"[country.Continent, countrylanguage.Language, countrylanguage.CountryCode = country.Code, 'Chinese']","601":"[pokerplayer.Earnings, people.Name, pokerplayer.PeopleID = people.PeopleID, 300000]","602":"[countrylanguage.Language, country.Continent, countrylanguage.Percentage, country.Code = countrylanguage.CountryCode, country.Continent = 'Asia']","603":"[Cartoon.Productioncode, Cartoon.Channel, TVChannel.id]","604":"[people.Nationality]","605":"[country.Population, country.GNP, country.Continent, 'Asia']","606":"[pokerplayer.Earnings]","607":"[DegreePrograms.degreeprogramid]","608":"[Cartoon.Title, TVChannel.seriesname, Cartoon.Channel = TVChannel.id, 'Sky Radio']","609":"[TVChannel.Country, TVChannel.id]","610":"[people.Name, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID]","611":"[country.Continent, countrylanguage.Language, country.Code = countrylanguage.CountryCode]","612":"[Students.firstname, Students.middlename, Students.lastname, Students.datefirstregistered]","613":"[Students.firstname, Students.middlename, Students.lastname, Students.datefirstregistered]","614":"[country.Continent, country.Name, city.CountryCode = country.Code, 'Anguilla']","615":"[TVChannel.Content, TVChannel.seriesname, Sky Radio]","616":"[TVChannel.PackageOption, Cartoon.Directedby, TVChannel.id = Cartoon.Channel, 'Ben Jones']","617":"[Cartoon.Title, Cartoon.Directedby, Cartoon.Channel = TVChannel.id, 'Ben Jones']","618":"[pokerplayer.FinalTableMade, pokerplayer.BestFinish]","619":"[people.Name, pokerplayer.PeopleID = people.PeopleID]","620":"[city.Name, country.Region, city.CountryCode = country.Code, 'Kabul']","621":"[Students.firstname, Students.middlename, Students.lastname, Students.studentid, StudentEnrolment.studentid = Students.studentid]","622":"[Students.lastname, Addresses.stateprovincecounty, Students.currentaddressid = Addresses.addressid, StudentEnrolment.studentid = Students.studentid]","623":"[TVChannel.PackageOption, TVChannel.seriesname, TVChannel.id = TVseries.Channel, TVseries.seriesname, 'Sky Radio']","624":"[country.Name, countrylanguage.CountryCode = country.Code, countrylanguage.Language, countrylanguage.Percentage, 'English', 'French']","625":"[Courses.coursename, StudentEnrolmentCourses.courseid = Courses.courseid]","626":"[pokerplayer.Earnings]","627":"[TVChannel.id, Cartoon.Directedby, TVChannel.id = Cartoon.Channel]","628":"[TVChannel.Country, Cartoon.Writtenby, Cartoon.Channel = TVChannel.id, 'Todd Casey']","629":"[TVChannel.Language, TVChannel.id]","630":"[Cartoon.Title, Cartoon.Directedby, 'Ben Jones', 'Brandon Vietti']","631":"[TranscriptContents.studentcourseid, StudentEnrolmentCourses.studentenrolmentid, TranscriptContents.studentcourseid = StudentEnrolmentCourses.studentcourseid]","632":"[Transcripts.transcriptid, Transcripts.transcriptdate, TranscriptContents.transcriptid = Transcripts.transcriptid]","633":"[country.Name, country.LifeExpectancy, country.Continent, Asia]","634":"[TVseries.Rating, TVseries.Episode, TVseries.AirDate, TVseries.Channel = TVChannel.id]","635":"[TVChannel.Language, TVChannel.id]","636":"[StudentEnrolment.semesterid, StudentEnrolment.studentid, DegreePrograms.degreeprogramid = StudentEnrolment.degreeprogramid]","637":"[Courses.courseid, StudentEnrolmentCourses.courseid = Courses.courseid, StudentEnrolment.studentenrolmentid = StudentEnrolmentCourses.studentenrolmentid]","638":"[TVChannel.seriesname, TVChannel.Country, Cartoon.Directedby, Cartoon.Channel = TVChannel.id]","639":"[country.SurfaceArea, country.Region, 'Caribbean']","640":"[people.Name, people.Nationality, 'Russia']","641":"[Transcripts.transcriptdate]","642":"[DegreePrograms.degreeprogramid, DegreePrograms.degreesummaryname, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid]","643":"[TVChannel.Language, TVChannel.id, 'English']","644":"[TVChannel.PackageOption, Cartoon.Channel = TVChannel.id, Cartoon.Directedby, 'Ben Jones']","645":"[Cartoon.Title, Cartoon.Directedby, Cartoon.Channel = TVChannel.id, 'Ben Jones']","646":"[DegreePrograms.degreeprogramid, DegreePrograms.departmentid, Departments.departmentid]","647":"[DegreePrograms.degreesummaryname, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid, StudentEnrolment.studentid]","648":"[Departments.departmentid, Departments.departmentname, DegreePrograms.departmentid = Departments.departmentid]","649":"[country.Code,countrylanguage.CountryCode = country.Code,countrylanguage.Language,English,countrylanguage.Language,Dutch]","650":"[TVChannel.Country, TVChannel.id]","651":"[TVChannel.seriesname, TVChannel.Content]","652":"[city.Population, country.Region, country.GNP, city.CountryCode = country.Code, 'Asia']","653":"[people.Nationality]","654":"[Transcripts.transcriptdate]","655":"[country.Name,country.IndepYear,1950]","656":"[Addresses.addressid, Addresses.line1, Addresses.line2, Addresses.line3, Students.permanentaddressid = Addresses.addressid]","657":"[Cartoon.Directedby, Cartoon.id]","658":"[DegreePrograms.degreeprogramid, DegreePrograms.degreesummaryname, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid]","659":"[Students.studentid, Students.firstname, Students.middlename, Students.lastname, StudentEnrolment.studentid = Students.studentid]","660":"[AREACODESTATE.state]","661":"[TVseries.WeeklyRank, TVseries.Episode, 'A Love of a Lifetime']","662":"[Cartoon.Title, TVChannel.seriesname, Cartoon.Channel = TVChannel.id, 'Sky Radio']","663":"[Transcripts.transcriptdate]","664":"[pokerplayer.Earnings]","665":"[country.Continent, country.Name, city.CountryCode = country.Code]","666":"[people.Nationality]","667":"[country.Population, country.Code = countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, English]","668":"[TVseries.AirDate, TVseries.Episode, TVseries.Rating, TVseries.Share, TVseries.1849RatingShare, TVseries.Viewersm, TVseries.WeeklyRank, TVseries.Channel = TVChannel.id, \"A Love of a Lifetime\"]","669":"[Departments.departmentdescription, Departments.departmentname]","670":"[countrylanguage.Language, country.Code, city.CountryCode = country.Code, country.Name, 'Aruba']","671":"[DegreePrograms.degreeprogramid, DegreePrograms.departmentid, Departments.departmentid]","672":"[Students.firstname, Students.middlename, Students.lastname, StudentEnrolment.degreeprogramid = DegreePrograms.degreeprogramid, DegreePrograms.degreesummaryname]","673":"[pokerplayer.Earnings, people.Height, pokerplayer.PeopleID = people.PeopleID, 200]","674":"[CONTESTANTS.contestantname, CONTESTANTS.contestantname, 'Jessie Alloway']","675":"[TVChannel.seriesname, TVChannel.Content]","676":"[countrylanguage.Language, country.Name, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, city.Name = 'Aruba']","677":"[TVseries.Episode, TVseries.Rating]","678":"[country.Name, countrylanguage.CountryCode, country.Code]","679":"[city.Population, city.District, Gelderland]","680":"[country.SurfaceArea, country.Code, city.CountryCode = country.Code]","681":"[Cartoon.Directedby, Cartoon.id]","682":"[people.Name, pokerplayer.FinalTableMade, pokerplayer.PeopleID = people.PeopleID]","683":"[country.SurfaceArea, country.Code, country.Region, Europe]","684":"[pokerplayer.MoneyRank, pokerplayer.Earnings]","685":"[country.HeadOfState, country.Code = countrylanguage.CountryCode, countrylanguage.IsOfficial]","686":"[TVChannel.Country, Cartoon.Writtenby, Cartoon.Channel = TVChannel.id, 'Todd Casey']","687":"[Courses.courseid, Courses.coursename, Sections.courseid = Courses.courseid]","688":"[country.Name, country.Code = countrylanguage.CountryCode]","689":"[country.SurfaceArea, country.Name, country.Continent, 'Asia', 'Europe']","690":"[CONTESTANTS.contestantnumber, CONTESTANTS.contestantname, VOTES.contestantnumber = CONTESTANTS.contestantnumber]","691":"[TVChannel.seriesname, TVseries.Episode, TVseries.Channel = TVChannel.id, 'A Love of a Lifetime']","692":"[country.Name,countrylanguage.Language,countrylanguage.IsOfficial,countrylanguage.CountryCode = country.Code,English,Dutch]","693":"[TVChannel.PackageOption, TVChannel.seriesname, TVChannel.HightdefinitionTV]","694":"[TVseries.Episode, TVseries.AirDate, TVseries.Channel = TVChannel.id, TVChannel.seriesname, 'Sky Radio']","695":"[TVChannel.Country, Cartoon.Writtenby, TVseries.Channel = TVChannel.id, Cartoon.Channel = TVChannel.id, 'Todd Casey']","696":"[Cartoon.Title]","697":"[CONTESTANTS.contestantname, 'Al']","698":"[Students.firstname, Students.permanentaddressid, Students.currentaddressid, Students.permanentaddressid != Students.currentaddressid]","699":"[people.Nationality, people.PeopleID, pokerplayer.PeopleID = people.PeopleID]","700":"[countrylanguage.CountryCode, countrylanguage.Language, country.Code, country.Name, 'Aruba']","701":"[country.LifeExpectancy, country.Continent, country.GovernmentForm, country.Code = countrylanguage.CountryCode, city.CountryCode = country.Code, 'Africa', 'Republic']","702":"[VOTES.created, VOTES.state, VOTES.phonenumber, CONTESTANTS.contestantname, VOTES.contestantnumber = CONTESTANTS.contestantnumber, 'Tabatha Gehling']","703":"[people.Nationality, people.PeopleID]","704":"[city.Population, city.District, Gelderland]","705":"[AREACODESTATE.areacode, VOTES.state, VOTES.voteid]","706":"[country.SurfaceArea, country.Continent, 'Carribean']","707":"[TVChannel.id, TVseries.Channel = TVChannel.id, Cartoon.Channel = TVChannel.id]","708":"[country.Name, countrylanguage.CountryCode = country.Code, countrylanguage.Language]","709":"[Students.firstname, Students.middlename, Students.lastname, Students.datefirstregistered]","710":"[AREACODESTATE.areacode, VOTES.state, VOTES.contestantnumber = CONTESTANTS.contestantnumber, CONTESTANTS.contestantname = 'Tabatha Gehling', CONTESTANTS.contestantname = 'Kelly Clauss']","711":"[country.GovernmentForm, country.Continent, 'Africa']","712":"[Transcripts.transcriptdate]","713":"[Departments.departmentid, DegreePrograms.departmentid = Departments.departmentid]","714":"[Students.firstname, Students.permanentaddressid = Addresses.addressid, Addresses.country, Students.cellmobilenumber, 'Haiti', '09700166582']","715":"[country.GovernmentForm, country.Code, 'republic']","716":"[Sections.sectionname, Sections.sectiondescription]","717":"[TVseries.AirDate, TVseries.Episode, TVseries.Channel = TVChannel.id]","718":"[people.Name, pokerplayer.PeopleID = people.PeopleID]","719":"[country.Continent, countrylanguage.Language, country.Code = countrylanguage.CountryCode]","720":"[Transcripts.transcriptid, Transcripts.transcriptdate, TranscriptContents.transcriptid = Transcripts.transcriptid]","721":"[people.BirthDate, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID]","722":"[TVChannel.Language, TVChannel.id]","723":"[countrylanguage.Language, country.Code, country.Continent, countrylanguage.CountryCode = country.Code, country.Continent = 'Asia']","724":"[TVChannel.id, Cartoon.Channel, Cartoon.Directedby, 'Ben Jones']","725":"[pokerplayer.PokerPlayerID, people.PeopleID]","726":"[TVseries.Episode, TVseries.Rating, TVseries.Channel = TVChannel.id]","727":"[Sections.sectionname, Sections.sectiondescription]","728":"[Transcripts.transcriptdate, Transcripts.transcriptid]","729":"[AREACODESTATE.areacode]","730":"[TVseries.WeeklyRank, TVseries.Episode, TVseries.Channel = TVChannel.id, 'A Love of a Lifetime']","731":"[pokerplayer.FinalTableMade, pokerplayer.Earnings, pokerplayer.PeopleID = people.PeopleID, 200000]","732":"[countrylanguage.Language, country.GovernmentForm, countrylanguage.CountryCode = country.Code]","733":"[country.Name, country.Population, country.LifeExpectancy, country.SurfaceArea, country.Continent]","734":"[CONTESTANTS.contestantnumber, CONTESTANTS.contestantname, VOTES.contestantnumber]","735":"[TVChannel.PixelaspectratioPAR, TVChannel.Country, TVChannel.Language, 'English']","736":"[country.Name, country.Code, countrylanguage.CountryCode = country.Code, countrylanguage.IsOfficial]","737":"[country.Name, country.Population, country.LifeExpectancy, city.CountryCode = country.Code]","738":"[DegreePrograms.degreesummaryname]","739":"[country.GovernmentForm, country.Continent, 'Africa']","740":"[country.LifeExpectancy, countrylanguage.Language, countrylanguage.IsOfficial, country.Code = countrylanguage.CountryCode, country.Code = city.CountryCode, 'English']","741":"[city.Population, countrylanguage.Language, country.Code = city.CountryCode, countrylanguage.CountryCode = country.Code, 'English']","742":"[pokerplayer.Earnings, people.Height, pokerplayer.PeopleID = people.PeopleID, 200]","743":"[TVChannel.Language, TVChannel.id]","744":"[Departments.departmentdescription, Departments.departmentname, 'computer']","745":"[country.Name, country.LifeExpectancy, country.Continent, city.CountryCode = country.Code]","746":"[Courses.coursename, StudentEnrolmentCourses.courseid = Courses.courseid]","747":"[TVChannel.seriesname, TVChannel.Country, Cartoon.Directedby, Cartoon.Channel = TVChannel.id, 'Ben Jones', 'Michael Chang']","748":"[country.Region, country.Population, country.Name = 'Angola']","749":"[TVChannel.Language, TVChannel.Country, English]","750":"[Students.studentid, Students.firstname, Students.middlename, Students.lastname, Students.cellmobilenumber, Students.emailaddress, Students.ssn, Students.datefirstregistered, Students.dateleft]","751":"[country.GovernmentForm, country.Code, 'republic']","752":"[DegreePrograms.degreeprogramid, StudentEnrolment.degreeprogramid]","753":"[Departments.departmentid, DegreePrograms.departmentid = Departments.departmentid]","754":"[country.LifeExpectancy, country.Region, Central Africa]","755":"[Transcripts.transcriptid]","756":"[TVseries.Episode, TVChannel.seriesname, TVseries.Channel = TVChannel.id, \"Sky Radio\"]","757":"[Courses.courseid, Courses.coursename, Sections.courseid = Courses.courseid]","758":"[country.Name,countrylanguage.Language,countrylanguage.IsOfficial,countrylanguage.Percentage,'English','French']","759":"[VOTES.voteid, VOTES.phonenumber, VOTES.state]","760":"[Semesters.semesterid, Semesters.semestername, StudentEnrolment.semesterid = Semesters.semesterid]","761":"[country.LifeExpectancy, country.Region, Central Africa]","762":"[pokerplayer.Earnings, people.Name, pokerplayer.PeopleID = people.PeopleID, 300000]","763":"[Addresses.addressid, Addresses.line1, Addresses.line2, Addresses.city, Addresses.zippostcode, Students.permanentaddressid = Addresses.addressid, Students.currentaddressid = Addresses.addressid]","764":"[people.Name, people.BirthDate]","765":"[city.Population, country.Name, country.LifeExpectancy, city.CountryCode = country.Code, country.Name = 'Brazil']","766":"[people.Nationality, people.PeopleID = pokerplayer.PeopleID]","767":"[country.Name, country.Population, country.LifeExpectancy, country.Continent = 'Asia']","768":"[TVChannel.PackageOption, TVChannel.seriesname, Sky Radio]","769":"[TVChannel.Content, TVChannel.seriesname, Sky Radio]","770":"[TVseries.Episode, TVChannel.seriesname, TVseries.Channel = TVChannel.id]","771":"[Students.cellmobilenumber, Students.firstname, Students.lastname, 'Timmothy', 'Ward']","772":"[Highschooler.grade, Highschooler.ID]","773":"[conductor.Name, orchestra.ConductorID = conductor.ConductorID]","774":"[Breeds.breedname,Sizes.sizedescription]","775":"[orchestra.RecordCompany, orchestra.YearofFounded]","776":"[conductor.Name, orchestra.Orchestra, orchestra.ConductorID = conductor.ConductorID]","777":"[singer.Name, song.Sales, song.SingerID = singer.SingerID]","778":"[country.GovernmentForm, country.Population, country.LifeExpectancy, countrylanguage.CountryCode = country.Code, country.LifeExpectancy > 72]","779":"[Professionals.professionalid,Treatments.professionalid = Professionals.professionalid]","780":"[Charges.chargetype, Charges.chargeamount]","781":"[singer.SingerID, singer.Name, singer.BirthYear, singer.NetWorthMillions, singer.Citizenship]","782":"[country.Code, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.Percentage, 'Spanish']","783":"[conductor.Name, conductor.Nationality, conductor.Nationality, 'USA']","784":"[Dogs.name,Treatments.costoftreatment,Owners.ownerid = Dogs.ownerid]","785":"[country.Name, country.SurfaceArea]","786":"[Professionals.rolecode, Professionals.street, Professionals.city, Professionals.state, Professionals.city, 'West']","787":"[singer.Name, song.SingerID = singer.SingerID]","788":"[singer.Name,song.Sales,song.SingerID = singer.SingerID,300000]","789":"[country.Code, country.GovernmentForm, countrylanguage.CountryCode = country.Code, countrylanguage.Language, 'English', 'Republic']","790":"[country.Name, country.Population, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code]","791":"[Dogs.age,Dogs.dogid]","792":"[conductor.Name, conductor.Nationality, conductor.ConductorID]","793":"[Highschooler.ID]","794":"[conductor.Name, conductor.YearofWork]","795":"[Professionals.professionalid, Professionals.rolecode, Professionals.emailaddress, Treatments.professionalid = Professionals.professionalid]","796":"[Charges.chargetype, Charges.chargeamount]","797":"[countrylanguage.Language, countrylanguage.CountryCode, country.Code]","798":"[Owners.ownerid, Owners.lastname, Treatments.costoftreatment, Treatments.dogid = Dogs.dogid, Dogs.ownerid = Owners.ownerid]","799":"[Dogs.datearrived, Dogs.datedeparted]","800":"[Professionals.professionalid, Professionals.lastname, Professionals.cellnumber, Professionals.state, Treatments.professionalid = Professionals.professionalid, Treatments.treatmentid, Treatments.dogid, Treatments.treatmenttypecode]","801":"[Owners.firstname, Owners.lastname, Owners.emailaddress, Owners.state, 'North']","802":"[Highschooler.name, Highschooler.grade, 10]","803":"[Highschooler.grade, Highschooler.ID]","804":"[Professionals.rolecode, Professionals.street, Professionals.city, Professionals.state, Professionals.city]","805":"[orchestra.OrchestraID, orchestra.Orchestra, performance.OrchestraID = orchestra.OrchestraID]","806":"[orchestra.RecordCompany, orchestra.OrchestraID = performance.OrchestraID]","807":"[Properties.propertyname, Properties.roomcount, RefPropertyTypes.propertytypedescription, Properties.propertytypecode, 'houses', 'apartments', 1]","808":"[Dogs.datearrived, Dogs.datedeparted]","809":"[singer.Name, singer.NetWorthMillions]","810":"[Highschooler.grade, Highschooler.ID]","811":"[show.Attendance]","812":"[Likes.studentid, Likes.likedid, Highschooler.name, Highschooler.ID, 'Kyle']","813":"[city.Name, city.Population, 160000, 900000]","814":"[orchestra.RecordCompany, orchestra.OrchestraID = performance.OrchestraID]","815":"[conductor.Name, conductor.Age]","816":"[singer.Citizenship]","817":"[conductor.Name, orchestra.ConductorID = conductor.ConductorID]","818":"[country.Name, country.Population]","819":"[Highschooler.ID, Friend.studentid = Highschooler.ID]","820":"[conductor.Name, conductor.YearofWork]","821":"[TreatmentTypes.treatmenttypedescription,Treatments.treatmentid,Treatments.costoftreatment,Treatments.treatmenttypecode = TreatmentTypes.treatmenttypecode]","822":"[conductor.Name, orchestra.ConductorID = conductor.ConductorID]","823":"[singer.Citizenship, singer.NetWorthMillions]","824":"[Owners.lastname, Dogs.dateofbirth, Dogs.ownerid = Owners.ownerid]","825":"[country.Name, country.IndepYear, country.SurfaceArea, city.Population]","826":"[Highschooler.name, Highschooler.grade, 10]","827":"[Professionals.firstname,TreatmentTypes.treatmenttypedescription,Treatments.professionalid = Professionals.professionalid,Treatments.treatmenttypecode = TreatmentTypes.treatmenttypecode]","828":"[conductor.Name, conductor.YearofWork]","829":"[Highschooler.name, Highschooler.ID = Friend.studentid]","830":"[RefFeatureTypes.featuretypename, OtherAvailableFeatures.featurename, OtherAvailableFeatures.featuretypecode = RefFeatureTypes.featuretypecode, 'AirCon']","831":"[Highschooler.grade, Highschooler.ID]","832":"[Dogs.datearrived, Dogs.datedeparted, Treatments.dogid = Dogs.dogid]","833":"[show.Attendance]","834":"[Highschooler.ID, Highschooler.name, Kyle]","835":"[Highschooler.grade, Friend.studentid = Highschooler.ID]","836":"[Dogs.dogid, Treatments.dogid]","837":"[Dogs.name,Dogs.age,Dogs.weight,Dogs.abandonedyn,1]","838":"[conductor.Nationality]","839":"[song.Title, singer.Name, song.SingerID = singer.SingerID]","840":"[Highschooler.name, Highschooler.grade, Friend.studentid = Highschooler.ID, Friend.friendid = Highschooler.ID, 5]","841":"[Highschooler.name, Friend.studentid = Highschooler.ID, Friend.friendid = Highschooler.ID]","842":"[Highschooler.name, Friend.studentid = Highschooler.ID]","843":"[Professionals.professionalid, Professionals.rolecode, Professionals.emailaddress, Treatments.professionalid = Professionals.professionalid]","844":"[Highschooler.name, Friend.studentid = Highschooler.ID]","845":"[Highschooler.name, Likes.studentid = Highschooler.ID]","846":"[Professionals.emailaddress, Professionals.state, Hawaii, Wisconsin]","847":"[country.Name, country.Continent, country.Population, city.CountryCode = country.Code, 80000, 'Europe']","848":"[orchestra.RecordCompany, orchestra.OrchestraID, 'CD', 'DVD']","849":"[Highschooler.name, Likes.studentid = Highschooler.ID]","850":"[Owners.firstname, Dogs.name, Owners.state, Virginia]","851":"[Owners.firstname, Owners.lastname, Owners.emailaddress, Owners.state, 'North']","852":"[Highschooler.name, Friend.studentid = Highschooler.ID, Likes.likedid = Highschooler.ID]","853":"[country.Name, country.SurfaceArea, city.CountryCode = country.Code]","854":"[Highschooler.grade, Highschooler.ID]","855":"[Highschooler.name, Friend.friendid = Highschooler.ID, Friend.studentid = Highschooler.ID, 'Kyle']","856":"[country.Code,country.GovernmentForm,countrylanguage.Language,countrylanguage.Percentage,'English','Republic']","857":"[country.GovernmentForm, country.Population, country.LifeExpectancy, 72]","858":"[country.Name,country.Code = countrylanguage.CountryCode,countrylanguage.CountryCode = country.Code]","859":"[orchestra.RecordCompany, orchestra.YearofFounded]","860":"[conductor.Name, orchestra.ConductorID = conductor.ConductorID]","861":"[Highschooler.name, Highschooler.grade]","862":"[singer.Name, singer.NetWorthMillions, song.SingerID = singer.SingerID]","863":"[country.Name, country.Population, country.Code = city.CountryCode]","864":"[Highschooler.ID, Friend.studentid = Highschooler.ID, Likes.studentid = Highschooler.ID]","865":"[country.Code, countrylanguage.CountryCode, countrylanguage.Language, 'Spanish']","866":"[singer.Citizenship,singer.BirthYear,1945,1955]","867":"[Professionals.emailaddress, Professionals.cellnumber, Professionals.homephone]","868":"[Breeds.breedname, Dogs.breedcode, Dogs.breedcode = Breeds.breedcode]","869":"[Owners.ownerid, Owners.firstname, Owners.lastname, Dogs.ownerid = Owners.ownerid]","870":"[Likes.studentid, Likes.likedid]","871":"[Dogs.age]","872":"[country.Code, countrylanguage.Language, countrylanguage.Percentage, city.CountryCode = country.Code]","873":"[orchestra.YearofFounded, performance.OrchestraID = orchestra.OrchestraID]","874":"[Highschooler.name, Likes.studentid, Highschooler.ID = Likes.studentid]","875":"[countrylanguage.Language, countrylanguage.CountryCode = country.Code]","876":"[city.Name, city.CountryCode, country.Code, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, country.Continent, 'Europe', 'English']","877":"[Owners.state, Professionals.state]","878":"[orchestra.RecordCompany, orchestra.OrchestraID, performance.OrchestraID = orchestra.OrchestraID]","879":"[country.Code,countrylanguage.Language,countrylanguage.IsOfficial,English]","880":"[Treatments.costoftreatment, TreatmentTypes.treatmenttypedescription, Treatments.treatmenttypecode = TreatmentTypes.treatmenttypecode]","881":"[country.Code, countrylanguage.Language, countrylanguage.CountryCode = country.Code, English]","882":"[Professionals.emailaddress, Professionals.state, Hawaii,Wisconsin]","883":"[Highschooler.name, Likes.studentid, Highschooler.ID]","884":"[conductor.ConductorID, conductor.Name]","885":"[Highschooler.name, Friend.studentid = Highschooler.ID, Friend.friendid = Highschooler.ID]","886":"[Highschooler.grade, Highschooler.ID, 9, 10]","887":"[orchestra.RecordCompany, orchestra.YearofFounded, orchestra.ConductorID = conductor.ConductorID, performance.OrchestraID = orchestra.OrchestraID, show.PerformanceID = performance.PerformanceID, 2003]","888":"[Highschooler.grade]","889":"[countrylanguage.Language, countrylanguage.Percentage, countrylanguage.CountryCode = country.Code]","890":"[city.Name, city.CountryCode, country.Code, countrylanguage.CountryCode, countrylanguage.Language, countrylanguage.IsOfficial, 'English', 'Yes', 'Europe']","891":"[Professionals.firstname, TreatmentTypes.treatmenttypedescription, Treatments.professionalid = Professionals.professionalid, Treatments.treatmenttypecode = TreatmentTypes.treatmenttypecode]","892":"[Dogs.breedcode,Breeds.breedname,Dogs.sizecode,Sizes.sizecode,Sizes.sizedescription]","893":"[orchestra.RecordCompany, orchestra.YearofFounded, 2003]","894":"[Friend.studentid, Friend.friendid, Highschooler.ID, Highschooler.name, Kyle]","895":"[Dogs.name, Treatments.dateoftreatment, Dogs.breedcode = Breeds.breedcode]","896":"[Owners.ownerid, Owners.zipcode, Treatments.costoftreatment, Dogs.ownerid = Owners.ownerid, Treatments.dogid = Dogs.dogid]","897":"[Highschooler.name, Friend.studentid = Highschooler.ID, Friend.friendid]","898":"[Highschooler.name, Friend.studentid = Highschooler.ID, Friend.friendid = Highschooler.ID]","899":"[orchestra.OrchestraID, orchestra.RecordCompany]","900":"[singer.Citizenship,singer.NetWorthMillions,song.SingerID = singer.SingerID]","901":"[Dogs.dogid,Treatments.dogid]","902":"[Highschooler.name, Friend.studentid = Highschooler.ID]","903":"[Highschooler.name, Friend.studentid = Highschooler.ID, Friend.friendid = Highschooler.ID]","904":"[Highschooler.ID, Highschooler.name, 'Kyle']","905":"[Highschooler.grade, Highschooler.name, 'Kyle']","906":"[Likes.studentid, Likes.likedid]","907":"[country.Name,country.Population,3]","908":"[singer.Name,singer.BirthYear,1948,1949]","909":"[country.Continent, country.LifeExpectancy, country.Population, country.LifeExpectancy < 72]","910":"[]","911":"[Owners.ownerid, Owners.lastname, Treatments.dogid = Dogs.dogid, Dogs.ownerid = Owners.ownerid, Treatments.costoftreatment]","912":"[singer.Name,singer.Citizenship,'France']","913":"[singer.Name, singer.BirthYear, 1948, 1949]","914":"[Professionals.professionalid, Professionals.lastname, Professionals.cellnumber, Professionals.state, Treatments.professionalid, Treatments.treatmentid]","915":"[country.Code, country.Continent, Asia]","916":"[country.Region, country.Region = 'Asia']","917":"[Highschooler.name, Friend.studentid = Highschooler.ID, Likes.studentid = Highschooler.ID]","918":"[TreatmentTypes.treatmenttypedescription, Treatments.costoftreatment, Treatments.treatmenttypecode = TreatmentTypes.treatmenttypecode]","919":"[orchestra.Orchestra, performance.OrchestraID = orchestra.OrchestraID]","920":"[singer.Citizenship, singer.SingerID = song.SingerID]","921":"[Professionals.firstname, Owners.firstname, Dogs.name]","922":"[Professionals.professionalid, Professionals.firstname, Treatments.professionalid = Professionals.professionalid]","923":"[Owners.ownerid, Dogs.ownerid]","924":"[Breeds.breedname,Dogs.breedcode = Breeds.breedcode]","925":"[Highschooler.name,Likes.studentid = Highschooler.ID,Likes.likedid,2]","926":"[Highschooler.ID, Friend.studentid = Highschooler.ID]","927":"[Dogs.age, Treatments.dogid = Dogs.dogid]","928":"[Owners.firstname, Owners.lastname, Dogs.sizecode, Dogs.ownerid = Owners.ownerid]","929":"[Treatments.dateoftreatment, Professionals.firstname, Treatments.professionalid = Professionals.professionalid]","930":"[Professionals.professionalid, Treatments.professionalid = Professionals.professionalid]","931":"[Dogs.age, Dogs.dogid]","932":"[Professionals.firstname, Professionals.lastname, Treatments.costoftreatment]","933":"[singer.Name,singer.Citizenship,'French']","934":"[singer.Name,singer.SingerID,song.SingerID = singer.SingerID]","935":"[Dogs.dogid, Treatments.dogid = Dogs.dogid]","936":"[Highschooler.ID, Friend.studentid = Highschooler.ID, Likes.likedid = Highschooler.ID]","937":"[conductor.Name, orchestra.Orchestra, orchestra.ConductorID = conductor.ConductorID]","938":"[Treatments.costoftreatment, Treatments.dateoftreatment]","939":"[Highschooler.grade, Highschooler.ID]","940":"[country.Name, country.Population, country.Continent, countrylanguage.CountryCode = country.Code, city.CountryCode = country.Code]","941":"[country.Name,country.IndepYear,country.SurfaceArea,city.Population]","942":"[Owners.lastname, Dogs.age, Dogs.ownerid = Owners.ownerid]","943":"[Dogs.age]","944":"[Professionals.professionalid, Treatments.professionalid]","945":"[Professionals.professionalid, Professionals.cellnumber, Treatments.professionalid = Professionals.professionalid]","946":"[city.District, city.Population, country.Code]","947":"[Highschooler.grade, Highschooler.ID = Friend.studentid]","948":"[Treatments.costoftreatment, TreatmentTypes.treatmenttypedescription, Treatments.treatmenttypecode = TreatmentTypes.treatmenttypecode]","949":"[Highschooler.ID, Friend.studentid]","950":"[country.Code, countrylanguage.Language, countrylanguage.CountryCode = country.Code, English]","951":"[orchestra.RecordCompany, orchestra.OrchestraID]","952":"[Professionals.professionalid, Professionals.cellnumber, Treatments.professionalid = Professionals.professionalid, Treatments.treatmenttypecode]","953":"[Professionals.professionalid, Professionals.rolecode, Professionals.firstname, Treatments.professionalid = Professionals.professionalid]","954":"[city.Name, country.Name, countrylanguage.Language, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code, countrylanguage.Language = 'Chinese', country.Continent = 'Asia']","955":"[city.Population, city.District]","956":"[singer.Name,singer.NetWorthMillions]","957":"[conductor.Name, orchestra.YearofFounded, orchestra.ConductorID = conductor.ConductorID]","958":"[singer.Name, song.Sales, song.SingerID = singer.SingerID]","959":"[Highschooler.ID]","960":"[Highschooler.name, Highschooler.grade]","961":"[Owners.ownerid, Owners.zipcode, Treatments.costoftreatment, Treatments.dogid = Dogs.dogid, Dogs.ownerid = Owners.ownerid]","962":"[orchestra.MajorRecordFormat]","963":"[Owners.firstname,Dogs.name,Dogs.ownerid = Owners.ownerid]","964":"[Professionals.professionalid, Treatments.professionalid = Professionals.professionalid]","965":"[Highschooler.grade, Highschooler.ID = Friend.studentid]","966":"[country.Name, country.Population, country.Region]","967":"[Dogs.name,Dogs.age,Dogs.weight,Dogs.abandonedyn,1]","968":"[Professionals.firstname, Professionals.lastname, Treatments.costoftreatment, Treatments.professionalid = Professionals.professionalid]","969":"[Professionals.emailaddress, Professionals.cellnumber, Professionals.homephone]","970":"[singer.Name, song.SingerID, song.SingerID = singer.SingerID]","971":"[singer.Name, song.Sales, 300000]","972":"[singer.SingerID, singer.Name]","973":"[Owners.firstname,Dogs.name,Owners.state,'Virginia',Dogs.ownerid = Owners.ownerid]","974":"[conductor.Name, orchestra.YearofFounded, orchestra.ConductorID = conductor.ConductorID, 2008]","975":"[country.Continent, country.Population, country.LifeExpectancy, countrylanguage.CountryCode = country.Code]","976":"[Highschooler.grade, Friend.studentid = Highschooler.ID]","977":"[Highschooler.grade, Highschooler.ID]","978":"[Owners.state, Professionals.state, Owners.state = Professionals.state]","979":"[Dogs.name,Treatments.costoftreatment,1000]","980":"[singer.Citizenship,singer.BirthYear,1945,1955]","981":"[singer.Citizenship, singer.SingerID]","982":"[Treatments.costoftreatment, Treatments.dateoftreatment]","983":"[singer.BirthYear,singer.Citizenship]","984":"[Highschooler.name, Highschooler.grade, Friend.studentid, Friend.friendid, 5, 2]","985":"[singer.Name,singer.NetWorthMillions]","986":"[Dogs.dogid, Treatments.dogid = Dogs.dogid]","987":"[country.Name, country.Continent, country.Population, city.CountryCode = country.Code, country.Continent = 'Europe', country.Population = 80000]","988":"[country.Population, country.SurfaceArea, country.Continent, city.CountryCode = country.Code, country.Continent = 'North America', country.SurfaceArea > 3000]","989":"[country.Code,countrylanguage.CountryCode,countrylanguage.Language,'Spanish']","990":"[Owners.ownerid, Owners.firstname, Owners.lastname, Dogs.ownerid = Owners.ownerid]","991":"[orchestra.RecordCompany, orchestra.OrchestraID, performance.OrchestraID = orchestra.OrchestraID]","992":"[song.Title, singer.Name, song.SingerID = singer.SingerID]","993":"[Dogs.age]","994":"[Highschooler.name,Likes.studentid = Highschooler.ID,Likes.likedid]","995":"[singer.Name, song.SingerID, song.SingerID = singer.SingerID]","996":"[Dogs.age, Treatments.dogid, Treatments.dogid = Dogs.dogid]","997":"[conductor.ConductorID]","998":"[Professionals.firstname, Owners.firstname, Dogs.name]","999":"[country.Population, country.Name, country.HeadOfState, country.SurfaceArea]","1000":"[Highschooler.ID,Likes.studentid,Likes.likedid,Highschooler.name,'Kyle']","1001":"[country.Name, country.SurfaceArea, country.Population, city.CountryCode = country.Code, country.Continent, North America, 3000]","1002":"[country.Code, countrylanguage.Language, countrylanguage.CountryCode = country.Code, English]","1003":"[Dogs.datearrived, Dogs.datedeparted, Treatments.dogid = Dogs.dogid]","1004":"[orchestra.YearofFounded, performance.OrchestraID = orchestra.OrchestraID]","1005":"[Highschooler.grade, Highschooler.ID, 9, 10]","1006":"[conductor.Name, conductor.YearofWork]","1007":"[country.Name, countrylanguage.CountryCode = country.Code, countrylanguage.CountryCode = city.CountryCode]","1008":"[Dogs.age]","1009":"[Highschooler.ID, Friend.studentid, Friend.friendid]","1010":"[singer.BirthYear, singer.Citizenship]","1011":"[conductor.Name, conductor.Age]","1012":"[RefPropertyTypes.propertytypedescription, Properties.propertytypecode = RefPropertyTypes.propertytypecode]","1013":"[Charges.chargeamount, Charges.chargetype]","1014":"[country.Name, country.Population, country.HeadOfState, country.SurfaceArea]","1015":"[country.Name, country.Population, country.Continent, city.CountryCode = country.Code, countrylanguage.CountryCode = country.Code]","1016":"[singer.Citizenship, song.SingerID = singer.SingerID]","1017":"[conductor.Nationality]","1018":"[Owners.firstname,Dogs.name,Dogs.ownerid = Owners.ownerid]","1019":"[city.Name, city.Population, 160000, 900000]","1020":"[OtherAvailableFeatures.featureid, OtherAvailableFeatures.featurename, OtherAvailableFeatures.featuredescription]","1021":"[Treatments.dateoftreatment, Professionals.firstname, Treatments.professionalid = Professionals.professionalid]","1022":"[country.Code,countrylanguage.CountryCode,countrylanguage.Language,countrylanguage.Percentage,Spanish]","1023":"[performance.Type, performance.Share, 'Live final']","1024":"[Owners.ownerid, Dogs.ownerid]","1025":"[city.Name, city.CountryCode, country.Code = city.CountryCode, countrylanguage.CountryCode = country.Code, countrylanguage.Language, country.Continent, 'Chinese']","1026":"[country.Name, country.Population]","1027":"[Charges.chargeamount, Charges.chargetype]","1028":"[Highschooler.grade, Highschooler.name, 'Kyle']","1029":"[Highschooler.ID, Friend.studentid]","1030":"[performance.Share, performance.Type, 'Live final']","1031":"[Owners.firstname, Owners.lastname, Dogs.sizecode, Dogs.ownerid = Owners.ownerid]","1032":"[airlines.Airline, flights.SourceAirport, flights.SourceAirport = 'CVO', flights.SourceAirport != 'APG']","1033":"[Addresses.addressid, Students.currentaddressid]"},"fields":{"0":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","1":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","2":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","3":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","4":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","5":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","6":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","7":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","8":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","9":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","10":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","11":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","12":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","13":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","14":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","15":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","16":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","17":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","18":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","19":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","20":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","21":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","22":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","23":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","24":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","25":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","26":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","27":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","28":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","29":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","30":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","31":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","32":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","33":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","34":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","35":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","36":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","37":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","38":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","39":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","40":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","41":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","42":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","43":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","44":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","45":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","46":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","47":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","48":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","49":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","50":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","51":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","52":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","53":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","54":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","55":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","56":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","57":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","58":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","59":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","60":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","61":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","62":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","63":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","64":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","65":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","66":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","67":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","68":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","69":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","70":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","71":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","72":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","73":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","74":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","75":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","76":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","77":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","78":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","79":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","80":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","81":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","82":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","83":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","84":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","85":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","86":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","87":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","88":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","89":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","90":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","91":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","92":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","93":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","94":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","95":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","96":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","97":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","98":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","99":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","100":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","101":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","102":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","103":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","104":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","105":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","106":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","107":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","108":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","109":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","110":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","111":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","112":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","113":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","114":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","115":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","116":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","117":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","118":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","119":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","120":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","121":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","122":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","123":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","124":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","125":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","126":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","127":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","128":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","129":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","130":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","131":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","132":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","133":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","134":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","135":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","136":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","137":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","138":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","139":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","140":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","141":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","142":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","143":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","144":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","145":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","146":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","147":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","148":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","149":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","150":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","151":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","152":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","153":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","154":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","155":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","156":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","157":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","158":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","159":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","160":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","161":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","162":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","163":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","164":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","165":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","166":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","167":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","168":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","169":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","170":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","171":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","172":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","173":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","174":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","175":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","176":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","177":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","178":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","179":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","180":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","181":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","182":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","183":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","184":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","185":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","186":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","187":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","188":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","189":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","190":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","191":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","192":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","193":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","194":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","195":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","196":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","197":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","198":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","199":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","200":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","201":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","202":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","203":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","204":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","205":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","206":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","207":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","208":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","209":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","210":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","211":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","212":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","213":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","214":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","215":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","216":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","217":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","218":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","219":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","220":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","221":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","222":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","223":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","224":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","225":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","226":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","227":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","228":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","229":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","230":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","231":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","232":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","233":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","234":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","235":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","236":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","237":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","238":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","239":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","240":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","241":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","242":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","243":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","244":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","245":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","246":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","247":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","248":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","249":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","250":"Table concert, columns = [*,concert_ID,concert_Name,Theme,Stadium_ID,Year]\nTable singer, columns = [*,Singer_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male]\nTable singer_in_concert, columns = [*,concert_ID,Singer_ID]\nTable stadium, columns = [*,Stadium_ID,Location,Name,Capacity,Highest,Lowest,Average]\n","251":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","252":"Table Has_Pet, columns = [*,StuID,PetID]\nTable Pets, columns = [*,PetID,PetType,pet_age,weight]\nTable Student, columns = [*,StuID,LName,Fname,Age,Sex,Major,Advisor,city_code]\n","253":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","254":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","255":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","256":"Table car_makers, columns = [*,Id,Maker,FullName,Country]\nTable car_names, columns = [*,MakeId,Model,Make]\nTable cars_data, columns = [*,Id,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year]\nTable continents, columns = [*,ContId,Continent]\nTable countries, columns = [*,CountryId,CountryName,Continent]\nTable model_list, columns = [*,ModelId,Maker,Model]\n","257":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","258":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","259":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","260":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","261":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","262":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","263":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","264":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","265":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","266":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","267":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","268":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","269":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","270":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","271":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","272":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","273":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","274":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","275":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","276":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","277":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","278":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","279":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","280":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","281":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","282":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","283":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","284":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","285":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","286":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","287":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","288":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","289":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","290":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","291":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","292":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","293":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","294":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","295":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","296":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","297":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","298":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","299":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","300":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","301":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","302":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","303":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","304":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","305":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","306":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","307":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","308":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","309":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","310":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","311":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","312":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","313":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","314":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","315":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","316":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","317":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","318":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","319":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","320":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","321":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","322":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","323":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","324":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","325":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","326":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","327":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","328":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","329":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","330":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","331":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","332":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","333":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","334":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","335":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","336":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","337":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","338":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","339":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","340":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","341":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","342":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","343":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","344":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","345":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","346":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","347":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","348":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","349":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","350":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","351":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","352":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","353":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","354":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","355":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","356":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","357":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","358":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","359":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","360":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","361":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","362":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","363":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","364":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","365":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","366":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","367":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","368":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","369":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","370":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","371":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","372":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","373":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","374":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","375":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","376":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","377":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","378":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","379":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","380":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","381":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","382":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","383":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","384":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","385":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","386":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","387":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","388":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","389":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","390":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","391":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","392":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","393":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","394":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","395":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","396":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","397":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","398":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","399":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","400":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","401":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","402":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","403":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","404":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","405":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","406":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","407":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","408":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","409":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","410":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","411":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","412":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","413":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","414":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","415":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","416":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","417":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","418":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","419":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","420":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","421":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","422":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","423":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","424":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","425":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","426":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","427":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","428":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","429":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","430":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","431":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","432":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","433":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","434":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","435":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","436":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","437":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","438":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","439":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","440":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","441":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","442":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","443":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","444":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","445":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","446":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","447":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","448":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","449":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","450":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","451":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","452":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","453":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","454":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","455":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","456":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","457":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","458":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","459":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","460":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","461":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","462":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","463":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","464":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","465":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","466":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","467":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","468":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","469":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","470":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","471":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","472":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","473":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","474":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","475":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","476":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","477":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","478":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","479":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","480":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","481":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","482":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","483":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","484":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","485":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","486":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","487":"Table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\nTable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\nTable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\n","488":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","489":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","490":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","491":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","492":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","493":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","494":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","495":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","496":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","497":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","498":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","499":"Table course, columns = [*,Course_ID,Staring_Date,Course]\nTable course_arrange, columns = [*,Course_ID,Teacher_ID,Grade]\nTable teacher, columns = [*,Teacher_ID,Name,Age,Hometown]\n","500":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","501":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","502":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","503":"Table museum, columns = [*,Museum_ID,Name,Num_of_Staff,Open_Year]\nTable visit, columns = [*,Museum_ID,visitor_ID,Num_of_Ticket,Total_spent]\nTable visitor, columns = [*,ID,Name,Level_of_membership,Age]\n","504":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","505":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","506":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","507":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","508":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","509":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","510":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","511":"Table Documents, columns = [*,Document_ID,Template_ID,Document_Name,Document_Description,Other_Details]\nTable Paragraphs, columns = [*,Paragraph_ID,Document_ID,Paragraph_Text,Other_Details]\nTable Ref_Template_Types, columns = [*,Template_Type_Code,Template_Type_Description]\nTable Templates, columns = [*,Template_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details]\n","512":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","513":"Table employee, columns = [*,Employee_ID,Name,Age,City]\nTable evaluation, columns = [*,Employee_ID,Year_awarded,Bonus]\nTable hiring, columns = [*,Shop_ID,Employee_ID,Start_from,Is_full_time]\nTable shop, columns = [*,Shop_ID,Name,Location,District,Number_products,Manager_name]\n","514":"Table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\nTable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\nTable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\n","515":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","516":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","517":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","518":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","519":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","520":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","521":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","522":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","523":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","524":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","525":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","526":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","527":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","528":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","529":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","530":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","531":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","532":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","533":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","534":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","535":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","536":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","537":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","538":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","539":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","540":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","541":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","542":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","543":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","544":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","545":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","546":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","547":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","548":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","549":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","550":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","551":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","552":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","553":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","554":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","555":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","556":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","557":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","558":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","559":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","560":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","561":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","562":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","563":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","564":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","565":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","566":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","567":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","568":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","569":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","570":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","571":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","572":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","573":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","574":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","575":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","576":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","577":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","578":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","579":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","580":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","581":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","582":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","583":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","584":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","585":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","586":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","587":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","588":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","589":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","590":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","591":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","592":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","593":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","594":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","595":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","596":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","597":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","598":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","599":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","600":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","601":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","602":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","603":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","604":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","605":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","606":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","607":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","608":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","609":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","610":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","611":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","612":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","613":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","614":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","615":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","616":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","617":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","618":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","619":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","620":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","621":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","622":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","623":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","624":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","625":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","626":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","627":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","628":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","629":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","630":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","631":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","632":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","633":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","634":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","635":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","636":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","637":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","638":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","639":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","640":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","641":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","642":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","643":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","644":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","645":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","646":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","647":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","648":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","649":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","650":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","651":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","652":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","653":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","654":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","655":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","656":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","657":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","658":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","659":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","660":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","661":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","662":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","663":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","664":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","665":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","666":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","667":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","668":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","669":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","670":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","671":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","672":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","673":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","674":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","675":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","676":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","677":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","678":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","679":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","680":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","681":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","682":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","683":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","684":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","685":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","686":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","687":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","688":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","689":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","690":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","691":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","692":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","693":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","694":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","695":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","696":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","697":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","698":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","699":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","700":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","701":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","702":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","703":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","704":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","705":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","706":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","707":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","708":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","709":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","710":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","711":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","712":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","713":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","714":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","715":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","716":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","717":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","718":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","719":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","720":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","721":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","722":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","723":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","724":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","725":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","726":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","727":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","728":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","729":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","730":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","731":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","732":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","733":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","734":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","735":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","736":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","737":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","738":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","739":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","740":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","741":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","742":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","743":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","744":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","745":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","746":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","747":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","748":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","749":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","750":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","751":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","752":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","753":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","754":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","755":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","756":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","757":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","758":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","759":"Table AREA_CODE_STATE, columns = [*,area_code,state]\nTable CONTESTANTS, columns = [*,contestant_number,contestant_name]\nTable VOTES, columns = [*,vote_id,phone_number,state,contestant_number,created]\n","760":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","761":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","762":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","763":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","764":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","765":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","766":"Table people, columns = [*,People_ID,Nationality,Name,Birth_Date,Height]\nTable poker_player, columns = [*,Poker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings]\n","767":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","768":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","769":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","770":"Table Cartoon, columns = [*,id,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel]\nTable TV_Channel, columns = [*,id,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option]\nTable TV_series, columns = [*,id,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel]\n","771":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n","772":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","773":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","774":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","775":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","776":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","777":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","778":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","779":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","780":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","781":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","782":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","783":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","784":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","785":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","786":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","787":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","788":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","789":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","790":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","791":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","792":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","793":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","794":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","795":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","796":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","797":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","798":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","799":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","800":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","801":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","802":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","803":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","804":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","805":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","806":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","807":"Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n","808":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","809":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","810":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","811":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","812":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","813":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","814":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","815":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","816":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","817":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","818":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","819":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","820":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","821":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","822":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","823":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","824":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","825":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","826":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","827":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","828":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","829":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","830":"Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n","831":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","832":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","833":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","834":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","835":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","836":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","837":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","838":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","839":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","840":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","841":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","842":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","843":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","844":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","845":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","846":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","847":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","848":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","849":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","850":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","851":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","852":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","853":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","854":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","855":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","856":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","857":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","858":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","859":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","860":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","861":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","862":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","863":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","864":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","865":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","866":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","867":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","868":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","869":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","870":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","871":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","872":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","873":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","874":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","875":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","876":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","877":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","878":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","879":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","880":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","881":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","882":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","883":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","884":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","885":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","886":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","887":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","888":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","889":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","890":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","891":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","892":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","893":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","894":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","895":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","896":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","897":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","898":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","899":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","900":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","901":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","902":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","903":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","904":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","905":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","906":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","907":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","908":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","909":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","910":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","911":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","912":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","913":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","914":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","915":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","916":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","917":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","918":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","919":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","920":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","921":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","922":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","923":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","924":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","925":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","926":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","927":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","928":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","929":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","930":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","931":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","932":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","933":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","934":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","935":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","936":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","937":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","938":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","939":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","940":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","941":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","942":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","943":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","944":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","945":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","946":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","947":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","948":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","949":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","950":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","951":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","952":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","953":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","954":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","955":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","956":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","957":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","958":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","959":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","960":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","961":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","962":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","963":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","964":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","965":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","966":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","967":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","968":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","969":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","970":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","971":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","972":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","973":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","974":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","975":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","976":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","977":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","978":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","979":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","980":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","981":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","982":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","983":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","984":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","985":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","986":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","987":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","988":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","989":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","990":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","991":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","992":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","993":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","994":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","995":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","996":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","997":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","998":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","999":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1000":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","1001":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1002":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1003":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1004":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","1005":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","1006":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","1007":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1008":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1009":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","1010":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","1011":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","1012":"Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n","1013":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1014":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1015":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1016":"Table singer, columns = [*,Singer_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship]\nTable song, columns = [*,Song_ID,Title,Singer_ID,Sales,Highest_Position]\n","1017":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","1018":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1019":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1020":"Table Other_Available_Features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\nTable Other_Property_Features, columns = [*,property_id,feature_id,property_feature_description]\nTable Properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\nTable Ref_Feature_Types, columns = [*,feature_type_code,feature_type_name]\nTable Ref_Property_Types, columns = [*,property_type_code,property_type_description]\n","1021":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1022":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1023":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","1024":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1025":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1026":"Table city, columns = [*,ID,Name,CountryCode,District,Population]\nTable country, columns = [*,Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2]\nTable countrylanguage, columns = [*,CountryCode,Language,IsOfficial,Percentage]\nTable sqlite_sequence, columns = [*,name,seq]\n","1027":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1028":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","1029":"Table Friend, columns = [*,student_id,friend_id]\nTable Highschooler, columns = [*,ID,name,grade]\nTable Likes, columns = [*,student_id,liked_id]\n","1030":"Table conductor, columns = [*,Conductor_ID,Name,Age,Nationality,Year_of_Work]\nTable orchestra, columns = [*,Orchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format]\nTable performance, columns = [*,Performance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share]\nTable show, columns = [*,Show_ID,Performance_ID,If_first_show,Result,Attendance]\n","1031":"Table Breeds, columns = [*,breed_code,breed_name]\nTable Charges, columns = [*,charge_id,charge_type,charge_amount]\nTable Dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\nTable Owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\nTable Professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\nTable Sizes, columns = [*,size_code,size_description]\nTable Treatment_Types, columns = [*,treatment_type_code,treatment_type_description]\nTable Treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\n","1032":"Table airlines, columns = [*,uid,Airline,Abbreviation,Country]\nTable airports, columns = [*,City,AirportCode,AirportName,Country,CountryAbbrev]\nTable flights, columns = [*,Airline,FlightNo,SourceAirport,DestAirport]\n","1033":"Table Addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\nTable Courses, columns = [*,course_id,course_name,course_description,other_details]\nTable Degree_Programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\nTable Departments, columns = [*,department_id,department_name,department_description,other_details]\nTable Sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\nTable Semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\nTable Student_Enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\nTable Student_Enrolment_Courses, columns = [*,student_course_id,course_id,student_enrolment_id]\nTable Students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\nTable Transcript_Contents, columns = [*,student_course_id,transcript_id]\nTable Transcripts, columns = [*,transcript_id,transcript_date,other_details]\n"},"foriegn keys":{"0":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","1":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","2":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","3":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","4":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","5":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","6":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","7":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","8":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","9":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","10":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","11":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","12":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","13":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","14":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","15":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","16":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","17":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","18":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","19":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","20":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","21":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","22":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","23":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","24":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","25":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","26":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","27":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","28":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","29":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","30":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","31":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","32":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","33":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","34":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","35":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","36":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","37":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","38":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","39":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","40":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","41":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","42":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","43":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","44":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","45":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","46":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","47":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","48":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","49":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","50":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","51":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","52":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","53":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","54":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","55":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","56":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","57":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","58":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","59":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","60":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","61":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","62":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","63":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","64":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","65":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","66":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","67":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","68":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","69":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","70":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","71":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","72":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","73":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","74":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","75":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","76":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","77":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","78":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","79":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","80":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","81":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","82":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","83":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","84":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","85":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","86":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","87":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","88":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","89":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","90":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","91":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","92":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","93":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","94":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","95":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","96":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","97":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","98":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","99":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","100":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","101":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","102":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","103":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","104":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","105":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","106":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","107":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","108":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","109":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","110":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","111":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","112":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","113":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","114":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","115":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","116":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","117":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","118":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","119":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","120":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","121":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","122":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","123":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","124":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","125":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","126":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","127":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","128":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","129":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","130":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","131":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","132":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","133":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","134":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","135":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","136":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","137":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","138":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","139":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","140":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","141":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","142":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","143":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","144":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","145":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","146":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","147":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","148":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","149":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","150":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","151":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","152":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","153":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","154":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","155":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","156":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","157":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","158":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","159":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","160":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","161":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","162":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","163":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","164":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","165":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","166":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","167":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","168":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","169":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","170":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","171":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","172":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","173":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","174":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","175":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","176":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","177":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","178":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","179":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","180":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","181":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","182":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","183":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","184":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","185":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","186":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","187":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","188":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","189":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","190":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","191":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","192":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","193":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","194":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","195":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","196":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","197":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","198":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","199":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","200":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","201":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","202":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","203":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","204":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","205":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","206":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","207":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","208":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","209":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","210":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","211":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","212":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","213":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","214":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","215":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","216":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","217":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","218":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","219":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","220":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","221":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","222":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","223":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","224":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","225":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","226":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","227":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","228":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","229":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","230":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","231":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","232":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","233":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","234":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","235":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","236":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","237":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","238":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","239":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","240":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","241":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","242":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","243":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","244":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","245":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","246":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","247":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","248":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","249":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","250":"Foreign_keys = [concert.Stadium_ID = stadium.Stadium_ID,singer_in_concert.Singer_ID = singer.Singer_ID,singer_in_concert.concert_ID = concert.concert_ID]\n","251":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","252":"Foreign_keys = [Has_Pet.StuID = Student.StuID,Has_Pet.PetID = Pets.PetID]\n","253":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","254":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","255":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","256":"Foreign_keys = [countries.Continent = continents.ContId,car_makers.Country = countries.CountryId,model_list.Maker = car_makers.Id,car_names.Model = model_list.Model,cars_data.Id = car_names.MakeId]\n","257":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","258":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","259":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","260":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","261":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","262":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","263":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","264":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","265":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","266":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","267":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","268":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","269":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","270":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","271":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","272":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","273":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","274":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","275":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","276":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","277":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","278":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","279":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","280":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","281":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","282":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","283":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","284":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","285":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","286":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","287":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","288":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","289":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","290":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","291":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","292":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","293":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","294":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","295":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","296":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","297":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","298":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","299":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","300":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","301":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","302":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","303":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","304":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","305":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","306":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","307":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","308":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","309":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","310":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","311":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","312":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","313":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","314":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","315":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","316":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","317":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","318":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","319":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","320":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","321":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","322":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","323":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","324":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","325":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","326":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","327":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","328":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","329":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","330":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","331":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","332":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","333":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","334":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","335":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","336":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","337":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","338":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","339":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","340":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","341":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","342":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","343":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","344":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","345":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","346":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","347":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","348":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","349":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","350":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","351":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","352":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","353":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","354":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","355":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","356":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","357":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","358":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","359":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","360":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","361":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","362":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","363":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","364":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","365":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","366":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","367":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","368":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","369":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","370":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","371":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","372":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","373":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","374":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","375":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","376":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","377":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","378":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","379":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","380":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","381":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","382":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","383":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","384":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","385":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","386":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","387":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","388":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","389":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","390":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","391":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","392":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","393":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","394":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","395":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","396":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","397":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","398":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","399":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","400":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","401":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","402":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","403":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","404":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","405":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","406":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","407":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","408":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","409":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","410":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","411":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","412":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","413":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","414":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","415":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","416":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","417":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","418":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","419":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","420":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","421":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","422":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","423":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","424":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","425":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","426":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","427":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","428":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","429":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","430":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","431":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","432":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","433":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","434":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","435":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","436":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","437":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","438":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","439":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","440":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","441":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","442":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","443":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","444":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","445":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","446":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","447":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","448":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","449":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","450":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","451":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","452":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","453":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","454":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","455":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","456":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","457":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","458":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","459":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","460":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","461":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","462":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","463":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","464":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","465":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","466":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","467":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","468":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","469":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","470":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","471":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","472":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","473":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","474":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","475":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","476":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","477":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","478":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","479":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","480":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","481":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","482":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","483":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","484":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","485":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","486":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","487":"Foreign_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]\n","488":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","489":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","490":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","491":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","492":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","493":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","494":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","495":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","496":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","497":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","498":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","499":"Foreign_keys = [course_arrange.Teacher_ID = teacher.Teacher_ID,course_arrange.Course_ID = course.Course_ID]\n","500":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","501":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","502":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","503":"Foreign_keys = [visit.visitor_ID = visitor.ID,visit.Museum_ID = museum.Museum_ID]\n","504":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","505":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","506":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","507":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","508":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","509":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","510":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","511":"Foreign_keys = [Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code,Documents.Template_ID = Templates.Template_ID,Paragraphs.Document_ID = Documents.Document_ID]\n","512":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","513":"Foreign_keys = [hiring.Employee_ID = employee.Employee_ID,hiring.Shop_ID = shop.Shop_ID,evaluation.Employee_ID = employee.Employee_ID]\n","514":"Foreign_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]\n","515":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","516":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","517":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","518":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","519":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","520":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","521":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","522":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","523":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","524":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","525":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","526":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","527":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","528":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","529":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","530":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","531":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","532":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","533":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","534":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","535":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","536":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","537":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","538":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","539":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","540":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","541":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","542":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","543":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","544":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","545":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","546":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","547":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","548":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","549":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","550":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","551":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","552":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","553":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","554":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","555":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","556":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","557":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","558":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","559":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","560":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","561":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","562":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","563":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","564":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","565":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","566":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","567":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","568":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","569":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","570":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","571":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","572":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","573":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","574":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","575":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","576":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","577":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","578":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","579":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","580":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","581":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","582":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","583":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","584":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","585":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","586":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","587":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","588":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","589":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","590":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","591":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","592":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","593":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","594":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","595":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","596":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","597":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","598":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","599":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","600":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","601":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","602":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","603":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","604":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","605":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","606":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","607":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","608":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","609":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","610":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","611":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","612":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","613":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","614":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","615":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","616":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","617":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","618":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","619":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","620":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","621":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","622":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","623":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","624":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","625":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","626":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","627":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","628":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","629":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","630":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","631":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","632":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","633":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","634":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","635":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","636":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","637":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","638":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","639":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","640":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","641":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","642":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","643":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","644":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","645":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","646":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","647":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","648":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","649":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","650":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","651":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","652":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","653":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","654":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","655":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","656":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","657":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","658":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","659":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","660":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","661":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","662":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","663":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","664":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","665":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","666":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","667":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","668":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","669":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","670":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","671":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","672":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","673":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","674":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","675":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","676":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","677":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","678":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","679":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","680":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","681":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","682":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","683":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","684":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","685":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","686":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","687":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","688":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","689":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","690":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","691":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","692":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","693":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","694":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","695":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","696":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","697":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","698":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","699":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","700":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","701":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","702":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","703":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","704":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","705":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","706":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","707":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","708":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","709":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","710":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","711":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","712":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","713":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","714":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","715":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","716":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","717":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","718":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","719":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","720":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","721":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","722":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","723":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","724":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","725":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","726":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","727":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","728":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","729":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","730":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","731":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","732":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","733":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","734":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","735":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","736":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","737":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","738":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","739":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","740":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","741":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","742":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","743":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","744":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","745":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","746":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","747":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","748":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","749":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","750":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","751":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","752":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","753":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","754":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","755":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","756":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","757":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","758":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","759":"Foreign_keys = [VOTES.contestant_number = CONTESTANTS.contestant_number,VOTES.state = AREA_CODE_STATE.state]\n","760":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","761":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","762":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","763":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","764":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","765":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","766":"Foreign_keys = [poker_player.People_ID = people.People_ID]\n","767":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","768":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","769":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","770":"Foreign_keys = [TV_series.Channel = TV_Channel.id,Cartoon.Channel = TV_Channel.id]\n","771":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n","772":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","773":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","774":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","775":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","776":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","777":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","778":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","779":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","780":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","781":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","782":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","783":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","784":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","785":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","786":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","787":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","788":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","789":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","790":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","791":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","792":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","793":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","794":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","795":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","796":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","797":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","798":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","799":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","800":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","801":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","802":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","803":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","804":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","805":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","806":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","807":"Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n","808":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","809":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","810":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","811":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","812":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","813":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","814":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","815":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","816":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","817":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","818":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","819":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","820":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","821":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","822":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","823":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","824":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","825":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","826":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","827":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","828":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","829":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","830":"Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n","831":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","832":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","833":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","834":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","835":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","836":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","837":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","838":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","839":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","840":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","841":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","842":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","843":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","844":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","845":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","846":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","847":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","848":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","849":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","850":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","851":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","852":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","853":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","854":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","855":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","856":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","857":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","858":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","859":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","860":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","861":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","862":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","863":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","864":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","865":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","866":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","867":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","868":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","869":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","870":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","871":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","872":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","873":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","874":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","875":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","876":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","877":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","878":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","879":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","880":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","881":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","882":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","883":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","884":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","885":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","886":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","887":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","888":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","889":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","890":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","891":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","892":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","893":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","894":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","895":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","896":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","897":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","898":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","899":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","900":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","901":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","902":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","903":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","904":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","905":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","906":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","907":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","908":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","909":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","910":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","911":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","912":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","913":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","914":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","915":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","916":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","917":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","918":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","919":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","920":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","921":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","922":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","923":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","924":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","925":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","926":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","927":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","928":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","929":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","930":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","931":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","932":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","933":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","934":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","935":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","936":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","937":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","938":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","939":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","940":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","941":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","942":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","943":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","944":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","945":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","946":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","947":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","948":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","949":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","950":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","951":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","952":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","953":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","954":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","955":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","956":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","957":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","958":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","959":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","960":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","961":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","962":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","963":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","964":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","965":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","966":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","967":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","968":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","969":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","970":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","971":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","972":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","973":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","974":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","975":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","976":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","977":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","978":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","979":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","980":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","981":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","982":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","983":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","984":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","985":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","986":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","987":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","988":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","989":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","990":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","991":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","992":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","993":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","994":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","995":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","996":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","997":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","998":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","999":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1000":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","1001":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1002":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1003":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1004":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","1005":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","1006":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","1007":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1008":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1009":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","1010":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","1011":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","1012":"Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n","1013":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1014":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1015":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1016":"Foreign_keys = [song.Singer_ID = singer.Singer_ID]\n","1017":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","1018":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1019":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1020":"Foreign_keys = [Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code,Properties.property_type_code = Ref_Property_Types.property_type_code,Other_Property_Features.property_id = Properties.property_id,Other_Property_Features.feature_id = Other_Available_Features.feature_id]\n","1021":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1022":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1023":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","1024":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1025":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1026":"Foreign_keys = [city.CountryCode = country.Code,countrylanguage.CountryCode = country.Code]\n","1027":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1028":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","1029":"Foreign_keys = [Friend.friend_id = Highschooler.ID,Friend.student_id = Highschooler.ID,Likes.student_id = Highschooler.ID,Likes.liked_id = Highschooler.ID]\n","1030":"Foreign_keys = [orchestra.Conductor_ID = conductor.Conductor_ID,performance.Orchestra_ID = orchestra.Orchestra_ID,show.Performance_ID = performance.Performance_ID]\n","1031":"Foreign_keys = [Dogs.owner_id = Owners.owner_id,Dogs.owner_id = Owners.owner_id,Dogs.size_code = Sizes.size_code,Dogs.breed_code = Breeds.breed_code,Treatments.dog_id = Dogs.dog_id,Treatments.professional_id = Professionals.professional_id,Treatments.treatment_type_code = Treatment_Types.treatment_type_code]\n","1032":"Foreign_keys = [flights.DestAirport = airports.AirportCode,flights.SourceAirport = airports.AirportCode]\n","1033":"Foreign_keys = [Degree_Programs.department_id = Departments.department_id,Sections.course_id = Courses.course_id,Students.permanent_address_id = Addresses.address_id,Students.current_address_id = Addresses.address_id,Student_Enrolment.student_id = Students.student_id,Student_Enrolment.semester_id = Semesters.semester_id,Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id,Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id,Student_Enrolment_Courses.course_id = Courses.course_id,Transcript_Contents.transcript_id = Transcripts.transcript_id,Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id]\n"},"classification":{"0":"NESTED","1":"NON-NESTED","2":"NESTED","3":"EASY","4":"NESTED","5":"NON-NESTED","6":"EASY","7":"NON-NESTED","8":"NESTED","9":"NESTED","10":"NESTED","11":"NESTED","12":"NON-NESTED","13":"NESTED","14":"NON-NESTED","15":"NON-NESTED","16":"NON-NESTED","17":"NON-NESTED","18":"NESTED","19":"NESTED","20":"NESTED","21":"EASY","22":"EASY","23":"EASY","24":"EASY","25":"NESTED","26":"EASY","27":"NESTED","28":"NESTED","29":"NESTED","30":"NESTED","31":"EASY","32":"NON-NESTED","33":"EASY","34":"EASY","35":"NESTED","36":"NESTED","37":"EASY","38":"NESTED","39":"NON-NESTED","40":"NON-NESTED","41":"NON-NESTED","42":"EASY","43":"NESTED","44":"NON-NESTED","45":"EASY","46":"NON-NESTED","47":"NESTED","48":"NON-NESTED","49":"NON-NESTED","50":"NESTED","51":"NON-NESTED","52":"NON-NESTED","53":"NON-NESTED","54":"EASY","55":"EASY","56":"EASY","57":"EASY","58":"EASY","59":"NESTED","60":"NESTED","61":"NON-NESTED","62":"NON-NESTED","63":"NON-NESTED","64":"NESTED","65":"EASY","66":"EASY","67":"EASY","68":"NON-NESTED","69":"NON-NESTED","70":"NESTED","71":"NON-NESTED","72":"NESTED","73":"NON-NESTED","74":"EASY","75":"NESTED","76":"EASY","77":"NON-NESTED","78":"EASY","79":"NESTED","80":"NESTED","81":"NON-NESTED","82":"NESTED","83":"NESTED","84":"NESTED","85":"NON-NESTED","86":"EASY","87":"EASY","88":"NON-NESTED","89":"NESTED","90":"EASY","91":"NESTED","92":"NON-NESTED","93":"EASY","94":"EASY","95":"NESTED","96":"EASY","97":"EASY","98":"NON-NESTED","99":"NON-NESTED","100":"NESTED","101":"EASY","102":"NON-NESTED","103":"NESTED","104":"NESTED","105":"EASY","106":"NON-NESTED","107":"NESTED","108":"NESTED","109":"NON-NESTED","110":"NESTED","111":"EASY","112":"EASY","113":"EASY","114":"NESTED","115":"NON-NESTED","116":"EASY","117":"NESTED","118":"EASY","119":"NON-NESTED","120":"NON-NESTED","121":"NON-NESTED","122":"EASY","123":"EASY","124":"EASY","125":"NESTED","126":"NON-NESTED","127":"NON-NESTED","128":"NON-NESTED","129":"EASY","130":"EASY","131":"NESTED","132":"EASY","133":"EASY","134":"EASY","135":"NON-NESTED","136":"NESTED","137":"EASY","138":"NESTED","139":"NESTED","140":"NESTED","141":"EASY","142":"NESTED","143":"EASY","144":"EASY","145":"NESTED","146":"NON-NESTED","147":"NESTED","148":"NON-NESTED","149":"NESTED","150":"NESTED","151":"NON-NESTED","152":"NESTED","153":"NESTED","154":"NESTED","155":"NESTED","156":"NON-NESTED","157":"NESTED","158":"EASY","159":"NON-NESTED","160":"EASY","161":"EASY","162":"NESTED","163":"EASY","164":"NESTED","165":"NESTED","166":"EASY","167":"NESTED","168":"NON-NESTED","169":"NON-NESTED","170":"EASY","171":"NON-NESTED","172":"EASY","173":"NESTED","174":"NESTED","175":"NON-NESTED","176":"NON-NESTED","177":"EASY","178":"EASY","179":"EASY","180":"NESTED","181":"NESTED","182":"NESTED","183":"EASY","184":"NESTED","185":"NESTED","186":"NON-NESTED","187":"NON-NESTED","188":"NESTED","189":"EASY","190":"EASY","191":"EASY","192":"NESTED","193":"NON-NESTED","194":"NESTED","195":"NESTED","196":"NESTED","197":"EASY","198":"NON-NESTED","199":"EASY","200":"EASY","201":"NESTED","202":"NON-NESTED","203":"EASY","204":"NESTED","205":"NESTED","206":"EASY","207":"EASY","208":"NESTED","209":"NESTED","210":"NON-NESTED","211":"EASY","212":"NON-NESTED","213":"NESTED","214":"NON-NESTED","215":"NON-NESTED","216":"NESTED","217":"EASY","218":"NESTED","219":"EASY","220":"NON-NESTED","221":"NESTED","222":"NON-NESTED","223":"NESTED","224":"EASY","225":"EASY","226":"NESTED","227":"NESTED","228":"NESTED","229":"NESTED","230":"EASY","231":"NON-NESTED","232":"EASY","233":"NESTED","234":"EASY","235":"NON-NESTED","236":"NON-NESTED","237":"NESTED","238":"EASY","239":"NESTED","240":"EASY","241":"EASY","242":"NESTED","243":"EASY","244":"EASY","245":"EASY","246":"EASY","247":"NESTED","248":"NESTED","249":"NON-NESTED","250":"EASY","251":"NON-NESTED","252":"NESTED","253":"EASY","254":"NON-NESTED","255":"EASY","256":"NESTED","257":"NESTED","258":"NON-NESTED","259":"NESTED","260":"EASY","261":"NON-NESTED","262":"EASY","263":"EASY","264":"NESTED","265":"NON-NESTED","266":"NON-NESTED","267":"NESTED","268":"EASY","269":"EASY","270":"EASY","271":"NON-NESTED","272":"EASY","273":"EASY","274":"NESTED","275":"EASY","276":"EASY","277":"EASY","278":"NESTED","279":"NESTED","280":"NESTED","281":"EASY","282":"EASY","283":"EASY","284":"EASY","285":"EASY","286":"NESTED","287":"EASY","288":"EASY","289":"EASY","290":"EASY","291":"NESTED","292":"NON-NESTED","293":"NON-NESTED","294":"NESTED","295":"NON-NESTED","296":"EASY","297":"EASY","298":"EASY","299":"EASY","300":"NESTED","301":"EASY","302":"EASY","303":"NON-NESTED","304":"EASY","305":"EASY","306":"NON-NESTED","307":"NESTED","308":"EASY","309":"EASY","310":"NESTED","311":"EASY","312":"EASY","313":"NESTED","314":"NON-NESTED","315":"NON-NESTED","316":"NON-NESTED","317":"EASY","318":"NESTED","319":"NON-NESTED","320":"EASY","321":"NESTED","322":"NESTED","323":"NESTED","324":"EASY","325":"NESTED","326":"NESTED","327":"NESTED","328":"NESTED","329":"NESTED","330":"NESTED","331":"EASY","332":"EASY","333":"EASY","334":"NESTED","335":"NESTED","336":"EASY","337":"NON-NESTED","338":"EASY","339":"EASY","340":"EASY","341":"NESTED","342":"EASY","343":"NESTED","344":"NESTED","345":"NON-NESTED","346":"NON-NESTED","347":"NON-NESTED","348":"NESTED","349":"NESTED","350":"EASY","351":"NON-NESTED","352":"NON-NESTED","353":"NON-NESTED","354":"EASY","355":"NESTED","356":"NESTED","357":"NESTED","358":"EASY","359":"NESTED","360":"EASY","361":"NESTED","362":"NON-NESTED","363":"EASY","364":"NON-NESTED","365":"EASY","366":"NESTED","367":"EASY","368":"NESTED","369":"NESTED","370":"NON-NESTED","371":"NON-NESTED","372":"EASY","373":"EASY","374":"NESTED","375":"NON-NESTED","376":"NESTED","377":"NON-NESTED","378":"NESTED","379":"EASY","380":"NON-NESTED","381":"NESTED","382":"NON-NESTED","383":"EASY","384":"EASY","385":"EASY","386":"EASY","387":"NESTED","388":"EASY","389":"NESTED","390":"EASY","391":"EASY","392":"NESTED","393":"EASY","394":"EASY","395":"NESTED","396":"EASY","397":"NON-NESTED","398":"NESTED","399":"NON-NESTED","400":"EASY","401":"NON-NESTED","402":"NESTED","403":"EASY","404":"EASY","405":"NON-NESTED","406":"EASY","407":"EASY","408":"NON-NESTED","409":"EASY","410":"NESTED","411":"NESTED","412":"NESTED","413":"EASY","414":"NESTED","415":"EASY","416":"NESTED","417":"NESTED","418":"NESTED","419":"NON-NESTED","420":"EASY","421":"EASY","422":"NESTED","423":"NON-NESTED","424":"NESTED","425":"EASY","426":"EASY","427":"NESTED","428":"NESTED","429":"EASY","430":"EASY","431":"NESTED","432":"EASY","433":"NON-NESTED","434":"NESTED","435":"EASY","436":"NON-NESTED","437":"NESTED","438":"NESTED","439":"EASY","440":"EASY","441":"EASY","442":"NON-NESTED","443":"EASY","444":"NESTED","445":"NESTED","446":"NESTED","447":"NON-NESTED","448":"EASY","449":"NESTED","450":"NON-NESTED","451":"EASY","452":"EASY","453":"EASY","454":"EASY","455":"NESTED","456":"EASY","457":"EASY","458":"NESTED","459":"NON-NESTED","460":"NESTED","461":"NESTED","462":"EASY","463":"EASY","464":"NON-NESTED","465":"EASY","466":"NESTED","467":"NON-NESTED","468":"NESTED","469":"EASY","470":"NON-NESTED","471":"NON-NESTED","472":"NESTED","473":"NON-NESTED","474":"NESTED","475":"NESTED","476":"EASY","477":"NESTED","478":"EASY","479":"EASY","480":"NON-NESTED","481":"NESTED","482":"EASY","483":"NON-NESTED","484":"EASY","485":"NON-NESTED","486":"NON-NESTED","487":"EASY","488":"EASY","489":"EASY","490":"NESTED","491":"NON-NESTED","492":"NESTED","493":"NESTED","494":"EASY","495":"NESTED","496":"NESTED","497":"EASY","498":"NESTED","499":"EASY","500":"EASY","501":"EASY","502":"NESTED","503":"EASY","504":"NESTED","505":"EASY","506":"EASY","507":"EASY","508":"NESTED","509":"NESTED","510":"EASY","511":"NESTED","512":"NESTED","513":"NESTED","514":"NON-NESTED","515":"EASY","516":"NESTED","517":"EASY","518":"EASY","519":"NESTED","520":"NON-NESTED","521":"NESTED","522":"NESTED","523":"NESTED","524":"EASY","525":"EASY","526":"NESTED","527":"EASY","528":"EASY","529":"NESTED","530":"NESTED","531":"NESTED","532":"EASY","533":"EASY","534":"EASY","535":"NESTED","536":"EASY","537":"EASY","538":"NESTED","539":"EASY","540":"EASY","541":"NESTED","542":"NESTED","543":"NESTED","544":"NON-NESTED","545":"NESTED","546":"NESTED","547":"EASY","548":"EASY","549":"NESTED","550":"NON-NESTED","551":"EASY","552":"EASY","553":"NESTED","554":"NESTED","555":"NON-NESTED","556":"EASY","557":"EASY","558":"EASY","559":"EASY","560":"EASY","561":"EASY","562":"NON-NESTED","563":"NON-NESTED","564":"NESTED","565":"EASY","566":"NESTED","567":"NON-NESTED","568":"NESTED","569":"NESTED","570":"EASY","571":"NESTED","572":"EASY","573":"NON-NESTED","574":"NESTED","575":"NESTED","576":"NESTED","577":"NESTED","578":"EASY","579":"NON-NESTED","580":"NESTED","581":"NESTED","582":"EASY","583":"NESTED","584":"NESTED","585":"EASY","586":"EASY","587":"NON-NESTED","588":"NESTED","589":"EASY","590":"NESTED","591":"NESTED","592":"NESTED","593":"NON-NESTED","594":"NESTED","595":"NESTED","596":"EASY","597":"NESTED","598":"NON-NESTED","599":"NON-NESTED","600":"NESTED","601":"NON-NESTED","602":"NESTED","603":"NON-NESTED","604":"EASY","605":"NESTED","606":"EASY","607":"EASY","608":"NESTED","609":"NESTED","610":"NON-NESTED","611":"NESTED","612":"NESTED","613":"EASY","614":"NESTED","615":"EASY","616":"NESTED","617":"EASY","618":"EASY","619":"NESTED","620":"NON-NESTED","621":"NESTED","622":"NESTED","623":"NON-NESTED","624":"NESTED","625":"NESTED","626":"EASY","627":"NESTED","628":"NESTED","629":"NESTED","630":"EASY","631":"NESTED","632":"NESTED","633":"EASY","634":"EASY","635":"EASY","636":"NESTED","637":"NESTED","638":"NESTED","639":"EASY","640":"EASY","641":"EASY","642":"NESTED","643":"EASY","644":"NESTED","645":"EASY","646":"NESTED","647":"NESTED","648":"NESTED","649":"NESTED","650":"EASY","651":"EASY","652":"NESTED","653":"EASY","654":"EASY","655":"EASY","656":"NESTED","657":"EASY","658":"NESTED","659":"NESTED","660":"EASY","661":"EASY","662":"NON-NESTED","663":"EASY","664":"EASY","665":"NON-NESTED","666":"EASY","667":"NESTED","668":"EASY","669":"EASY","670":"NON-NESTED","671":"NESTED","672":"NON-NESTED","673":"NESTED","674":"EASY","675":"EASY","676":"NESTED","677":"EASY","678":"NESTED","679":"EASY","680":"NESTED","681":"EASY","682":"NON-NESTED","683":"NESTED","684":"NESTED","685":"NESTED","686":"NESTED","687":"NESTED","688":"NESTED","689":"NESTED","690":"NESTED","691":"NON-NESTED","692":"NESTED","693":"EASY","694":"NON-NESTED","695":"NESTED","696":"EASY","697":"EASY","698":"EASY","699":"NESTED","700":"NESTED","701":"NESTED","702":"NESTED","703":"EASY","704":"EASY","705":"NESTED","706":"EASY","707":"NESTED","708":"NESTED","709":"EASY","710":"NESTED","711":"EASY","712":"EASY","713":"NESTED","714":"NESTED","715":"EASY","716":"EASY","717":"EASY","718":"NON-NESTED","719":"NESTED","720":"NESTED","721":"NESTED","722":"NESTED","723":"NESTED","724":"NESTED","725":"NON-NESTED","726":"EASY","727":"EASY","728":"NESTED","729":"EASY","730":"NON-NESTED","731":"EASY","732":"NESTED","733":"EASY","734":"NESTED","735":"EASY","736":"NESTED","737":"NON-NESTED","738":"EASY","739":"EASY","740":"NESTED","741":"NESTED","742":"NESTED","743":"EASY","744":"EASY","745":"NESTED","746":"NON-NESTED","747":"NESTED","748":"EASY","749":"EASY","750":"EASY","751":"EASY","752":"NESTED","753":"NESTED","754":"EASY","755":"EASY","756":"NON-NESTED","757":"NESTED","758":"NESTED","759":"EASY","760":"NESTED","761":"EASY","762":"NON-NESTED","763":"NON-NESTED","764":"EASY","765":"NON-NESTED","766":"NESTED","767":"NESTED","768":"EASY","769":"EASY","770":"NON-NESTED","771":"EASY","772":"EASY","773":"NESTED","774":"NON-NESTED","775":"EASY","776":"NON-NESTED","777":"NON-NESTED","778":"NESTED","779":"NESTED","780":"EASY","781":"EASY","782":"NESTED","783":"EASY","784":"NESTED","785":"NESTED","786":"EASY","787":"NESTED","788":"NON-NESTED","789":"NESTED","790":"NESTED","791":"NESTED","792":"EASY","793":"EASY","794":"EASY","795":"NESTED","796":"EASY","797":"NESTED","798":"NESTED","799":"EASY","800":"NESTED","801":"EASY","802":"EASY","803":"NESTED","804":"EASY","805":"NESTED","806":"NESTED","807":"NESTED","808":"EASY","809":"EASY","810":"EASY","811":"EASY","812":"NESTED","813":"EASY","814":"NESTED","815":"EASY","816":"EASY","817":"NESTED","818":"EASY","819":"NESTED","820":"EASY","821":"NESTED","822":"NESTED","823":"EASY","824":"NESTED","825":"NESTED","826":"EASY","827":"NON-NESTED","828":"EASY","829":"NESTED","830":"NESTED","831":"NESTED","832":"NON-NESTED","833":"EASY","834":"EASY","835":"NESTED","836":"NESTED","837":"EASY","838":"EASY","839":"NON-NESTED","840":"NESTED","841":"NESTED","842":"NESTED","843":"NESTED","844":"NESTED","845":"NESTED","846":"EASY","847":"EASY","848":"EASY","849":"NESTED","850":"NON-NESTED","851":"EASY","852":"NESTED","853":"EASY","854":"EASY","855":"NON-NESTED","856":"NESTED","857":"NESTED","858":"NESTED","859":"EASY","860":"NESTED","861":"EASY","862":"NESTED","863":"EASY","864":"NESTED","865":"NON-NESTED","866":"NESTED","867":"EASY","868":"NESTED","869":"NESTED","870":"EASY","871":"EASY","872":"NESTED","873":"NESTED","874":"NESTED","875":"NESTED","876":"NESTED","877":"NESTED","878":"NESTED","879":"NESTED","880":"NON-NESTED","881":"NESTED","882":"EASY","883":"NON-NESTED","884":"EASY","885":"NESTED","886":"EASY","887":"NESTED","888":"EASY","889":"NESTED","890":"NESTED","891":"NON-NESTED","892":"NON-NESTED","893":"NESTED","894":"NESTED","895":"NESTED","896":"NESTED","897":"NON-NESTED","898":"NON-NESTED","899":"EASY","900":"NON-NESTED","901":"NON-NESTED","902":"NON-NESTED","903":"NESTED","904":"EASY","905":"EASY","906":"EASY","907":"EASY","908":"EASY","909":"NESTED","910":"EASY","911":"NESTED","912":"EASY","913":"EASY","914":"NESTED","915":"EASY","916":"EASY","917":"NON-NESTED","918":"NESTED","919":"NESTED","920":"NON-NESTED","921":"NESTED","922":"NESTED","923":"NESTED","924":"NESTED","925":"NESTED","926":"NESTED","927":"NON-NESTED","928":"NON-NESTED","929":"NON-NESTED","930":"NESTED","931":"NESTED","932":"NESTED","933":"EASY","934":"NESTED","935":"NESTED","936":"NESTED","937":"NON-NESTED","938":"EASY","939":"EASY","940":"NESTED","941":"NESTED","942":"NESTED","943":"EASY","944":"NESTED","945":"NESTED","946":"NESTED","947":"NESTED","948":"NON-NESTED","949":"NON-NESTED","950":"NESTED","951":"EASY","952":"NESTED","953":"NESTED","954":"NON-NESTED","955":"NESTED","956":"EASY","957":"NON-NESTED","958":"NON-NESTED","959":"EASY","960":"EASY","961":"NESTED","962":"EASY","963":"NON-NESTED","964":"NESTED","965":"NESTED","966":"NESTED","967":"EASY","968":"NESTED","969":"EASY","970":"NESTED","971":"NON-NESTED","972":"EASY","973":"NON-NESTED","974":"NON-NESTED","975":"NESTED","976":"NESTED","977":"EASY","978":"NESTED","979":"NESTED","980":"NESTED","981":"EASY","982":"NESTED","983":"EASY","984":"NESTED","985":"EASY","986":"NESTED","987":"EASY","988":"EASY","989":"NESTED","990":"NESTED","991":"NON-NESTED","992":"NON-NESTED","993":"EASY","994":"NON-NESTED","995":"NESTED","996":"NESTED","997":"EASY","998":"NESTED","999":"EASY","1000":"NESTED","1001":"NESTED","1002":"NESTED","1003":"NON-NESTED","1004":"NESTED","1005":"EASY","1006":"NESTED","1007":"NESTED","1008":"EASY","1009":"NON-NESTED","1010":"EASY","1011":"EASY","1012":"NON-NESTED","1013":"EASY","1014":"NESTED","1015":"NESTED","1016":"NON-NESTED","1017":"EASY","1018":"NON-NESTED","1019":"EASY","1020":"EASY","1021":"NON-NESTED","1022":"NESTED","1023":"EASY","1024":"NESTED","1025":"NESTED","1026":"EASY","1027":"NESTED","1028":"EASY","1029":"NESTED","1030":"NESTED","1031":"NON-NESTED","1032":"NESTED","1033":"NESTED"},"predicted_sql":{"0":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;","1":"SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;","2":"SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);","3":"SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = 'UAL';","4":"SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);","5":"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';","6":"SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150;","7":"SELECT carmakers.Maker, model_list.Model FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id;","8":"SELECT airports.AirportCode FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;","9":"SELECT model_list.Model, COUNT(DISTINCT car_names.Make) AS version_count FROM model_list JOIN car_names ON car_names.Model = model_list.Model GROUP BY model_list.Model ORDER BY version_count DESC LIMIT 1;","10":"SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON flights.Airline = airlines.Airline GROUP BY airlines.Abbreviation, airlines.Country ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;","11":"SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.ModelId) > 3;","12":"SELECT DISTINCT car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = 1970;","13":"SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;","14":"SELECT carmakers.Id, carmakers.FullName, COUNT(modellist.Model) AS NumberOfModels FROM carmakers JOIN modellist ON modellist.Maker = carmakers.Id GROUP BY carmakers.Id, carmakers.FullName;","15":"SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","16":"SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS destination ON flights.DestAirport = destination.AirportCode WHERE source.City = 'Aberdeen' AND destination.City = 'Ashley';","17":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.Airline) < 200;","18":"SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' );","19":"SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;","20":"SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);","21":"SELECT AVG(singer.Age) AS average_age, MIN(singer.Age) AS minimum_age, MAX(singer.Age) AS maximum_age FROM singer WHERE singer.Country = 'French';","22":"SELECT cars_data.Year, AVG(cars_data.Weight) AS average_weight FROM cars_data GROUP BY cars_data.Year;","23":"SELECT singer.Name, singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Song_Name LIKE '%Hey%';","24":"SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;","25":"SELECT car_names.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 4 GROUP BY car_names.Model ORDER BY MaxHorsepower DESC LIMIT 1;","26":"SELECT COUNT(*) FROM cars_data WHERE cars_data.Year = 1980;","27":"SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');","28":"SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;","29":"SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType <> 'cat';","30":"SELECT COUNT(Has_Pet.PetID) AS total_pets FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;","31":"SELECT AVG(cars_data.Horsepower) AS average_horsepower FROM cars_data WHERE cars_data.Year < 1980;","32":"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.City = 'Aberdeen';","33":"SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'USA';","34":"SELECT COUNT(*) AS total_countries FROM countries;","35":"SELECT COUNT(*) AS number_of_concerts FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);","36":"SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;","37":"SELECT AVG(stadium.Capacity) AS average_capacity, MAX(stadium.Capacity) AS maximum_capacity FROM stadium;","38":"SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets);","39":"SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'amc hornet sportabout (sw)';","40":"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';","41":"SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;","42":"SELECT COUNT(*) AS number_of_flights FROM flights WHERE flights.Airline = 'Jetblue Airways';","43":"SELECT Year, COUNT(concert_ID) AS concert_count FROM concert GROUP BY Year HAVING COUNT(concert_ID) = (SELECT MAX(concert_count) FROM (SELECT COUNT(concert_ID) AS concert_count FROM concert GROUP BY Year) AS yearly_counts);","44":"SELECT COUNT(*) FROM flights WHERE flights.DestAirport = 'ATO';","45":"SELECT singer.Country, COUNT(*) AS singer_count FROM singer GROUP BY singer.Country;","46":"SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY continents.ContId, continents.Continent;","47":"SELECT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON cars_data.Id = car_names.MakeId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName != 'Ford Motor Company';","48":"SELECT COUNT(Pets.PetID) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';","49":"SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';","50":"SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';","51":"SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';","52":"SELECT continents.Continent, COUNT(car_makers.Id) AS MakerCount FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY continents.Continent;","53":"SELECT Student.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;","54":"SELECT airports.AirportName FROM airports WHERE airports.City = 'Aberdeen';","55":"SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1;","56":"SELECT COUNT(*) FROM concert WHERE concert.Year IN (2014, 2015);","57":"SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'United Airlines';","58":"SELECT COUNT(*) AS number_of_airlines FROM airlines WHERE airlines.Country = 'USA';","59":"SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;","60":"SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');","61":"SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;","62":"SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId, countries.CountryName;","63":"SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = 1980;","64":"SELECT car_names.Model, cars_data.Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;","65":"SELECT COUNT(*) AS flight_count FROM flights WHERE flights.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD';","66":"SELECT COUNT(*) AS total_singers FROM singer;","67":"SELECT COUNT(*) AS flight_count FROM flights WHERE flights.Airline = 'JetBlue Airways';","68":"SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents JOIN countries ON countries.Continent = continents.ContId GROUP BY continents.ContId, continents.Continent;","69":"SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;","70":"SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;","71":"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","72":"SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);","73":"SELECT COUNT(*) FROM flights WHERE flights.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD';","74":"SELECT COUNT(*) FROM Pets WHERE Pets.weight > 10;","75":"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014);","76":"SELECT COUNT(*) AS total_countries FROM countries;","77":"SELECT COUNT(*) FROM flights WHERE flights.DestAirport = 'ATO';","78":"SELECT COUNT(*) AS number_of_cars FROM cars_data WHERE cars_data.Cylinders > 4;","79":"SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;","80":"SELECT AVG(Age) AS average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);","81":"SELECT COUNT(carmakers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';","82":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO') GROUP BY airlines.Airline HAVING COUNT(DISTINCT flights.SourceAirport) = 2;","83":"SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(cars_data.Id) > 3;","84":"SELECT DISTINCT Country FROM singer WHERE Age > 40 OR Age < 30;","85":"SELECT continents.Continent, COUNT(car_makers.Id) AS NumberOfCarMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY continents.Continent;","86":"SELECT flights.FlightNo FROM flights WHERE flights.Airline = 'United Airlines';","87":"SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS maximum_age FROM Pets GROUP BY Pets.PetType;","88":"SELECT Pets.PetType, AVG(Pets.weight) AS average_weight FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;","89":"SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'));","90":"SELECT Pets.PetType, Pets.weight FROM Pets WHERE Pets.pet_age = (SELECT MIN(pet_age) FROM Pets);","91":"SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3;","92":"SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;","93":"SELECT COUNT(DISTINCT airlines.Airline) AS total_airlines FROM airlines;","94":"SELECT COUNT(DISTINCT Pets.PetType) AS different_pet_types FROM Pets;","95":"SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;","96":"SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;","97":"SELECT MIN(cars_data.Weight) AS smallest_weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;","98":"SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Cylinders = 3 GROUP BY car_names.Make;","99":"SELECT airports.City, COUNT(flights.FlightNo) AS NumberOfDepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY NumberOfDepartingFlights DESC LIMIT 1;","100":"SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3;","101":"SELECT MIN(cars_data.Weight) AS min_weight FROM cars_data WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;","102":"SELECT DISTINCT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year > 1980;","103":"SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);","104":"SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');","105":"SELECT COUNT(DISTINCT Pets.PetType) AS distinct_pet_types FROM Pets;","106":"SELECT Pets.PetType, AVG(Pets.pet_age) AS average_age, MAX(Pets.pet_age) AS maximum_age FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID GROUP BY Pets.PetType;","107":"SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company';","108":"SELECT airports.City FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1;","109":"SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","110":"SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);","111":"SELECT COUNT(*) AS flight_count FROM flights WHERE flights.SourceAirport = 'APG';","112":"SELECT cars_data.Year, AVG(cars_data.Weight) AS average_weight FROM cars_data GROUP BY cars_data.Year;","113":"SELECT flights.Airline, COUNT(*) AS flight_count FROM flights GROUP BY flights.Airline ORDER BY flight_count DESC LIMIT 1;","114":"SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG');","115":"SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';","116":"SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO';","117":"SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower = (SELECT MIN(Horsepower) FROM cars_data);","118":"SELECT COUNT(*) AS number_of_cars FROM cars_data WHERE cars_data.Cylinders > 6;","119":"SELECT COUNT(*) FROM flights WHERE flights.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';","120":"SELECT DISTINCT flights.Airline FROM flights WHERE flights.SourceAirport = 'AHD';","121":"SELECT stadium.Name, COUNT(concert.concert_ID) AS number_of_concerts FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name;","122":"SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;","123":"SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';","124":"SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;","125":"SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId WHERE countries.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3;","126":"SELECT flights.Airline FROM flights WHERE flights.DestAirport = 'AHD';","127":"SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;","128":"SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.Horsepower ASC LIMIT 1;","129":"SELECT COUNT(*) AS total_singers FROM singer;","130":"SELECT Pets.PetType, AVG(Pets.weight) AS average_weight FROM Pets GROUP BY Pets.PetType;","131":"SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');","132":"SELECT airports.AirportName FROM airports WHERE airports.AirportCode = 'AKO';","133":"SELECT flights.Airline FROM flights GROUP BY flights.Airline ORDER BY COUNT(*) DESC LIMIT 1;","134":"SELECT COUNT(*) AS total_airlines FROM airlines;","135":"SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_names.Model = 'hornet sportabout (sw)';","136":"SELECT car_names.Make, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);","137":"SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = 'JetBlue Airways';","138":"SELECT model_list.Model, COUNT(cars_data.Id) AS version_count FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY model_list.Model ORDER BY version_count DESC LIMIT 1;","139":"SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID, Student.Fname, Student.Sex HAVING COUNT(Has_Pet.PetID) > 1;","140":"SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = 2014 WHERE concert.concert_ID IS NULL;","141":"SELECT COUNT(DISTINCT airports.AirportCode) AS number_of_airports FROM airports;","142":"SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;","143":"SELECT airlines.Airline, airlines.Abbreviation FROM airlines WHERE airlines.Country = 'USA';","144":"SELECT COUNT(*) FROM concert WHERE concert.Year = 2014 OR concert.Year = 2015;","145":"SELECT AVG(cars_data.Edispl) AS average_edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'volvo';","146":"SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';","147":"SELECT Student.StuID, COUNT(Has_Pet.PetID) AS pet_count FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Student.StuID;","148":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.DestAirport = 'AHD';","149":"SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3;","150":"SELECT COUNT(countries.CountryId) AS NumberOfCountries FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 2;","151":"SELECT car_names.Model, cars_data.MPG FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1;","152":"SELECT airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON flights.Airline = airlines.Airline GROUP BY airlines.Abbreviation, airlines.Country ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;","153":"SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);","154":"SELECT car_makers.Id, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data);","155":"SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog') AND Student.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));","156":"SELECT carmakers.Maker, model_list.Model FROM carmakers JOIN model_list ON model_list.Maker = carmakers.Id;","157":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;","158":"SELECT COUNT(DISTINCT airlines.uid) FROM airlines WHERE airlines.Country = 'USA';","159":"SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","160":"SELECT singer.Name, singer.Country, singer.Age FROM singer ORDER BY singer.Age DESC;","161":"SELECT cars_data.Cylinders, MAX(cars_data.Accelerate) AS max_accelerate FROM cars_data GROUP BY cars_data.Cylinders;","162":"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);","163":"SELECT DISTINCT singer.Country FROM singer WHERE singer.Age > 20;","164":"SELECT COUNT(countries.CountryId) AS CountryCount FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 2;","165":"SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;","166":"SELECT COUNT(*) AS total_airports FROM airports;","167":"SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company');","168":"SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Year > 1980;","169":"SELECT COUNT(model_list.Model) AS ModelCount, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName;","170":"SELECT cars_data.Year FROM cars_data WHERE cars_data.Weight BETWEEN 3000 AND 4000;","171":"SELECT flights.FlightNo FROM flights WHERE flights.DestAirport = 'APG';","172":"SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType;","173":"SELECT airports.AirportCode FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY airports.AirportCode ORDER BY COUNT(flights.FlightNo) ASC LIMIT 1;","174":"SELECT car_makers.Id, car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Make = car_makers.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;","175":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';","176":"SELECT flights.FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","177":"SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = 'Jetblue Airways';","178":"SELECT AVG(cars_data.MPG) AS average_mpg FROM cars_data WHERE cars_data.Cylinders = 4;","179":"SELECT COUNT(*) FROM cars_data WHERE cars_data.Horsepower > 150;","180":"SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;","181":"SELECT Has_Pet.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';","182":"SELECT COUNT(*) AS number_of_models FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa';","183":"SELECT COUNT(DISTINCT continents.ContId) AS total_continents FROM continents;","184":"SELECT countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1;","185":"SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) >= 2 AND (SELECT COUNT(*) FROM car_makers) > 3;","186":"SELECT stadium.Stadium_ID, COUNT(concert.concert_ID) AS concert_count FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Stadium_ID;","187":"SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","188":"SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);","189":"SELECT airports.AirportName FROM airports WHERE airports.City = 'Aberdeen';","190":"SELECT airports.City, airports.Country FROM airports WHERE airports.AirportName = 'Alton';","191":"SELECT singer.Country, COUNT(singer.Singer_ID) AS number_of_singers FROM singer GROUP BY singer.Country;","192":"SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;","193":"SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","194":"SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'female' AND Pets.PetType = 'dog';","195":"SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_names.Model = model_list.Model JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE car_makers.Maker = 'General Motors' OR cars_data.Weight > 3500;","196":"SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID, stadium.Name, stadium.Location HAVING COUNT(DISTINCT concert.Year) = 2;","197":"SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';","198":"SELECT car_names.Model, cars_data.MPG FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.MPG DESC LIMIT 1;","199":"SELECT MAX(stadium.Capacity) AS max_capacity, AVG(stadium.Capacity) AS avg_capacity FROM stadium;","200":"SELECT COUNT(*) AS flight_count FROM flights WHERE flights.SourceAirport = 'APG';","201":"SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType <> 'cat';","202":"SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';","203":"SELECT AVG(cars_data.MPG) AS average_mpg FROM cars_data WHERE cars_data.Cylinders = 4;","204":"SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID, Student.Fname, Student.Sex HAVING COUNT(Has_Pet.PetID) > 1;","205":"SELECT countries.CountryId, countries.CountryName FROM countries LEFT JOIN car_makers ON car_makers.Country = countries.CountryId LEFT JOIN car_names ON car_names.MakeId = car_makers.Id GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(car_makers.Id) > 3 OR SUM(CASE WHEN car_names.Model = 'fiat' THEN 1 ELSE 0 END) > 0;","206":"SELECT stadium.Name, stadium.Capacity FROM stadium ORDER BY stadium.Average DESC LIMIT 1;","207":"SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';","208":"SELECT countries.CountryId, countries.CountryName FROM countries LEFT JOIN car_makers ON car_makers.Country = countries.CountryId LEFT JOIN car_names ON car_names.MakeId = car_makers.Id GROUP BY countries.CountryId, countries.CountryName HAVING COUNT(car_makers.Id) > 3 OR SUM(CASE WHEN car_names.Model = 'fiat' THEN 1 ELSE 0 END) > 0;","209":"SELECT Has_Pet.PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';","210":"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.Airline = 'United Airlines' AND airports.AirportName = 'Aberdeen';","211":"SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;","212":"SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;","213":"SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);","214":"SELECT airports.City, COUNT(flights.FlightNo) AS NumberOfArrivingFlights FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY NumberOfArrivingFlights DESC LIMIT 1;","215":"SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014;","216":"SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId, countries.CountryName;","217":"SELECT stadium.Location, stadium.Name FROM stadium WHERE stadium.Capacity BETWEEN 5000 AND 10000;","218":"SELECT car_names.Model FROM car_names JOIN cars_data ON cars_data.Id = car_names.MakeId WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);","219":"SELECT concert.Year FROM concert GROUP BY concert.Year ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;","220":"SELECT carmakers.FullName, carmakers.Id, COUNT(modellist.Model) AS ModelCount FROM carmakers JOIN modellist ON modellist.Maker = carmakers.Id GROUP BY carmakers.Id;","221":"SELECT car_names.Make, MAX(cars_data.Horsepower) AS max_horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY max_horsepower DESC LIMIT 1;","222":"SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName, car_makers.Id;","223":"SELECT airports.City FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY airports.City ORDER BY COUNT(flights.FlightNo) DESC LIMIT 1;","224":"SELECT COUNT(DISTINCT continents.ContId) AS number_of_continents FROM continents;","225":"SELECT Pets.PetType, MAX(Pets.weight) AS max_weight FROM Pets GROUP BY Pets.PetType;","226":"SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);","227":"SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;","228":"SELECT Student.Major, Student.Age FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType <> 'cat';","229":"SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);","230":"SELECT AVG(cars_data.Horsepower) AS average_horsepower FROM cars_data WHERE cars_data.Year < 1980;","231":"SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = 'APG';","232":"SELECT COUNT(*) AS total_flights FROM flights;","233":"SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) < 200;","234":"SELECT cars_data.Cylinders, MAX(cars_data.Accelerate) AS max_accelerate FROM cars_data GROUP BY cars_data.Cylinders;","235":"SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970;","236":"SELECT stadium.Name, stadium.Capacity FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Name, stadium.Capacity ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1;","237":"SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights);","238":"SELECT COUNT(*) AS total_flights FROM flights;","239":"SELECT COUNT(Has_Pet.PetID) AS number_of_pets FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;","240":"SELECT airlines.Airline FROM airlines WHERE airlines.Abbreviation = 'UAL';","241":"SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'JetBlue Airways';","242":"SELECT COUNT(*) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium);","243":"SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 6;","244":"SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'Jetblue Airways';","245":"SELECT COUNT(*) FROM cars_data WHERE cars_data.Cylinders > 4;","246":"SELECT COUNT(*) AS number_of_pets FROM Pets WHERE Pets.weight > 10;","247":"SELECT singer.Name, singer.Song_Name, singer.Song_release_year FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID WHERE singer.Age = (SELECT MIN(Age) FROM singer);","248":"SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog') GROUP BY Student.StuID HAVING COUNT(DISTINCT Pets.PetType) = 2;","249":"SELECT COUNT(*) FROM flights WHERE flights.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';","250":"SELECT AVG(singer.Age) AS average_age, MIN(singer.Age) AS minimum_age, MAX(singer.Age) AS maximum_age FROM singer WHERE singer.Country = 'France';","251":"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';","252":"SELECT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IS NULL OR Pets.PetType <> 'cat';","253":"SELECT cars_data.Horsepower FROM cars_data ORDER BY cars_data.Accelerate DESC LIMIT 1;","254":"SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley';","255":"SELECT airports.AirportCode, airports.AirportName FROM airports WHERE airports.City = 'Anthony';","256":"SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo' AND cars_data.Accelerate = (SELECT MIN(Accelerate) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo');","257":"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));","258":"SELECT Courses.course_name, Courses.course_description FROM Courses WHERE Courses.course_name = 'math';","259":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;","260":"SELECT museum.Open_Year, museum.Num_of_Staff FROM museum WHERE museum.Name = 'Plaza Museum';","261":"SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY players.ranking_points DESC LIMIT 1;","262":"SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;","263":"SELECT COUNT(*) FROM visitor WHERE visitor.Age < 30;","264":"SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights);","265":"SELECT SUM(visit.Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1;","266":"SELECT players.first_name, players.country_code FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;","267":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_Text) = 2;","268":"SELECT rankings.ranking_date, SUM(rankings.tours) AS total_tours FROM rankings GROUP BY rankings.ranking_date;","269":"SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1;","270":"SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;","271":"SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Book';","272":"SELECT COUNT(*) AS total_employees FROM employee;","273":"SELECT DISTINCT Templates.Template_Type_Code FROM Templates;","274":"SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Templates.Template_Type_Code = 'BK';","275":"SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';","276":"SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'left' ORDER BY players.birth_date ASC;","277":"SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;","278":"SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code HAVING COUNT(Documents.Document_ID) = (SELECT MAX(doc_count) FROM (SELECT COUNT(Document_ID) AS doc_count FROM Documents GROUP BY Template_ID) AS subquery);","279":"SELECT MAX(rankings.ranking) AS highest_loser_rank FROM rankings JOIN matches ON rankings.player_id = matches.loser_id;","280":"SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2;","281":"SELECT COUNT(*) AS total_teachers FROM teacher;","282":"SELECT DISTINCT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types;","283":"SELECT MIN(shop.Number_products) AS min_products, MAX(shop.Number_products) AS max_products FROM shop;","284":"SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) DESC LIMIT 1;","285":"SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33;","286":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1;","287":"SELECT employee.City FROM employee JOIN hiring ON hiring.Employee_ID = employee.Employee_ID WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(*) > 1;","288":"SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'AD';","289":"SELECT museum.Museum_ID, museum.Name FROM museum ORDER BY museum.Num_of_Staff DESC LIMIT 1;","290":"SELECT COUNT(*) AS document_count FROM Documents;","291":"SELECT AVG(matches.loser_age) AS average_loser_age, AVG(matches.winner_age) AS average_winner_age FROM matches JOIN players ON matches.loser_id = players.player_id OR matches.winner_id = players.player_id;","292":"SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';","293":"SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base';","294":"SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id, players.first_name, players.country_code HAVING COUNT(DISTINCT matches.tourney_name) = 2;","295":"SELECT winner.first_name AS winner_first_name, winner.last_name AS winner_last_name, loser.first_name AS loser_first_name, loser.last_name AS loser_last_name FROM matches JOIN players AS winner ON matches.winner_id = winner.player_id JOIN players AS loser ON matches.loser_id = loser.player_id ORDER BY matches.minutes DESC LIMIT 1;","296":"SELECT Courses.course_description FROM Courses WHERE Courses.course_name LIKE '%Math%';","297":"SELECT COUNT(*) AS captured_ships_count FROM ship WHERE ship.disposition_of_ship = 'Captured';","298":"SELECT COUNT(*) AS total_templates FROM Templates;","299":"SELECT * FROM hiring;","300":"SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);","301":"SELECT COUNT(DISTINCT shop.Location) AS distinct_location_count FROM shop;","302":"SELECT COUNT(*) AS total_players FROM players;","303":"SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';","304":"SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;","305":"SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;","306":"SELECT Paragraphs.Paragraph_Text, Documents.Document_Name, Documents.Document_Description, Documents.Other_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text LIKE '%Korea%';","307":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;","308":"SELECT shop.Name, shop.Location, shop.District FROM shop ORDER BY shop.Number_products DESC;","309":"SELECT teacher.Name FROM teacher WHERE teacher.Age = 32 OR teacher.Age = 33;","310":"SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1;","311":"SELECT MIN(Templates.Version_Number) AS lowest_version, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code;","312":"SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = 'USA';","313":"SELECT players.first_name, players.last_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE YEAR(matches.tourney_date) IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT YEAR(matches.tourney_date)) = 2;","314":"SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Number_of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;","315":"SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;","316":"SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE players.hand = 'left' AND matches.tourney_name = 'WTA Championships';","317":"SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';","318":"SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Teacher_ID IS NULL;","319":"SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';","320":"SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;","321":"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));","322":"SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code HAVING COUNT(Documents.Document_ID) = (SELECT MAX(doc_count) FROM (SELECT COUNT(Document_ID) AS doc_count FROM Documents GROUP BY Template_ID) AS subquery);","323":"SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id, players.first_name, players.country_code, players.birth_date ORDER BY SUM(matches.winner_rank_points) DESC LIMIT 1;","324":"SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;","325":"SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;","326":"SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY SUM(visit.Total_spent) DESC LIMIT 1;","327":"SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;","328":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) BETWEEN 1 AND 2;","329":"SELECT COUNT(*) FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.tonnage <> '225' OR ship.id IS NULL;","330":"SELECT teacher.Name FROM teacher WHERE teacher.Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);","331":"SELECT Addresses.line_1, Addresses.line_2 FROM Addresses;","332":"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Level_of_membership DESC;","333":"SELECT COUNT(*) AS total_matches FROM matches WHERE matches.year = 2013 OR matches.year = 2016;","334":"SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches;","335":"SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;","336":"SELECT teacher.Hometown, COUNT(teacher.Teacher_ID) AS teacher_count FROM teacher GROUP BY teacher.Hometown;","337":"SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;","338":"SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT(*) > 10;","339":"SELECT matches.year, COUNT(*) AS match_count FROM matches GROUP BY matches.year;","340":"SELECT matches.tourney_name FROM matches GROUP BY matches.tourney_name HAVING COUNT(*) > 10;","341":"SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings);","342":"SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';","343":"SELECT Departments.department_id, Departments.department_name FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1;","344":"SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;","345":"SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;","346":"SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK';","347":"SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID;","348":"SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;","349":"SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID HAVING COUNT(evaluation.Year_awarded) = (SELECT MAX(award_count) FROM (SELECT COUNT(*) AS award_count FROM evaluation GROUP BY Employee_ID) AS counts);","350":"SELECT SUM(evaluation.Bonus) AS total_bonus FROM evaluation;","351":"SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV';","352":"SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code;","353":"SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code JOIN Documents ON Documents.Template_ID = Templates.Template_ID;","354":"SELECT COUNT(*) AS total_employees FROM employee;","355":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;","356":"SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'Australian Open' GROUP BY players.player_id ORDER BY MAX(rankings.ranking_points) DESC LIMIT 1;","357":"SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010);","358":"SELECT COUNT(*) FROM Templates WHERE Templates.Template_Type_Code = 'CV';","359":"SELECT DISTINCT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.ship_type = 'Brig';","360":"SELECT COUNT(*) AS total_documents FROM Documents;","361":"SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta') GROUP BY battle.id, battle.name, battle.date HAVING COUNT(DISTINCT ship.name) = 2;","362":"SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name;","363":"SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;","364":"SELECT Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Data base';","365":"SELECT employee.Name FROM employee ORDER BY employee.Age ASC;","366":"SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC LIMIT 1;","367":"SELECT COUNT(*) AS total_courses FROM Courses;","368":"SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);","369":"SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;","370":"SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;","371":"SELECT battle.id, MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id;","372":"SELECT players.country_code, COUNT(*) AS player_count FROM players GROUP BY players.country_code;","373":"SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';","374":"SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT';","375":"SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;","376":"SELECT p_winner.first_name AS winner_first_name, p_winner.last_name AS winner_last_name, p_loser.first_name AS loser_first_name, p_loser.last_name AS loser_last_name FROM matches JOIN players AS p_winner ON matches.winner_id = p_winner.player_id JOIN players AS p_loser ON matches.loser_id = p_loser.player_id WHERE matches.minutes = (SELECT MAX(minutes) FROM matches);","377":"SELECT COUNT(DISTINCT Templates.Template_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID;","378":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland');","379":"SELECT SUM(evaluation.Bonus) AS total_bonus FROM evaluation;","380":"SELECT COUNT(DISTINCT players.first_name || ' ' || players.last_name) AS distinct_loser_names FROM matches JOIN players ON matches.loser_id = players.player_id;","381":"SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;","382":"SELECT death.note FROM death WHERE death.note LIKE '%East%';","383":"SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = 'Book';","384":"SELECT employee.City, COUNT(*) AS employee_count FROM employee JOIN hiring ON hiring.Employee_ID = employee.Employee_ID GROUP BY employee.City;","385":"SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Code = 'AD';","386":"SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;","387":"SELECT players.first_name, players.last_name, rankings.ranking_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name, rankings.ranking_points ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;","388":"SELECT teacher.Age, teacher.Hometown FROM teacher;","389":"SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(teacher_id) >= 2;","390":"SELECT employee.City, COUNT(*) AS employee_count FROM employee JOIN hiring ON hiring.Employee_ID = employee.Employee_ID GROUP BY employee.City;","391":"SELECT COUNT(*) AS total_matches FROM matches;","392":"SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(visit.visitor_ID) DESC LIMIT 1;","393":"SELECT rankings.ranking_date, SUM(rankings.tours) AS total_tours FROM rankings GROUP BY rankings.ranking_date;","394":"SELECT Templates.Version_Number, Templates.Template_Type_Code FROM Templates WHERE Templates.Version_Number > 5;","395":"SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);","396":"SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) DESC LIMIT 1;","397":"SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;","398":"SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1;","399":"SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course LIKE '%math%';","400":"SELECT COUNT(DISTINCT players.country_code) AS distinct_country_codes FROM players;","401":"SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;","402":"SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;","403":"SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';","404":"SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(*) DESC LIMIT 1;","405":"SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;","406":"SELECT MIN(Templates.Version_Number) AS smallest_version, Templates.Template_Type_Code FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Templates.Template_Type_Code;","407":"SELECT * FROM hiring;","408":"SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';","409":"SELECT Addresses.line_1, Addresses.line_2 FROM Addresses;","410":"SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'left';","411":"SELECT Documents.Document_ID, Documents.Document_Name FROM Documents JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name HAVING COUNT(Paragraphs.Paragraph_ID) = (SELECT MAX(ParagraphCount) FROM (SELECT COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID) AS SubQuery);","412":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1;","413":"SELECT COUNT(*) AS total_players FROM players;","414":"SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(visit.Museum_ID) > 1;","415":"SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) DESC LIMIT 1;","416":"SELECT players.country_code, players.first_name FROM players JOIN matches ON matches.winner_id = players.player_id WHERE matches.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY players.player_id, players.country_code, players.first_name HAVING COUNT(DISTINCT matches.tourney_name) = 2;","417":"SELECT Templates.Template_Type_Code, COUNT(Templates.Template_ID) AS template_count FROM Templates GROUP BY Templates.Template_Type_Code ORDER BY template_count DESC LIMIT 1;","418":"SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);","419":"SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;","420":"SELECT players.country_code, COUNT(*) AS player_count FROM players GROUP BY players.country_code;","421":"SELECT players.hand, COUNT(*) AS player_count FROM players GROUP BY players.hand;","422":"SELECT District FROM shop GROUP BY District HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0;","423":"SELECT Templates.Template_ID FROM Templates WHERE Templates.Template_Type_Code = 'PP' OR Templates.Template_Type_Code = 'PPT';","424":"SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL;","425":"SELECT battle.name, battle.date, battle.result FROM battle;","426":"SELECT COUNT(*) AS total_paragraphs FROM Paragraphs;","427":"SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;","428":"SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.year IN (2013, 2016) GROUP BY players.player_id HAVING COUNT(DISTINCT matches.year) = 2;","429":"SELECT COUNT(DISTINCT battle.result) AS different_results FROM battle;","430":"SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents;","431":"SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date ASC LIMIT 3;","432":"SELECT COUNT(*) AS total_paragraphs FROM Paragraphs;","433":"SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PP' OR Ref_Template_Types.Template_Type_Code = 'PPT';","434":"SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';","435":"SELECT battle.name, battle.result FROM battle WHERE battle.bulgarian_commander <> 'Boril';","436":"SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS NumberOfCourses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;","437":"SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);","438":"SELECT AVG(death.injured) AS average_injuries FROM death JOIN ship ON ship.id = death.caused_by_ship_id JOIN battle ON battle.id = ship.lost_in_battle;","439":"SELECT COUNT(*) AS total_courses FROM Courses;","440":"SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;","441":"SELECT COUNT(DISTINCT shop.Location) AS different_store_locations FROM shop;","442":"SELECT Paragraphs.Paragraph_Text, Paragraphs.Other_Details, Documents.Document_Name, Documents.Document_Description FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text = 'Korea';","443":"SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date ASC;","444":"SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;","445":"SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2;","446":"SELECT COUNT(DISTINCT Templates.Template_ID) AS distinct_template_count FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID;","447":"SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name;","448":"SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date ASC;","449":"SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;","450":"SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';","451":"SELECT teacher.Hometown, COUNT(*) AS teacher_count FROM teacher GROUP BY teacher.Hometown;","452":"SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;","453":"SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'Port Chelsea';","454":"SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';","455":"SELECT players.first_name, players.country_code FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.player_id, players.first_name, players.country_code ORDER BY COUNT(rankings.tours) DESC LIMIT 1;","456":"SELECT COUNT(*) FROM museum WHERE museum.Open_Year > 2013 OR museum.Open_Year < 2008;","457":"SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC;","458":"SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.location != 'English Channel' OR ship.id IS NULL;","459":"SELECT teacher.Name FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'math';","460":"SELECT AVG(rankings.ranking) AS average_winner_rank FROM rankings JOIN matches ON matches.winner_id = rankings.player_id;","461":"SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID GROUP BY employee.Employee_ID ORDER BY COUNT(evaluation.Year_awarded) DESC LIMIT 1;","462":"SELECT players.hand, COUNT(*) AS player_count FROM players GROUP BY players.hand;","463":"SELECT COUNT(DISTINCT matches.loser_name) AS different_loser_names FROM matches;","464":"SELECT death.killed, death.injured FROM death JOIN ship ON ship.id = death.caused_by_ship_id WHERE ship.tonnage = 't';","465":"SELECT COUNT(DISTINCT players.country_code) AS distinct_country_count FROM players;","466":"SELECT MIN(matches.loser_rank) AS best_rank FROM matches JOIN players ON matches.loser_id = players.player_id;","467":"SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Number_of_Templates FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;","468":"SELECT players.first_name, players.last_name, rankings.ranking_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name, players.last_name, rankings.ranking_points ORDER BY COUNT(matches.match_num) DESC LIMIT 1;","469":"SELECT COUNT(*) AS total_teachers FROM teacher;","470":"SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;","471":"SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Course_Count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;","472":"SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation);","473":"SELECT COUNT(Templates.Template_ID) FROM Templates WHERE Templates.Template_Type_Code = 'CV';","474":"SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;","475":"SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 OR museum.Open_Year > 2011 GROUP BY visitor.ID, visitor.Name HAVING COUNT(DISTINCT CASE WHEN museum.Open_Year < 2009 THEN museum.Museum_ID END) > 0 AND COUNT(DISTINCT CASE WHEN museum.Open_Year > 2011 THEN museum.Museum_ID END) > 0;","476":"SELECT teacher.Name FROM teacher WHERE teacher.Hometown <> 'Little Lever Urban District';","477":"SELECT District FROM shop GROUP BY District HAVING SUM(CASE WHEN Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Number_products > 10000 THEN 1 ELSE 0 END) > 0;","478":"SELECT COUNT(*) FROM matches WHERE matches.year = 2013 OR matches.year = 2016;","479":"SELECT MIN(shop.Number_products) AS min_products, MAX(shop.Number_products) AS max_products FROM shop;","480":"SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';","481":"SELECT visitor.Name, visitor.Age FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visit.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);","482":"SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;","483":"SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents LEFT JOIN Paragraphs ON Paragraphs.Document_ID = Documents.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name;","484":"SELECT teacher.Age, teacher.Hometown FROM teacher;","485":"SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Number_of_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;","486":"SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;","487":"SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;","488":"SELECT AVG(visit.Num_of_Ticket) AS average_tickets, MAX(visit.Num_of_Ticket) AS max_tickets FROM visit;","489":"SELECT shop.Location, COUNT(*) AS shop_count FROM shop GROUP BY shop.Location;","490":"SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;","491":"SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;","492":"SELECT Templates.Template_ID FROM Templates JOIN Documents ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_ID HAVING COUNT(Documents.Document_ID) > 1;","493":"SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY players.birth_date DESC LIMIT 3;","494":"SELECT AVG(museum.Num_of_Staff) AS average_staff FROM museum WHERE museum.Open_Year < 2009;","495":"SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;","496":"SELECT AVG(rankings.ranking) AS average_winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id;","497":"SELECT matches.year, COUNT(matches.match_num) AS match_count FROM matches GROUP BY matches.year;","498":"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID HAVING COUNT(Paragraphs.Paragraph_ID) >= 2;","499":"SELECT teacher.Hometown FROM teacher GROUP BY teacher.Hometown ORDER BY COUNT(*) DESC LIMIT 1;","500":"SELECT COUNT(*) AS total_matches FROM matches;","501":"SELECT shop.Location, COUNT(*) AS number_of_shops FROM shop GROUP BY shop.Location;","502":"SELECT COUNT(DISTINCT visitor.ID) FROM visitor WHERE ID NOT IN (SELECT visit.visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010);","503":"SELECT visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;","504":"SELECT COUNT(*) AS paragraph_count FROM Paragraphs JOIN Documents ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Summer Show';","505":"SELECT COUNT(*) AS template_count FROM Templates;","506":"SELECT employee.Name FROM employee ORDER BY employee.Age ASC;","507":"SELECT Ref_Template_Types.Template_Type_Code, Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types;","508":"SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);","509":"SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID WHERE evaluation.Bonus = (SELECT MAX(Bonus) FROM evaluation);","510":"SELECT Addresses.zip_postcode FROM Addresses WHERE Addresses.city = 'Port Chelsea';","511":"SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');","512":"SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);","513":"SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);","514":"SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON rankings.player_id = players.player_id GROUP BY players.first_name;","515":"SELECT MIN(TV_series.Share) AS min_share, MAX(TV_series.Share) AS max_share FROM TV_series;","516":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;","517":"SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1;","518":"SELECT people.Nationality, COUNT(people.People_ID) AS number_of_people FROM people GROUP BY people.Nationality;","519":"SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;","520":"SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';","521":"SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch');","522":"SELECT AVG(GNP) AS average_GNP, SUM(Population) AS total_population FROM country WHERE GovernmentForm LIKE '%US territory%';","523":"SELECT Students.last_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);","524":"SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;","525":"SELECT COUNT(*) AS total_cartoons FROM Cartoon WHERE Cartoon.Written_by = 'Joseph Kuhr';","526":"SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;","527":"SELECT Transcripts.transcript_date, Transcripts.other_details FROM Transcripts WHERE Transcripts.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);","528":"SELECT COUNT(*) AS total_transcripts FROM Transcripts;","529":"SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' AND countrylanguage.Percentage = 100 GROUP BY countrylanguage.Language HAVING COUNT(country.Code) = 1;","530":"SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';","531":"SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('Dutch', 'English');","532":"SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name DESC;","533":"SELECT country.Name FROM country WHERE country.IndepYear > 1950;","534":"SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1;","535":"SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba';","536":"SELECT Students.other_student_details FROM Students ORDER BY Students.last_name DESC, Students.middle_name DESC, Students.first_name DESC;","537":"SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti');","538":"SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch');","539":"SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';","540":"SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';","541":"SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.course_id = Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) DESC LIMIT 1;","542":"SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';","543":"SELECT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel AND Cartoon.Written_by = 'Todd Casey' WHERE Cartoon.id IS NULL;","544":"SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle';","545":"SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2;","546":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);","547":"SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;","548":"SELECT people.Name FROM people WHERE people.Nationality <> 'Russia';","549":"SELECT COUNT(Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan');","550":"SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;","551":"SELECT COUNT(*) AS total_votes FROM VOTES WHERE VOTES.state IN ('NY', 'CA');","552":"SELECT Sections.section_id, Sections.course_id, Sections.section_name, Sections.section_description FROM Sections WHERE Sections.section_name = 'h';","553":"SELECT AVG(GNP) AS mean_GNP, SUM(Population) AS total_population FROM country WHERE USTerritoryCondition;","554":"SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);","555":"SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelors%';","556":"SELECT Sections.section_description FROM Sections WHERE Sections.section_name = 'h';","557":"SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS ORDER BY CONTESTANTS.contestant_name DESC;","558":"SELECT COUNT(*) AS number_of_cartoons FROM Cartoon WHERE Cartoon.Written_by = 'Joseph Kuhr';","559":"SELECT Sections.section_name FROM Sections ORDER BY Sections.section_name DESC;","560":"SELECT SUM(country.SurfaceArea) AS total_surface_area FROM country WHERE country.Continent IN ('Asia', 'Europe');","561":"SELECT COUNT(DISTINCT countrylanguage.Language) AS unique_language_count FROM countrylanguage;","562":"SELECT people.Name, COUNT(poker_player.Final_Table_Made) AS Final_Table_Count FROM people JOIN poker_player ON poker_player.People_ID = people.People_ID GROUP BY people.Name ORDER BY Final_Table_Count ASC;","563":"SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';","564":"SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);","565":"SELECT Students.first_name FROM Students WHERE Students.permanent_address_id != Students.current_address_id;","566":"SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';","567":"SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;","568":"SELECT COUNT(DISTINCT countrylanguage.Language) AS total_official_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T';","569":"SELECT Student_Enrolment_Courses.student_course_id, COUNT(Transcript_Contents.student_course_id) AS enrollment_count FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Student_Enrolment_Courses.student_course_id HAVING COUNT(Transcript_Contents.student_course_id) = (SELECT MAX(enrollment_count) FROM (SELECT COUNT(Transcript_Contents.student_course_id) AS enrollment_count FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Student_Enrolment_Courses.student_course_id) AS counts);","570":"SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;","571":"SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id, Transcripts.transcript_date HAVING COUNT(Transcript_Contents.student_course_id) >= 2;","572":"SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name ASC;","573":"SELECT DISTINCT VOTES.state, VOTES.created FROM VOTES;","574":"SELECT city.Name, city.Population FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;","575":"SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name HAVING COUNT(Student_Enrolment.degree_program_id) = 2;","576":"SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;","577":"SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2 FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id OR Students.current_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2 HAVING COUNT(Students.student_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) AS student_count FROM Students GROUP BY permanent_address_id UNION SELECT COUNT(*) AS student_count FROM Students GROUP BY current_address_id) AS counts);","578":"SELECT MAX(poker_player.Final_Table_Made) AS max_final_tables FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 200000;","579":"SELECT DISTINCT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 1;","580":"SELECT Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY Semesters.semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;","581":"SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';","582":"SELECT COUNT(DISTINCT countrylanguage.Language) AS distinct_language_count FROM countrylanguage;","583":"SELECT Semesters.semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_enrolment_id IS NULL;","584":"SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930;","585":"SELECT COUNT(*) AS total_poker_players FROM poker_player;","586":"SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;","587":"SELECT people.Name, poker_player.Earnings FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;","588":"SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player);","589":"SELECT MAX(TV_series.Share) AS max_share, MIN(TV_series.Share) AS min_share FROM TV_series;","590":"SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY number_of_enrollments DESC LIMIT 1;","591":"SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people);","592":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;","593":"SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date;","594":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);","595":"SELECT poker_player.Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height = (SELECT MAX(Height) FROM people);","596":"SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';","597":"SELECT AVG(country.LifeExpectancy) AS mean_life_expectancy FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.IsOfficial = 0;","598":"SELECT MAX(VOTES.created) FROM VOTES WHERE VOTES.state = 'CA';","599":"SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';","600":"SELECT COUNT(DISTINCT country.Continent) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Chinese';","601":"SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000;","602":"SELECT countrylanguage.Language, SUM(countrylanguage.Percentage) AS total_percentage FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY total_percentage DESC LIMIT 1;","603":"SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id ORDER BY Cartoon.Original_air_date DESC LIMIT 1;","604":"SELECT COUNT(DISTINCT people.Nationality) AS distinct_nationalities FROM people;","605":"SELECT SUM(Population) AS total_population, MAX(GNP) AS max_GNP FROM country WHERE Continent = 'Asia';","606":"SELECT AVG(poker_player.Earnings) AS average_earnings FROM poker_player;","607":"SELECT COUNT(DISTINCT degree_program_id) AS different_degrees FROM Degree_Programs;","608":"SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';","609":"SELECT Country, COUNT(id) AS channel_count FROM TV_Channel GROUP BY Country ORDER BY channel_count DESC LIMIT 1;","610":"SELECT people.Name, poker_player.Earnings FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;","611":"SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1;","612":"SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;","613":"SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1;","614":"SELECT Continent FROM country WHERE Name = 'Anguilla';","615":"SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio';","616":"SELECT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;","617":"SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones';","618":"SELECT poker_player.Final_Table_Made, poker_player.Best_Finish FROM poker_player;","619":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);","620":"SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';","621":"SELECT Students.first_name, Students.middle_name, Students.last_name, Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name HAVING COUNT(Student_Enrolment.degree_program_id) = 2;","622":"SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);","623":"SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';","624":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;","625":"SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.course_id = Courses.course_id;","626":"SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC;","627":"SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;","628":"SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';","629":"SELECT Language, COUNT(id) AS number_of_channels FROM TV_Channel GROUP BY Language ORDER BY number_of_channels ASC LIMIT 1;","630":"SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by IN ('Ben Jones', 'Brandon Vietti');","631":"SELECT COUNT(Transcript_Contents.student_course_id) AS max_count, Student_Enrolment_Courses.student_enrolment_id FROM Transcript_Contents JOIN Student_Enrolment_Courses ON Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id GROUP BY Student_Enrolment_Courses.student_enrolment_id HAVING COUNT(Transcript_Contents.student_course_id) = (SELECT MAX(course_count) FROM (SELECT COUNT(student_course_id) AS course_count FROM Transcript_Contents GROUP BY student_course_id) AS counts);","632":"SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id, Transcripts.transcript_date HAVING COUNT(Transcript_Contents.student_course_id) >= 2;","633":"SELECT country.Name FROM country WHERE country.Continent = 'Asia' ORDER BY country.LifeExpectancy ASC LIMIT 1;","634":"SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC;","635":"SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language;","636":"SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY semester_id HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2;","637":"SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1;","638":"SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');","639":"SELECT SUM(country.SurfaceArea) AS total_surface_area FROM country WHERE country.Region = 'Caribbean';","640":"SELECT people.Name FROM people WHERE people.Nationality <> 'Russia';","641":"SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1;","642":"SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name HAVING COUNT(Student_Enrolment.student_enrolment_id) = ( SELECT MAX(enrollment_count) FROM ( SELECT COUNT(*) AS enrollment_count FROM Student_Enrolment GROUP BY degree_program_id ) AS enrollment_counts );","643":"SELECT COUNT(*) AS channel_count FROM TV_Channel WHERE TV_Channel.Language = 'English';","644":"SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');","645":"SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = 'Ben Jones';","646":"SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Engineering';","647":"SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id, degree_summary_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;","648":"SELECT Departments.department_id, Departments.department_name FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1;","649":"SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language IN ('English', 'Dutch') GROUP BY cl.CountryCode HAVING COUNT(DISTINCT cl.Language) = 2;","650":"SELECT TV_Channel.Country, COUNT(TV_Channel.id) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Country ORDER BY channel_count DESC LIMIT 1;","651":"SELECT COUNT(DISTINCT TV_Channel.series_name) AS unique_series_count, COUNT(DISTINCT TV_Channel.Content) AS unique_content_count FROM TV_Channel;","652":"SELECT SUM(city.Population) AS total_population, MAX(country.GNP) AS largest_GNP FROM country JOIN city ON city.CountryCode = country.Code WHERE country.Region = 'Asia';","653":"SELECT people.Nationality FROM people GROUP BY people.Nationality ORDER BY COUNT(*) DESC LIMIT 1;","654":"SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1;","655":"SELECT country.Name FROM country WHERE country.IndepYear > 1950;","656":"SELECT Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id GROUP BY Addresses.address_id, Addresses.line_1, Addresses.line_2, Addresses.line_3 HAVING COUNT(Students.student_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(*) AS student_count FROM Students GROUP BY permanent_address_id) AS counts);","657":"SELECT Cartoon.Directed_by, COUNT(Cartoon.id) AS cartoon_count FROM Cartoon GROUP BY Cartoon.Directed_by;","658":"SELECT Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY Degree_Programs.degree_program_id, Degree_Programs.degree_summary_name ORDER BY COUNT(Student_Enrolment.student_enrolment_id) DESC LIMIT 1;","659":"SELECT Students.student_id, Students.first_name, Students.middle_name, Students.last_name, COUNT(Student_Enrolment.student_enrolment_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id, Students.first_name, Students.middle_name, Students.last_name ORDER BY number_of_enrollments DESC LIMIT 1;","660":"SELECT COUNT(DISTINCT AREA_CODE_STATE.state) AS total_states FROM AREA_CODE_STATE;","661":"SELECT TV_series.Weekly_Rank FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';","662":"SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';","663":"SELECT AVG(Transcripts.transcript_date) AS average_transcript_date FROM Transcripts;","664":"SELECT AVG(poker_player.Earnings) AS average_earnings FROM poker_player;","665":"SELECT country.Continent FROM country WHERE country.Name = 'Anguilla';","666":"SELECT COUNT(DISTINCT people.Nationality) AS different_nationalities FROM people;","667":"SELECT SUM(country.Population) AS TotalPopulation FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'T';","668":"SELECT TV_series.Air_Date FROM TV_series WHERE TV_series.Episode = 'A Love of a Lifetime';","669":"SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE '%computer%';","670":"SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' ORDER BY countrylanguage.Percentage DESC LIMIT 1;","671":"SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Engineering';","672":"SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name LIKE '%Bachelor%';","673":"SELECT AVG(poker_player.Earnings) AS average_earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;","674":"SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name <> 'Jessie Alloway';","675":"SELECT COUNT(DISTINCT TV_Channel.series_name) AS unique_series_count, COUNT(DISTINCT TV_Channel.Content) AS unique_content_count FROM TV_Channel;","676":"SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba' GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1;","677":"SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating DESC;","678":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(countrylanguage.Language) DESC LIMIT 1;","679":"SELECT SUM(city.Population) AS total_population FROM city WHERE city.District = 'Gelderland';","680":"SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');","681":"SELECT Cartoon.Directed_by, COUNT(Cartoon.id) AS cartoon_count FROM Cartoon GROUP BY Cartoon.Directed_by;","682":"SELECT people.Name FROM people JOIN poker_player ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC;","683":"SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');","684":"SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);","685":"SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T';","686":"SELECT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id AND Cartoon.Written_by = 'Todd Casey' WHERE Cartoon.id IS NULL;","687":"SELECT Courses.course_id, Courses.course_name FROM Courses LEFT JOIN Sections ON Sections.course_id = Courses.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) < 2;","688":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) = (SELECT MAX(lang_count) FROM (SELECT COUNT(Language) AS lang_count FROM countrylanguage GROUP BY CountryCode));","689":"SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');","690":"SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON VOTES.contestant_number = CONTESTANTS.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name ORDER BY COUNT(VOTES.vote_id) ASC LIMIT 1;","691":"SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';","692":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch') AND countrylanguage.IsOfficial = 'T';","693":"SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';","694":"SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';","695":"SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id JOIN TV_series ON TV_series.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';","696":"SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Title ASC;","697":"SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_name LIKE '%Al%';","698":"SELECT Students.first_name FROM Students WHERE Students.permanent_address_id != Students.current_address_id;","699":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;","700":"SELECT COUNT(DISTINCT Language) AS total_languages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');","701":"SELECT AVG(LifeExpectancy) AS average_life_expectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';","702":"SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';","703":"SELECT people.Nationality, COUNT(*) AS number_of_people FROM people GROUP BY people.Nationality;","704":"SELECT SUM(city.Population) AS total_population FROM city WHERE city.District = 'Gelderland';","705":"SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state GROUP BY area_code ORDER BY COUNT(VOTES.vote_id) DESC LIMIT 1;","706":"SELECT SUM(country.SurfaceArea) AS total_surface_area FROM country WHERE country.Continent = 'Carribean';","707":"SELECT TV_Channel.id FROM TV_Channel LEFT JOIN TV_series ON TV_series.Channel = TV_Channel.id LEFT JOIN Cartoon ON Cartoon.Channel = TV_Channel.id GROUP BY TV_Channel.id HAVING COUNT(TV_series.id) + COUNT(Cartoon.id) > 2;","708":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;","709":"SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1;","710":"SELECT VOTES.state FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY VOTES.state HAVING COUNT(DISTINCT CONTESTANTS.contestant_name) = 2;","711":"SELECT COUNT(DISTINCT country.GovernmentForm) AS government_type_count FROM country WHERE country.Continent = 'Africa';","712":"SELECT AVG(Transcripts.transcript_date) AS average_transcript_date FROM Transcripts;","713":"SELECT COUNT(DISTINCT Departments.department_id) FROM Departments JOIN Degree_Programs ON Degree_Programs.department_id = Departments.department_id;","714":"SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';","715":"SELECT COUNT(*) AS republic_count FROM country WHERE country.GovernmentForm = 'republic';","716":"SELECT Sections.section_name, Sections.section_description FROM Sections;","717":"SELECT TV_series.Air_Date FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';","718":"SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;","719":"SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY language_count DESC LIMIT 1;","720":"SELECT Transcripts.transcript_id, Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcripts.transcript_id, Transcripts.transcript_date ORDER BY COUNT(Transcript_Contents.student_course_id) ASC LIMIT 1;","721":"SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings = (SELECT MIN(Earnings) FROM poker_player);","722":"SELECT Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM TV_Channel GROUP BY Language) AS subquery);","723":"SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY COUNT(country.Code) DESC LIMIT 1;","724":"SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');","725":"SELECT COUNT(poker_player.Poker_Player_ID) FROM poker_player;","726":"SELECT TV_series.Episode, TV_series.Rating FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id ORDER BY TV_series.Rating DESC LIMIT 3;","727":"SELECT Sections.section_name, Sections.section_description FROM Sections;","728":"SELECT transcript_id, transcript_date FROM Transcripts GROUP BY transcript_id, transcript_date HAVING COUNT(*) = (SELECT MIN(COUNT) FROM (SELECT COUNT(*) AS COUNT FROM Transcript_Contents GROUP BY transcript_id) AS subquery);","729":"SELECT MAX(AREA_CODE_STATE.area_code) AS max_area_code, MIN(AREA_CODE_STATE.area_code) AS min_area_code FROM AREA_CODE_STATE;","730":"SELECT TV_series.Weekly_Rank FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';","731":"SELECT MAX(poker_player.Final_Table_Made) AS max_final_tables FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings < 200000;","732":"SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.GovernmentForm = 'Republic' GROUP BY countrylanguage.Language HAVING COUNT(DISTINCT country.Code) = 1;","733":"SELECT country.Name, country.Population, country.LifeExpectancy FROM country WHERE country.Continent = 'Asia' ORDER BY country.SurfaceArea DESC LIMIT 1;","734":"SELECT CONTESTANTS.contestant_number, CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number = VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number, CONTESTANTS.contestant_name HAVING COUNT(VOTES.vote_id) >= 2;","735":"SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English';","736":"SELECT COUNT(*) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Afghanistan' AND countrylanguage.IsOfficial = 'T';","737":"SELECT country.Population, country.LifeExpectancy FROM country WHERE country.Name = 'Brazil';","738":"SELECT COUNT(DISTINCT Degree_Programs.degree_summary_name) AS different_degree_names FROM Degree_Programs;","739":"SELECT COUNT(DISTINCT country.GovernmentForm) AS different_government_forms FROM country WHERE country.Continent = 'Africa';","740":"SELECT AVG(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.IsOfficial = 0;","741":"SELECT SUM(city.Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T');","742":"SELECT AVG(poker_player.Earnings) AS average_earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;","743":"SELECT TV_Channel.Language, COUNT(*) AS channel_count FROM TV_Channel GROUP BY TV_Channel.Language;","744":"SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE '%computer%';","745":"SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;","746":"SELECT DISTINCT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Student_Enrolment_Courses.course_id = Courses.course_id;","747":"SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');","748":"SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';","749":"SELECT COUNT(*) AS channel_count FROM TV_Channel WHERE TV_Channel.Language = 'English';","750":"SELECT * FROM Students ORDER BY Students.lastname DESC, Students.firstname DESC, Students.middlename DESC;","751":"SELECT COUNT(*) AS country_count FROM country WHERE country.GovernmentForm = 'republic';","752":"SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(student_id) = (SELECT MAX(student_count) FROM (SELECT COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id) AS counts);","753":"SELECT COUNT(DISTINCT Departments.department_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id;","754":"SELECT AVG(country.LifeExpectancy) AS average_life_expectancy FROM country WHERE country.Region = 'Central Africa';","755":"SELECT COUNT(*) AS total_transcripts FROM Transcripts;","756":"SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';","757":"SELECT Courses.course_id, Courses.course_name FROM Courses JOIN Sections ON Sections.course_id = Courses.course_id GROUP BY Courses.course_id, Courses.course_name HAVING COUNT(Sections.section_id) <= 2;","758":"SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.IsOfficial = 'T' AND countrylanguage.Language IN ('English', 'French') GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) = 2;","759":"SELECT VOTES.vote_id, VOTES.phone_number, VOTES.state FROM VOTES;","760":"SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Student_Enrolment.semester_id = Semesters.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name HAVING COUNT(Student_Enrolment.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(Student_Enrolment.student_id) AS student_count FROM Student_Enrolment GROUP BY Student_Enrolment.semester_id ) AS counts );","761":"SELECT AVG(country.LifeExpectancy) AS average_life_expectancy FROM country WHERE country.Region = 'Central Africa';","762":"SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000;","763":"SELECT DISTINCT Addresses.line_1, Addresses.line_2, Addresses.city, Addresses.zip_postcode FROM Addresses JOIN Students ON Students.permanent_address_id = Addresses.address_id OR Students.current_address_id = Addresses.address_id;","764":"SELECT people.Name, people.Birth_Date FROM people ORDER BY people.Name ASC;","765":"SELECT city.Population, country.LifeExpectancy FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'Brazil';","766":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;","767":"SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;","768":"SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio';","769":"SELECT TV_Channel.Content FROM TV_Channel WHERE TV_Channel.series_name = 'Sky Radio';","770":"SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';","771":"SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';","772":"SELECT Highschooler.grade, COUNT(*) AS number_of_highschoolers FROM Highschooler GROUP BY Highschooler.grade;","773":"SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(orchestra.Orchestra_ID) > 1;","774":"SELECT Breeds.breed_name, Sizes.size_description FROM Breeds JOIN Sizes ON 1=1; -- This creates a Cartesian product to get all combinations","775":"SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;","776":"SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID;","777":"SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID GROUP BY singer.Name;","778":"SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;","779":"SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);","780":"SELECT Charges.charge_type, Charges.charge_amount FROM Charges;","781":"SELECT COUNT(*) AS singer_count FROM singer;","782":"SELECT COUNT(DISTINCT countrylanguage.CountryCode) AS total_countries FROM countrylanguage WHERE Language = 'Spanish' GROUP BY countrylanguage.CountryCode HAVING Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish');","783":"SELECT conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA';","784":"SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id, Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;","785":"SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;","786":"SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%';","787":"SELECT singer.Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;","788":"SELECT DISTINCT singer.Name FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID WHERE song.Sales > 300000;","789":"SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language IS NULL OR countrylanguage.Language != 'English') AND country.GovernmentForm != 'Republic';","790":"SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');","791":"SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);","792":"SELECT conductor.Name FROM conductor WHERE conductor.Nationality <> 'USA';","793":"SELECT COUNT(Highschooler.ID) AS total_highschoolers FROM Highschooler;","794":"SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;","795":"SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);","796":"SELECT Charges.charge_type, Charges.charge_amount FROM Charges;","797":"SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(DISTINCT countrylanguage.CountryCode) DESC LIMIT 1;","798":"SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;","799":"SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs;","800":"SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Treatments.professional_id = Professionals.professional_id WHERE Professionals.state = 'Indiana' OR Professionals.professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2 );","801":"SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%';","802":"SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;","803":"SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;","804":"SELECT Professionals.role_code, Professionals.street, Professionals.city, Professionals.state FROM Professionals WHERE Professionals.city LIKE '%West%';","805":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);","806":"SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (SELECT MAX(OrchestraCount) FROM (SELECT COUNT(Orchestra_ID) AS OrchestraCount FROM orchestra GROUP BY Record_Company) AS Subquery);","807":"SELECT property_name FROM Properties WHERE (property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description IN ('houses', 'apartments'))) AND room_count > 1;","808":"SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs;","809":"SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions DESC LIMIT 1;","810":"SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade HAVING COUNT(Highschooler.ID) >= 4;","811":"SELECT AVG(show.Attendance) AS average_attendance FROM show;","812":"SELECT COUNT(Likes.liked_id) AS number_of_likes FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';","813":"SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;","814":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;","815":"SELECT conductor.Name FROM conductor ORDER BY conductor.Age;","816":"SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY COUNT(*) DESC LIMIT 1;","817":"SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(orchestra.Orchestra_ID) > 1;","818":"SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3;","819":"SELECT COUNT(Friend.friend_id) AS number_of_friends FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';","820":"SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1;","821":"SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_code, Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;","822":"SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;","823":"SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS max_net_worth FROM singer GROUP BY singer.Citizenship;","824":"SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs);","825":"SELECT country.Name, country.IndepYear, country.SurfaceArea FROM country WHERE country.Code = (SELECT country.Code FROM country JOIN city ON city.CountryCode = country.Code GROUP BY country.Code ORDER BY SUM(city.Population) ASC LIMIT 1);","826":"SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = 10;","827":"SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;","828":"SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC;","829":"SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","830":"SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon';","831":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1;","832":"SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id;","833":"SELECT AVG(show.Attendance) AS average_attendance FROM show;","834":"SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle';","835":"SELECT AVG(Highschooler.grade) AS average_grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id;","836":"SELECT COUNT(DISTINCT dog_id) FROM Treatments;","837":"SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;","838":"SELECT COUNT(DISTINCT conductor.Nationality) AS different_nationalities FROM conductor;","839":"SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;","840":"SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Friend.friend_id) >= 2;","841":"SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3;","842":"SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","843":"SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);","844":"SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;","845":"SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;","846":"SELECT Professionals.email_address FROM Professionals WHERE Professionals.state IN ('Hawaii', 'Wisconsin');","847":"SELECT country.Name FROM country JOIN city ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Population = 80000;","848":"SELECT COUNT(*) AS orchestra_count FROM orchestra WHERE orchestra.Record_Company IN ('CD', 'DVD');","849":"SELECT Highschooler.name FROM Highschooler JOIN Likes ON Likes.student_id = Highschooler.ID GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1;","850":"SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia';","851":"SELECT Owners.first_name, Owners.last_name, Owners.email_address FROM Owners WHERE Owners.state LIKE '%North%';","852":"SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.liked_id;","853":"SELECT country.Name, country.SurfaceArea FROM country ORDER BY country.SurfaceArea DESC LIMIT 5;","854":"SELECT Highschooler.grade FROM Highschooler;","855":"SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');","856":"SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' AND country.GovernmentForm != 'Republic';","857":"SELECT GovernmentForm, SUM(Population) AS total_population FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;","858":"SELECT country.Name, COUNT(countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3;","859":"SELECT orchestra.Record_Company FROM orchestra ORDER BY orchestra.Year_of_Founded DESC;","860":"SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;","861":"SELECT Highschooler.name, Highschooler.grade FROM Highschooler;","862":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;","863":"SELECT country.Name FROM country ORDER BY country.Population DESC LIMIT 3;","864":"SELECT DISTINCT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id JOIN Likes ON Highschooler.ID = Likes.student_id;","865":"SELECT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage > 50;","866":"SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;","867":"SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals;","868":"SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Dogs.breed_code = Breeds.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;","869":"SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;","870":"SELECT Likes.student_id, COUNT(*) AS like_count FROM Likes GROUP BY Likes.student_id;","871":"SELECT MAX(Dogs.age) AS oldest_dog_age FROM Dogs;","872":"SELECT country.Code, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Percentage = ( SELECT MAX(Percentage) FROM countrylanguage AS cl WHERE cl.CountryCode = country.Code ) GROUP BY country.Code;","873":"SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING COUNT(performance.Performance_ID) > 1;","874":"SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING COUNT(Likes.liked_id) >= 2;","875":"SELECT countrylanguage.Language FROM countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(DISTINCT countrylanguage.CountryCode) DESC LIMIT 1;","876":"SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'False';","877":"SELECT DISTINCT Owners.state FROM Owners JOIN Professionals ON Owners.state = Professionals.state;","878":"SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;","879":"SELECT DISTINCT country.Code FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English';","880":"SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;","881":"SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;","882":"SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = 'Hawaii' OR Professionals.state = 'Wisconsin';","883":"SELECT Highschooler.name, COUNT(Likes.liked_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;","884":"SELECT COUNT(*) AS total_conductors FROM conductor;","885":"SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Friend.friend_id) DESC LIMIT 1;","886":"SELECT COUNT(*) FROM Highschooler WHERE Highschooler.grade IN (9, 10);","887":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003;","888":"SELECT Highschooler.grade FROM Highschooler;","889":"SELECT cl.Language, cl.CountryCode FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY cl.CountryCode HAVING cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = cl.CountryCode);","890":"SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND NOT (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'Yes');","891":"SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;","892":"SELECT DISTINCT Breeds.breed_name, Sizes.size_description FROM Dogs JOIN Breeds ON Dogs.breed_code = Breeds.breed_code JOIN Sizes ON Dogs.size_code = Sizes.size_code;","893":"SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;","894":"SELECT COUNT(friend_id) AS number_of_friends FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';","895":"SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );","896":"SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;","897":"SELECT Highschooler.name, COUNT(Friend.friend_id) AS friend_count FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.name;","898":"SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id = Highschooler.ID WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');","899":"SELECT COUNT(*) AS orchestra_count FROM orchestra WHERE orchestra.Record_Company = 'CD' OR orchestra.Record_Company = 'DVD';","900":"SELECT singer.Citizenship, MAX(singer.Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY singer.Citizenship;","901":"SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;","902":"SELECT Highschooler.name, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler LEFT JOIN Friend ON Friend.student_id = Highschooler.ID GROUP BY Highschooler.name;","903":"SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 3;","904":"SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = 'Kyle';","905":"SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle';","906":"SELECT Likes.student_id, COUNT(*) AS like_count FROM Likes GROUP BY Likes.student_id;","907":"SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3;","908":"SELECT singer.Name FROM singer WHERE singer.Birth_Year IN (1948, 1949);","909":"SELECT continent, AVG(LifeExpectancy) AS avg_life_expectancy, SUM(Population) AS total_population FROM country GROUP BY continent HAVING AVG(LifeExpectancy) < 72;","910":"SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 );","911":"SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;","912":"SELECT singer.Name FROM singer WHERE singer.Citizenship <> 'France';","913":"SELECT singer.Name FROM singer WHERE singer.Birth_Year IN (1948, 1949);","914":"SELECT Professionals.professional_id, Professionals.last_name, Professionals.cell_number FROM Professionals LEFT JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Professionals.state = 'Indiana' OR Professionals.professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2 );","915":"SELECT COUNT(*) FROM country WHERE country.Continent = 'Asia';","916":"SELECT COUNT(*) AS country_count FROM country WHERE country.Region = 'Asia';","917":"SELECT DISTINCT Highschooler.name FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Likes.student_id = Highschooler.ID;","918":"SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1;","919":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);","920":"SELECT singer.Citizenship, COUNT(DISTINCT singer.Singer_ID) AS NumberOfSingers FROM singer GROUP BY singer.Citizenship;","921":"SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs);","922":"SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(Treatments.treatment_id) >= 2;","923":"SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);","924":"SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Dogs.breed_code = Breeds.breed_code GROUP BY Breeds.breed_code ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;","925":"SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name HAVING COUNT(Likes.liked_id) >= 2;","926":"SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","927":"SELECT AVG(Dogs.age) FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id;","928":"SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;","929":"SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;","930":"SELECT COUNT(DISTINCT professional_id) FROM Treatments;","931":"SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);","932":"SELECT Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);","933":"SELECT singer.Name FROM singer WHERE singer.Citizenship <> 'French';","934":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);","935":"SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);","936":"SELECT DISTINCT Highschooler.ID FROM Highschooler JOIN Friend ON Friend.student_id = Highschooler.ID JOIN Likes ON Likes.liked_id = Highschooler.ID;","937":"SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID;","938":"SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1;","939":"SELECT Highschooler.grade, COUNT(*) AS highschooler_count FROM Highschooler GROUP BY Highschooler.grade;","940":"SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');","941":"SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);","942":"SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.age = (SELECT MIN(age) FROM Dogs);","943":"SELECT MAX(Dogs.age) AS oldest_dog_age FROM Dogs;","944":"SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);","945":"SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.cell_number HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;","946":"SELECT District, COUNT(*) AS NumberOfCities FROM city GROUP BY District HAVING AVG(Population) > (SELECT AVG(Population) FROM city);","947":"SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","948":"SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;","949":"SELECT Friend.student_id, COUNT(Friend.friend_id) AS number_of_friends FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID GROUP BY Friend.student_id;","950":"SELECT country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL;","951":"SELECT orchestra.Record_Company, COUNT(*) AS orchestra_count FROM orchestra GROUP BY orchestra.Record_Company ORDER BY orchestra_count ASC;","952":"SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.cell_number HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;","953":"SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id GROUP BY Professionals.professional_id, Professionals.role_code, Professionals.first_name HAVING COUNT(Treatments.treatment_id) >= 2;","954":"SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';","955":"SELECT District, COUNT(*) AS CityCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;","956":"SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC;","957":"SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;","958":"SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON song.Singer_ID = singer.Singer_ID GROUP BY singer.Name;","959":"SELECT COUNT(*) AS total_highschoolers FROM Highschooler;","960":"SELECT Highschooler.name, Highschooler.grade FROM Highschooler;","961":"SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id JOIN Treatments ON Treatments.dog_id = Dogs.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;","962":"SELECT orchestra.Major_Record_Format, COUNT(*) AS frequency FROM orchestra GROUP BY orchestra.Major_Record_Format ORDER BY frequency DESC;","963":"SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;","964":"SELECT COUNT(DISTINCT Professionals.professional_id) FROM Professionals JOIN Treatments ON Treatments.professional_id = Professionals.professional_id;","965":"SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","966":"SELECT Name FROM country WHERE Region = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Region = 'Asia');","967":"SELECT Dogs.name, Dogs.age, Dogs.weight FROM Dogs WHERE Dogs.abandoned_yn = 1;","968":"SELECT Professionals.first_name, Professionals.last_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);","969":"SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals;","970":"SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1;","971":"SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;","972":"SELECT COUNT(*) AS total_singers FROM singer;","973":"SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia';","974":"SELECT conductor.Name FROM conductor JOIN orchestra ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE orchestra.Year_of_Founded > 2008;","975":"SELECT continent, SUM(population) AS total_population, AVG(lifeExpectancy) AS average_life_expectancy FROM country GROUP BY continent HAVING AVG(lifeExpectancy) < 72;","976":"SELECT AVG(Highschooler.grade) AS average_grade FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id;","977":"SELECT Highschooler.grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY Highschooler.grade ORDER BY num_highschoolers DESC LIMIT 1;","978":"SELECT DISTINCT Owners.state FROM Owners JOIN Professionals ON Owners.state = Professionals.state;","979":"SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Dogs.dog_id, Dogs.name HAVING SUM(Treatments.cost_of_treatment) <= 1000;","980":"SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;","981":"SELECT singer.Citizenship, COUNT(singer.Singer_ID) AS number_of_singers FROM singer GROUP BY singer.Citizenship;","982":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;","983":"SELECT singer.Birth_Year, singer.Citizenship FROM singer;","984":"SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Highschooler.grade > 5 GROUP BY Highschooler.ID HAVING COUNT(Friend.friend_id) >= 2;","985":"SELECT singer.Name FROM singer ORDER BY singer.Net_Worth_Millions ASC;","986":"SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);","987":"SELECT country.Name FROM country WHERE country.Continent = 'Europe' AND country.Population = 80000;","988":"SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS average_area FROM country JOIN city ON city.CountryCode = country.Code WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000;","989":"SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50;","990":"SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name HAVING COUNT(Dogs.dog_id) = (SELECT MAX(dog_count) FROM (SELECT COUNT(dog_id) AS dog_count FROM Dogs GROUP BY owner_id) AS owner_dog_counts);","991":"SELECT orchestra.Record_Company, COUNT(orchestra.Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY orchestra.Record_Company;","992":"SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;","993":"SELECT AVG(Dogs.age) AS average_age FROM Dogs;","994":"SELECT Highschooler.name, COUNT(Likes.liked_id) AS like_count FROM Highschooler JOIN Likes ON Likes.student_id = Highschooler.ID GROUP BY Highschooler.name;","995":"SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1;","996":"SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id;","997":"SELECT COUNT(*) AS conductor_count FROM conductor;","998":"SELECT DISTINCT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT DISTINCT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs);","999":"SELECT country.Population, country.Name, country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1;","1000":"SELECT COUNT(*) AS like_count FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';","1001":"SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS average_surface_area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;","1002":"SELECT DISTINCT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language <> 'English';","1003":"SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Treatments.dog_id = Dogs.dog_id;","1004":"SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON performance.Orchestra_ID = orchestra.Orchestra_ID GROUP BY orchestra.Orchestra_ID, orchestra.Year_of_Founded HAVING COUNT(performance.Performance_ID) > 1;","1005":"SELECT COUNT(*) FROM Highschooler WHERE Highschooler.grade IN (9, 10);","1006":"SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);","1007":"SELECT country.Name, COUNT(countrylanguage.Language) AS language_count FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) > 2;","1008":"SELECT AVG(Dogs.age) AS average_age FROM Dogs;","1009":"SELECT Friend.student_id, COUNT(Friend.friend_id) AS number_of_friends FROM Friend GROUP BY Friend.student_id;","1010":"SELECT singer.Birth_Year, singer.Citizenship FROM singer;","1011":"SELECT conductor.Name FROM conductor ORDER BY conductor.Age ASC;","1012":"SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;","1013":"SELECT MAX(Charges.charge_amount) AS most_expensive_charge FROM Charges;","1014":"SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;","1015":"SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');","1016":"SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY COUNT(*) DESC LIMIT 1;","1017":"SELECT COUNT(DISTINCT conductor.Nationality) AS different_nationalities FROM conductor;","1018":"SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id;","1019":"SELECT city.Name FROM city WHERE city.Population BETWEEN 160000 AND 900000;","1020":"SELECT COUNT(*) AS total_features FROM Other_Available_Features;","1021":"SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;","1022":"SELECT country.Code FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.Language = 'Spanish' GROUP BY country.Code HAVING MAX(countrylanguage.Percentage);","1023":"SELECT MAX(performance.Share) AS max_share, MIN(performance.Share) AS min_share FROM performance WHERE performance.Type <> 'Live final';","1024":"SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);","1025":"SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';","1026":"SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 3;","1027":"SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;","1028":"SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = 'Kyle';","1029":"SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);","1030":"SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type <> 'Live final';","1031":"SELECT Owners.first_name, Owners.last_name, Dogs.size_code FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id;","1032":"SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Airline = flights.Airline WHERE flights.SourceAirport = 'CVO' AND airlines.Airline NOT IN (SELECT DISTINCT flights.Airline FROM flights WHERE flights.SourceAirport = 'APG');","1033":"SELECT COUNT(DISTINCT Addresses.address_id) AS different_addresses FROM Addresses JOIN Students ON Addresses.address_id = Students.current_address_id;"},"gold_sql":{"0":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10","1":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","2":"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)","3":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"","4":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;","5":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"","6":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;","7":"SELECT Maker ,  Model FROM MODEL_LIST;","8":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1","9":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;","10":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","11":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","12":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';","13":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;","14":"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","15":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","16":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"","17":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200","18":"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","19":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","20":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","21":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","22":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","23":"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","24":"SELECT DISTINCT country FROM singer WHERE age  >  20","25":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;","26":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;","27":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1","28":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'","29":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'","30":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20","31":"select avg(horsepower) from cars_data where year  <  1980;","32":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"","33":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"","34":"SELECT count(*) FROM COUNTRIES;","35":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)","36":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","37":"select avg(capacity) ,  max(capacity) from stadium","38":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","39":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';","40":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"","41":"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","42":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"","43":"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","44":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"","45":"SELECT country ,  count(*) FROM singer GROUP BY country","46":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","47":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';","48":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'","49":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","50":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';","51":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';","52":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","53":"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","54":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"","55":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;","56":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015","57":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"","58":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"","59":"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980","60":"SELECT weight FROM pets ORDER BY pet_age LIMIT 1","61":"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","62":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","63":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;","64":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;","65":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"","66":"SELECT count(*) FROM singer","67":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"","68":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","69":"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","70":"select distinct year from cars_data where weight between 3000 and 4000;","71":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","72":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","73":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"","74":"SELECT count(*) FROM pets WHERE weight  >  10","75":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014","76":"SELECT count(*) FROM COUNTRIES;","77":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"","78":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;","79":"SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'","80":"select avg(age) from student where stuid not in (select stuid from has_pet)","81":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';","82":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"","83":"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","84":"SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30","85":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","86":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"","87":"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","88":"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","89":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;","90":"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","91":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","92":"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","93":"SELECT count(*) FROM AIRLINES","94":"SELECT count(DISTINCT pettype) FROM pets","95":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;","96":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","97":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974","98":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","99":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","100":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;","101":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974","102":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;","103":"SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)","104":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'","105":"SELECT count(DISTINCT pettype) FROM pets","106":"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","107":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';","108":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","109":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","110":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );","111":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","112":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","113":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1","114":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"","115":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"","116":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"","117":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;","118":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;","119":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"","120":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"","121":"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","122":"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","123":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"","124":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","125":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;","126":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"","127":"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","128":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;","129":"SELECT count(*) FROM singer","130":"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","131":"SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'","132":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"","133":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1","134":"SELECT count(*) FROM AIRLINES","135":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';","136":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","137":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","138":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;","139":"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","140":"SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014","141":"SELECT count(*) FROM AIRPORTS","142":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"","143":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"","144":"SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015","145":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';","146":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';","147":"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","148":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"","149":"SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'","150":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2","151":"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;","152":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","153":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;","154":"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","155":"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","156":"SELECT Maker ,  Model FROM MODEL_LIST;","157":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10","158":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"","159":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","160":"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","161":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","162":"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)","163":"SELECT DISTINCT country FROM singer WHERE age  >  20","164":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2","165":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1","166":"SELECT count(*) FROM AIRPORTS","167":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';","168":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;","169":"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;","170":"select distinct year from cars_data where weight between 3000 and 4000;","171":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"","172":"SELECT max(weight) ,  petType FROM pets GROUP BY petType","173":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1","174":"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","175":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"","176":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","177":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","178":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;","179":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;","180":"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1","181":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'","182":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';","183":"SELECT count(*) FROM CONTINENTS;","184":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;","185":"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","186":"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","187":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","188":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)","189":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"","190":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"","191":"SELECT country ,  count(*) FROM singer GROUP BY country","192":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1","193":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","194":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'","195":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;","196":"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","197":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"","198":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;","199":"select max(capacity), average from stadium","200":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","201":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","202":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';","203":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;","204":"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","205":"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","206":"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","207":"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","208":"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","209":"SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'","210":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"","211":"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","212":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014","213":"SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)","214":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","215":"SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014","216":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","217":"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","218":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)","219":"SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","220":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","221":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","222":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","223":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","224":"SELECT count(*) FROM CONTINENTS;","225":"SELECT max(weight) ,  petType FROM pets GROUP BY petType","226":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );","227":"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980","228":"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","229":"select avg(age) from student where stuid not in (select stuid from has_pet)","230":"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;","231":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","232":"SELECT count(*) FROM FLIGHTS","233":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200","234":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","235":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';","236":"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","237":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)","238":"SELECT count(*) FROM FLIGHTS","239":"SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20","240":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"","241":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","242":"select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)","243":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;","244":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","245":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;","246":"SELECT count(*) FROM pets WHERE weight  >  10","247":"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","248":"select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'","249":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"","250":"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","251":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","252":"SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'","253":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;","254":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"","255":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"","256":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;","257":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id","258":"SELECT course_description FROM Courses WHERE course_name  =  'math'","259":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2","260":"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","261":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1","262":"SELECT first_name ,  last_name FROM players ORDER BY birth_date","263":"SELECT count(*) FROM visitor WHERE age  <  30","264":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)","265":"SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1","266":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","267":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'","268":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","269":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1","270":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","271":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"","272":"SELECT count(*) FROM employee","273":"SELECT DISTINCT template_type_code FROM Templates","274":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"","275":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","276":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","277":"SELECT template_type_code ,  template_type_description FROM Ref_template_types","278":"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","279":"SELECT min(loser_rank) FROM matches","280":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2","281":"SELECT count(*) FROM teacher","282":"SELECT DISTINCT template_type_code FROM Templates","283":"SELECT min(Number_products) ,  max(Number_products) FROM shop","284":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","285":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33","286":"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1","287":"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1","288":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"","289":"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","290":"SELECT count(*) FROM Documents","291":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","292":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"","293":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"","294":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","295":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","296":"SELECT course_description FROM Courses WHERE course_name  =  'math'","297":"SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'","298":"SELECT count(*) FROM Templates","299":"SELECT * FROM hiring","300":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents","301":"SELECT count(DISTINCT LOCATION) FROM shop","302":"SELECT count(*) FROM players","303":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","304":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50","305":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","306":"select other_details from paragraphs where paragraph_text like 'korea'","307":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2","308":"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","309":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33","310":"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1","311":"SELECT min(Version_Number) ,  template_type_code FROM Templates","312":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","313":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016","314":"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","315":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","316":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'","317":"select name from teacher where hometown != \"little lever urban district\"","318":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)","319":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"","320":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","321":"SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id","322":"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","323":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","324":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","325":"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)","326":"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","327":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","328":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2","329":"SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );","330":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)","331":"SELECT line_1 ,  line_2 FROM addresses","332":"SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC","333":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016","334":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","335":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1","336":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","337":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","338":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10","339":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","340":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10","341":"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","342":"SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'","343":"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","344":"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","345":"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","346":"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"","347":"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","348":"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1","349":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1","350":"SELECT sum(bonus) FROM evaluation","351":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"","352":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID","353":"SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID","354":"SELECT count(*) FROM employee","355":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2","356":"SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1","357":"SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)","358":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"","359":"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'","360":"SELECT count(*) FROM Documents","361":"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'","362":"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","363":"SELECT document_id ,  document_name ,  document_description FROM Documents","364":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"","365":"SELECT name FROM employee ORDER BY age","366":"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","367":"SELECT count(*) FROM Courses","368":"SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)","369":"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1","370":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","371":"SELECT max(killed) ,  min(killed) FROM death","372":"SELECT count(*) ,  country_code FROM players GROUP BY country_code","373":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"","374":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'","375":"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","376":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","377":"SELECT count(DISTINCT template_id) FROM Documents","378":"SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'","379":"SELECT sum(bonus) FROM evaluation","380":"SELECT count(DISTINCT loser_name) FROM matches","381":"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3","382":"SELECT note FROM death WHERE note LIKE '%East%'","383":"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"","384":"SELECT count(*) ,  city FROM employee GROUP BY city","385":"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"","386":"SELECT template_id ,  version_number ,  template_type_code FROM Templates","387":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","388":"SELECT Age ,  Hometown FROM teacher","389":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2","390":"SELECT count(*) ,  city FROM employee GROUP BY city","391":"SELECT count(*) FROM matches","392":"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1","393":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","394":"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","395":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1","396":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","397":"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","398":"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","399":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"","400":"SELECT count(DISTINCT country_code) FROM players","401":"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","402":"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4","403":"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"","404":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1","405":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","406":"SELECT min(Version_Number) ,  template_type_code FROM Templates","407":"SELECT * FROM hiring","408":"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"","409":"SELECT line_1 ,  line_2 FROM addresses","410":"SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'","411":"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","412":"SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1","413":"SELECT count(*) FROM players","414":"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","415":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1","416":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","417":"SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1","418":"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)","419":"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","420":"SELECT count(*) ,  country_code FROM players GROUP BY country_code","421":"SELECT count(*) ,  hand FROM players GROUP BY hand","422":"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000","423":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"","424":"SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)","425":"SELECT name ,  date FROM battle","426":"SELECT count(*) FROM Paragraphs","427":"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1","428":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016","429":"SELECT count(DISTINCT RESULT) FROM battle","430":"SELECT document_id ,  document_name ,  document_description FROM Documents","431":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","432":"SELECT count(*) FROM Paragraphs","433":"SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"","434":"SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'","435":"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'","436":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","437":"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)","438":"SELECT avg(injured) FROM death","439":"SELECT count(*) FROM Courses","440":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50","441":"SELECT count(DISTINCT LOCATION) FROM shop","442":"select other_details from paragraphs where paragraph_text like 'korea'","443":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","444":"SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3","445":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2","446":"SELECT count(DISTINCT template_id) FROM Documents","447":"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","448":"SELECT first_name ,  last_name FROM players ORDER BY birth_date","449":"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","450":"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","451":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","452":"SELECT Name FROM teacher ORDER BY Age ASC","453":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'","454":"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"","455":"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","456":"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008","457":"SELECT Name FROM teacher ORDER BY Age ASC","458":"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","459":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"","460":"SELECT avg(winner_rank) FROM matches","461":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1","462":"SELECT count(*) ,  hand FROM players GROUP BY hand","463":"SELECT count(DISTINCT loser_name) FROM matches","464":"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'","465":"SELECT count(DISTINCT country_code) FROM players","466":"SELECT min(loser_rank) FROM matches","467":"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","468":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","469":"SELECT count(*) FROM teacher","470":"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","471":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","472":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1","473":"SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"","474":"SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1","475":"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011","476":"select name from teacher where hometown != \"little lever urban district\"","477":"SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000","478":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016","479":"SELECT min(Number_products) ,  max(Number_products) FROM shop","480":"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"","481":"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","482":"SELECT template_id ,  version_number ,  template_type_code FROM Templates","483":"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","484":"SELECT Age ,  Hometown FROM teacher","485":"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","486":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","487":"SELECT name ,  tonnage FROM ship ORDER BY name DESC","488":"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","489":"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","490":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1","491":"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","492":"SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1","493":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","494":"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009","495":"SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1","496":"SELECT avg(winner_rank) FROM matches","497":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","498":"SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2","499":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1","500":"SELECT count(*) FROM matches","501":"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","502":"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)","503":"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","504":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'","505":"SELECT count(*) FROM Templates","506":"SELECT name FROM employee ORDER BY age","507":"SELECT template_type_code ,  template_type_description FROM Ref_template_types","508":"SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents","509":"SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1","510":"SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'","511":"SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'","512":"SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)","513":"SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)","514":"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","515":"SELECT max(SHARE) , min(SHARE) FROM TV_series;","516":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2","517":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","518":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","519":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1","520":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"","521":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")","522":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"","523":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id","524":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","525":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";","526":"select production_code ,  channel from cartoon order by original_air_date desc limit 1","527":"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","528":"SELECT count(*) FROM Transcripts","529":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1","530":"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'","531":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"","532":"SELECT section_name FROM Sections ORDER BY section_name DESC","533":"SELECT Name FROM country WHERE IndepYear  >  1950","534":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","535":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"","536":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC","537":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";","538":"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"","539":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"","540":"SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'","541":"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1","542":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"","543":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","544":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";","545":"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2","546":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)","547":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","548":"SELECT Name FROM people WHERE Nationality != \"Russia\"","549":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"","550":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","551":"SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'","552":"SELECT section_description FROM Sections WHERE section_name  =  'h'","553":"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"","554":"SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )","555":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","556":"SELECT section_description FROM Sections WHERE section_name  =  'h'","557":"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","558":"SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";","559":"SELECT section_name FROM Sections ORDER BY section_name DESC","560":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"","561":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage","562":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made","563":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";","564":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1","565":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id","566":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"","567":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID","568":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"","569":"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","570":"SELECT Title FROM Cartoon ORDER BY title","571":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","572":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","573":"SELECT DISTINCT state ,  created FROM votes","574":"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1","575":"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","576":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","577":"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","578":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000","579":"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"","580":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'","581":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"","582":"SELECT count(DISTINCT LANGUAGE) FROM countrylanguage","583":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )","584":"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"","585":"SELECT count(*) FROM poker_player","586":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC","587":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC","588":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1","589":"SELECT max(SHARE) , min(SHARE) FROM TV_series;","590":"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","591":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1","592":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"","593":"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","594":"SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )","595":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1","596":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","597":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")","598":"SELECT max(created) FROM votes WHERE state  =  'CA'","599":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"","600":"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"","601":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000","602":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","603":"select production_code ,  channel from cartoon order by original_air_date desc limit 1","604":"SELECT count(DISTINCT Nationality) FROM people","605":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"","606":"SELECT avg(Earnings) FROM poker_player","607":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs","608":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","609":"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","610":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC","611":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1","612":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","613":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","614":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"","615":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";","616":"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')","617":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";","618":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","619":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)","620":"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"","621":"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","622":"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id","623":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";","624":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"","625":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id","626":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC","627":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'","628":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","629":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","630":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";","631":"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","632":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","633":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1","634":"SELECT Episode FROM TV_series ORDER BY rating","635":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","636":"SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'","637":"SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1","638":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","639":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"","640":"SELECT Name FROM people WHERE Nationality != \"Russia\"","641":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1","642":"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","643":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";","644":"SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')","645":"SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";","646":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'","647":"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1","648":"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1","649":"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")","650":"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","651":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","652":"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"","653":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","654":"SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1","655":"SELECT Name FROM country WHERE IndepYear  >  1950","656":"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","657":"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","658":"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","659":"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","660":"SELECT count(*) FROM area_code_state","661":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","662":"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","663":"SELECT avg(transcript_date) FROM Transcripts","664":"SELECT avg(Earnings) FROM poker_player","665":"SELECT Continent FROM country WHERE Name  =  \"Anguilla\"","666":"SELECT count(DISTINCT Nationality) FROM people","667":"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")","668":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","669":"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'","670":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1","671":"SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'","672":"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","673":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200","674":"SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'","675":"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","676":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1","677":"SELECT Episode FROM TV_series ORDER BY rating","678":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1","679":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"","680":"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")","681":"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","682":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made","683":"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")","684":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1","685":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"","686":"SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","687":"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","688":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1","689":"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"","690":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1","691":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";","692":"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"","693":"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"","694":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","695":"SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'","696":"SELECT Title FROM Cartoon ORDER BY title","697":"select contestant_name from contestants where contestant_name like \"%al%\"","698":"SELECT first_name FROM Students WHERE current_address_id != permanent_address_id","699":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2","700":"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"","701":"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"","702":"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'","703":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","704":"SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"","705":"SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1","706":"SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"","707":"SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2","708":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"","709":"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","710":"SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'","711":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"","712":"SELECT avg(transcript_date) FROM Transcripts","713":"SELECT count(DISTINCT department_id) FROM Degree_Programs","714":"select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'","715":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"","716":"SELECT section_name ,  section_description FROM Sections","717":"SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","718":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID","719":"SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1","720":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","721":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1","722":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","723":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","724":"SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'","725":"SELECT count(*) FROM poker_player","726":"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","727":"SELECT section_name ,  section_description FROM Sections","728":"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","729":"SELECT max(area_code) ,  min(area_code) FROM area_code_state","730":"SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";","731":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000","732":"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1","733":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1","734":"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2","735":"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","736":"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"","737":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"","738":"SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs","739":"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"","740":"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")","741":"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")","742":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200","743":"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","744":"SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'","745":"SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1","746":"SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id","747":"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","748":"SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"","749":"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";","750":"SELECT other_student_details FROM Students ORDER BY other_student_details DESC","751":"SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"","752":"SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1","753":"SELECT count(DISTINCT department_id) FROM Degree_Programs","754":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"","755":"SELECT count(*) FROM Transcripts","756":"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";","757":"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","758":"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"","759":"SELECT vote_id ,  phone_number ,  state FROM votes","760":"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","761":"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"","762":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000","763":"SELECT count(DISTINCT current_address_id) FROM Students","764":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","765":"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"","766":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","767":"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1","768":"SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";","769":"SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";","770":"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";","771":"select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'","772":"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","773":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1","774":"SELECT DISTINCT breed_code ,  size_code FROM dogs","775":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC","776":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","777":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","778":"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","779":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )","780":"SELECT charge_type ,  charge_amount FROM Charges","781":"SELECT count(*) FROM singer","782":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","783":"SELECT Name FROM conductor WHERE Nationality != 'USA'","784":"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )","785":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","786":"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","787":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)","788":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000","789":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","790":"SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")","791":"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )","792":"SELECT Name FROM conductor WHERE Nationality != 'USA'","793":"SELECT count(*) FROM Highschooler","794":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC","795":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","796":"SELECT charge_type ,  charge_amount FROM Charges","797":"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1","798":"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","799":"SELECT date_arrived ,  date_departed FROM Dogs","800":"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","801":"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","802":"SELECT name FROM Highschooler WHERE grade  =  10","803":"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4","804":"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","805":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)","806":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1","807":"SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1","808":"SELECT date_arrived ,  date_departed FROM Dogs","809":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1","810":"SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4","811":"SELECT avg(Attendance) FROM SHOW","812":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","813":"select name from city where population between 160000 and 900000","814":"SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1","815":"SELECT Name FROM conductor ORDER BY Age ASC","816":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1","817":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1","818":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3","819":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","820":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1","821":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1","822":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1","823":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","824":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )","825":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","826":"SELECT name FROM Highschooler WHERE grade  =  10","827":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","828":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC","829":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id","830":"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"","831":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1","832":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","833":"SELECT avg(Attendance) FROM SHOW","834":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"","835":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","836":"SELECT count(DISTINCT dog_id) FROM Treatments","837":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","838":"SELECT count(DISTINCT Nationality) FROM conductor","839":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","840":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2","841":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3","842":"SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id","843":"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","844":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","845":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","846":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'","847":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"","848":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"","849":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","850":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","851":"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","852":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id","853":"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","854":"SELECT grade FROM Highschooler","855":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"","856":"SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","857":"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","858":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","859":"SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC","860":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1","861":"SELECT name ,  grade FROM Highschooler","862":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1","863":"SELECT Name FROM country ORDER BY Population DESC LIMIT 3","864":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes","865":"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","866":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955","867":"SELECT email_address ,  cell_number ,  home_phone FROM professionals","868":"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1","869":"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","870":"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","871":"SELECT max(age) FROM Dogs","872":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","873":"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1","874":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2","875":"SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1","876":"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')","877":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals","878":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","879":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"","880":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","881":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","882":"SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'","883":"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","884":"SELECT count(*) FROM conductor","885":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","886":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10","887":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003","888":"SELECT grade FROM Highschooler","889":"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","890":"SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')","891":"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","892":"SELECT DISTINCT breed_code ,  size_code FROM dogs","893":"SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003","894":"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","895":"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","896":"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","897":"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","898":"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"","899":"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"","900":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","901":"SELECT count(DISTINCT dog_id) FROM Treatments","902":"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","903":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3","904":"SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"","905":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"","906":"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","907":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3","908":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949","909":"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","910":"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","911":"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","912":"SELECT Name FROM singer WHERE Citizenship != \"France\"","913":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949","914":"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","915":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"","916":"SELECT count(*) FROM country WHERE continent  =  \"Asia\"","917":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id","918":"SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1","919":"SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)","920":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","921":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs","922":"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","923":"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )","924":"SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1","925":"SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2","926":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend","927":"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )","928":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","929":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","930":"SELECT count(DISTINCT professional_id) FROM Treatments","931":"SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )","932":"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","933":"SELECT Name FROM singer WHERE Citizenship != \"France\"","934":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)","935":"select count(*) from dogs where dog_id not in ( select dog_id from treatments )","936":"SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes","937":"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","938":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1","939":"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","940":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")","941":"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","942":"SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )","943":"SELECT max(age) FROM Dogs","944":"SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )","945":"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","946":"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","947":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","948":"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","949":"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","950":"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"","951":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC","952":"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","953":"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","954":"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"","955":"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","956":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC","957":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008","958":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","959":"SELECT count(*) FROM Highschooler","960":"SELECT name ,  grade FROM Highschooler","961":"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","962":"SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC","963":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","964":"SELECT count(DISTINCT professional_id) FROM Treatments","965":"SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","966":"SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")","967":"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","968":"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","969":"SELECT email_address ,  cell_number ,  home_phone FROM professionals","970":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1","971":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000","972":"SELECT count(*) FROM singer","973":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","974":"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008","975":"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","976":"SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)","977":"SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1","978":"SELECT state FROM Owners INTERSECT SELECT state FROM Professionals","979":"select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )","980":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955","981":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","982":"SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1","983":"SELECT Birth_Year ,  Citizenship FROM singer","984":"SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2","985":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC","986":"SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )","987":"SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"","988":"select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000","989":"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","990":"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","991":"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","992":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","993":"SELECT avg(age) FROM Dogs","994":"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","995":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1","996":"SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )","997":"SELECT count(*) FROM conductor","998":"SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs","999":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","1000":"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"","1001":"select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000","1002":"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"","1003":"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","1004":"SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1","1005":"SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10","1006":"SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1","1007":"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","1008":"SELECT avg(age) FROM Dogs","1009":"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","1010":"SELECT Birth_Year ,  Citizenship FROM singer","1011":"SELECT Name FROM conductor ORDER BY Age ASC","1012":"SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code","1013":"SELECT max(charge_amount) FROM Charges","1014":"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","1015":"SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")","1016":"select citizenship from singer group by citizenship order by count(*) desc limit 1","1017":"SELECT count(DISTINCT Nationality) FROM conductor","1018":"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","1019":"SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000","1020":"SELECT count(*) FROM Other_Available_Features","1021":"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","1022":"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode","1023":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"","1024":"SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )","1025":"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"","1026":"SELECT Name FROM country ORDER BY Population ASC LIMIT 3","1027":"SELECT max(charge_amount) FROM Charges","1028":"SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"","1029":"SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend","1030":"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"","1031":"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","1032":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"","1033":"SELECT count(DISTINCT current_address_id) FROM Students"},"db_id":{"0":"flight_2","1":"pets_1","2":"concert_singer","3":"flight_2","4":"car_1","5":"flight_2","6":"car_1","7":"car_1","8":"flight_2","9":"car_1","10":"flight_2","11":"car_1","12":"car_1","13":"car_1","14":"car_1","15":"flight_2","16":"flight_2","17":"flight_2","18":"pets_1","19":"concert_singer","20":"car_1","21":"concert_singer","22":"car_1","23":"concert_singer","24":"concert_singer","25":"car_1","26":"car_1","27":"pets_1","28":"pets_1","29":"pets_1","30":"pets_1","31":"car_1","32":"flight_2","33":"flight_2","34":"car_1","35":"concert_singer","36":"concert_singer","37":"concert_singer","38":"pets_1","39":"car_1","40":"flight_2","41":"pets_1","42":"flight_2","43":"concert_singer","44":"flight_2","45":"concert_singer","46":"car_1","47":"car_1","48":"pets_1","49":"flight_2","50":"car_1","51":"car_1","52":"car_1","53":"pets_1","54":"flight_2","55":"car_1","56":"concert_singer","57":"flight_2","58":"flight_2","59":"car_1","60":"pets_1","61":"concert_singer","62":"car_1","63":"car_1","64":"car_1","65":"flight_2","66":"concert_singer","67":"flight_2","68":"car_1","69":"concert_singer","70":"car_1","71":"flight_2","72":"concert_singer","73":"flight_2","74":"pets_1","75":"concert_singer","76":"car_1","77":"flight_2","78":"car_1","79":"pets_1","80":"pets_1","81":"car_1","82":"flight_2","83":"car_1","84":"concert_singer","85":"car_1","86":"flight_2","87":"pets_1","88":"pets_1","89":"car_1","90":"pets_1","91":"car_1","92":"concert_singer","93":"flight_2","94":"pets_1","95":"car_1","96":"concert_singer","97":"car_1","98":"car_1","99":"flight_2","100":"car_1","101":"car_1","102":"car_1","103":"concert_singer","104":"pets_1","105":"pets_1","106":"pets_1","107":"car_1","108":"flight_2","109":"flight_2","110":"car_1","111":"flight_2","112":"car_1","113":"flight_2","114":"flight_2","115":"flight_2","116":"flight_2","117":"car_1","118":"car_1","119":"flight_2","120":"flight_2","121":"concert_singer","122":"pets_1","123":"flight_2","124":"concert_singer","125":"car_1","126":"flight_2","127":"concert_singer","128":"car_1","129":"concert_singer","130":"pets_1","131":"pets_1","132":"flight_2","133":"flight_2","134":"flight_2","135":"car_1","136":"car_1","137":"flight_2","138":"car_1","139":"pets_1","140":"concert_singer","141":"flight_2","142":"flight_2","143":"flight_2","144":"concert_singer","145":"car_1","146":"car_1","147":"pets_1","148":"flight_2","149":"pets_1","150":"car_1","151":"car_1","152":"flight_2","153":"car_1","154":"car_1","155":"pets_1","156":"car_1","157":"flight_2","158":"flight_2","159":"flight_2","160":"concert_singer","161":"car_1","162":"concert_singer","163":"concert_singer","164":"car_1","165":"flight_2","166":"flight_2","167":"car_1","168":"car_1","169":"car_1","170":"car_1","171":"flight_2","172":"pets_1","173":"flight_2","174":"car_1","175":"flight_2","176":"flight_2","177":"flight_2","178":"car_1","179":"car_1","180":"concert_singer","181":"pets_1","182":"car_1","183":"car_1","184":"car_1","185":"car_1","186":"concert_singer","187":"flight_2","188":"car_1","189":"flight_2","190":"flight_2","191":"concert_singer","192":"flight_2","193":"flight_2","194":"pets_1","195":"car_1","196":"concert_singer","197":"flight_2","198":"car_1","199":"concert_singer","200":"flight_2","201":"pets_1","202":"car_1","203":"car_1","204":"pets_1","205":"car_1","206":"concert_singer","207":"concert_singer","208":"car_1","209":"pets_1","210":"flight_2","211":"pets_1","212":"concert_singer","213":"concert_singer","214":"flight_2","215":"concert_singer","216":"car_1","217":"concert_singer","218":"car_1","219":"concert_singer","220":"car_1","221":"car_1","222":"car_1","223":"flight_2","224":"car_1","225":"pets_1","226":"car_1","227":"car_1","228":"pets_1","229":"pets_1","230":"car_1","231":"flight_2","232":"flight_2","233":"flight_2","234":"car_1","235":"car_1","236":"concert_singer","237":"flight_2","238":"flight_2","239":"pets_1","240":"flight_2","241":"flight_2","242":"concert_singer","243":"car_1","244":"flight_2","245":"car_1","246":"pets_1","247":"concert_singer","248":"pets_1","249":"flight_2","250":"concert_singer","251":"flight_2","252":"pets_1","253":"car_1","254":"flight_2","255":"flight_2","256":"car_1","257":"cre_Doc_Template_Mgt","258":"student_transcripts_tracking","259":"cre_Doc_Template_Mgt","260":"museum_visit","261":"wta_1","262":"wta_1","263":"museum_visit","264":"flight_2","265":"museum_visit","266":"wta_1","267":"cre_Doc_Template_Mgt","268":"wta_1","269":"course_teach","270":"wta_1","271":"cre_Doc_Template_Mgt","272":"employee_hire_evaluation","273":"cre_Doc_Template_Mgt","274":"cre_Doc_Template_Mgt","275":"wta_1","276":"wta_1","277":"cre_Doc_Template_Mgt","278":"cre_Doc_Template_Mgt","279":"wta_1","280":"course_teach","281":"course_teach","282":"cre_Doc_Template_Mgt","283":"employee_hire_evaluation","284":"wta_1","285":"course_teach","286":"cre_Doc_Template_Mgt","287":"employee_hire_evaluation","288":"cre_Doc_Template_Mgt","289":"museum_visit","290":"cre_Doc_Template_Mgt","291":"wta_1","292":"cre_Doc_Template_Mgt","293":"cre_Doc_Template_Mgt","294":"wta_1","295":"wta_1","296":"student_transcripts_tracking","297":"battle_death","298":"cre_Doc_Template_Mgt","299":"employee_hire_evaluation","300":"cre_Doc_Template_Mgt","301":"employee_hire_evaluation","302":"wta_1","303":"cre_Doc_Template_Mgt","304":"wta_1","305":"employee_hire_evaluation","306":"cre_Doc_Template_Mgt","307":"cre_Doc_Template_Mgt","308":"employee_hire_evaluation","309":"course_teach","310":"cre_Doc_Template_Mgt","311":"cre_Doc_Template_Mgt","312":"wta_1","313":"wta_1","314":"cre_Doc_Template_Mgt","315":"course_teach","316":"wta_1","317":"course_teach","318":"course_teach","319":"cre_Doc_Template_Mgt","320":"wta_1","321":"cre_Doc_Template_Mgt","322":"cre_Doc_Template_Mgt","323":"wta_1","324":"cre_Doc_Template_Mgt","325":"employee_hire_evaluation","326":"museum_visit","327":"employee_hire_evaluation","328":"cre_Doc_Template_Mgt","329":"battle_death","330":"course_teach","331":"student_transcripts_tracking","332":"museum_visit","333":"wta_1","334":"wta_1","335":"cre_Doc_Template_Mgt","336":"course_teach","337":"course_teach","338":"wta_1","339":"wta_1","340":"wta_1","341":"wta_1","342":"battle_death","343":"student_transcripts_tracking","344":"battle_death","345":"wta_1","346":"cre_Doc_Template_Mgt","347":"cre_Doc_Template_Mgt","348":"cre_Doc_Template_Mgt","349":"employee_hire_evaluation","350":"employee_hire_evaluation","351":"cre_Doc_Template_Mgt","352":"cre_Doc_Template_Mgt","353":"cre_Doc_Template_Mgt","354":"employee_hire_evaluation","355":"course_teach","356":"wta_1","357":"museum_visit","358":"cre_Doc_Template_Mgt","359":"battle_death","360":"cre_Doc_Template_Mgt","361":"battle_death","362":"wta_1","363":"cre_Doc_Template_Mgt","364":"cre_Doc_Template_Mgt","365":"employee_hire_evaluation","366":"cre_Doc_Template_Mgt","367":"student_transcripts_tracking","368":"museum_visit","369":"cre_Doc_Template_Mgt","370":"cre_Doc_Template_Mgt","371":"battle_death","372":"wta_1","373":"cre_Doc_Template_Mgt","374":"cre_Doc_Template_Mgt","375":"cre_Doc_Template_Mgt","376":"wta_1","377":"cre_Doc_Template_Mgt","378":"cre_Doc_Template_Mgt","379":"employee_hire_evaluation","380":"wta_1","381":"cre_Doc_Template_Mgt","382":"battle_death","383":"cre_Doc_Template_Mgt","384":"employee_hire_evaluation","385":"cre_Doc_Template_Mgt","386":"cre_Doc_Template_Mgt","387":"wta_1","388":"course_teach","389":"course_teach","390":"employee_hire_evaluation","391":"wta_1","392":"museum_visit","393":"wta_1","394":"cre_Doc_Template_Mgt","395":"course_teach","396":"wta_1","397":"cre_Doc_Template_Mgt","398":"employee_hire_evaluation","399":"course_teach","400":"wta_1","401":"cre_Doc_Template_Mgt","402":"museum_visit","403":"cre_Doc_Template_Mgt","404":"wta_1","405":"course_teach","406":"cre_Doc_Template_Mgt","407":"employee_hire_evaluation","408":"cre_Doc_Template_Mgt","409":"student_transcripts_tracking","410":"wta_1","411":"cre_Doc_Template_Mgt","412":"cre_Doc_Template_Mgt","413":"wta_1","414":"museum_visit","415":"course_teach","416":"wta_1","417":"cre_Doc_Template_Mgt","418":"employee_hire_evaluation","419":"cre_Doc_Template_Mgt","420":"wta_1","421":"wta_1","422":"employee_hire_evaluation","423":"cre_Doc_Template_Mgt","424":"employee_hire_evaluation","425":"battle_death","426":"cre_Doc_Template_Mgt","427":"employee_hire_evaluation","428":"wta_1","429":"battle_death","430":"cre_Doc_Template_Mgt","431":"wta_1","432":"cre_Doc_Template_Mgt","433":"cre_Doc_Template_Mgt","434":"cre_Doc_Template_Mgt","435":"battle_death","436":"course_teach","437":"employee_hire_evaluation","438":"battle_death","439":"student_transcripts_tracking","440":"wta_1","441":"employee_hire_evaluation","442":"cre_Doc_Template_Mgt","443":"wta_1","444":"cre_Doc_Template_Mgt","445":"course_teach","446":"cre_Doc_Template_Mgt","447":"wta_1","448":"wta_1","449":"battle_death","450":"cre_Doc_Template_Mgt","451":"course_teach","452":"course_teach","453":"student_transcripts_tracking","454":"cre_Doc_Template_Mgt","455":"wta_1","456":"museum_visit","457":"course_teach","458":"battle_death","459":"course_teach","460":"wta_1","461":"employee_hire_evaluation","462":"wta_1","463":"wta_1","464":"battle_death","465":"wta_1","466":"wta_1","467":"cre_Doc_Template_Mgt","468":"wta_1","469":"course_teach","470":"employee_hire_evaluation","471":"course_teach","472":"employee_hire_evaluation","473":"cre_Doc_Template_Mgt","474":"employee_hire_evaluation","475":"museum_visit","476":"course_teach","477":"employee_hire_evaluation","478":"wta_1","479":"employee_hire_evaluation","480":"cre_Doc_Template_Mgt","481":"museum_visit","482":"cre_Doc_Template_Mgt","483":"cre_Doc_Template_Mgt","484":"course_teach","485":"cre_Doc_Template_Mgt","486":"course_teach","487":"battle_death","488":"museum_visit","489":"employee_hire_evaluation","490":"wta_1","491":"employee_hire_evaluation","492":"cre_Doc_Template_Mgt","493":"wta_1","494":"museum_visit","495":"employee_hire_evaluation","496":"wta_1","497":"wta_1","498":"cre_Doc_Template_Mgt","499":"course_teach","500":"wta_1","501":"employee_hire_evaluation","502":"museum_visit","503":"museum_visit","504":"cre_Doc_Template_Mgt","505":"cre_Doc_Template_Mgt","506":"employee_hire_evaluation","507":"cre_Doc_Template_Mgt","508":"cre_Doc_Template_Mgt","509":"employee_hire_evaluation","510":"student_transcripts_tracking","511":"cre_Doc_Template_Mgt","512":"employee_hire_evaluation","513":"employee_hire_evaluation","514":"wta_1","515":"tvshow","516":"poker_player","517":"student_transcripts_tracking","518":"poker_player","519":"world_1","520":"world_1","521":"world_1","522":"world_1","523":"student_transcripts_tracking","524":"poker_player","525":"tvshow","526":"tvshow","527":"student_transcripts_tracking","528":"student_transcripts_tracking","529":"world_1","530":"student_transcripts_tracking","531":"world_1","532":"student_transcripts_tracking","533":"world_1","534":"student_transcripts_tracking","535":"world_1","536":"student_transcripts_tracking","537":"tvshow","538":"world_1","539":"tvshow","540":"student_transcripts_tracking","541":"student_transcripts_tracking","542":"world_1","543":"tvshow","544":"tvshow","545":"tvshow","546":"poker_player","547":"tvshow","548":"poker_player","549":"world_1","550":"tvshow","551":"voter_1","552":"student_transcripts_tracking","553":"world_1","554":"voter_1","555":"student_transcripts_tracking","556":"student_transcripts_tracking","557":"voter_1","558":"tvshow","559":"student_transcripts_tracking","560":"world_1","561":"world_1","562":"poker_player","563":"tvshow","564":"poker_player","565":"student_transcripts_tracking","566":"world_1","567":"poker_player","568":"world_1","569":"student_transcripts_tracking","570":"tvshow","571":"student_transcripts_tracking","572":"poker_player","573":"voter_1","574":"world_1","575":"student_transcripts_tracking","576":"student_transcripts_tracking","577":"student_transcripts_tracking","578":"poker_player","579":"world_1","580":"student_transcripts_tracking","581":"world_1","582":"world_1","583":"student_transcripts_tracking","584":"world_1","585":"poker_player","586":"poker_player","587":"poker_player","588":"poker_player","589":"tvshow","590":"student_transcripts_tracking","591":"poker_player","592":"world_1","593":"tvshow","594":"student_transcripts_tracking","595":"poker_player","596":"tvshow","597":"world_1","598":"voter_1","599":"world_1","600":"world_1","601":"poker_player","602":"world_1","603":"tvshow","604":"poker_player","605":"world_1","606":"poker_player","607":"student_transcripts_tracking","608":"tvshow","609":"tvshow","610":"poker_player","611":"world_1","612":"student_transcripts_tracking","613":"student_transcripts_tracking","614":"world_1","615":"tvshow","616":"tvshow","617":"tvshow","618":"poker_player","619":"poker_player","620":"world_1","621":"student_transcripts_tracking","622":"student_transcripts_tracking","623":"tvshow","624":"world_1","625":"student_transcripts_tracking","626":"poker_player","627":"tvshow","628":"tvshow","629":"tvshow","630":"tvshow","631":"student_transcripts_tracking","632":"student_transcripts_tracking","633":"world_1","634":"tvshow","635":"tvshow","636":"student_transcripts_tracking","637":"student_transcripts_tracking","638":"tvshow","639":"world_1","640":"poker_player","641":"student_transcripts_tracking","642":"student_transcripts_tracking","643":"tvshow","644":"tvshow","645":"tvshow","646":"student_transcripts_tracking","647":"student_transcripts_tracking","648":"student_transcripts_tracking","649":"world_1","650":"tvshow","651":"tvshow","652":"world_1","653":"poker_player","654":"student_transcripts_tracking","655":"world_1","656":"student_transcripts_tracking","657":"tvshow","658":"student_transcripts_tracking","659":"student_transcripts_tracking","660":"voter_1","661":"tvshow","662":"tvshow","663":"student_transcripts_tracking","664":"poker_player","665":"world_1","666":"poker_player","667":"world_1","668":"tvshow","669":"student_transcripts_tracking","670":"world_1","671":"student_transcripts_tracking","672":"student_transcripts_tracking","673":"poker_player","674":"voter_1","675":"tvshow","676":"world_1","677":"tvshow","678":"world_1","679":"world_1","680":"world_1","681":"tvshow","682":"poker_player","683":"world_1","684":"poker_player","685":"world_1","686":"tvshow","687":"student_transcripts_tracking","688":"world_1","689":"world_1","690":"voter_1","691":"tvshow","692":"world_1","693":"tvshow","694":"tvshow","695":"tvshow","696":"tvshow","697":"voter_1","698":"student_transcripts_tracking","699":"poker_player","700":"world_1","701":"world_1","702":"voter_1","703":"poker_player","704":"world_1","705":"voter_1","706":"world_1","707":"tvshow","708":"world_1","709":"student_transcripts_tracking","710":"voter_1","711":"world_1","712":"student_transcripts_tracking","713":"student_transcripts_tracking","714":"student_transcripts_tracking","715":"world_1","716":"student_transcripts_tracking","717":"tvshow","718":"poker_player","719":"world_1","720":"student_transcripts_tracking","721":"poker_player","722":"tvshow","723":"world_1","724":"tvshow","725":"poker_player","726":"tvshow","727":"student_transcripts_tracking","728":"student_transcripts_tracking","729":"voter_1","730":"tvshow","731":"poker_player","732":"world_1","733":"world_1","734":"voter_1","735":"tvshow","736":"world_1","737":"world_1","738":"student_transcripts_tracking","739":"world_1","740":"world_1","741":"world_1","742":"poker_player","743":"tvshow","744":"student_transcripts_tracking","745":"world_1","746":"student_transcripts_tracking","747":"tvshow","748":"world_1","749":"tvshow","750":"student_transcripts_tracking","751":"world_1","752":"student_transcripts_tracking","753":"student_transcripts_tracking","754":"world_1","755":"student_transcripts_tracking","756":"tvshow","757":"student_transcripts_tracking","758":"world_1","759":"voter_1","760":"student_transcripts_tracking","761":"world_1","762":"poker_player","763":"student_transcripts_tracking","764":"poker_player","765":"world_1","766":"poker_player","767":"world_1","768":"tvshow","769":"tvshow","770":"tvshow","771":"student_transcripts_tracking","772":"network_1","773":"orchestra","774":"dog_kennels","775":"orchestra","776":"orchestra","777":"singer","778":"world_1","779":"dog_kennels","780":"dog_kennels","781":"singer","782":"world_1","783":"orchestra","784":"dog_kennels","785":"world_1","786":"dog_kennels","787":"singer","788":"singer","789":"world_1","790":"world_1","791":"dog_kennels","792":"orchestra","793":"network_1","794":"orchestra","795":"dog_kennels","796":"dog_kennels","797":"world_1","798":"dog_kennels","799":"dog_kennels","800":"dog_kennels","801":"dog_kennels","802":"network_1","803":"network_1","804":"dog_kennels","805":"orchestra","806":"orchestra","807":"real_estate_properties","808":"dog_kennels","809":"singer","810":"network_1","811":"orchestra","812":"network_1","813":"world_1","814":"orchestra","815":"orchestra","816":"singer","817":"orchestra","818":"world_1","819":"network_1","820":"orchestra","821":"dog_kennels","822":"orchestra","823":"singer","824":"dog_kennels","825":"world_1","826":"network_1","827":"dog_kennels","828":"orchestra","829":"network_1","830":"real_estate_properties","831":"network_1","832":"dog_kennels","833":"orchestra","834":"network_1","835":"network_1","836":"dog_kennels","837":"dog_kennels","838":"orchestra","839":"singer","840":"network_1","841":"network_1","842":"network_1","843":"dog_kennels","844":"network_1","845":"network_1","846":"dog_kennels","847":"world_1","848":"orchestra","849":"network_1","850":"dog_kennels","851":"dog_kennels","852":"network_1","853":"world_1","854":"network_1","855":"network_1","856":"world_1","857":"world_1","858":"world_1","859":"orchestra","860":"orchestra","861":"network_1","862":"singer","863":"world_1","864":"network_1","865":"world_1","866":"singer","867":"dog_kennels","868":"dog_kennels","869":"dog_kennels","870":"network_1","871":"dog_kennels","872":"world_1","873":"orchestra","874":"network_1","875":"world_1","876":"world_1","877":"dog_kennels","878":"orchestra","879":"world_1","880":"dog_kennels","881":"world_1","882":"dog_kennels","883":"network_1","884":"orchestra","885":"network_1","886":"network_1","887":"orchestra","888":"network_1","889":"world_1","890":"world_1","891":"dog_kennels","892":"dog_kennels","893":"orchestra","894":"network_1","895":"dog_kennels","896":"dog_kennels","897":"network_1","898":"network_1","899":"orchestra","900":"singer","901":"dog_kennels","902":"network_1","903":"network_1","904":"network_1","905":"network_1","906":"network_1","907":"world_1","908":"singer","909":"world_1","910":"dog_kennels","911":"dog_kennels","912":"singer","913":"singer","914":"dog_kennels","915":"world_1","916":"world_1","917":"network_1","918":"dog_kennels","919":"orchestra","920":"singer","921":"dog_kennels","922":"dog_kennels","923":"dog_kennels","924":"dog_kennels","925":"network_1","926":"network_1","927":"dog_kennels","928":"dog_kennels","929":"dog_kennels","930":"dog_kennels","931":"dog_kennels","932":"dog_kennels","933":"singer","934":"singer","935":"dog_kennels","936":"network_1","937":"orchestra","938":"dog_kennels","939":"network_1","940":"world_1","941":"world_1","942":"dog_kennels","943":"dog_kennels","944":"dog_kennels","945":"dog_kennels","946":"world_1","947":"network_1","948":"dog_kennels","949":"network_1","950":"world_1","951":"orchestra","952":"dog_kennels","953":"dog_kennels","954":"world_1","955":"world_1","956":"singer","957":"orchestra","958":"singer","959":"network_1","960":"network_1","961":"dog_kennels","962":"orchestra","963":"dog_kennels","964":"dog_kennels","965":"network_1","966":"world_1","967":"dog_kennels","968":"dog_kennels","969":"dog_kennels","970":"singer","971":"singer","972":"singer","973":"dog_kennels","974":"orchestra","975":"world_1","976":"network_1","977":"network_1","978":"dog_kennels","979":"dog_kennels","980":"singer","981":"singer","982":"dog_kennels","983":"singer","984":"network_1","985":"singer","986":"dog_kennels","987":"world_1","988":"world_1","989":"world_1","990":"dog_kennels","991":"orchestra","992":"singer","993":"dog_kennels","994":"network_1","995":"singer","996":"dog_kennels","997":"orchestra","998":"dog_kennels","999":"world_1","1000":"network_1","1001":"world_1","1002":"world_1","1003":"dog_kennels","1004":"orchestra","1005":"network_1","1006":"orchestra","1007":"world_1","1008":"dog_kennels","1009":"network_1","1010":"singer","1011":"orchestra","1012":"real_estate_properties","1013":"dog_kennels","1014":"world_1","1015":"world_1","1016":"singer","1017":"orchestra","1018":"dog_kennels","1019":"world_1","1020":"real_estate_properties","1021":"dog_kennels","1022":"world_1","1023":"orchestra","1024":"dog_kennels","1025":"world_1","1026":"world_1","1027":"dog_kennels","1028":"network_1","1029":"network_1","1030":"orchestra","1031":"dog_kennels","1032":"flight_2","1033":"student_transcripts_tracking"},"reasoning":{"0":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of airlines. Use the FROM clause to specify the airlines table. We will also need to count the number of flights associated with each airline. 2. Aggregation Structure: Use the COUNT function to count the number of flights for each airline. This will be done in conjunction with the GROUP BY clause to group the results by airline. 3. Condition Structure: Use the HAVING clause to filter the results to only include airlines that have at least 10 flights. 4. Join Structure: Use an INNER JOIN between the airlines and flights tables based on the airline name to connect the airlines with their respective flights.","1":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct first names and ages of students who have pets. The fields to select are \"Student.Fname\" and \"Student.Age.\" 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are interested in all students who have pets, which will be determined by the JOIN. 3. Join Structure: Use an INNER JOIN between the \"Student\" table and the \"Has_Pet\" table based on the shared key \"StuID\" to link students with their pets. 4. Aggregation Structure: Use DISTINCT to ensure that the results include only unique combinations of first names and ages of students who have pets.","2":"1. Sequential Structure: Start with the SELECT clause to retrieve the song names from the singer table. Use the FROM clause to specify the singer table. 2. Condition Structure: Use the WHERE clause to filter singers based on their age being greater than the average age of all singers. 3. Join Structure: Not required, as all necessary data is contained within the singer table. 4. Aggregation Structure: Use a subquery within the WHERE clause to calculate the average age of all singers, filtering for those whose age exceeds this average.","3":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"airlines.Airline\". 2. Condition Structure: Use a WHERE clause to filter for the airline with the abbreviation 'UAL'. 3. Join Structure: No JOIN is necessary since all relevant information is in the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airline name that matches the specified abbreviation.","4":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the countries table. 2. Condition Structure: Use a WHERE clause to filter for countries that do not have any associated car makers. This can be achieved by checking that the country ID is not present in the car_makers table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching entries in the car_makers table. 4. Aggregation Structure: Not needed, as we are simply retrieving country names without any aggregation.","5":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights landing in the specified cities. 2. Condition Structure: Apply a WHERE clause to filter for flights that land in either \"Aberdeen\" or \"Abilene.\" This will involve checking the \"City\" column in the \"airports\" table. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the \"DestAirport\" and \"AirportCode\" to link each flight with its destination airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions, ensuring we group by the destination airport.","6":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars with horsepower greater than 150. 2. Condition Structure: Use a WHERE clause to filter records where \"cars_data.Horsepower\" is more than 150. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cars that meet the horsepower condition.","7":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"carmakers.Maker\" and \"modellist.Model.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all makers and models. 3. Join Structure: Use a JOIN between the \"carmakers\" and \"modellist\" tables based on the relationship where \"modellist.Maker\" equals \"carmakers.Id\" to link each maker with its respective models. 4. Aggregation Structure: No aggregation is needed, but we will ensure that all records are returned from the join.","8":"1. Sequential Structure: Start with the SELECT clause to retrieve the airport code. Use the FROM clause to specify the flights table, as we need to count the number of flights associated with each airport. 2. Aggregation Structure: Use COUNT to aggregate the number of flights for each airport. This will allow us to determine which airport has the least flights. 3. Join Structure: Use JOIN to connect the flights table with the airports table based on the SourceAirport and DestAirport fields to ensure we are counting flights for all airports. 4. Condition Structure: Use GROUP BY to group the results by airport code and apply the ORDER BY clause to sort the counts in ascending order. Finally, use LIMIT to get the airport with the least flights.","9":"1. Sequential Structure: Start with the SELECT clause to retrieve the model and the count of distinct makers. Use the FROM clause to specify the model_list table and join it with the car_names table to link models with their respective makes. 2. Aggregation Structure: Use COUNT to count the number of distinct makers for each model. Apply GROUP BY on the model to aggregate the counts. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of makers in descending order, allowing us to identify the model with the most versions. 4. Limiting Results: Use LIMIT to restrict the output to only the top result, which will be the model with the most versions.","10":"1. Sequential Structure: Start with the SELECT clause to retrieve the abbreviation and country of the airline. Use the FROM clause to specify the airlines table. 2. Join Structure: Join the airlines table with the flights table on the Airline field to connect airlines with their respective flights. 3. Aggregation Structure: Use GROUP BY to group the results by airline, allowing us to count the number of flights for each airline. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of flights in ascending order and limit the results to the top entry to find the airline with the fewest flights.","11":"1. Sequential Structure: Start with the SELECT clause to retrieve the FullName and Id of car makers. Use the FROM clause to specify the car_makers table. 2. Aggregation Structure: Use GROUP BY to group the results by Maker (which corresponds to the Id of car makers) to count the number of car models associated with each maker. 3. Condition Structure: Apply a HAVING clause to filter the groups where the count of models is greater than 3, ensuring we only get makers who designed more than 3 car models. 4. Join Structure: Use an INNER JOIN between the car_makers and model_list tables based on the Maker Id to relate car makers to their respective models.","12":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"carmakers.Maker\" field, which contains the names of the car makers. 2. Condition Structure: Use a WHERE clause to filter for records where \"carsdata.Year\" is 1970. 3. Join Structure: Use JOIN clauses to connect the \"cars_data\" table with the \"car_names\" table based on \"cars_data.Id = car_names.MakeId,\" and then join \"car_names\" with \"model_list\" on \"car_names.Model = model_list.Model,\" and finally join \"model_list\" with \"car_makers\" on \"model_list.Maker = car_makers.Id\" to link the car makers to the cars produced in 1970. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be applied to ensure unique car maker names are returned.","13":"1. Sequential Structure: Start with the SELECT clause to retrieve distinct models from the model_list table. Use the FROM clause to specify the model_list table. 2. Condition Structure: Apply a WHERE clause to filter models produced by the maker with the full name 'General Motors' or those with a weight greater than 3500. This will involve checking the conditions for both the maker's full name and the weight. 3. Join Structure: Use JOIN clauses to connect the model_list table with the car_makers table to access the full name of the maker and the cars_data table to access the weight of the cars. 4. Aggregation Structure: Use DISTINCT to ensure that only unique models are returned in the result set.","14":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"carmakers.Id,\" \"carmakers.FullName,\" and the count of car models produced by each maker. 2. Condition Structure: No specific filtering condition is needed, as we want to count all car models for each maker. 3. Join Structure: Use a JOIN between the \"carmakers\" table and the \"modellist\" table based on the foreign key relationship where \"modellist.Maker\" equals \"carmakers.Id.\" 4. Aggregation Structure: Use COUNT on \"modellist.Model\" to count the number of car models for each maker, and GROUP BY \"carmakers.Id\" and \"carmakers.FullName\" to group the results by each maker.","15":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" for the flights leaving from Aberdeen. 2. Condition Structure: Apply a WHERE clause to filter for flights where the source airport is in Aberdeen. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the \"SourceAirport\" and \"AirportCode\" to link each flight with its respective source airport. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the flight numbers without any summarization.","16":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights that meet the criteria. 2. Condition Structure: Apply a WHERE clause to filter for flights that depart from the city 'Aberdeen' and have a destination city 'Ashley.' This will involve checking the city names in the airports table. 3. Join Structure: Use JOIN to connect the flights table with the airports table twice: once to get the source airport (for 'Aberdeen') and once for the destination airport (for 'Ashley'). 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","17":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airlines.Airline\" field. 2. Condition Structure: Apply a HAVING clause to filter for airlines that have fewer than 200 flights. 3. Join Structure: Use a JOIN between the \"airlines\" and \"flights\" tables based on the \"Airline\" field to associate each airline with its respective flights. 4. Aggregation Structure: Use COUNT on \"flights.Airline\" to count the number of flights per airline, then filter with HAVING to select airlines with fewer than 200 flights.","18":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. 2. Condition Structure: Use a WHERE clause to filter for students who have a dog and do not have a cat. This will involve checking the PetType for 'dog' and ensuring that the student does not have any associated pets of type 'cat'. 3. Join Structure: Use INNER JOINs between the Student, Has_Pet, and Pets tables based on the StuID and PetID to connect students with their pets and filter based on pet types. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","19":"1. Sequential Structure: Start with the SELECT clause to retrieve the stadium name and capacity. Use the FROM clause to specify the stadium table. Then, apply an ORDER BY clause to sort the results by average attendance in descending order. 2. Condition Structure: No specific condition (WHERE clause) is needed as we are interested in the stadium with the highest average attendance. 3. Join Structure: Not required, as we only need data from the stadium table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by average attendance and limiting to the top result effectively gives us the stadium with the highest average attendance.","20":"1. Sequential Structure: Start with the SELECT clause to retrieve the maker and year of the car. Use the FROM clause to specify the cars_data table, and join it with the car_names and model_list tables to get the maker information. 2. Condition Structure: Use the WHERE clause to filter for the earliest year in the cars_data table. 3. Join Structure: Use JOINs between cars_data, car_names, and model_list to connect the car data with the corresponding maker. 4. Aggregation Structure: Use MIN to find the earliest year from the cars_data table.","21":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the average, minimum, and maximum age of singers. 2. Condition Structure: Use a WHERE clause to filter for singers whose country is 'French'. 3. Aggregation Structure: Use AVG, MIN, and MAX functions to calculate the average, minimum, and maximum ages of the filtered singers. 4. Join Structure: No JOIN is required since all necessary information is available in the \"singer\" table.","22":"1. Sequential Structure: Start with the SELECT clause to specify the average weight of cars and the year. 2. Aggregation Structure: Use the AVG function to calculate the average weight of cars for each year. 3. Grouping Structure: Use GROUP BY on \"cars_data.Year\" to calculate the average weight for each year. 4. Join Structure: No JOIN is required since all necessary information is available in the \"cars_data\" table.","23":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" and \"singer.Country\" of singers whose song titles contain the word 'Hey'. 2. Condition Structure: Use a WHERE clause to filter for song titles that contain the word 'Hey' using the LIKE operator. 3. Join Structure: A JOIN is necessary to connect the \"singer\" table with the \"singer_in_concert\" table to access the song titles. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and countries of the singers based on the specified condition.","24":"1. Sequential Structure: Start with the SELECT clause to specify the distinct countries of singers. 2. Condition Structure: Use a WHERE clause to filter for singers whose age is greater than 20. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"singer\" table. 4. Aggregation Structure: Use DISTINCT to ensure that only unique countries are returned in the result set.","25":"1. Sequential Structure: Start with the SELECT clause to retrieve the model of the car and its horsepower. Use the FROM clause to specify the cars_data table, as it contains the horsepower and cylinder information. 2. Condition Structure: Use the WHERE clause to filter for cars that have exactly 4 cylinders. 3. Join Structure: Use JOIN clauses to connect the cars_data table with the car_names and model_list tables to get the corresponding model names. 4. Aggregation Structure: Use the MAX function to find the maximum horsepower among the filtered results and group by the model to ensure we get the correct model associated with that horsepower.","26":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars produced in the year 1980. 2. Condition Structure: Use a WHERE clause to filter records for the year 1980 in the \"cars_data\" table. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cars produced in 1980.","27":"1. Sequential Structure: Start with the SELECT clause to retrieve the weight of the pets. Use the FROM clause to specify the Pets table. 2. Condition Structure: Use a WHERE clause to filter for pets that are dogs and to find the youngest dog by comparing ages. 3. Join Structure: Use a JOIN between the Has_Pet and Pets tables based on PetID to relate students to their pets. 4. Aggregation Structure: Use the MIN function to find the minimum age of dogs and then filter for the weight of the dog that matches this age.","28":"1. Sequential Structure: Start with the SELECT clause to retrieve the last name of the student. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet and Pets tables to link students with their pets. 2. Condition Structure: Use the WHERE clause to filter for pets that are of type 'cat' and are 3 years old. 3. Join Structure: Use INNER JOINs between the Student, Has_Pet, and Pets tables based on the foreign key relationships to connect students with their pets. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","29":"1. Sequential Structure: Start with the SELECT clause to retrieve the student IDs from the Student table. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. 2. Condition Structure: Use a WHERE clause to filter for students who do not own cats. This can be achieved by ensuring that the PetType is not 'cat'. 3. Join Structure: Use an INNER JOIN between the Student and Has_Pet tables based on StuID to connect students with their pets, and then join with the Pets table to access the PetType. 4. Aggregation Structure: Not needed, as we are simply retrieving IDs based on specified conditions without any aggregation.","30":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of pets owned by students. Use the FROM clause to specify the Has_Pet table, as it contains the relationship between students and their pets. 2. Condition Structure: Apply a WHERE clause to filter students based on their age, specifically selecting those whose age is greater than 20. 3. Join Structure: Use an INNER JOIN between the Has_Pet table and the Student table on the StuID field to connect students with their pets. 4. Aggregation Structure: Use the COUNT function to aggregate the number of pets owned by the filtered students.","31":"1. Sequential Structure: Start with the SELECT clause to specify the average horsepower for cars produced before 1980. 2. Condition Structure: Use a WHERE clause to filter records for cars where \"cars_data.Year\" is less than 1980. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use the AVG function to calculate the average horsepower for the filtered records.","32":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights that belong to \"United Airlines\" and have \"Aberdeen\" as the destination city. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link each flight with its corresponding airport information. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","33":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the airline names and their abbreviations. 2. Condition Structure: Use a WHERE clause to filter for airlines located in the \"USA\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airline names and abbreviations that meet the specified condition.","34":"1. Sequential Structure: Start with the SELECT clause to specify the count of countries. 2. Condition Structure: No specific filtering condition is needed since we want to count all countries listed. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"countries\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of countries.","35":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of concerts. Use the FROM clause to specify the concert table. 2. Condition Structure: Apply a WHERE clause to filter concerts that occurred in the stadium with the largest capacity. 3. Join Structure: Use a JOIN clause to connect the concert table with the stadium table based on the Stadium_ID. 4. Aggregation Structure: Use COUNT to aggregate the number of concerts in the specified stadium.","36":"1. Sequential Structure: Start with the SELECT clause to retrieve the stadium name and location. Use the FROM clause to specify the stadium table. 2. Join Structure: Use an INNER JOIN between the concert and stadium tables based on the Stadium_ID to connect concerts with their respective stadiums. 3. Condition Structure: Use a WHERE clause to filter for concerts that occurred in the years 2014 and 2015. This will require grouping by stadium to ensure that we only select stadiums that hosted concerts in both years. 4. Aggregation Structure: Use GROUP BY on the stadium's ID to group the results and apply a HAVING clause to ensure that the count of distinct years is equal to 2, indicating that concerts occurred in both years.","37":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the average and maximum capacities of the stadiums. 2. Aggregation Structure: Use the AVG and MAX functions to calculate the average and maximum capacities for all stadiums. 3. Grouping Structure: Since we want the overall average and maximum, we do not need to group by any specific field. 4. Join Structure: No JOIN is required since all necessary information is contained within the \"stadium\" table.","38":"1. Sequential Structure: Start with the SELECT clause to retrieve the pet type and weight. Use the FROM clause to specify the Pets table, as it contains the relevant information about pet types, ages, and weights. 2. Condition Structure: Use a WHERE clause to filter for the youngest pet by comparing the pet_age to the minimum pet_age in the Pets table. 3. Join Structure: Use an INNER JOIN between the Has_Pet and Pets tables based on PetID to relate students to their pets, although in this case, we are primarily interested in the Pets table. 4. Aggregation Structure: Use the MIN function to find the minimum pet_age, which will help identify the youngest pet.","39":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"cars_data.Accelerate\" for the specific car model \"amc hornet sportabout (sw).\" 2. Condition Structure: Apply a WHERE clause to filter for the specific model name \"amc hornet sportabout (sw).\" 3. Join Structure: Use JOIN clauses to connect the \"cars_data\" table with the \"car_names\" table based on the \"Id\" and \"MakeId\" fields, and then join with the \"model_list\" to ensure we are referencing the correct model. 4. Aggregation Structure: No aggregation is needed here since we are retrieving a specific value for acceleration.","40":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights landing in the specified cities. 2. Condition Structure: Apply a WHERE clause to filter for flights that land in either \"Aberdeen\" or \"Abilene.\" 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the relationship where \"flights.DestAirport\" matches \"airports.AirportCode\" to link flights to their destination airports. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","41":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Student.Fname\" and \"Student.Age\" for the students who have pets. 2. Condition Structure: No specific filtering condition is needed beyond ensuring that we only include students who have pets, which will be handled by the JOIN. 3. Join Structure: Use an INNER JOIN between the \"Student\" table and the \"Has_Pet\" table based on the shared key \"StuID\" to link students with their pets. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the first names and ages of students who have pets.","42":"1. Sequential Structure: Start with the SELECT clause to specify the count of flights for \"Jetblue Airways\". 2. Condition Structure: Use a WHERE clause to filter for flights where the \"Airline\" is 'Jetblue Airways'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights for \"Jetblue Airways\".","43":"1. Sequential Structure: Start with the SELECT clause to retrieve the year from the concert table. Use the FROM clause to specify the concert table. We will also need to use GROUP BY to group the results by year to count the number of concerts per year. 2. Aggregation Structure: Use the COUNT function to count the number of concerts for each year. 3. Condition Structure: Use the HAVING clause to filter for the maximum count of concerts, ensuring we only get the year(s) with the most concerts. 4. Join Structure: Not required, as all necessary data is available in the concert table.","44":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights with the specified destination. 2. Condition Structure: Apply a WHERE clause to filter for flights where the destination airport is 'ATO'. 3. Join Structure: No JOIN is necessary here, as we are only interested in the \"flights\" table for counting the flights to the specified destination. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the condition specified in the WHERE clause.","45":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country and the count of singers from each country. 2. Aggregation Structure: Use COUNT to calculate the number of singers for each country. 3. Grouping Structure: Use GROUP BY on \"singer.Country\" to aggregate the results by each country. 4. Join Structure: No JOIN is required since all necessary information is available in the \"singer\" table.","46":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"continents.ContId,\" \"continents.Continent,\" and the count of countries. 2. Condition Structure: No specific filtering condition is needed, as we want to count all countries grouped by continent. 3. Join Structure: Use a JOIN between the \"countries\" and \"continents\" tables based on the foreign key relationship where \"countries.Continent = continents.ContId.\" 4. Aggregation Structure: Use COUNT to aggregate the number of countries for each continent and GROUP BY \"continents.ContId\" and \"continents.Continent\" to group the results accordingly.","47":"1. Sequential Structure: Start with the SELECT clause to retrieve the model names. Use the FROM clause to specify the model_list table, as it contains the models and their associated makers. 2. Condition Structure: Apply a WHERE clause to filter models that have a weight less than 3500 and are not built by 'Ford Motor Company'. 3. Join Structure: Use JOIN clauses to connect the model_list table with the cars_data and car_names tables based on their relationships, specifically using the foreign keys to link models to their weights. 4. Aggregation Structure: Not needed, as we are simply filtering and retrieving specific records without any aggregation.","48":"1. Sequential Structure: Start with the SELECT clause to count the number of pets. We will use the COUNT function to get the total number of dog pets. 2. Condition Structure: Apply a WHERE clause to filter for female students (where Student.Sex = 'F') and for pets that are of type 'dog' (where Pets.PetType = 'dog'). 3. Join Structure: Use JOIN clauses to connect the \"Has_Pet\" table with the \"Student\" table and the \"Pets\" table based on the shared keys (StuID and PetID). 4. Aggregation Structure: Use COUNT to aggregate the number of dog pets raised by female students, ensuring that we group the results appropriately.","49":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" which represents the flight numbers. 2. Condition Structure: Apply a WHERE clause to filter for flights that are departing from the specific airport \"APG.\" 3. Join Structure: No JOIN is necessary here since we are only interested in the \"flights\" table and the airport code is directly referenced. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the flight numbers without any summarization.","50":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of car models. Use the FROM clause to specify the model_list table, as it contains the model information linked to the car makers. 2. Condition Structure: Use the WHERE clause to filter for the specific maker with the full name 'American Motor Company'. 3. Join Structure: Use a JOIN between the model_list and car_makers tables based on the maker's ID to relate the models to their respective makers. 4. Aggregation Structure: Use the COUNT function to aggregate the number of models produced by the specified maker.","51":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of car models. We will use the COUNT function to get the total number of models. 2. Condition Structure: Apply a WHERE clause to filter for car models produced in the \"United States.\" 3. Join Structure: Use JOIN clauses to connect the \"model_list\" table with the \"car_makers\" table based on the Maker ID, and then join the \"car_makers\" table with the \"countries\" table to filter by country. 4. Aggregation Structure: Use COUNT to aggregate the number of car models that meet the specified condition.","52":"1. Sequential Structure: Start with the SELECT clause to retrieve the continent name and the count of car makers. We will use the COUNT function to count the number of car makers for each continent. 2. Condition Structure: No specific filtering condition is needed, as we want to count all car makers grouped by continent. 3. Join Structure: Use JOIN clauses to connect the \"car_makers\" table with the \"countries\" table based on the foreign key relationship, and then join the \"countries\" table with the \"continents\" table to access the continent names. 4. Aggregation Structure: Use GROUP BY to group the results by continent name and apply COUNT to get the number of car makers in each continent.","53":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Student.StuID\" and the count of pets for each student. We will use the COUNT function to count the number of pets associated with each student. 2. Condition Structure: No specific filtering condition is needed, as we want to include all students who have at least one pet. 3. Join Structure: Use JOIN clauses to connect the \"Student\" table with the \"Has_Pet\" table based on \"StuID\" to link students with their pets. 4. Aggregation Structure: Use GROUP BY to group the results by \"Student.StuID\" to get the count of pets for each student.","54":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"airports.AirportName\". 2. Condition Structure: Use a WHERE clause to filter for records where \"airports.City\" is 'Aberdeen'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airport names for the specified city.","55":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Horsepower\" of the car with the greatest \"Accelerate\". 2. Condition Structure: No specific filtering condition is needed since we are looking for the car with the maximum \"Accelerate\". 3. Join Structure: No JOIN is necessary as all required information is contained within the \"cars_data\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"cars_data.Accelerate\" to rank cars by their acceleration and apply LIMIT 1 to select the car with the highest acceleration.","56":"1. Sequential Structure: Start with the SELECT clause to count the number of concerts that occurred in the years 2014 and 2015. 2. Condition Structure: Use a WHERE clause to filter the concerts for the years 2014 and 2015. 3. Join Structure: No JOIN is necessary since all required information is available in the \"concert\" table. 4. Aggregation Structure: Use COUNT to aggregate the total number of concerts that meet the specified year condition.","57":"1. Sequential Structure: Start with the SELECT clause to specify the flight numbers from the \"flights\" table. 2. Condition Structure: Use a WHERE clause to filter for flights where the \"flights.Airline\" is 'United Airlines'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"flights\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving flight numbers that meet the specified condition.","58":"1. Sequential Structure: Start with the SELECT clause to specify the count of airlines in the USA. 2. Condition Structure: Use a WHERE clause to filter for airlines where \"airlines.Country\" is 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of airlines that meet the specified condition.","59":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum MPG from the cars_data table. Use the FROM clause to specify the cars_data table. 2. Condition Structure: Apply a WHERE clause to filter for cars that either have 8 cylinders or were produced before 1980. 3. Join Structure: Not required, as all necessary data is contained within the cars_data table. 4. Aggregation Structure: Use the MAX function to find the maximum MPG from the filtered results based on the specified conditions.","60":"1. Sequential Structure: Start with the SELECT clause to retrieve the weight of the pets. Use the FROM clause to specify the Pets table, as it contains the weight information. 2. Condition Structure: Use a WHERE clause to filter for pets that are dogs and to find the youngest dog by comparing ages. 3. Join Structure: Use a JOIN between the Has_Pet and Pets tables to link pets to their respective owners, ensuring we can filter by pet type. 4. Aggregation Structure: Use the MIN function to find the minimum age of dogs, and then filter the results to get the weight of the dog that matches this age.","61":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"singer.Name\" and the count of concerts for each singer. 2. Condition Structure: No specific filtering condition is needed, as we want to include all singers and their concert counts. 3. Join Structure: Use a JOIN between the \"singer\" table and the \"singer_in_concert\" table based on \"Singer_ID\" to link each singer with their respective concerts. 4. Aggregation Structure: Use COUNT on \"singer_in_concert.concert_ID\" to count the number of concerts for each singer, and GROUP BY \"singer.Name\" to group the results by singer.","62":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"countries.CountryId\" and \"countries.CountryName.\" 2. Condition Structure: No specific filtering condition is needed, as we want to find all countries that have at least one car maker. 3. Join Structure: Use an INNER JOIN between the \"countries\" table and the \"car_makers\" table based on the foreign key relationship where \"car_makers.Country\" matches \"countries.CountryId.\" 4. Aggregation Structure: Use GROUP BY on \"countries.CountryId\" to ensure we only get unique countries that have car makers.","63":"1. Sequential Structure: Start with the SELECT clause to count the number of cars made in 1980. We will use the COUNT function to get the total number of entries. 2. Condition Structure: Apply a WHERE clause to filter the records for the year 1980. 3. Join Structure: Use a JOIN between the \"cars_data\" and \"car_names\" tables based on the \"Id\" from \"cars_data\" and \"MakeId\" from \"car_names\" to link the car data with their respective names. 4. Aggregation Structure: Use COUNT to aggregate the total number of cars made in the specified year.","64":"1. Sequential Structure: Start with the SELECT clause to retrieve the model of the car and its horsepower. Use the FROM clause to specify the cars_data table, which contains the horsepower and cylinder information. 2. Condition Structure: Apply a WHERE clause to filter for cars that have 4 cylinders. 3. Join Structure: Use JOIN clauses to connect the cars_data table with the car_names table to get the model names associated with the horsepower data. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by horsepower in descending order and limit the results to get the model with the highest horsepower.","65":"1. Sequential Structure: Start with the SELECT clause to specify the count of flights. 2. Condition Structure: Use a WHERE clause to filter for flights where the \"Airline\" is 'United Airlines' and the \"SourceAirport\" is 'AHD'. 3. Join Structure: No JOIN is necessary since all required information is in the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights that meet the specified conditions.","66":"1. Sequential Structure: Start with the SELECT clause to specify the count of singers. 2. Condition Structure: No specific filtering condition is needed since we want the total number of singers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"singer\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of singers in the \"singer\" table.","67":"1. Sequential Structure: Start with the SELECT clause to specify the count of flights for the airline 'JetBlue Airways'. 2. Condition Structure: Use a WHERE clause to filter for flights where the \"flights.Airline\" is 'JetBlue Airways'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights for the specified airline.","68":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"continents.ContId,\" \"continents.Continent,\" and the count of countries. 2. Condition Structure: No specific filtering condition is needed, as we want to count all countries associated with each continent. 3. Join Structure: Use a JOIN between the \"continents\" and \"countries\" tables based on the relationship defined by \"countries.Continent = continents.ContId\" to link each country to its continent. 4. Aggregation Structure: Use COUNT to aggregate the number of countries per continent and GROUP BY \"continents.ContId\" and \"continents.Continent\" to group the results accordingly.","69":"1. Sequential Structure: Start with the SELECT clause to retrieve the singer names and the count of concerts for each singer. We will select \"singer.Name\" and use COUNT on \"singer_in_concert.concert_ID\" to get the number of concerts. 2. Condition Structure: No specific filtering condition is needed, as we want to count all concerts for each singer. 3. Join Structure: Use a JOIN between the \"singer\" table and the \"singer_in_concert\" table based on \"Singer_ID\" to link each singer with their concert records. 4. Aggregation Structure: Use COUNT to aggregate the number of concerts per singer and GROUP BY \"singer.Name\" to group the results by each singer.","70":"1. Sequential Structure: Start with the SELECT clause to retrieve distinct years from the cars_data table. Use the FROM clause to specify the cars_data table. 2. Condition Structure: Use a WHERE clause to filter for cars that weigh less than 4000 and also those that weigh more than 3000. To ensure we capture years that meet both conditions, we can use a subquery or a UNION. 3. Join Structure: Not required, as all necessary data is contained within the cars_data table. 4. Aggregation Structure: Use DISTINCT to ensure that we only get unique years from the results.","71":"1. Sequential Structure: Start with the SELECT clause to count the number of flights arriving in Aberdeen city. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights where the destination airport corresponds to Aberdeen city. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link each flight with its respective airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified condition.","72":"1. Sequential Structure: Start with the SELECT clause to retrieve the name and release year of the song. Use the FROM clause to specify the singer table. 2. Condition Structure: Use the WHERE clause to filter for the youngest singer by identifying the minimum age. 3. Join Structure: Not required, as all necessary data is contained within the singer table. 4. Aggregation Structure: Use the MIN function to find the youngest age among singers, which will be used in the WHERE clause to filter the results.","73":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights that are operated by 'United Airlines' and depart from the airport with the code 'AHD'. 3. Join Structure: No JOIN is necessary here, as the relevant information is contained within the \"flights\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","74":"1. Sequential Structure: Start with the SELECT clause to specify the count of pets that have a weight greater than 10. 2. Condition Structure: Use a WHERE clause to filter for pets where \"Pets.weight\" is greater than 10. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Pets\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of pets that meet the weight condition.","75":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of stadiums. Use the FROM clause to specify the stadium table. 2. Condition Structure: Apply a WHERE clause to filter out stadiums that have concerts in the year 2014. This will involve a subquery to identify stadiums that hosted concerts in that year. 3. Join Structure: Not required in the main query, but the subquery will need to join the concert and stadium tables to find the relevant stadium IDs. 4. Aggregation Structure: Not needed, as we are simply filtering based on the presence of concerts in a specific year without any aggregation.","76":"1. Sequential Structure: Start with the SELECT clause to specify the count of countries. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all countries. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"countries\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of countries.","77":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights that have \"ATO\" as the destination airport. 3. Join Structure: No JOIN is needed here since we can directly filter the flights table based on the destination airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified condition.","78":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars with more than 4 cylinders. 2. Condition Structure: Use a WHERE clause to filter for cars where \"cars_data.Cylinders\" is greater than 4. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cars that meet the specified condition.","79":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. Additionally, join the Pets table to access the pet types. 2. Condition Structure: Use a GROUP BY clause to group the results by student ID, allowing us to count the different types of pets each student has. We will apply a HAVING clause to filter for students who have both cats and dogs. 3. Join Structure: Use INNER JOINs between the Student, Has_Pet, and Pets tables based on the shared keys (StuID and PetID) to connect students with their respective pets. 4. Aggregation Structure: Use COUNT with a CASE statement in the HAVING clause to ensure that each student has at least one cat and one dog as pets.","80":"1. Sequential Structure: Start with the SELECT clause to retrieve the average age of students. Use the FROM clause to specify the Student table. 2. Condition Structure: Apply a WHERE clause to filter students who do not own any pets. This can be done by ensuring that the student IDs are not present in the Has_Pet table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching student IDs in the Has_Pet table. 4. Aggregation Structure: Use the AVG function to calculate the average age of the filtered students.","81":"1. Sequential Structure: Start with the SELECT clause to count the number of car makers. We will use the COUNT function on the \"carmakers.Id\" field. 2. Condition Structure: Apply a WHERE clause to filter for car makers located in \"France.\" 3. Join Structure: Use a JOIN between the \"car_makers\" and \"countries\" tables based on the foreign key relationship to ensure we are only counting car makers from France. 4. Aggregation Structure: Use COUNT to aggregate the number of car makers that meet the specified condition.","82":"1. Sequential Structure: Start with the SELECT clause to retrieve the airline names from the airlines table. Use the FROM clause to specify the airlines table and join it with the flights table to link airlines with their flights. 2. Condition Structure: Use a WHERE clause to filter for flights originating from both airports 'APG' and 'CVO'. This will require grouping by airline and ensuring that both conditions are met. 3. Join Structure: Use an INNER JOIN between the airlines and flights tables based on the airline identifier to connect airlines with their respective flights. 4. Aggregation Structure: Use GROUP BY to group the results by airline and apply a HAVING clause to ensure that the count of distinct source airports is equal to 2, indicating that the airline has flights from both specified airports.","83":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs and makers of car makers. Use the FROM clause to specify the car_makers table. 2. Join Structure: Join the car_makers table with the model_list table on the maker ID to relate car makers to their models. Then, join the car_names table to link models to their respective car makers, and finally join the cars_data table to count the number of cars produced. 3. Aggregation Structure: Use GROUP BY to group the results by car maker ID and name, allowing us to count the number of models and cars for each maker. 4. Condition Structure: Use the HAVING clause to filter for car makers that produce at least 2 models and make more than 3 cars.","84":"1. Sequential Structure: Start with the SELECT clause to retrieve the country of singers. Use the FROM clause to specify the singer table. 2. Condition Structure: Use a WHERE clause to filter for singers who are above age 40 and below age 30. Since we want to find countries where both conditions are met, we will use a subquery to ensure that both age conditions are satisfied. 3. Join Structure: Not required, as all necessary data is available within the singer table. 4. Aggregation Structure: Not needed, as we are interested in distinct countries without any aggregation.","85":"1. Sequential Structure: Start with the SELECT clause to retrieve the continent name and the count of car makers. We will use \"continents.Continent\" and an aggregate function COUNT on \"carmakers.Id.\" 2. Condition Structure: No specific filtering condition is needed, as we want to count all car makers grouped by continent. 3. Join Structure: Use JOIN clauses to connect the \"car_makers\" table with the \"countries\" table based on \"car_makers.Country\" and \"countries.CountryId,\" and then join the \"countries\" table with the \"continents\" table based on \"countries.Continent.\" 4. Aggregation Structure: Use GROUP BY on \"continents.Continent\" to group the results by each continent and apply COUNT to get the number of car makers in each continent.","86":"1. Sequential Structure: Start with the SELECT clause to specify the flight numbers for United Airlines flights. 2. Condition Structure: Use a WHERE clause to filter for flights where the \"flights.Airline\" is 'United Airlines'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"flights\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving flight numbers that meet the specified airline condition.","87":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the pet type, average age, and maximum age. 2. Aggregation Structure: Use AVG to calculate the average age and MAX to find the maximum age for each pet type. 3. Grouping Structure: Use GROUP BY on \"Pets.PetType\" to calculate these aggregate values for each type of pet. 4. Join Structure: No JOIN is required since all necessary data is within the \"Pets\" table.","88":"1. Sequential Structure: Start with the SELECT clause to retrieve the average weight of each pet type. We will use the AVG function on the \"Pets.weight\" field. 2. Condition Structure: No specific filtering condition is needed, as we want to calculate the average weight for all pet types. 3. Join Structure: Use a JOIN between the \"Has_Pet\" and \"Pets\" tables based on \"PetID\" to link each pet with its corresponding type and weight. 4. Aggregation Structure: Use GROUP BY on \"Pets.PetType\" to group the results by each type of pet, allowing us to calculate the average weight for each type.","89":"1. Sequential Structure: Start with the SELECT clause to retrieve the number of cylinders from the cars_data table. Use the FROM clause to specify the cars_data table and join it with the car_names table to link models with their respective data. 2. Condition Structure: Use a WHERE clause to filter for models that belong to 'Volvo' and to find the version with the least accelerate. 3. Join Structure: Use an INNER JOIN between the cars_data and car_names tables based on the MakeId to connect the model names with their corresponding data. 4. Aggregation Structure: Use the MIN function to find the minimum accelerate value and filter the results to get the corresponding number of cylinders for that version.","90":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"Pets.PetType\" and \"Pets.weight\" of the youngest pet. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are looking for the youngest pet directly. 3. Aggregation Structure: Use the MIN function to find the minimum age of pets, which will help identify the youngest pet. 4. Join Structure: No JOIN is required since all necessary information is available in the \"Pets\" table.","91":"1. Sequential Structure: Start with the SELECT clause to retrieve the names and IDs of car makers. Use the FROM clause to specify the car_makers table. 2. Aggregation Structure: Use GROUP BY to group the results by the maker's ID, allowing us to count the number of models associated with each maker. 3. Condition Structure: Apply a HAVING clause to filter the groups where the count of models is greater than 3, ensuring we only get makers with more than 3 models. 4. Join Structure: Use an INNER JOIN between the car_makers and model_list tables based on the maker's ID to relate makers to their models.","92":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"concert.concert_Name,\" \"concert.Theme,\" and the count of singers associated with each concert. 2. Condition Structure: No specific filtering condition is needed, as we want to include all concerts and their associated singers. 3. Join Structure: Use a JOIN between the \"concert\" table and the \"singer_in_concert\" table based on \"concert_ID\" to link each concert with its singers. 4. Aggregation Structure: Use COUNT on \"singer_in_concert.Singer_ID\" to count the number of singers for each concert, and GROUP BY \"concert.concert_Name\" and \"concert.Theme\" to group the results accordingly.","93":"1. Sequential Structure: Start with the SELECT clause to specify the count of unique airlines. 2. Condition Structure: No specific filtering condition is needed since we want the total number of airlines. 3. Join Structure: No JOIN is required as all necessary information is in the \"airlines\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of unique airlines.","94":"1. Sequential Structure: Start with the SELECT clause to specify the distinct pet types we want to count. 2. Condition Structure: No specific filtering condition is needed since we want to count all different types of pets. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Pets\" table. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the unique pet types in the \"Pets\" table.","95":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name. Use the FROM clause to specify the countries table. 2. Aggregation Structure: Use COUNT to count the number of car makers associated with each country. 3. Grouping Structure: Use GROUP BY to group the results by country to get the count of car makers per country. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the count of car makers and limit the result to the top entry to find the country with the most car makers.","96":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the singer's name, country, and age. 2. Condition Structure: No specific filtering condition is required since we want all singers. 3. Join Structure: No JOIN is necessary as all required information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results in descending order based on the singer's age.","97":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the minimum weight of the cars. 2. Condition Structure: Use a WHERE clause to filter for cars that have 8 cylinders and were produced in the year 1974. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use the MIN function to find the smallest weight among the filtered results.","98":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum horsepower and the make of the car models. We will use the MAX function on \"cars_data.Horsepower\" and include \"car_names.Make\" in the SELECT clause. 2. Condition Structure: Apply a WHERE clause to filter for car models that have exactly 3 cylinders. 3. Join Structure: Use JOIN clauses to connect the \"cars_data\" table with the \"car_names\" table based on \"cars_data.Id = car_names.MakeId,\" and then join with the \"model_list\" table to access the \"Cylinders\" field. 4. Aggregation Structure: Use GROUP BY to group the results by \"car_names.Make\" to ensure we get the maximum horsepower for each make of car model with 3 cylinders.","99":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airports.City\" and the count of departing flights. 2. Condition Structure: No specific filtering condition is needed, as we want to count all departing flights from each city. 3. Join Structure: Use a JOIN between the \"airports\" and \"flights\" tables based on \"airports.AirportCode\" and \"flights.SourceAirport\" to link each flight with its source city. 4. Aggregation Structure: Use COUNT to count the number of flights for each city, then GROUP BY \"airports.City\" to aggregate the results by city. Finally, use ORDER BY in descending order to find the city with the most departing flights and LIMIT 1 to get the top result.","100":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the countries table. 2. Join Structure: Join the countries table with the car_makers table on the country ID to relate countries to their manufacturers. 3. Aggregation Structure: Use GROUP BY to group the results by country name to count the number of manufacturers per country. 4. Condition Structure: Apply a HAVING clause to filter for countries that have at least 3 manufacturers.","101":"1. Sequential Structure: Start with the SELECT clause to specify the minimum weight of the car, which is the \"cars_data.Weight\". 2. Condition Structure: Use a WHERE clause to filter for cars that have \"cars_data.Cylinders\" equal to 8 and \"cars_data.Year\" equal to 1974. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use the MIN function to find the minimum weight of the cars that meet the specified conditions.","102":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct models of cars produced after 1980. The relevant field is \"car_names.Model.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"cars_data.Year\" is greater than 1980. 3. Join Structure: Use JOINs to connect the \"cars_data\" table with the \"car_names\" table based on the foreign key relationship \"cars_data.Id = car_names.MakeId.\" 4. Aggregation Structure: Use DISTINCT to ensure that only unique car models are returned.","103":"1. Sequential Structure: Start with the SELECT clause to retrieve the song names from the singer table. 2. Condition Structure: Use a WHERE clause to filter singers whose age is greater than the average age of all singers. 3. Join Structure: Not required, as all necessary data is contained within the singer table. 4. Aggregation Structure: Use a subquery within the WHERE clause to calculate the average age of all singers, filtering out those whose age is below this average.","104":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. 2. Condition Structure: Use the WHERE clause to filter for pets that are either 'cat' or 'dog'. 3. Join Structure: Use an INNER JOIN between the Student and Has_Pet tables based on StuID to connect students with their pets, and then join with the Pets table to access the PetType. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","105":"1. Sequential Structure: Start with the SELECT clause to specify the distinct pet types we want to count. 2. Aggregation Structure: Use the COUNT function to count the distinct values of \"Pets.PetType\". 3. Condition Structure: No specific filtering condition is needed since we want to count all distinct pet types available in the \"Pets\" table. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"Pets\" table.","106":"1. Sequential Structure: Start with the SELECT clause to retrieve the average and maximum age of pets, which will involve using aggregate functions AVG and MAX on the \"Pets.pet_age\" field. We will also include \"Pets.PetType\" to group the results by pet type. 2. Condition Structure: No specific filtering condition is needed, as we want to calculate the average and maximum age for all pet types. 3. Join Structure: Use a JOIN between the \"Has_Pet\" and \"Pets\" tables based on \"PetID\" to link each pet with its corresponding type and age. 4. Aggregation Structure: Use GROUP BY on \"Pets.PetType\" to group the results by each type of pet, applying the AVG and MAX functions to summarize the ages.","107":"1. Sequential Structure: Start with the SELECT clause to retrieve the different models. Use the FROM clause to specify the model_list table, as it contains the model information. 2. Condition Structure: Apply a WHERE clause to filter models that have a weight less than 3500 and are not built by the Ford Motor Company. 3. Join Structure: Use JOIN clauses to connect the model_list table with the cars_data and car_makers tables based on the foreign key relationships to access the weight and maker information. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","108":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name from the airports table. Use the FROM clause to specify the flights table, as we are interested in the destination airports associated with flights. 2. Join Structure: Use an INNER JOIN between the flights and airports tables based on the destination airport code to link flights to their corresponding cities. 3. Aggregation Structure: Use GROUP BY to group the results by city, allowing us to count the number of flights to each destination airport. 4. Condition Structure: Use ORDER BY to sort the results by the count of flights in descending order, and limit the results to the top entry to find the city with the most frequent destination airport.","109":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" which represents the flight numbers we are interested in. 2. Condition Structure: Apply a WHERE clause to filter for flights that are departing from the city \"Aberdeen.\" 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the \"SourceAirport\" and \"AirportCode\" to link each flight with its respective source airport. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the flight numbers without any need for summarization.","110":"1. Sequential Structure: Start with the SELECT clause to count the number of cars. Use the FROM clause to specify the cars_data table. 2. Condition Structure: Use a WHERE clause to filter cars based on their accelerate value being greater than the maximum horsepower. 3. Join Structure: Not required, as all necessary data is contained within the cars_data table. 4. Aggregation Structure: Use the MAX function in a subquery to find the largest horsepower, which will be used in the filtering condition.","111":"1. Sequential Structure: Start with the SELECT clause to specify the count of flights departing from the airport with the code 'APG'. 2. Condition Structure: Use a WHERE clause to filter for flights where \"flights.SourceAirport\" is equal to 'APG'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights that meet the specified condition.","112":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the average weight and the year. 2. Aggregation Structure: Use the AVG function to calculate the average weight for each year. 3. Grouping Structure: Use GROUP BY on \"cars_data.Year\" to calculate the average weight for each distinct year. 4. Join Structure: No JOIN is required since all necessary information is available in the \"cars_data\" table.","113":"1. Sequential Structure: Start with the SELECT clause to specify the \"flights.Airline\" and the count of flights for each airline. 2. Aggregation Structure: Use COUNT to calculate the total number of flights for each airline. 3. Grouping Structure: Use GROUP BY on \"flights.Airline\" to aggregate the flight counts by each airline. 4. Ordering Structure: Use ORDER BY in descending order on the flight count to rank airlines by the number of flights they operate. 5. Limiting Structure: Use LIMIT 1 to retrieve only the airline with the most flights.","114":"1. Sequential Structure: Start with the SELECT clause to retrieve the airline names. Use the FROM clause to specify the flights table, as we are interested in the airlines that have departures from specific airports. 2. Condition Structure: Use a WHERE clause to filter for flights that depart from CVO airport. Additionally, we need to ensure that these airlines do not have any departures from APG airport. 3. Join Structure: Not required, as all necessary data is available within the flights table. 4. Aggregation Structure: Not needed, as we are simply filtering based on the presence or absence of flights from specific airports without any aggregation.","115":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" for the flights landing at the specified airport. 2. Condition Structure: Apply a WHERE clause to filter for flights where \"flights.DestAirport\" matches 'APG'. 3. Join Structure: No JOIN is necessary here, as we are only interested in the \"flights\" table and the specific destination airport code. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving flight numbers based on the specified condition.","116":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airports.AirportName\" for the specified airport code 'AKO'. 2. Condition Structure: Use a WHERE clause to filter for the airport with the code 'AKO'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airport name for a specific airport code.","117":"1. Sequential Structure: Start with the SELECT clause to retrieve the model of the car and the horsepower. Use the FROM clause to specify the cars_data table, and join it with the car_names table to link car models with their horsepower. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the model with the minimum horsepower across all records. 3. Join Structure: Use an INNER JOIN between the cars_data and car_names tables based on the MakeId to relate the horsepower data with the corresponding car model. 4. Aggregation Structure: Use the MIN function to find the minimum horsepower and filter the results to get the corresponding model.","118":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars with more than 6 cylinders. 2. Condition Structure: Use a WHERE clause to filter for cars where \"cars_data.Cylinders\" is greater than 6. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of cars that meet the specified condition.","119":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights that are operated by 'United Airlines' and have 'ASY' as the destination airport. 3. Join Structure: No JOIN is needed here, as the relevant information can be accessed directly from the \"flights\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","120":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.Airline\" which represents the airlines that have flights departing from the specified airport. 2. Condition Structure: Use a WHERE clause to filter for records where \"flights.SourceAirport\" is equal to 'AHD'. 3. Join Structure: No JOIN is necessary here, as we are only interested in the \"flights\" table to find the airlines. 4. Aggregation Structure: No aggregation is needed since we are simply listing the airlines, but we will use DISTINCT to ensure that each airline is listed only once.","121":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"stadium.Name\" and the count of concerts. 2. Condition Structure: No specific filtering condition is needed, as we want to count all concerts in each stadium. 3. Join Structure: Use a JOIN between the \"stadium\" and \"concert\" tables based on \"Stadium_ID\" to link each concert with its respective stadium. 4. Aggregation Structure: Use COUNT to aggregate the number of concerts per stadium and GROUP BY \"stadium.Name\" to group the results by stadium name.","122":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Pets.PetID\" and \"Pets.weight\" for pets older than 1. 2. Condition Structure: Use a WHERE clause to filter for pets where \"Pets.pet_age\" is greater than 1. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Pets\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the pet IDs and weights that meet the specified age condition.","123":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the city and country of the airport. 2. Condition Structure: Use a WHERE clause to filter for the specific airport, which is \"Alton\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the city and country for the specified airport.","124":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the stadium's location and name. 2. Condition Structure: Use a WHERE clause to filter stadiums where the \"stadium.Capacity\" is between 5000 and 10000. 3. Join Structure: No JOIN is necessary since all required information is available in the \"stadium\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving stadiums that meet the specified capacity condition.","125":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names from the countries table. Use the FROM clause to specify the countries table and apply a JOIN to connect it with the car_makers table to filter for car manufacturers. 2. Condition Structure: Use a WHERE clause to filter for countries that belong to the continent of Europe. This will ensure we are only considering European countries. 3. Join Structure: Use an INNER JOIN between the countries and car_makers tables based on the country ID to relate countries to their respective car manufacturers. 4. Aggregation Structure: Use GROUP BY to group the results by country and apply a HAVING clause to filter for countries that have at least 3 car manufacturers.","126":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.Airline\" for the airlines that have flights to the specified destination airport \"AHD.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"flights.DestAirport\" is equal to \"AHD.\" 3. Join Structure: No JOIN is necessary here, as the information about the destination airport is directly available in the \"flights\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the airline names without any summarization.","127":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"concert.concert_Name\" and \"concert.Theme,\" along with the count of singers for each concert. 2. Condition Structure: No specific filtering condition is needed, as we want to include all concerts and their associated singers. 3. Join Structure: Use a JOIN between the \"concert\" table and the \"singer_in_concert\" table based on \"concert_ID\" to link each concert with its singers. 4. Aggregation Structure: Use COUNT on \"singer_in_concert.Singer_ID\" to count the number of singers per concert, and GROUP BY \"concert.concert_ID\" to group results by each concert.","128":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"carnames.Model\" of the car with the smallest horsepower. 2. Condition Structure: No specific filtering condition is needed, as we are looking for the car with the smallest horsepower. 3. Join Structure: Use a JOIN between the \"cars_data\" and \"car_names\" tables based on \"cars_data.Id\" and \"car_names.MakeId\" to link each car's data with its corresponding model name. 4. Aggregation Structure: Use ORDER BY in ascending order on \"cars_data.Horsepower\" to rank cars by horsepower. Use LIMIT 1 to select the car with the smallest horsepower.","129":"1. Sequential Structure: Start with the SELECT clause to specify the total count of singers. 2. Condition Structure: No specific filtering condition is needed since we want the total number of singers. 3. Join Structure: No JOIN is required as all necessary information is in the \"singer\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of singers.","130":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the pet type and the average weight. 2. Aggregation Structure: Use the AVG function to calculate the average weight for each pet type. 3. Grouping Structure: Use GROUP BY on \"Pets.PetType\" to calculate the average weight for each type of pet. 4. Join Structure: No JOIN is required since all necessary information is available in the \"Pets\" table.","131":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. Additionally, join the Pets table to filter based on pet types. 2. Condition Structure: Use a WHERE clause to filter for pets that are either 'cat' or 'dog'. 3. Join Structure: Use INNER JOINs between the Student, Has_Pet, and Pets tables based on the shared keys (StuID and PetID) to connect students with their respective pets. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","132":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"airports.AirportName\" for the airport with the code 'AKO'. 2. Condition Structure: Use a WHERE clause to filter for the specific airport code 'AKO'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","133":"1. Sequential Structure: Start with the SELECT clause to specify the \"flights.Airline\" as we want to identify the airline that serves the most flights. 2. Aggregation Structure: Use COUNT to calculate the number of flights for each airline. 3. Grouping Structure: Use GROUP BY on \"flights.Airline\" to aggregate the flight counts for each airline. 4. Ordering Structure: Use ORDER BY in descending order on the flight count to rank airlines by the number of flights they serve. 5. Limiting Structure: Use LIMIT 1 to retrieve only the airline that serves the most flights. 6. Join Structure: No JOIN is required since all necessary data is within the \"flights\" table.","134":"1. Sequential Structure: Start with the SELECT clause to specify the total count of airlines. 2. Aggregation Structure: Use the COUNT function to calculate the total number of unique airlines based on the \"airlines\" table. 3. Condition Structure: No specific filtering condition is needed since we want the total count of all airlines. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"airlines\" table.","135":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"cars_data.Accelerate\" for the specified car model. 2. Condition Structure: Use a WHERE clause to filter for the specific car make and model, which is \"amc hornet sportabout (sw).\" 3. Join Structure: Use JOINs to connect the \"cars_data\" table with the \"car_names\" and \"model_list\" tables based on their relationships to ensure we are looking at the correct model. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the accelerate value for the specified car model.","136":"1. Sequential Structure: Start with the SELECT clause to retrieve the make and production year of the cars. Use the FROM clause to specify the cars_data table and join it with the car_names table to link car makes with their production years. 2. Condition Structure: Use a WHERE clause to filter for the earliest production year by comparing the year of production to the minimum year found in the cars_data table. 3. Join Structure: Use an INNER JOIN between the cars_data and car_names tables based on the MakeId to connect car makes with their respective data. 4. Aggregation Structure: Use the MIN function to find the earliest year of production from the cars_data table.","137":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the abbreviation of the airline. 2. Condition Structure: Use a WHERE clause to filter for the airline name \"JetBlue Airways\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","138":"1. Sequential Structure: Start with the SELECT clause to retrieve the model name. Use the FROM clause to specify the model_list table, as it contains the models we are interested in. 2. Aggregation Structure: Use GROUP BY to group the results by model name, allowing us to count the number of different versions for each model. 3. Condition Structure: Use the HAVING clause to filter for the model that has the maximum count of different versions. 4. Order Structure: Use ORDER BY to sort the results in descending order based on the count of versions, and limit the results to the top one to get the model with the most different versions.","139":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and gender of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. 2. Aggregation Structure: Use GROUP BY to group records by student ID to count the number of pets each student has. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of pets is greater than one, ensuring we only get students with more than one pet. 4. Join Structure: Use an INNER JOIN between the Student and Has_Pet tables based on StuID to connect students with their pets.","140":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of stadiums. Use the FROM clause to specify the stadium table. 2. Condition Structure: Apply a WHERE clause to filter stadiums that did not have any concerts in the year 2014. This will involve checking that the stadium's ID does not appear in the concert table for the year 2014. 3. Join Structure: Use a LEFT JOIN between the stadium and concert tables based on the Stadium_ID to include all stadiums and their corresponding concerts, if any. 4. Aggregation Structure: Not needed, as we are simply filtering based on the absence of concerts in 2014 without any aggregation.","141":"1. Sequential Structure: Start with the SELECT clause to specify the count of airports. 2. Aggregation Structure: Use the COUNT function to count the distinct airport codes, which represent the number of airports. 3. Condition Structure: No specific filtering condition is needed since we want the total number of airports. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"airports\" table.","142":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct airlines. Use the FROM clause to specify the flights table, as we are interested in the airlines that have departing flights. 2. Condition Structure: Use a WHERE clause to filter for flights that depart from either APG or CVO airports. We will also need to ensure that we only select airlines that have flights from both airports. 3. Join Structure: Not required, as all necessary data is available within the flights table. 4. Aggregation Structure: Use GROUP BY to group the results by airline and apply a HAVING clause to ensure that each airline has flights departing from both specified airports.","143":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the airline names and their abbreviations. 2. Condition Structure: Use a WHERE clause to filter for airlines that are located in the \"USA\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airline names and abbreviations that meet the specified condition.","144":"1. Sequential Structure: Start with the SELECT clause to count the number of concerts in the specified years. 2. Condition Structure: Use a WHERE clause to filter concerts that occurred in the years 2014 or 2015. 3. Join Structure: No JOIN is necessary since all required information is available in the \"concert\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of concerts that meet the specified conditions.","145":"1. Sequential Structure: Start with the SELECT clause to retrieve the average engine displacement (edispl) of cars. Use the FROM clause to specify the cars_data table, which contains the edispl information. 2. Condition Structure: Use a WHERE clause to filter the records for cars that match the model 'volvo'. This will ensure that we only calculate the average for the specified model. 3. Join Structure: Use JOINs to connect the cars_data table with the car_names and model_list tables based on the foreign key relationships to filter by the model name. 4. Aggregation Structure: Use the AVG function to calculate the average edispl for the filtered records.","146":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of car makers. We will use the COUNT function to get the total number of makers. 2. Condition Structure: Apply a WHERE clause to filter for car makers that are located in France. 3. Join Structure: Use a JOIN between the \"car_makers\" and \"countries\" tables based on the country relationship to ensure we are only counting makers from France. 4. Aggregation Structure: Use COUNT to aggregate the number of distinct car makers from the filtered results.","147":"1. Sequential Structure: Start with the SELECT clause to retrieve the student IDs and the count of pets. Use the FROM clause to specify the Has_Pet table, which links students to their pets. 2. Aggregation Structure: Use the COUNT function to count the number of pets for each student. 3. Grouping Structure: Use GROUP BY to group the results by student ID to get the count of pets for each student. 4. Join Structure: Use an INNER JOIN between the Has_Pet table and the Student table to ensure we only consider students who have pets.","148":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airlines.Airline\" field, which represents the names of the airlines. 2. Condition Structure: Use a WHERE clause to filter for flights that arrive at the specified airport, 'AHD'. 3. Join Structure: Use a JOIN between the \"airlines\" and \"flights\" tables based on the \"flights.Airline\" to link each flight with its respective airline. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the airlines without any need for summarization.","149":"1. Sequential Structure: Start with the SELECT clause to retrieve the last name of the student. Use the FROM clause to specify the Student table. 2. Join Structure: Use JOIN clauses to connect the Student table with the Has_Pet table on StuID and then join with the Pets table on PetID to access pet details. 3. Condition Structure: Apply a WHERE clause to filter for students who have a pet of type 'cat' and whose age is 3. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","150":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of countries. Use the FROM clause to specify the countries table. 2. Aggregation Structure: Use COUNT to count the number of countries and GROUP BY to group the results by country. 3. Condition Structure: Use the HAVING clause to filter for countries that have more than 2 car makers. 4. Join Structure: Use an INNER JOIN between the countries and car_makers tables based on the country ID to relate countries to their respective car makers.","151":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"cars_data.MPG\" and \"car_names.Model\" fields. 2. Condition Structure: No specific filtering condition is needed since we want to find the car model with the highest MPG. 3. Join Structure: Use a JOIN between the \"cars_data\" and \"car_names\" tables based on the foreign key relationship \"cars_data.Id = car_names.MakeId\" to link each car's data with its corresponding model. 4. Aggregation Structure: Use ORDER BY in descending order on \"cars_data.MPG\" to rank the car models by MPG. Use LIMIT 1 to select the car model with the highest MPG.","152":"1. Sequential Structure: Start with the SELECT clause to retrieve the abbreviation of the airline and the country it is in. Use the FROM clause to specify the airlines table and join it with the flights table to relate airlines to their flight counts. 2. Aggregation Structure: Use GROUP BY to group the results by airline to count the number of flights for each airline. Then, use the ORDER BY clause to sort the results by the flight count in ascending order to find the airline with the fewest flights. 3. Condition Structure: Use LIMIT to restrict the results to only the first entry, which will be the airline with the fewest flights. 4. Join Structure: Use an INNER JOIN between the airlines and flights tables based on the airline name to connect the flight data with the corresponding airline information.","153":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names from the countries table. Use the FROM clause to specify the countries table. 2. Condition Structure: Use a WHERE clause to filter for countries that do not have any associated car makers. This can be achieved by ensuring that the country ID does not appear in the car_makers table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching country IDs in the car_makers table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","154":"1. Sequential Structure: Start with the SELECT clause to retrieve the MakeId and Maker from the car_makers table. Use the FROM clause to specify the cars_data table, as it contains the cylinder and horsepower information. 2. Condition Structure: Use a WHERE clause to filter for cars that have less than 4 cylinders and do not have the minimum horsepower. The condition for horsepower will be defined using a subquery to find the minimum horsepower. 3. Join Structure: Use JOIN clauses to connect the cars_data table with the car_names and car_makers tables based on their relationships through foreign keys. This will allow us to access the Maker name corresponding to each MakeId. 4. Aggregation Structure: The minimum horsepower will be calculated using an aggregate function in a subquery, which will be used in the WHERE clause to filter out cars that do not meet this condition.","155":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and age of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. 2. Condition Structure: Use a WHERE clause to filter for students who have a dog as a pet. Additionally, use a subquery in the WHERE clause to exclude students who have a cat as a pet. 3. Join Structure: Use an INNER JOIN between the Student and Has_Pet tables based on StuID to connect students with their pets. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","156":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"carmakers.Maker\" and \"modellist.Model.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all makers and models. 3. Join Structure: Use a JOIN between the \"carmakers\" and \"modellist\" tables based on the relationship where \"modellist.Maker\" equals \"carmakers.Id\" to link each model with its respective maker. 4. Aggregation Structure: No aggregation is needed since we are simply listing the makers and models.","157":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of airlines. Use the FROM clause to specify the airlines table. We will also need to count the number of flights associated with each airline. 2. Aggregation Structure: Use the COUNT function to count the number of flights for each airline. This will be done in conjunction with the GROUP BY clause to group the results by airline. 3. Condition Structure: Use the HAVING clause to filter the results to only include airlines that have at least 10 flights. 4. Join Structure: Use an INNER JOIN between the airlines and flights tables based on the airline name to connect the airlines with their respective flights.","158":"1. Sequential Structure: Start with the SELECT clause to specify the count of unique airline IDs (uid) from the airlines table. 2. Condition Structure: Use a WHERE clause to filter for airlines where the \"Country\" is 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of unique airlines from the USA.","159":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" for the flights arriving in Aberdeen. 2. Condition Structure: Use a WHERE clause to filter for records where the destination airport matches the airport code for Aberdeen. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link flights with their respective destination airports. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the flight numbers without any summarization.","160":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the singer's name, country, and age. 2. Condition Structure: No specific filtering condition is required as we want all singers. 3. Join Structure: No JOIN is needed since all necessary information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results by age in descending order (from oldest to youngest).","161":"1. Sequential Structure: Start with the SELECT clause to specify the maximum acceleration for each distinct number of cylinders. 2. Aggregation Structure: Use the MAX function to calculate the maximum acceleration for each group of cylinders. 3. Grouping Structure: Use GROUP BY on \"cars_data.Cylinders\" to aggregate the results by the number of cylinders. 4. Join Structure: No JOIN is required since all necessary information is available in the \"cars_data\" table.","162":"1. Sequential Structure: Start with the SELECT clause to retrieve the stadium names. Use the FROM clause to specify the stadium table. 2. Condition Structure: Apply a WHERE clause to filter stadiums that do not have any associated concerts. This can be done by ensuring that the Stadium_ID is not present in the concert table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching Stadium_ID entries in the concert table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","163":"1. Sequential Structure: Start with the SELECT clause to specify the distinct countries of singers who are above the age of 20. 2. Condition Structure: Use a WHERE clause to filter singers where \"singer.Age\" is greater than 20. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"singer\" table. 4. Aggregation Structure: Use DISTINCT to ensure that only unique countries are returned in the result set.","164":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of countries. Use the FROM clause to specify the countries table. 2. Aggregation Structure: Use GROUP BY to group the results by country, allowing us to count the number of car makers per country. 3. Condition Structure: Apply a HAVING clause to filter for countries that have more than 2 car makers. 4. Join Structure: Use an INNER JOIN between the countries and car_makers tables based on the country ID to relate countries to their respective car makers.","165":"1. Sequential Structure: Start with the SELECT clause to retrieve the airport code. Use the FROM clause to specify the flights table, as we want to analyze flight data. 2. Aggregation Structure: Use GROUP BY to group the results by airport code, allowing us to count the number of flights associated with each airport. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of flights in descending order, so that the airport with the highest number of flights appears first. 4. Limiting Results: Use LIMIT to restrict the output to only the top result, which will be the airport code with the highest number of flights.","166":"1. Sequential Structure: Start with the SELECT clause to specify the count of airports. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all airports. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"airports\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of airports.","167":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of car models. Use the FROM clause to specify the model_list table, as it contains the relationship between car makers and their models. 2. Condition Structure: Use a WHERE clause to filter for the specific car maker, \"American Motor Company\". 3. Join Structure: An INNER JOIN is not required here since we can directly filter the model_list table based on the Maker. 4. Aggregation Structure: Use the COUNT function to aggregate the number of models associated with \"American Motor Company\".","168":"1. Sequential Structure: Start with the SELECT clause to retrieve distinct car models, specifically \"model_list.Model.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"cars_data.Year\" is greater than 1980. 3. Join Structure: Use a JOIN between the \"cars_data\" and \"car_names\" tables based on \"cars_data.Id\" and \"car_names.MakeId\" to link each car's data with its corresponding model. 4. Aggregation Structure: Use DISTINCT to ensure that only unique car models are returned in the result set.","169":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of car models and the full name of each maker. We will use COUNT to get the number of models and include \"carmakers.FullName\" in the SELECT clause. 2. Condition Structure: No specific filtering condition is needed, as we want to count all models for each maker. 3. Join Structure: Use a JOIN between the \"model_list\" and \"car_makers\" tables based on the relationship defined by \"model_list.Maker = car_makers.Id\" to link each model with its respective maker. 4. Aggregation Structure: Use COUNT on \"model_list.Model\" to count the number of models per maker, then GROUP BY \"carmakers.FullName\" to group the results by each maker's full name.","170":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Year\" from the \"cars_data\" table, as we want to know the years in which cars were produced within the specified weight range. 2. Condition Structure: Use a WHERE clause to filter the records for cars with a weight between 3000 and 4000. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the years that meet the specified weight conditions.","171":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" for the flights arriving at the specified airport. 2. Condition Structure: Use a WHERE clause to filter for records where \"flights.DestAirport\" matches the airport code \"APG.\" 3. Join Structure: No JOIN is necessary here, as the information needed is contained within the \"flights\" table. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving flight numbers based on the specified condition.","172":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the maximum weight and the pet type. 2. Aggregation Structure: Use the MAX function to calculate the maximum weight for each type of pet. 3. Grouping Structure: Use GROUP BY on \"Pets.PetType\" to calculate the maximum weight for each pet type. 4. Join Structure: No JOIN is required since all necessary information is available in the \"Pets\" table.","173":"1. Sequential Structure: Start with the SELECT clause to retrieve the airport code. Use the FROM clause to specify the airports table. 2. Aggregation Structure: Use COUNT to count the number of flights associated with each airport. 3. Grouping Structure: Use GROUP BY to group the results by airport code to get the count of flights for each airport. 4. Condition Structure: Use ORDER BY to sort the results by the count of flights in ascending order and limit the results to get the airport with the fewest flights.","174":"1. Sequential Structure: Start with the SELECT clause to retrieve the MakeId and Maker from the car_makers table. Use the FROM clause to specify the cars_data table, as it contains the horsepower and cylinder information. 2. Condition Structure: Use a WHERE clause to filter out cars that have horsepower greater than the lowest horsepower. This requires a subquery to find the minimum horsepower. 3. Join Structure: Use JOIN clauses to connect the cars_data table with the car_names and car_makers tables based on their relationships through MakeId and Maker. 4. Aggregation Structure: Use a subquery to determine the lowest horsepower, and then filter the main query to include only those cars that do not have more than 3 cylinders.","175":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airlines.Airline\" field, which represents the names of the airlines. 2. Condition Structure: Apply a WHERE clause to filter for flights that have \"SourceAirport\" equal to 'AHD'. 3. Join Structure: Use a JOIN between the \"airlines\" and \"flights\" tables based on the \"airlines.uid\" and \"flights.Airline\" to link each flight with its respective airline. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the airlines that have flights from the specified source airport.","176":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" for the flights arriving at the specified city. 2. Condition Structure: Use a WHERE clause to filter for records where \"airports.City\" is \"Aberdeen.\" 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link each flight with its corresponding airport information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the flight numbers without any summarization.","177":"1. Sequential Structure: Start with the SELECT clause to retrieve the abbreviation for \"Jetblue Airways\". 2. Condition Structure: Use a WHERE clause to filter for the airline name \"Jetblue Airways\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the abbreviation for a specific airline.","178":"1. Sequential Structure: Start with the SELECT clause to specify the average miles per gallon (MPG) of cars with 4 cylinders. 2. Condition Structure: Use a WHERE clause to filter the records for cars where \"cars_data.Cylinders\" is equal to 4. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use the AVG function to calculate the average MPG for the filtered records.","179":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars with horsepower greater than 150. 2. Condition Structure: Use a WHERE clause to filter records where \"cars_data.Horsepower\" is greater than 150. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cars that meet the horsepower condition.","180":"1. Sequential Structure: Start with the SELECT clause to retrieve the stadium name and capacity. Use the FROM clause to specify the stadium table. 2. Join Structure: Join the concert table with the stadium table on the Stadium_ID to relate concerts to their respective stadiums. 3. Condition Structure: Use a WHERE clause to filter concerts that occurred after the year 2013. 4. Aggregation Structure: Use GROUP BY to group the results by stadium, and then use COUNT to count the number of concerts for each stadium. Finally, apply an ORDER BY clause to sort the results in descending order based on the count of concerts and limit the result to the top entry to get the stadium with the most concerts.","181":"1. Sequential Structure: Start with the SELECT clause to retrieve the PetID of the pet owned by the student. Use the FROM clause to specify the Has_Pet table, as it links students to their pets. 2. Condition Structure: Use the WHERE clause to filter for the student whose last name is 'Smith'. 3. Join Structure: Use an INNER JOIN between the Has_Pet table and the Student table on the StuID to connect students with their pets. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","182":"1. Sequential Structure: Start with the SELECT clause to count the number of car models. Use the FROM clause to specify the model_list table, as it contains the car models and their associated makers. 2. Condition Structure: Use the WHERE clause to filter for car makers that are located in the USA. This will involve checking the country name in the countries table. 3. Join Structure: Use JOIN clauses to connect the model_list table with the car_makers table and the countries table based on their foreign key relationships. This will allow us to filter the models based on the country of the makers. 4. Aggregation Structure: Use the COUNT function to aggregate the number of models produced by makers in the USA.","183":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct continents. 2. Condition Structure: No specific filtering condition is needed since we want to count all continents. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"continents\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of distinct continents.","184":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name. Use the FROM clause to specify the countries table. 2. Join Structure: Join the countries table with the car_makers table on the country ID to relate car makers to their respective countries. 3. Aggregation Structure: Use GROUP BY to group the results by country name, allowing us to count the number of car makers per country. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of car makers in descending order and limit the results to the top entry to find the country with the most car makers.","185":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Id\" and \"Maker\" from the \"car_makers\" table. Use the FROM clause to specify the \"car_makers\" table. 2. Aggregation Structure: Use GROUP BY to group the results by \"Id\" and \"Maker\" to count the number of models produced by each maker. 3. Condition Structure: Use the HAVING clause to filter groups where the count of models is at least 2, ensuring we only get makers that produce at least 2 models. 4. Join Structure: Use JOIN to connect the \"car_makers\" table with the \"model_list\" table based on the foreign key relationship to count the models associated with each maker.","186":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"stadium.Stadium_ID\" and the count of concerts. We will use COUNT to aggregate the number of concerts for each stadium. 2. Condition Structure: No specific filtering condition is needed, as we want to count all concerts for each stadium. 3. Join Structure: Use a JOIN between the \"stadium\" and \"concert\" tables based on \"Stadium_ID\" to link each concert with its respective stadium. 4. Aggregation Structure: Use GROUP BY on \"stadium.Stadium_ID\" to group the results by each stadium, allowing us to count the number of concerts held at each location.","187":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of flights. We will use the COUNT function to get the total number of flights departing from Aberdeen. 2. Condition Structure: Apply a WHERE clause to filter the records for flights where the source airport corresponds to Aberdeen. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the \"SourceAirport\" and \"AirportCode\" to link each flight with its respective airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified condition.","188":"1. Sequential Structure: Start with the SELECT clause to retrieve the model of the car. Use the FROM clause to specify the cars_data table and join it with the car_names table to link car data with their respective models. 2. Condition Structure: Use a WHERE clause to filter for cars whose weight is below the average weight. This will involve a subquery to calculate the average weight from the cars_data table. 3. Join Structure: Use an INNER JOIN between the cars_data and car_names tables based on the MakeId to connect the car data with the car models. 4. Aggregation Structure: Use the AVG function in a subquery to calculate the average weight of all cars, which will be used in the WHERE clause to filter the results.","189":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"airports.AirportName\" to retrieve the names of the airports. 2. Condition Structure: Use a WHERE clause to filter for airports located in the city of \"Aberdeen\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the airports that meet the specified condition.","190":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"City\" and \"Country\" of the airport. 2. Condition Structure: Use a WHERE clause to filter for the specific airport, which is \"Alton\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the city and country for the specified airport.","191":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country names and the count of singers from each country. 2. Aggregation Structure: Use COUNT to calculate the number of singers for each country. 3. Grouping Structure: Use GROUP BY on \"singer.Country\" to aggregate the results by each country. 4. Join Structure: No JOIN is required since all necessary information is available in the \"singer\" table.","192":"1. Sequential Structure: Start with the SELECT clause to retrieve the airport code. Use the FROM clause to specify the flights table, as we want to count the number of flights associated with each airport. 2. Aggregation Structure: Use GROUP BY to group the results by airport code, allowing us to count the total number of flights for each airport. 3. Aggregation Structure: Use COUNT to calculate the total number of flights for each airport. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the count of flights, and limit the results to the top entry to get the airport with the most flights.","193":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights departing from Aberdeen. 2. Condition Structure: Apply a WHERE clause to filter for flights where the source airport is in the city of Aberdeen. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the \"SourceAirport\" and \"AirportCode\" to link each flight with its respective source airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified condition.","194":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of dog pets. Use the FROM clause to specify the Has_Pet table, as it links students to their pets. 2. Condition Structure: Apply a WHERE clause to filter for female students and ensure that the pet type is 'dog'. 3. Join Structure: Use JOIN clauses to combine the Has_Pet table with the Student and Pets tables based on the shared keys (StuID and PetID). 4. Aggregation Structure: Use the COUNT function to aggregate the number of dog pets raised by female students.","195":"1. Sequential Structure: Start with the SELECT clause to retrieve distinct models from the model_list table. Use the FROM clause to specify the model_list table and join it with the car_names and cars_data tables to access the necessary data. 2. Condition Structure: Use a WHERE clause to filter for models created by 'General Motors' or those with a weight greater than 3500. This will involve checking the Maker in the car_makers table and the Weight in the cars_data table. 3. Join Structure: Use JOINs to connect the model_list table with the car_makers and car_names tables based on the foreign key relationships. Additionally, join the cars_data table to access the weight information. 4. Aggregation Structure: Not needed, as we are retrieving distinct models based on the specified conditions without any aggregation.","196":"1. Sequential Structure: Start with the SELECT clause to retrieve the names and locations of the stadiums. Use the FROM clause to specify the stadium table and join it with the concert table to filter concerts by year. 2. Condition Structure: Use a WHERE clause to filter concerts that occurred in both 2014 and 2015. This will require grouping by stadium and using a HAVING clause to ensure that both years are represented. 3. Join Structure: Use an INNER JOIN between the stadium and concert tables based on the Stadium_ID to relate concerts to their respective stadiums. 4. Aggregation Structure: Use GROUP BY on the stadium's ID to count the number of distinct years for each stadium and apply a HAVING clause to filter for those that have concerts in both years (i.e., count of distinct years should be 2).","197":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"airports.AirportCode\" and \"airports.AirportName\". 2. Condition Structure: Use a WHERE clause to filter for records where \"airports.City\" is equal to 'Anthony'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airport code and name for the specified city.","198":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"cars_data.MPG\" and \"car_names.Model\" since we want to find the model that saves the most gasoline. 2. Condition Structure: No specific filtering condition is needed here, as we are interested in finding the model with the maximum MPG. 3. Join Structure: Use a JOIN between the \"cars_data\" and \"car_names\" tables based on \"cars_data.Id\" and \"car_names.MakeId\" to link each car's data with its corresponding model name. 4. Aggregation Structure: Use ORDER BY in descending order on \"cars_data.MPG\" to rank the models by their miles per gallon. Use LIMIT 1 to select the model with the highest MPG.","199":"1. Sequential Structure: Start with the SELECT clause to specify the required fields, which are the maximum and average capacities of all stadiums. 2. Aggregation Structure: Use the MAX and AVG functions to calculate the maximum and average capacity for the stadiums. 3. Grouping Structure: No GROUP BY is needed since we want the overall maximum and average across all stadiums. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"stadium\" table.","200":"1. Sequential Structure: Start with the SELECT clause to specify the count of flights departing from the airport with the code 'APG'. 2. Condition Structure: Use a WHERE clause to filter for flights where \"flights.SourceAirport\" is equal to 'APG'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights that meet the specified condition.","201":"1. Sequential Structure: Start with the SELECT clause to retrieve the Major and Age of students. Use the FROM clause to specify the Student table. 2. Condition Structure: Apply a WHERE clause to filter students who do not own a cat. This will involve checking the PetType in the Pets table and ensuring that the corresponding StuID in the Has_Pet table does not have any entries for cats. 3. Join Structure: Use JOIN clauses to connect the Student table with the Has_Pet table and the Pets table based on the shared keys (StuID and PetID). 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","202":"1. Sequential Structure: Start with the SELECT clause to retrieve the average engine displacement (edispl) for all Volvo cars. We will use the AVG function on the \"cars_data.Edispl\" field. 2. Condition Structure: Apply a WHERE clause to filter for records where the car maker is 'Volvo'. This will involve checking the \"car_makers.Maker\" field. 3. Join Structure: Use JOIN clauses to connect the \"cars_data\" table with the \"car_names\" table and then with the \"model_list\" and \"car_makers\" tables to ensure we can filter by the maker. 4. Aggregation Structure: Use AVG to calculate the average engine displacement for the filtered records.","203":"1. Sequential Structure: Start with the SELECT clause to specify the average miles per gallon (MPG) of cars with 4 cylinders. 2. Condition Structure: Use a WHERE clause to filter the records for cars where \"cars_data.Cylinders\" is equal to 4. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use the AVG function to calculate the average MPG for the filtered records.","204":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and gender of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. 2. Condition Structure: Use the HAVING clause to filter for students who have more than one pet by counting the number of pets associated with each student. 3. Join Structure: Use an INNER JOIN between the Student and Has_Pet tables based on the StuID to connect students with their pets. 4. Aggregation Structure: Use GROUP BY on the StuID to group records by student and COUNT to determine the number of pets each student has, applying the HAVING clause to filter for those with more than one pet.","205":"1. Sequential Structure: Start with the SELECT clause to retrieve the country ID and country name from the countries table. Use the FROM clause to specify the countries table. 2. Condition Structure: We need to filter countries that either have more than 3 car makers or produce the 'fiat' model. This will require a HAVING clause for the count of car makers and a condition for the 'fiat' model. 3. Join Structure: Use a LEFT JOIN between the countries table and the car_makers table to count the number of car makers per country. Additionally, we will need to check for the 'fiat' model in the car_names table, which will require another JOIN. 4. Aggregation Structure: Use COUNT to aggregate the number of car makers per country and apply a HAVING clause to filter for countries with more than 3 car makers. We will also need to check for the existence of the 'fiat' model in the car_names table.","206":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"stadium.Name\" and \"stadium.Capacity\" for the stadium with the highest average attendance. 2. Condition Structure: No specific filtering condition is needed since we are looking for the stadium with the highest average attendance. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"stadium\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"stadium.Average\" to rank stadiums by their average attendance and apply LIMIT 1 to select the stadium with the highest average attendance.","207":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" and \"singer.Country\" of the singer whose song contains 'Hey' in its name. 2. Condition Structure: Use a WHERE clause to filter for songs where \"singer.Song_Name\" contains 'Hey'. 3. Join Structure: A JOIN is necessary to connect the \"singer\" table with the \"singer_in_concert\" table to ensure we are only considering singers who have performed in concerts. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and countries of singers based on the specified condition.","208":"1. Sequential Structure: Start with the SELECT clause to retrieve the country IDs and names. Use the FROM clause to specify the countries table. 2. Condition Structure: Use a WHERE clause to filter countries based on two conditions: either having more than 3 car makers or producing the 'fiat' model. 3. Join Structure: Use a LEFT JOIN between the countries table and the car_makers table to count the number of car makers per country. Additionally, use a JOIN with the car_names table to check for the 'fiat' model. 4. Aggregation Structure: Use GROUP BY to group the results by country ID and name, and use HAVING to filter for countries with more than 3 car makers.","209":"1. Sequential Structure: Start with the SELECT clause to retrieve the PetID of the pet owned by the student. Use the FROM clause to specify the Has_Pet table, as it links students to their pets. 2. Condition Structure: Use a WHERE clause to filter for the student whose last name is 'Smith'. 3. Join Structure: Use an INNER JOIN between the Has_Pet table and the Student table on the StuID to connect the pet ownership records with the student details. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","210":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights that belong to \"United Airlines\" and have \"Aberdeen\" as the destination. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link each flight with its respective destination airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","211":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"Pets.PetID\" and \"Pets.weight\" for pets older than 1 year. 2. Condition Structure: Use a WHERE clause to filter for pets where \"Pets.pet_age\" is greater than 1. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Pets\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the pet IDs and weights that meet the specified age condition.","212":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" of the singers who performed in the specified year. 2. Condition Structure: Use a WHERE clause to filter for records where \"concert.Year\" is 2014. 3. Join Structure: Use JOINs to connect the \"singer\" table with the \"singer_in_concert\" table on \"Singer_ID\" and the \"concert\" table on \"concert_ID\" to link each singer with their respective concert records. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique singer names are returned.","213":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the stadiums. Use the FROM clause to specify the stadium table. 2. Condition Structure: Apply a WHERE clause to filter stadiums that do not have any associated concerts. This can be achieved by ensuring that the Stadium_ID from the stadium table is not present in the concert table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching Stadium_ID entries in the concert table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","214":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airports.City\" and the count of flights arriving at that city. 2. Condition Structure: No specific filtering condition is needed, as we want to count all arriving flights for each city. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link flights to their respective cities. 4. Aggregation Structure: Use COUNT to count the number of flights for each city and GROUP BY \"airports.City\" to aggregate the results by city. Finally, use ORDER BY in descending order to find the city with the most arriving flights and LIMIT 1 to get the top result.","215":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" field. 2. Condition Structure: Use a WHERE clause to filter for records where \"concert.Year\" is 2014. 3. Join Structure: Use JOINs to connect the \"singer\" table with the \"singer_in_concert\" table on \"Singer_ID\" and the \"concert\" table on \"concert_ID\" to link each singer with their respective concerts. 4. Aggregation Structure: No aggregation is needed, but DISTINCT can be applied to ensure unique singer names are returned.","216":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name and ID from the countries table. Use the FROM clause to specify the countries table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find countries that have at least one car maker. 3. Join Structure: Use an INNER JOIN between the countries and car_makers tables based on the country ID to link car makers to their respective countries. 4. Aggregation Structure: Use GROUP BY to group the results by country ID and name to ensure that we only get distinct countries that have car makers.","217":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"stadium.Location\" and \"stadium.Name\". 2. Condition Structure: Use a WHERE clause to filter for stadiums where \"stadium.Capacity\" is between 5000 and 10000. 3. Join Structure: No JOIN is necessary since all required information is available in the \"stadium\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the locations and names of stadiums that meet the specified capacity condition.","218":"1. Sequential Structure: Start with the SELECT clause to retrieve the model of the car. Use the FROM clause to specify the car_names table. 2. Condition Structure: Apply a WHERE clause to filter for cars whose weight is less than the average weight. 3. Join Structure: Use a JOIN clause to connect the car_names table with the cars_data table based on the MakeId to access the weight information. 4. Aggregation Structure: Use a subquery within the WHERE clause to calculate the average weight of all cars, filtering for models with a weight below this average.","219":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Year\" from the \"concert\" table since the question asks for the year with the most concerts. 2. Condition Structure: No specific filtering condition is needed, as we want to find the year with the maximum number of concerts. 3. Join Structure: No JOIN is necessary because all the required data is contained within the \"concert\" table. 4. Aggregation Structure: Use COUNT to count the number of concerts for each year. Use ORDER BY in descending order on the count and LIMIT 1 to retrieve the year with the most concerts.","220":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"carmakers.FullName\" and \"carmakers.Id.\" Additionally, we need to count the number of models produced by each car maker. 2. Condition Structure: No specific filtering condition is needed, as we want to include all car makers and their models. 3. Join Structure: Use a JOIN between the \"carmakers\" table and the \"modellist\" table based on the foreign key relationship where \"modellist.Maker = carmakers.Id\" to link each car maker with its models. 4. Aggregation Structure: Use COUNT on \"modellist.Model\" to count the number of models for each car maker, and GROUP BY \"carmakers.Id\" to group the results by each car maker.","221":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum horsepower and the corresponding make of the car. Use the FROM clause to specify the cars_data table and join it with the car_names table to link horsepower data with car makes. 2. Condition Structure: Use the WHERE clause to filter records for models that have exactly 3 cylinders. 3. Join Structure: Use an INNER JOIN between the cars_data and car_names tables based on the MakeId to connect horsepower data with the car makes. 4. Aggregation Structure: Use the MAX function to find the largest horsepower among the filtered records and group by the make to ensure we get the correct association.","222":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"carmakers.FullName,\" \"carmakers.Id,\" and the count of models produced by each maker. 2. Condition Structure: No specific filtering condition is needed, as we want to count all models for each car maker. 3. Join Structure: Use a JOIN between the \"model_list\" and \"car_makers\" tables based on the foreign key relationship where \"model_list.Maker\" equals \"car_makers.Id.\" 4. Aggregation Structure: Use COUNT to aggregate the number of models for each car maker and GROUP BY \"carmakers.FullName\" and \"carmakers.Id\" to group the results accordingly.","223":"1. Sequential Structure: Start with the SELECT clause to retrieve the city names from the airports table. Use the FROM clause to specify the flights table, as we want to analyze the source airports from the flights data. 2. Join Structure: Use an INNER JOIN between the flights and airports tables based on the SourceAirport and AirportCode to connect flights to their corresponding source airports. 3. Aggregation Structure: Use GROUP BY to group the results by city, allowing us to count the number of flights originating from each city. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of flights in descending order, and limit the results to the top entry to find the most frequent source airport.","224":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of continents. 2. Condition Structure: No specific filtering condition is needed since we want the total number of continents. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"continents\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of distinct continents.","225":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the pet type and the maximum weight for each type of pet. 2. Aggregation Structure: Use the MAX function to calculate the maximum weight for each pet type. 3. Grouping Structure: Use GROUP BY on \"Pets.PetType\" to aggregate the results by each type of pet. 4. Join Structure: No JOIN is required since all necessary data is within the \"Pets\" table.","226":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of cars. Use the FROM clause to specify the cars_data table. 2. Condition Structure: Use a WHERE clause to filter for cars with an accelerate value greater than the maximum horsepower found in the cars_data table. 3. Join Structure: Not required, as all necessary data is available within the cars_data table. 4. Aggregation Structure: Use the COUNT function to count the number of cars that meet the specified condition, and use a subquery to find the maximum horsepower.","227":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum MPG from the cars_data table. Use the FROM clause to specify the cars_data table. 2. Condition Structure: Apply a WHERE clause to filter records for cars that have either 8 cylinders or were produced before the year 1980. 3. Join Structure: Not required, as all necessary data is available within the cars_data table. 4. Aggregation Structure: Use the MAX function to find the maximum MPG among the filtered records.","228":"1. Sequential Structure: Start with the SELECT clause to retrieve the major and age of students. Use the FROM clause to specify the Student table. 2. Condition Structure: Apply a WHERE clause to filter students who do not have a cat as a pet. This will involve checking the absence of a corresponding entry in the Has_Pet table for pets of type 'cat'. 3. Join Structure: Use a LEFT JOIN between the Student table and the Has_Pet table to include all students, and then join with the Pets table to access pet types. 4. Aggregation Structure: Not needed, as we are simply filtering and retrieving specific records without any aggregation.","229":"1. Sequential Structure: Start with the SELECT clause to retrieve the average age of students. Use the FROM clause to specify the Student table. 2. Condition Structure: Apply a WHERE clause to filter students who do not have any pets. This can be done by ensuring that the student IDs are not present in the Has_Pet table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching student IDs in the Has_Pet table. 4. Aggregation Structure: Use the AVG function to calculate the average age of the filtered students.","230":"1. Sequential Structure: Start with the SELECT clause to specify the average horsepower of the cars. 2. Condition Structure: Use a WHERE clause to filter for cars where \"cars_data.Year\" is less than 1980. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use the AVG function to calculate the average horsepower for the filtered cars.","231":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"flights.FlightNo\" which represents the flight numbers. 2. Condition Structure: Apply a WHERE clause to filter for flights where \"flights.SourceAirport\" is equal to 'APG'. 3. Join Structure: No JOIN is necessary here since we are only interested in the \"flights\" table and the condition is directly applied to it. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the flight numbers that meet the specified condition.","232":"1. Sequential Structure: Start with the SELECT clause to count the total number of flights. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all flights. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights.","233":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of airlines. Use the FROM clause to specify the airlines table. We will also need to join the flights table to count the number of flights per airline. 2. Aggregation Structure: Use GROUP BY to group the results by airline name, allowing us to count the number of flights for each airline. 3. Condition Structure: Apply a HAVING clause to filter the results to only include airlines that have fewer than 200 flights. 4. Join Structure: Use an INNER JOIN between the airlines and flights tables based on the airline name to relate the airlines to their respective flights.","234":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the number of cylinders and the maximum acceleration. 2. Aggregation Structure: Use the MAX function to calculate the maximum acceleration for each distinct number of cylinders. 3. Grouping Structure: Use GROUP BY on \"cars_data.Cylinders\" to aggregate the results by the number of cylinders. 4. Join Structure: No JOIN is required since all necessary data is available in the \"cars_data\" table.","235":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct names of car makers, which is represented by \"car_makers.Maker.\" 2. Condition Structure: Use a WHERE clause to filter the records where \"cars_data.Year\" is 1970. 3. Join Structure: Use JOINs to connect the \"car_makers\" table with the \"car_names\" table and then with the \"cars_data\" table to link each car maker with the cars they produced in the specified year. 4. Aggregation Structure: Use DISTINCT to ensure that only unique car maker names are returned.","236":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"stadium.Name\" and \"stadium.Capacity.\" 2. Condition Structure: Apply a WHERE clause to filter for concerts that occurred in the year 2014 or later. 3. Join Structure: Use a JOIN between the \"concert\" and \"stadium\" tables based on \"Stadium_ID\" to link each concert with its respective stadium. 4. Aggregation Structure: Use GROUP BY on \"stadium.Name\" and \"stadium.Capacity\" to group the results by stadium, and use COUNT to determine the number of concerts per stadium. Finally, use ORDER BY in descending order on the count of concerts and LIMIT 1 to get the stadium with the most concerts.","237":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of airports. Use the FROM clause to specify the airports table. 2. Condition Structure: Apply a WHERE clause to filter airports that do not have any flights associated with them. This can be done by ensuring that the airport code is not present in either the SourceAirport or DestAirport columns of the flights table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching airport codes in the flights table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","238":"1. Sequential Structure: Start with the SELECT clause to specify the count of flights. 2. Condition Structure: No specific filtering condition is needed since we want the total number of flights. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"flights\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of flights.","239":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of pets owned by students. Use the FROM clause to specify the Has_Pet table, as it contains the relationship between students and their pets. 2. Condition Structure: Apply a WHERE clause to filter students who are older than 20 years. 3. Join Structure: Use an INNER JOIN between the Has_Pet table and the Student table based on the StuID to connect students with their pets. 4. Aggregation Structure: Use COUNT to aggregate the number of pets owned by the filtered students.","240":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"airlines.Airline\" for the airline with the abbreviation 'UAL'. 2. Condition Structure: Use a WHERE clause to filter for the airline where \"airlines.Abbreviation\" is equal to 'UAL'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the name of the airline that matches the specified abbreviation.","241":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Country\" of the airline \"JetBlue Airways\". 2. Condition Structure: Use a WHERE clause to filter for the airline name \"JetBlue Airways\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","242":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of concerts. Use the FROM clause to specify the concert table. 2. Condition Structure: Use a WHERE clause to filter concerts that took place in the stadium with the highest capacity. 3. Join Structure: Use a JOIN between the concert and stadium tables based on the Stadium_ID to relate concerts to their respective stadiums. 4. Aggregation Structure: Use COUNT to aggregate the number of concerts in the specified stadium.","243":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars that have more than 6 cylinders. 2. Condition Structure: Use a WHERE clause to filter records where \"cars_data.Cylinders\" is greater than 6. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cars that meet the specified condition.","244":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Country\" associated with \"Jetblue Airways\". 2. Condition Structure: Use a WHERE clause to filter for the specific airline name \"Jetblue Airways\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"airlines\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the country for a specific airline.","245":"1. Sequential Structure: Start with the SELECT clause to specify the count of cars that have more than 4 cylinders. 2. Condition Structure: Use a WHERE clause to filter records where \"cars_data.Cylinders\" is greater than 4. 3. Join Structure: No JOIN is necessary since all required information is available in the \"cars_data\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cars that meet the specified condition.","246":"1. Sequential Structure: Start with the SELECT clause to specify the count of pets whose weight is greater than 10. 2. Condition Structure: Use a WHERE clause to filter for pets where \"Pets.weight\" is greater than 10. 3. Join Structure: No JOIN is necessary since all required information is available in the \"Pets\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of pets that meet the weight condition.","247":"1. Sequential Structure: Start with the SELECT clause to retrieve the names and release years of songs. Use the FROM clause to specify the singer table and join it with the singer_in_concert table to link singers with their songs. 2. Condition Structure: Use a WHERE clause to filter for the youngest singer by finding the minimum age from the singer table. 3. Join Structure: Use an INNER JOIN between the singer and singer_in_concert tables based on Singer_ID to connect singers with their songs. 4. Aggregation Structure: Use the MIN function to determine the youngest singer's age, which will be used in the filtering condition.","248":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Student table and JOIN it with the Has_Pet table to link students with their pets. Additionally, join the Pets table to filter based on pet types. 2. Join Structure: Use INNER JOINs between the Student, Has_Pet, and Pets tables based on the shared keys (StuID and PetID) to connect students with their respective pets. 3. Condition Structure: Use a GROUP BY clause to group the results by student ID, and apply a HAVING clause to filter for students who have both 'cat' and 'dog' pets. This can be achieved by counting the distinct pet types and ensuring that the count is equal to 2. 4. Aggregation Structure: Use COUNT(DISTINCT Pets.PetType) in the HAVING clause to ensure that only students with both types of pets are included in the results.","249":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights where the airline is \"United Airlines\" and the destination airport is \"ASY.\" 3. Join Structure: No JOIN is needed here since we can filter directly from the \"flights\" table based on the destination airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","250":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the average, minimum, and maximum age of singers. 2. Condition Structure: Use a WHERE clause to filter for singers from \"France\". 3. Aggregation Structure: Use AVG, MIN, and MAX functions to calculate the average, minimum, and maximum ages of the filtered singers. 4. Join Structure: No JOIN is required since all necessary information is available in the \"singer\" table.","251":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of flights arriving in Aberdeen. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights where the destination airport corresponds to Aberdeen. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables based on the destination airport code to link each flight with its respective airport. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified condition.","252":"1. Sequential Structure: Start with the SELECT clause to retrieve the student IDs from the Student table. Use the FROM clause to specify the Student table. 2. Condition Structure: Apply a WHERE clause to filter students who do not have a cat as a pet. This will involve checking that the student ID is not present in the Has_Pet table for any pet of type 'cat'. 3. Join Structure: Use a LEFT JOIN between the Student table and the Has_Pet table to include all students, even those without pets, and then join with the Pets table to filter based on pet type. 4. Aggregation Structure: Not needed, as we are simply filtering based on the presence or absence of a specific pet type.","253":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Horsepower\" of the car with the largest \"Accelerate\". 2. Condition Structure: No specific filtering condition is needed since we are looking for the car with the maximum \"Accelerate\". 3. Join Structure: No JOIN is necessary as all required information is contained within the \"cars_data\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"cars_data.Accelerate\" to rank cars by their acceleration and apply LIMIT 1 to select the car with the highest acceleration.","254":"1. Sequential Structure: Start with the SELECT clause to count the number of flights. We will use the COUNT function to get the total number of flights. 2. Condition Structure: Apply a WHERE clause to filter for flights that have \"Aberdeen\" as the source airport and \"Ashley\" as the destination airport. 3. Join Structure: Use a JOIN between the \"flights\" and \"airports\" tables to link the source and destination airports with their respective airport codes. 4. Aggregation Structure: Use COUNT to aggregate the number of flights that meet the specified conditions.","255":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the airport code and airport name. 2. Condition Structure: Use a WHERE clause to filter records for airports located in the city of 'Anthony'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"airports\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the airport code and name for the specified city.","256":"1. Sequential Structure: Start with the SELECT clause to retrieve the number of cylinders. Use the FROM clause to specify the cars_data table, and join it with the car_names and model_list tables to filter for the specific model 'volvo'. 2. Condition Structure: Use a WHERE clause to filter for the model 'volvo' and to find the car with the least accelerate value. 3. Join Structure: Use INNER JOINs between the car_names, model_list, and cars_data tables based on the relationships defined in the schema to connect the model to its corresponding data. 4. Aggregation Structure: Use the MIN function to find the least accelerate value and filter the results accordingly to get the number of cylinders for that specific car.","257":"1. Sequential Structure: Start with the SELECT clause to retrieve the template type codes. Use the FROM clause to specify the Ref_Template_Types table, as we want to find template types that are not associated with any documents. 2. Condition Structure: Use a WHERE clause to filter for template type codes that do not exist in the Documents table. This can be achieved using a subquery that selects template IDs from the Documents table. 3. Join Structure: Not required, as we are only interested in the template types from the Ref_Template_Types table and checking their absence in the Documents table. 4. Aggregation Structure: Not needed, as we are simply retrieving the template type codes without any aggregation.","258":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Courses.course_name\" and \"Courses.course_description\" to describe the math course. 2. Condition Structure: Apply a WHERE clause to filter for the specific course name, which is \"math\" (assuming the exact name is \"math\" or similar). 3. Join Structure: No JOIN is necessary since the information is available within the \"Courses\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the description of the math course.","259":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and join it with the Paragraphs table to relate documents to their paragraphs. 2. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their corresponding paragraphs. 3. Aggregation Structure: Use GROUP BY to group the results by Document_ID, allowing us to count the number of paragraphs associated with each document. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of paragraphs is at least 2, ensuring we only get documents with two or more paragraphs.","260":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the opening year and the number of staff for the museum named \"Plaza Museum\". 2. Condition Structure: Use a WHERE clause to filter for the museum with the name \"Plaza Museum\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"museum\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving specific fields based on a condition.","261":"1. Sequential Structure: Start with the SELECT clause to retrieve the winner's name, which includes both \"players.first_name\" and \"players.last_name.\" 2. Condition Structure: Apply a WHERE clause to filter for matches that occurred in the \"Australian Open\" tournament. 3. Join Structure: Use a JOIN between the \"matches\" and \"players\" tables based on the winner's ID to link each match with the corresponding winner's details. 4. Aggregation Structure: Use ORDER BY to sort the results by the winner's rank points in descending order and apply LIMIT 1 to get the winner with the highest rank points.","262":"1. Sequential Structure: Start with the SELECT clause to retrieve the full names of players, which will include both \"players.first_name\" and \"players.last_name\". 2. Condition Structure: No specific filtering condition is needed since we want all players. 3. Join Structure: No JOIN is required as all necessary information is available in the \"players\" table. 4. Aggregation Structure: No aggregation is needed; however, we will use ORDER BY to sort the results by \"players.birth_date\".","263":"1. Sequential Structure: Start with the SELECT clause to count the number of visitors below age 30. 2. Condition Structure: Use a WHERE clause to filter for visitors whose age is less than 30. 3. Join Structure: No JOIN is necessary since all required information is available in the \"visitor\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of visitors that meet the age condition.","264":"1. Sequential Structure: Start with the SELECT clause to retrieve the AirportCode from the airports table. Use the FROM clause to specify the airports table. 2. Condition Structure: Use a WHERE clause to filter airports that do not appear in the flights table as either SourceAirport or DestAirport. 3. Join Structure: Not required, as we are only filtering based on the absence of matching entries in the flights table. 4. Aggregation Structure: Not needed, as we are simply retrieving records based on specified conditions without any aggregation.","265":"1. Sequential Structure: Start with the SELECT clause to retrieve the total ticket expense, which corresponds to the \"visit.Total_spent\" field. 2. Condition Structure: Apply a WHERE clause to filter for visitors whose membership level is 1, using the \"visitor.Level_of_membership\" field. 3. Join Structure: Use a JOIN between the \"visit\" and \"visitor\" tables based on the foreign key relationship, linking \"visit.visitor_ID\" to \"visitor.ID.\" 4. Aggregation Structure: Use SUM to aggregate the total expenses from the \"visit\" table for the filtered visitors.","266":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, \"players.first_name\" and \"players.country_code.\" 2. Condition Structure: No specific filtering condition is needed here, as we are interested in finding the player with the most tours. 3. Join Structure: Use a JOIN between the \"players\" and \"rankings\" tables based on \"player_id\" to link each player with their respective tours. 4. Aggregation Structure: Use COUNT on \"rankings.tours\" to count the number of tours per player, then use ORDER BY in descending order to rank players by the number of tours. Finally, use LIMIT 1 to select the player with the most tours.","267":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and JOIN it with the Paragraphs table to link documents with their paragraphs. 2. Condition Structure: Use the WHERE clause to filter for paragraphs that contain both 'Brazil' and 'Ireland'. This can be achieved by using a GROUP BY clause on Document_ID and applying a HAVING clause to ensure that both keywords are present in the paragraphs associated with each document. 3. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their respective paragraphs. 4. Aggregation Structure: Use COUNT or a similar aggregate function in the HAVING clause to ensure that both 'Brazil' and 'Ireland' are present in the paragraphs for each document.","268":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the ranking date and the total number of tours. 2. Aggregation Structure: Use the SUM function to calculate the total number of tours for each ranking date. 3. Grouping Structure: Use GROUP BY on \"rankings.ranking_date\" to aggregate the results by each ranking date. 4. Join Structure: No JOIN is required since all necessary information is available in the \"rankings\" table.","269":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"teacher.Hometown\" of the youngest teacher. 2. Condition Structure: No specific filtering condition is needed since we are looking for the youngest teacher based on age. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"teacher.Age\" to rank teachers by age and apply LIMIT 1 to select the youngest teacher.","270":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"first_name\" and \"country_code\" of the oldest player. 2. Condition Structure: No specific filtering condition is needed since we want to find the oldest player based on their birth date. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"players\" table. 4. Aggregation Structure: Use ORDER BY to sort the players by \"birth_date\" in ascending order to find the oldest player, and apply LIMIT 1 to select only that player.","271":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Template_Type_Code\" from the \"Ref_Template_Types\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific \"Template_Type_Description\" that matches \"Book.\" 3. Join Structure: Use a JOIN between the \"Templates\" and \"Ref_Template_Types\" tables based on \"Template_Type_Code\" to link the template types with their descriptions. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the template type code for the specified description.","272":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of employees. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all employees. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"employee\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of employees in the \"employee\" table.","273":"1. Sequential Structure: Start with the SELECT clause to specify that we want to retrieve distinct template type codes from the Templates table. 2. Condition Structure: No specific filtering condition is needed since we want all distinct template type codes. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Templates\" table. 4. Aggregation Structure: Use the DISTINCT keyword to ensure that only unique template type codes are returned.","274":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of documents. Use the FROM clause to specify the Documents table. 2. Join Structure: Join the Documents table with the Templates table on Template_ID to relate documents to their templates. Additionally, join the Templates table with the Ref_Template_Types table on Template_Type_Code to access the template type code. 3. Condition Structure: Use the WHERE clause to filter for templates with the specific code 'BK'. 4. Aggregation Structure: Not needed, as we are simply retrieving document names based on the specified conditions without any aggregation.","275":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the players' first names and birth dates. 2. Condition Structure: Use a WHERE clause to filter for players whose \"country_code\" is 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"players\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the first names and birth dates of players from the specified country.","276":"1. Sequential Structure: Start with the SELECT clause to retrieve the full names of players, which will include both \"players.first_name\" and \"players.last_name\". 2. Condition Structure: Use a WHERE clause to filter for players whose \"players.hand\" is equal to 'left'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"players\" table. 4. Ordering Structure: Use ORDER BY to sort the results by \"players.birth_date\" in ascending order.","277":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the template type code and its description. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all template type codes and descriptions. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Ref_Template_Types\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the template type codes and descriptions.","278":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template ID and Template Type Code. Use the FROM clause to specify the Templates table. 2. Join Structure: Join the Templates table with the Documents table on the Template ID to relate templates to the documents that use them. 3. Aggregation Structure: Use GROUP BY to group the results by Template ID and Template Type Code, allowing us to count the number of documents associated with each template. 4. Condition Structure: Apply a HAVING clause to filter for the template that has the maximum count of documents, ensuring we only get the template used by the most documents.","279":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest rank of losers. Use the FROM clause to specify the rankings table, as it contains the ranking information. 2. Join Structure: Use an INNER JOIN between the rankings table and the matches table to connect the rankings of the losers with their corresponding match records. The join will be based on the player ID. 3. Aggregation Structure: Use the MAX function to find the highest ranking among the losers. 4. Condition Structure: No specific condition is needed since we want to consider all matches and their losers.","280":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of teachers. Use the FROM clause to specify the teacher table. 2. Aggregation Structure: Use GROUP BY to group the results by Teacher_ID to count the number of courses each teacher teaches. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of courses is at least 2, ensuring we only get teachers who teach two or more courses. 4. Join Structure: Use an INNER JOIN between the teacher and course_arrange tables based on Teacher_ID to relate teachers to the courses they teach.","281":"1. Sequential Structure: Start with the SELECT clause to specify the count of teachers. 2. Condition Structure: No specific filtering condition is needed since we want the total count of teachers. 3. Join Structure: No JOIN is necessary as all required information is available in the \"teacher\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of teachers.","282":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"Template_Type_Code\" from the \"Ref_Template_Types\" table. 2. Condition Structure: No specific filtering condition is required since we want all distinct template type codes. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Ref_Template_Types\" table. 4. Aggregation Structure: Use DISTINCT to ensure that only unique template type codes are retrieved.","283":"1. Sequential Structure: Start with the SELECT clause to specify the required fields, which are the minimum and maximum number of products from the \"shop\" table. 2. Aggregation Structure: Use the MIN and MAX functions to calculate the minimum and maximum number of products across all stores. 3. Grouping Structure: No GROUP BY is needed since we want the overall minimum and maximum values across all records in the \"shop\" table. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"shop\" table.","284":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"year\" from the \"matches\" table since the question asks for the year with the most matches. 2. Condition Structure: No specific filtering condition is needed, as we want to count all matches for each year. 3. Join Structure: No JOIN is necessary because all the required data is contained within the \"matches\" table. 4. Aggregation Structure: Use COUNT to count the number of matches for each year. Use ORDER BY in descending order on the count and LIMIT 1 to retrieve the year with the most matches.","285":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the teacher's name. 2. Condition Structure: Use a WHERE clause to filter for teachers whose age is either 32 or 33. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of teachers that meet the specified age condition.","286":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and JOIN it with the Paragraphs table to relate documents to their paragraphs. 2. Aggregation Structure: Use GROUP BY to group the results by Document_ID to count the number of paragraphs associated with each document. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of paragraphs in ascending order, and limit the results to get the document with the least number of paragraphs. 4. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their paragraphs.","287":"1. Sequential Structure: Start with the SELECT clause to specify the \"employee.City\" that we want to retrieve. 2. Condition Structure: Use a WHERE clause to filter for employees whose age is less than 30. 3. Grouping Structure: Use GROUP BY on \"employee.City\" to group the results by city. 4. Aggregation Structure: Use HAVING to filter for cities that have more than one employee under the age of 30, using COUNT to count the number of employees in each city. 5. Join Structure: A JOIN is necessary to connect the \"employee\" table with the \"hiring\" table based on the Employee_ID.","288":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Template_Type_Description\" for the specified \"Template_Type_Code\". 2. Condition Structure: Use a WHERE clause to filter for the specific \"Template_Type_Code\" which is 'AD'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Ref_Template_Types\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the description for the specified template type code.","289":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the museum ID and name. 2. Condition Structure: No specific filtering condition is required since we want to find the museum with the most staff members. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"museum\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"museum.Num_of_Staff\" to rank museums by the number of staff members and apply LIMIT 1 to select the museum with the highest number of staff.","290":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of documents. 2. Condition Structure: No specific filtering condition is needed since we want to count all documents. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Documents\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of documents in the \"Documents\" table.","291":"1. Sequential Structure: Start with the SELECT clause to retrieve the average ages of both losers and winners. Use the FROM clause to specify the matches table, as it contains the age information for both winners and losers. 2. Aggregation Structure: Use the AVG function to calculate the average age for both the losers and winners. Since we want to retrieve both averages, we will use two separate AVG functions in the SELECT clause. 3. Join Structure: Use JOINs to connect the matches table with the players table based on the winner_id and loser_id to ensure we have access to the player information, although in this case, we are primarily interested in the age fields from the matches table. 4. Condition Structure: No specific conditions are needed since we want to calculate the average ages for all matches.","292":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Paragraphs.Paragraph_Text\" for the specified document. 2. Condition Structure: Apply a WHERE clause to filter for the document with the name 'Customer reviews'. 3. Join Structure: Use a JOIN between the \"Paragraphs\" and \"Documents\" tables based on \"Document_ID\" to link paragraphs to their respective documents. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the paragraph texts for the specified document.","293":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Templates.Template_Type_Code\" since we are interested in the template type code associated with the specified document. 2. Condition Structure: Apply a WHERE clause to filter for the document with the name \"Data base.\" 3. Join Structure: Use a JOIN between the \"Documents\" and \"Templates\" tables based on \"Documents.Template_ID\" and \"Templates.Template_ID\" to link the document to its corresponding template. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the template type code for the specified document.","294":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names and country codes of players. Use the FROM clause to specify the players table. 2. Join Structure: Use JOIN clauses to connect the players table with the matches table based on the winner_id to get the matches won by players. 3. Condition Structure: Apply a WHERE clause to filter for matches where the tournament name is either 'WTA Championships' or 'Australian Open'. We will also need to ensure that the player has won both tournaments. 4. Aggregation Structure: Use GROUP BY to group the results by player_id and apply a HAVING clause to ensure that the count of distinct tournaments won by each player is equal to 2, indicating they have won both tournaments.","295":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the winner and loser. This will include \"players.first_name\" and \"players.last_name\" for both the winner and the loser. 2. Condition Structure: No specific filtering condition is needed here, as we are interested in the match with the longest duration. 3. Join Structure: Use JOIN clauses to connect the \"matches\" table with the \"players\" table twice: once for the winner and once for the loser, based on their respective IDs. 4. Aggregation Structure: Use ORDER BY to sort the matches by \"matches.minutes\" in descending order to find the longest match. Use LIMIT 1 to select only the longest match.","296":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the course descriptions for math courses. 2. Condition Structure: Use a WHERE clause to filter for courses that are categorized as math courses. This will likely involve checking the course name for the term \"Math.\" 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Courses\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving descriptions of the math courses.","297":"1. Sequential Structure: Start with the SELECT clause to specify the count of ships that ended up being 'Captured'. 2. Condition Structure: Use a WHERE clause to filter for ships where \"ship.disposition_of_ship\" is 'Captured'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"ship\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of ships that meet the specified condition.","298":"1. Sequential Structure: Start with the SELECT clause to specify the count of templates. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all templates. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Templates\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of templates available in the \"Templates\" table.","299":"1. Sequential Structure: Start with the SELECT clause to specify that we want all columns from the \"hiring\" table. 2. Condition Structure: No specific filtering condition is needed since the question asks for all information about hiring. 3. Join Structure: No JOIN is necessary as we are only retrieving data from the \"hiring\" table. 4. Aggregation Structure: No aggregation is needed since we are retrieving all records without summarization.","300":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template IDs from the Templates table. Use the FROM clause to specify the Templates table. 2. Condition Structure: Use a WHERE clause to filter for Template IDs that are not present in the Documents table, indicating that they are not used in any documents. 3. Join Structure: Not required, as we are only filtering based on the absence of Template IDs in the Documents table. 4. Aggregation Structure: Not needed, as we are simply retrieving Template IDs without any aggregation.","301":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count distinct store locations from the \"shop\" table. 2. Condition Structure: No specific filtering condition is needed since we want to count all distinct locations. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"shop\" table. 4. Aggregation Structure: Use COUNT(DISTINCT shop.Location) to count the unique store locations.","302":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of players. 2. Condition Structure: No specific filtering condition is needed since we want the total count of players. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"players\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of players in the \"players\" table.","303":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Paragraphs.Paragraph_ID\" and \"Paragraphs.Paragraph_Text.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific document name, which is 'Welcome to NY.' 3. Join Structure: Use a JOIN between the \"Paragraphs\" and \"Documents\" tables based on \"Document_ID\" to link each paragraph with its corresponding document. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the paragraph IDs and texts for the specified document.","304":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"players.country_code\" to retrieve the country codes of players. 2. Aggregation Structure: Use COUNT to calculate the number of players for each country. 3. Grouping Structure: Use GROUP BY on \"players.country_code\" to aggregate the results by each country code. 4. Condition Structure: Apply the HAVING clause to filter for countries that have more than 50 players. 5. Join Structure: No JOIN is required since all necessary information is available in the \"players\" table.","305":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the shop's name, location, and district. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all shops. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"shop\" table. 4. Ordering Structure: Use ORDER BY in descending order on \"shop.Number_products\" to sort the shops by the number of products they have.","306":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields from the \"Paragraphs\" table, specifically \"Paragraphs.Paragraph_Text\" and any other relevant details from the \"Documents\" table. 2. Condition Structure: Apply a WHERE clause to filter for paragraphs that contain the text 'Korea ' in the \"Paragraph_Text\" field. 3. Join Structure: Use a JOIN between the \"Paragraphs\" and \"Documents\" tables based on \"Paragraphs.Document_ID\" and \"Documents.Document_ID\" to link each paragraph with its corresponding document. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving details for the specific paragraph.","307":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and join it with the Paragraphs table to relate documents to their paragraphs. 2. Condition Structure: Use the HAVING clause to filter for documents that have a count of paragraphs between 1 and 2. 3. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their corresponding paragraphs. 4. Aggregation Structure: Use COUNT to aggregate the number of paragraphs per document and filter the results using the HAVING clause to ensure the count is between 1 and 2.","308":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the shop name, location, and district. 2. Condition Structure: No specific filtering condition is required since we want all shops. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"shop\" table. 4. Ordering Structure: Use ORDER BY in descending order on \"shop.Number_products\" to sort the results based on the number of products in each shop.","309":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the teacher's name. 2. Condition Structure: Use a WHERE clause to filter for teachers whose age is either 32 or 33. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of teachers that meet the specified age condition.","310":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template IDs from the Templates table. Use the FROM clause to specify the Templates table and join it with the Documents table to relate templates to their corresponding documents. 2. Aggregation Structure: Use GROUP BY to group the results by Template ID, allowing us to count the number of documents associated with each template. 3. Condition Structure: Apply a HAVING clause to filter the groups where the count of documents is greater than one, ensuring we only get templates that are used by more than one document. 4. Join Structure: Use an INNER JOIN between the Templates and Documents tables based on Template ID to connect templates with their documents.","311":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the lowest version number and the corresponding template type code. 2. Aggregation Structure: Use the MIN function to find the lowest version number from the \"Templates\" table. 3. Grouping Structure: Since we want the corresponding template type code for the lowest version number, we will use GROUP BY on \"Templates.Template_Type_Code\". 4. Join Structure: A JOIN is necessary to connect the \"Templates\" table with the \"Ref_Template_Types\" table to retrieve the template type code.","312":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the player's first name and birth date. 2. Condition Structure: Use a WHERE clause to filter players based on the country code, specifically for 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"players\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the first name and birth date of players from the specified country.","313":"1. Sequential Structure: Start with the SELECT clause to retrieve the first and last names of players. Use the FROM clause to specify the players table. 2. Join Structure: Use an INNER JOIN between the matches and players tables based on the winner_id to link match winners to their player details. 3. Condition Structure: Use a WHERE clause to filter for matches that occurred in both 2013 and 2016. This can be achieved by using a GROUP BY clause on the player ID and applying a HAVING clause to ensure that the player has won in both years. 4. Aggregation Structure: Use COUNT to count the distinct years in which each player has won, and filter for players who have won in both years (i.e., count should be 2).","314":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Templates.Template_ID\" and the count of documents associated with each template. 2. Condition Structure: No specific filtering condition is needed, as we want to count all documents for each template. 3. Join Structure: Use a JOIN between the \"Templates\" and \"Documents\" tables based on \"Template_ID\" to link each template with its corresponding documents. 4. Aggregation Structure: Use COUNT to aggregate the number of documents for each template and GROUP BY \"Templates.Template_ID\" to group the results by template ID.","315":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"teacher.Name\" and \"course.Course.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all teachers and the courses they teach. 3. Join Structure: Use JOIN clauses to connect the \"teacher\" table with the \"course_arrange\" table based on \"Teacher_ID,\" and then connect \"course_arrange\" with the \"course\" table based on \"Course_ID.\" 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of teachers and the courses they teach.","316":"1. Sequential Structure: Start with the SELECT clause to count the number of left-handed winners. We will use the COUNT function to get the total number of such players. 2. Condition Structure: Apply a WHERE clause to filter for left-handed players and those who participated in the \"WTA Championships.\" 3. Join Structure: Use a JOIN between the \"matches\" and \"players\" tables based on the winner's ID to link each match with its respective winner. 4. Aggregation Structure: Use COUNT to aggregate the number of left-handed winners who meet the specified conditions.","317":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the teacher's name. 2. Condition Structure: Use a WHERE clause to filter out teachers whose hometown is 'Little Lever Urban District'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of teachers based on a specific condition.","318":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of teachers. Use the FROM clause to specify the teacher table. 2. Condition Structure: Apply a WHERE clause to filter teachers who do not have any corresponding entries in the course_arrange table, indicating they have not been arranged to teach any courses. 3. Join Structure: Use a LEFT JOIN between the teacher table and the course_arrange table based on Teacher_ID to include all teachers and their course arrangements, if any. 4. Aggregation Structure: Not needed, as we are simply filtering for teachers without course arrangements without any aggregation.","319":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Templates.Template_ID\" since we are interested in the template IDs. 2. Condition Structure: Apply a WHERE clause to filter for the specific template type description, which is \"Presentation.\" 3. Join Structure: Use a JOIN between the \"Templates\" and \"Ref_Template_Types\" tables based on the \"Template_Type_Code\" to link templates with their respective type descriptions. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the template IDs that match the specified condition.","320":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"first_name\" and \"country_code\" of the oldest player. 2. Condition Structure: No specific filtering condition is needed since we want to find the oldest player based on their birth date. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"players\" table. 4. Aggregation Structure: Use ORDER BY to sort the players by \"birth_date\" in ascending order to find the oldest player, and apply LIMIT 1 to select the first entry.","321":"1. Sequential Structure: Start with the SELECT clause to retrieve the template type codes from the Ref_Template_Types table. Use the FROM clause to specify this table. 2. Condition Structure: Use a WHERE clause to filter for template type codes that are not present in the Documents table, indicating they are not used by any document. 3. Join Structure: Not required, as we are only interested in the template type codes from the Ref_Template_Types table and checking their absence in the Documents table. 4. Aggregation Structure: Not needed, as we are simply retrieving distinct template type codes without any aggregation.","322":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template ID and Template Type Code. Use the FROM clause to specify the Templates table. 2. Join Structure: Join the Templates table with the Documents table on the Template ID to relate templates to their corresponding documents. 3. Aggregation Structure: Use GROUP BY to group the results by Template ID and Template Type Code, allowing us to count the number of documents associated with each template. 4. Condition Structure: Apply a HAVING clause to filter for the template that has the maximum count of documents, ensuring we only return the template used for the greatest number of documents.","323":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, country code, and birth date of the player. Use the FROM clause to specify the players table. 2. Join Structure: Use an INNER JOIN between the players table and the matches table on the player ID to connect players with their match results, specifically focusing on the winner's rank points. 3. Aggregation Structure: Use the SUM function to aggregate the winner rank points for each player and apply GROUP BY to group the results by player ID. 4. Condition Structure: Use the ORDER BY clause to sort the results by the total winner rank points in descending order and limit the results to the top entry to get the player with the most points.","324":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"Version_Number\" and \"Template_Type_Code\" from the \"Templates\" table. 2. Condition Structure: Use a WHERE clause to filter for templates where \"Version_Number\" is greater than 5. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Templates\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the version numbers and template type codes that meet the specified condition.","325":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the shops. Use the FROM clause to specify the shop table. 2. Condition Structure: Apply a WHERE clause to filter shops that do not have any employees. This can be done by ensuring that the Shop_ID from the hiring table does not exist in the shop table. 3. Join Structure: Use a LEFT JOIN between the shop and hiring tables on Shop_ID to include all shops and their corresponding employees, if any. 4. Aggregation Structure: Not needed, as we are simply filtering for shops without employees without requiring any aggregation.","326":"1. Sequential Structure: Start with the SELECT clause to retrieve the visitor ID, name, and membership level. Use the FROM clause to specify the visitor table and JOIN it with the visit table to link visitors with their spending on museum tickets. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find visitors based on their total spending. 3. Join Structure: Use an INNER JOIN between the visitor and visit tables based on the visitor ID to connect visitors with their total spending on tickets. 4. Aggregation Structure: Use GROUP BY to group records by visitor ID, and then use the SUM function to calculate the total amount spent by each visitor. Finally, apply the ORDER BY clause to sort the results by total spending in descending order and limit the results to get the visitor(s) who spent the most.","327":"1. Sequential Structure: Start with the SELECT clause to retrieve the manager name and district from the shop table. Use the FROM clause to specify the shop table and then apply an ORDER BY clause to sort the results by the number of products in descending order. 2. Condition Structure: No specific condition (WHERE clause) is needed as we are interested in the shop with the largest number of products. 3. Join Structure: Not required, as we only need data from the shop table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by the number of products and limiting to the top result effectively gives us the shop with the largest number of products.","328":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and JOIN it with the Paragraphs table to relate documents to their paragraphs. 2. Aggregation Structure: Use GROUP BY to group the results by Document_ID to count the number of paragraphs associated with each document. 3. Condition Structure: Apply a HAVING clause to filter the groups where the count of paragraphs is between 1 and 2, ensuring we only get documents with one or two paragraphs. 4. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their paragraphs.","329":"1. Sequential Structure: Start with the SELECT clause to count the number of battles. Use the FROM clause to specify the battle table. 2. Condition Structure: Apply a WHERE clause to filter battles that did not lose any ships with a tonnage of '225'. This will involve checking that there are no entries in the ship table related to the battle that have a tonnage of '225'. 3. Join Structure: Use a LEFT JOIN between the battle and ship tables based on the battle ID to identify ships lost in each battle. 4. Aggregation Structure: Use COUNT to aggregate the number of battles that meet the specified condition.","330":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of teachers. Use the FROM clause to specify the teacher table. 2. Condition Structure: Apply a WHERE clause to filter for teachers whose courses have not been arranged. This can be done by ensuring that the Teacher_ID from the teacher table does not exist in the course_arrange table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching Teacher_ID entries in the course_arrange table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","331":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Addresses.line_1\" and \"Addresses.line_2\". 2. Condition Structure: No specific filtering condition is required since we want all addresses. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Addresses\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the first and second lines of all addresses.","332":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"visitor.Name\". 2. Condition Structure: Use a WHERE clause to filter visitors whose \"Level_of_membership\" is greater than 4. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"visitor\" table. 4. Ordering Structure: Use ORDER BY to sort the results by \"visitor.Level_of_membership\" in descending order.","333":"1. Sequential Structure: Start with the SELECT clause to specify the count of matches played in the years 2013 or 2016. 2. Condition Structure: Use a WHERE clause to filter for matches that occurred in either 2013 or 2016. 3. Join Structure: No JOIN is necessary since all required information is available in the \"matches\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of matches that meet the specified conditions.","334":"1. Sequential Structure: Start with the SELECT clause to retrieve the average ages of both winners and losers. Use the FROM clause to specify the matches table, as it contains the relevant age data for both winners and losers. 2. Aggregation Structure: Use the AVG function to calculate the average ages for both winners and losers. Since we want to retrieve both averages in a single query, we will use two separate AVG functions in the SELECT clause. 3. Join Structure: Use JOIN clauses to connect the matches table with the players table based on the winner_id and loser_id to ensure we have access to the player information, although in this case, we are primarily focused on the age data from the matches table. 4. Condition Structure: No specific conditions are needed in the WHERE clause since we want to calculate the averages across all matches.","335":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template Type Code. Use the FROM clause to specify the Documents table and JOIN it with the Templates table to link documents to their respective templates. 2. Aggregation Structure: Use GROUP BY to group the results by Template Type Code, allowing us to count the number of documents associated with each template type. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of documents, and limit the results to the top entry to find the template type code used by the most documents. 4. Join Structure: Use an INNER JOIN between the Documents and Templates tables based on Template_ID to connect documents with their template types.","336":"1. Sequential Structure: Start with the SELECT clause to specify the \"teacher.Hometown\" and the count of teachers for each hometown. 2. Aggregation Structure: Use COUNT to calculate the number of teachers in each hometown. 3. Grouping Structure: Use GROUP BY on \"teacher.Hometown\" to aggregate the results by each hometown. 4. Join Structure: No JOIN is required since all necessary information is available in the \"teacher\" table.","337":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"teacher.Name\" and \"course.Course.\" 2. Condition Structure: No specific filtering condition is needed, as we want to show all teachers and their corresponding courses. 3. Join Structure: Use JOIN clauses to connect the \"teacher\" table with the \"course_arrange\" table based on \"Teacher_ID,\" and then join the \"course\" table based on \"Course_ID\" to link each teacher with the courses they are assigned to teach. 4. Aggregation Structure: No aggregation is needed, but apply ORDER BY to list results in ascending alphabetical order by the teacher's name.","338":"1. Sequential Structure: Start with the SELECT clause to specify the \"tourney_name\" from the \"matches\" table, as we want to retrieve the names of tournaments. 2. Aggregation Structure: Use COUNT to calculate the number of matches for each tournament. 3. Grouping Structure: Use GROUP BY on \"matches.tourney_name\" to aggregate the match counts for each tournament. 4. Condition Structure: Apply the HAVING clause to filter for tournaments that have more than 10 matches. 5. Join Structure: No JOIN is required since all necessary information is contained within the \"matches\" table.","339":"1. Sequential Structure: Start with the SELECT clause to specify that we want to retrieve the year and the count of matches for each year. 2. Aggregation Structure: Use the COUNT function to count the number of matches for each year. 3. Grouping Structure: Use GROUP BY on \"matches.year\" to aggregate the results by year. 4. Join Structure: No JOIN is required since all necessary information is available in the \"matches\" table.","340":"1. Sequential Structure: Start with the SELECT clause to specify the tournament names that have more than 10 matches. 2. Aggregation Structure: Use COUNT to calculate the number of matches for each tournament. 3. Grouping Structure: Use GROUP BY on \"matches.tourney_name\" to aggregate the results by each tournament. 4. Condition Structure: Apply the HAVING clause to filter for tournaments that have more than 10 matches. 5. Join Structure: No JOIN is required since all necessary information is available in the \"matches\" table.","341":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, country code, and birth date of the winner. Use the FROM clause to specify the players table and JOIN it with the matches table to link winners to their respective player details. Additionally, join the rankings table to access the ranking points of the winners. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the winner with the highest ranking points across all matches. 3. Join Structure: Use INNER JOINs between the matches, players, and rankings tables based on the winner's ID and player ID to gather the necessary information about the winners and their ranking points. 4. Aggregation Structure: Use the MAX function to find the highest ranking points among the winners and filter the results accordingly to retrieve the winner's details.","342":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct battle names. 2. Condition Structure: Use a WHERE clause to filter battles where the \"bulgarian_commander\" is 'Kaloyan' and the \"latin_commander\" is 'Baldwin I'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"battle\" table. 4. Aggregation Structure: Use DISTINCT to ensure that only unique battle names are returned.","343":"1. Sequential Structure: Start with the SELECT clause to retrieve the department name and department ID. Use the FROM clause to specify the Departments table. 2. Join Structure: Join the Degree_Programs table with the Departments table on the department_id to relate degrees to their respective departments. 3. Aggregation Structure: Use GROUP BY to group the results by department ID and name, allowing us to count the number of degrees offered by each department. 4. Condition Structure: Use ORDER BY to sort the results by the count of degrees in descending order and limit the results to the top entry to find the department offering the most degrees.","344":"1. Sequential Structure: Start with the SELECT clause to retrieve the ids and names of the battles. Use the FROM clause to specify the battle table. 2. Join Structure: Join the battle table with the death table on the condition that the ship lost in battle corresponds to the battle id. This will allow us to access the number of people killed in each battle. 3. Aggregation Structure: Use GROUP BY to group the results by battle id and name, allowing us to sum the total number of people killed in each battle. 4. Condition Structure: Apply a HAVING clause to filter the results to only include battles where the total number of people killed is greater than 10.","345":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"players.first_name\" and the total ranking points from the \"rankings\" table. 2. Condition Structure: No specific filtering condition is needed here, as we want to aggregate the total ranking points for all players. 3. Join Structure: Use a JOIN between the \"players\" and \"rankings\" tables based on \"player_id\" to associate each player with their ranking points. 4. Aggregation Structure: Use SUM to aggregate the ranking points for each player and GROUP BY \"players.first_name\" to ensure we get the total points for each player.","346":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Documents.Document_Name\" since we want to show all document names. 2. Condition Structure: Apply a WHERE clause to filter for templates with the specific template type code \"BK.\" 3. Join Structure: Use JOIN clauses to connect the \"Documents\" table with the \"Templates\" table based on \"Template_ID,\" and also join with the \"Ref_Template_Types\" table based on \"Template_Type_Code\" to ensure we are filtering by the correct template type. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving document names based on the specified condition.","347":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"Templates.Template_ID\" and the count of how many times each template ID was used in the \"Documents\" table. 2. Condition Structure: No specific filtering condition is needed, as we want to count all occurrences of each template ID. 3. Join Structure: Use a JOIN between the \"Documents\" and \"Templates\" tables based on \"Documents.Template_ID = Templates.Template_ID\" to link each document with its corresponding template. 4. Aggregation Structure: Use COUNT to aggregate the number of times each template ID appears in the \"Documents\" table, and GROUP BY \"Templates.Template_ID\" to group the results by each template ID.","348":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template_Type_Code. Use the FROM clause to specify the Templates table. We will need to group the results to count the number of templates per type code. 2. Aggregation Structure: Use COUNT to aggregate the number of templates for each Template_Type_Code. This will allow us to identify which type code has the most templates. 3. Group Structure: Use GROUP BY to group the results by Template_Type_Code to count the number of templates associated with each type. 4. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of templates, and limit the results to the top one to get the type code with the most templates.","349":"1. Sequential Structure: Start with the SELECT clause to retrieve the employee's name. Use the FROM clause to specify the employee table. 2. Join Structure: Join the employee table with the evaluation table on the Employee_ID to connect employees with their evaluation records. 3. Aggregation Structure: Use GROUP BY to group records by Employee_ID to count the number of times each employee has been awarded. 4. Condition Structure: Use the HAVING clause to filter for the employee(s) with the maximum count of awards.","350":"1. Sequential Structure: Start with the SELECT clause to specify the total amount of bonuses from the evaluations. 2. Condition Structure: No specific filtering condition is needed since we want the total bonus from all evaluations. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"evaluation\" table. 4. Aggregation Structure: Use the SUM function to calculate the total amount of bonuses from the \"evaluation.Bonus\" field.","351":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"Documents.Document_ID,\" \"Documents.Template_ID,\" and \"Documents.Document_Description.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific document name, which is 'Robbin CV.' 3. Join Structure: Use a JOIN between the \"Documents\" and \"Templates\" tables based on \"Template_ID\" to access the template information related to the document. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the specified fields for the document that matches the condition.","352":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct descriptions of templates used in documents. The relevant field is \"Ref_Template_Types.Template_Type_Description.\" 2. Condition Structure: No specific filtering condition is needed, as we want to return all different descriptions for templates used in any document. 3. Join Structure: Use JOIN clauses to connect the \"Documents\" table with the \"Templates\" table based on \"Template_ID,\" and then join the \"Templates\" table with the \"Ref_Template_Types\" table based on \"Template_Type_Code\" to access the template descriptions. 4. Aggregation Structure: Use DISTINCT to ensure that only unique template descriptions are returned.","353":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"Template_Type_Description\" from the \"Ref_Template_Types\" table. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we want all distinct template type descriptions related to any document. 3. Join Structure: Use a JOIN between the \"Templates\" and \"Ref_Template_Types\" tables based on \"Template_Type_Code\" to link template types with their descriptions. Additionally, join the \"Documents\" table to ensure we are only considering templates that have been used by documents. 4. Aggregation Structure: Use DISTINCT to ensure that only unique template type descriptions are returned.","354":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of employees. 2. Condition Structure: No specific filtering condition is needed since we want to count all employees. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"employee\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of employees.","355":"1. Sequential Structure: Start with the SELECT clause to retrieve the hometowns of teachers. Use the FROM clause to specify the teacher table. 2. Aggregation Structure: Use GROUP BY to group the records by hometown to count the number of teachers from each town. 3. Condition Structure: Apply a HAVING clause to filter the groups where the count of teachers is at least 2, ensuring we only get towns with two or more teachers. 4. Join Structure: Not required, as all necessary data is available within the teacher table.","356":"1. Sequential Structure: Start with the SELECT clause to retrieve the winner's first and last name. Use the FROM clause to specify the matches table and JOIN it with the players and rankings tables to get the necessary player information and ranking points. 2. Condition Structure: Use a WHERE clause to filter for matches that are part of the 'Australian Open' tournament. 3. Join Structure: Use INNER JOINs between the matches, players, and rankings tables based on the winner's ID and player ID to connect the winner's details with their ranking points. 4. Aggregation Structure: Use GROUP BY to group the results by the winner's ID and then apply an ORDER BY clause to sort by ranking points in descending order, limiting the result to the top entry to find the winner with the most rank points.","357":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of museums. Use the FROM clause to specify the museum table. 2. Condition Structure: Use a WHERE clause to filter museums that have a number of staff greater than the minimum staff number of all museums opened after 2010. 3. Join Structure: Not required, as all necessary data is available within the museum table. 4. Aggregation Structure: Use a subquery to find the minimum number of staff from museums that were opened after 2010, which will be used in the filtering condition.","358":"1. Sequential Structure: Start with the SELECT clause to specify the count of templates that have the template type code 'CV'. 2. Condition Structure: Use a WHERE clause to filter for templates where \"Templates.Template_Type_Code\" is equal to 'CV'. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Templates\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of templates that meet the specified condition.","359":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct ids and names of battles. Use the FROM clause to specify the battle table. 2. Join Structure: Use an INNER JOIN between the battle and ship tables based on the lost_in_battle field to connect battles with the ships that were lost in those battles. 3. Condition Structure: Apply a WHERE clause to filter for ships of type 'Brig' to ensure we only get battles that lost such ships. 4. Aggregation Structure: Use DISTINCT to ensure that we only get unique combinations of battle ids and names.","360":"1. Sequential Structure: Start with the SELECT clause to specify the count of documents. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all documents. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Documents\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of documents in the \"Documents\" table.","361":"1. Sequential Structure: Start with the SELECT clause to retrieve the name and date of the battle. Use the FROM clause to specify the battle table. 2. Join Structure: We need to join the battle table with the ship table to find battles that have lost specific ships. This requires an INNER JOIN on the battle.id and ship.lost_in_battle. 3. Condition Structure: Use a WHERE clause to filter for battles that have lost both ships named 'Lettice' and 'HMS Atalanta'. This can be achieved by checking the ship names in the WHERE clause. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","362":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"players.first_name\" and the average of \"rankings.ranking.\" 2. Condition Structure: No specific filtering condition is needed, as we want the average ranking for all players. 3. Join Structure: Use a JOIN between the \"players\" and \"rankings\" tables based on \"player_id\" to associate each player with their rankings. 4. Aggregation Structure: Use AVG to calculate the average ranking for each player and GROUP BY \"players.first_name\" to ensure the average is calculated per player.","363":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the document IDs, names, and descriptions. 2. Condition Structure: No specific filtering condition is required since we want all documents. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Documents\" table. 4. Aggregation Structure: No aggregation is needed since we are retrieving specific fields without summarizing data.","364":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Template_Type_Code\" from the \"Templates\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific document name, which is \"Data base.\" 3. Join Structure: Use a JOIN between the \"Documents\" table and the \"Templates\" table based on \"Template_ID\" to link each document with its corresponding template. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the template type code for the specified document.","365":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the employee names and their ages. 2. Condition Structure: No specific filtering condition is required as we want to retrieve all employees. 3. Join Structure: No JOIN is necessary since all required information is available in the \"employee\" table. 4. Aggregation Structure: No aggregation function is needed here, but use ORDER BY to sort the results in ascending order based on \"employee.Age\".","366":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document ID and Document Name from the Documents table. Use the FROM clause to specify the Documents table and join it with the Paragraphs table to relate documents to their paragraphs. 2. Aggregation Structure: Use GROUP BY to group the results by Document ID and Document Name, allowing us to count the number of paragraphs associated with each document. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of paragraphs in descending order, and limit the results to the top entry to get the document with the greatest number of paragraphs. 4. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document ID to connect documents with their paragraphs.","367":"1. Sequential Structure: Start with the SELECT clause to specify the total count of courses. 2. Condition Structure: No specific filtering condition is needed since we want the total number of courses listed. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Courses\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of courses in the \"Courses\" table.","368":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the museum. Use the FROM clause to specify the museum table. 2. Condition Structure: Apply a WHERE clause to filter museums that have no visitors. This can be done by ensuring that the museum's ID is not present in the visit table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching museum IDs in the visit table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","369":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template_Type_Code from the Ref_Template_Types table. Use the FROM clause to specify the Ref_Template_Types table and join it with the Templates table to relate template types to documents. Then, join the Documents table to connect documents with their respective templates. Finally, use ORDER BY to sort the results based on the count of documents in descending order. 2. Condition Structure: No specific condition (WHERE clause) is needed as we want to find the most commonly used template type across all documents. 3. Join Structure: Use INNER JOINs between the Ref_Template_Types, Templates, and Documents tables based on the foreign key relationships to connect template types with documents. 4. Aggregation Structure: Use COUNT to aggregate the number of documents for each template type and apply GROUP BY to group the results by Template_Type_Code. Use LIMIT to get only the most commonly used template type.","370":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"Template_Type_Code\" from the \"Ref_Template_Types\" table and the count of \"Template_ID\" from the \"Templates\" table. 2. Condition Structure: No specific filtering condition is needed, as we want to count all templates corresponding to each template type code. 3. Join Structure: Use a JOIN between the \"Templates\" and \"Ref_Template_Types\" tables based on \"Template_Type_Code\" to link each template with its corresponding type. 4. Aggregation Structure: Use COUNT on \"Templates.Template_ID\" to count the number of templates for each template type code, and GROUP BY \"Ref_Template_Types.Template_Type_Code\" to group the results accordingly.","371":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum and minimum death tolls. We will use aggregate functions MAX and MIN on the \"death.killed\" column to get the maximum and minimum number of deaths for each battle. 2. Condition Structure: No specific filtering condition is needed, as we want to consider all battles and their associated death tolls. 3. Join Structure: Use a JOIN between the \"battle\" and \"death\" tables based on the relationship defined by \"ship.lost_in_battle = battle.id\" and \"death.caused_by_ship_id = ship.id\" to link deaths to their respective battles. 4. Aggregation Structure: Use GROUP BY on \"battle.id\" to group the results by each battle, allowing us to calculate the maximum and minimum death tolls for each battle.","372":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country code and the count of players from each country. 2. Condition Structure: No specific filtering condition is required as we want to count all players grouped by their country. 3. Grouping Structure: Use GROUP BY on \"players.country_code\" to count players from each country. 4. Aggregation Structure: Use COUNT to calculate the number of players for each country. 5. Join Structure: No JOIN is required since all necessary information is available in the \"players\" table.","373":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Documents.Document_Name\" and \"Documents.Template_ID\". 2. Condition Structure: Use a WHERE clause to filter documents where \"Documents.Document_Description\" contains the letter 'w'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"Documents\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and template IDs of documents that meet the specified condition.","374":"1. Sequential Structure: Start with the SELECT clause to count the number of documents. Use the FROM clause to specify the Documents table. 2. Condition Structure: Apply a WHERE clause to filter documents that use the 'PPT' template type by joining with the Templates and Ref_Template_Types tables. 3. Join Structure: Use JOIN clauses to connect the Documents table with the Templates table on Template_ID, and then join the Templates table with the Ref_Template_Types table on Template_Type_Code to access the template type description. 4. Aggregation Structure: Use the COUNT function to aggregate the number of documents that meet the specified condition.","375":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"Template_Type_Code\" from the \"Ref_Template_Types\" table and the count of documents associated with each template type. 2. Condition Structure: No specific filtering condition is needed, as we want to count all documents for each template type. 3. Join Structure: Use JOIN clauses to connect the \"Ref_Template_Types\" table with the \"Templates\" table on \"Template_Type_Code\" and then join the \"Documents\" table on \"Template_ID\" to link documents to their respective template types. 4. Aggregation Structure: Use COUNT to aggregate the number of documents for each template type and GROUP BY \"Template_Type_Code\" to group the results accordingly.","376":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and last name of both the winner and loser. Use the FROM clause to specify the matches table and JOIN it with the players table to get the names of the players involved in the match. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the match with the greatest number of minutes. 3. Join Structure: Use JOINs between the matches and players tables based on the winner_id and loser_id to connect the match records with the corresponding player names. 4. Aggregation Structure: Use the MAX function to find the maximum number of minutes played in a match, and filter the results based on this value to retrieve the names of the players involved in that match.","377":"1. Sequential Structure: Start with the SELECT clause to count the distinct \"Templates.Template_ID\" since we want to count the number of different templates used for documents. 2. Condition Structure: No specific filtering condition is needed here, as we are interested in all templates associated with documents. 3. Join Structure: Use a JOIN between the \"Documents\" and \"Templates\" tables based on \"Template_ID\" to link each document with its respective template. 4. Aggregation Structure: Use COUNT with DISTINCT to count the unique template IDs from the \"Templates\" table that are associated with documents.","378":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document ID from the Documents table. Use the FROM clause to specify the Documents table and JOIN it with the Paragraphs table to link documents with their paragraphs. 2. Condition Structure: Use the WHERE clause to filter for paragraphs that contain the text 'Brazil' or 'Ireland'. 3. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to relate documents with their corresponding paragraphs. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","379":"1. Sequential Structure: Start with the SELECT clause to specify the total bonus from the evaluations. 2. Condition Structure: No specific filtering condition is needed since we want the total bonus from all evaluations. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"evaluation\" table. 4. Aggregation Structure: Use the SUM function to calculate the total of the \"evaluation.Bonus\" field.","380":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct names of losers from the matches table. 2. Condition Structure: No specific filtering condition is needed, as we want to count all distinct loser names. 3. Join Structure: Use a JOIN between the \"matches\" and \"players\" tables based on the loser ID to link each match with the corresponding player who lost. 4. Aggregation Structure: Use COUNT with DISTINCT to count the unique names of losers.","381":"1. Sequential Structure: Start with the SELECT clause to retrieve the template type codes. Use the FROM clause to specify the Ref_Template_Types table, as we want to get the template type codes from this table. 2. Join Structure: Join the Ref_Template_Types table with the Templates table on the Template_Type_Code to relate template types with their corresponding templates. 3. Aggregation Structure: Use GROUP BY to group the results by Template_Type_Code, allowing us to count the number of templates associated with each template type. 4. Condition Structure: Apply a HAVING clause to filter the groups where the count of templates is less than 3, ensuring we only get template types with fewer than 3 templates.","382":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"death.note\" field, as that is the primary focus of the query. 2. Condition Structure: Apply a WHERE clause to filter the notes that contain the substring 'East'. This will use the SQL LIKE operator. 3. Join Structure: No JOIN is necessary here since we are only interested in the \"death\" table and its \"note\" field. 4. Aggregation Structure: No aggregation is needed for this query, as we are simply retrieving the notes that meet the specified condition.","383":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Template_Type_Code\" from the \"Ref_Template_Types\" table. 2. Condition Structure: Use a WHERE clause to filter for the specific \"Template_Type_Description\" that matches 'Book'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Ref_Template_Types\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the type code based on a specific condition.","384":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the city from the employee table and the count of employees from each city. 2. Condition Structure: No specific filtering condition is required since we want to count all employees from each city. 3. Join Structure: Use a JOIN clause to combine the employee table with the hiring table based on the shared Employee_ID. 4. Grouping Structure: Use GROUP BY on \"employee.City\" to count the number of employees in each city. 5. Aggregation Structure: Use COUNT to calculate the number of employees for each city.","385":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Template_Type_Description\" for the template type with the code 'AD'. 2. Condition Structure: Use a WHERE clause to filter for the specific template type code 'AD'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Ref_Template_Types\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the description for a specific template type code.","386":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the Template IDs, Version Numbers, and Template Type Codes from the Templates table. 2. Condition Structure: No specific filtering condition is required since we want all templates and their associated details. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"Templates\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields from the Templates table.","387":"1. Sequential Structure: Start with the SELECT clause to retrieve the winner's name (first name and last name) and their ranking points. Use the FROM clause to specify the matches table and join it with the players and rankings tables to get the necessary details. 2. Join Structure: Use JOINs to connect the matches table with the players table on the winner_id and player_id, and then join the rankings table to get the ranking points associated with the winner. 3. Aggregation Structure: Use GROUP BY to group the results by the winner's ID to count the number of wins for each player. Then, use ORDER BY to sort the results by the count of wins in descending order to identify the player with the most wins. 4. Condition Structure: Use LIMIT to restrict the results to only the top entry, which will be the winner who has won the most times.","388":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the teacher's age and hometown. 2. Condition Structure: No specific filtering condition is required since we want to retrieve the age and hometown of all teachers. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the age and hometown for each teacher.","389":"1. Sequential Structure: Start with the SELECT clause to retrieve the hometowns of teachers. Use the FROM clause to specify the teacher table. 2. Aggregation Structure: Use GROUP BY to group the records by hometown, allowing us to count the number of teachers from each hometown. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of teachers is at least 2, ensuring we only get hometowns shared by at least two teachers. 4. Join Structure: Not required, as all necessary data is available within the teacher table.","390":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the city and the count of employees. 2. Condition Structure: No specific filtering condition is required since we want to count all employees in each city. 3. Join Structure: Use JOIN to combine the \"employee\" table with the \"hiring\" table based on the shared key \"Employee_ID\" to ensure we are counting employees that are hired. 4. Grouping Structure: Use GROUP BY on \"employee.City\" to count the number of employees in each city. 5. Aggregation Structure: Use COUNT to calculate the number of employees for each city.","391":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of matches. 2. Condition Structure: No specific filtering condition is needed since we want to count all matches. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"matches\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of matches.","392":"1. Sequential Structure: Start with the SELECT clause to retrieve the museum ID and name. Use the FROM clause to specify the museum table. 2. Join Structure: Join the museum table with the visit table on the Museum_ID to relate visits to their respective museums. 3. Aggregation Structure: Use GROUP BY to group the results by museum ID and name, allowing us to count the number of visits for each museum. 4. Condition Structure: Use ORDER BY to sort the results by the count of visits in descending order and limit the results to the top entry to find the museum visited the most times.","393":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the ranking date and the total number of tours. 2. Aggregation Structure: Use SUM to calculate the total number of tours for each ranking date. 3. Grouping Structure: Use GROUP BY on \"rankings.ranking_date\" to aggregate the results by each ranking date. 4. Join Structure: No JOIN is required since all necessary information is available in the \"rankings\" table.","394":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"Version_Number\" and \"Template_Type_Code\" from the \"Templates\" table. 2. Condition Structure: Use a WHERE clause to filter for templates where \"Version_Number\" is greater than 5. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Templates\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the version number and template type code for the specified condition.","395":"1. Sequential Structure: Start with the SELECT clause to retrieve the hometown of the teacher. Use the FROM clause to specify the teacher table. 2. Condition Structure: Use the WHERE clause to filter for the youngest teacher by identifying the minimum age from the teacher table. 3. Join Structure: Not required, as we only need data from the teacher table. 4. Aggregation Structure: Use the MIN function to find the youngest teacher's age, which will be used in the WHERE clause to filter the records.","396":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"year\" from the \"matches\" table since the question asks for the year with the most matches. 2. Condition Structure: No specific conditions are required, as we want to find the year with the maximum number of matches. 3. Join Structure: No JOIN is necessary because all the required data is contained within the \"matches\" table. 4. Aggregation Structure: Use COUNT to count the number of matches for each year. Use GROUP BY on \"matches.year\" to aggregate the results by year, then use ORDER BY in descending order on the count to rank years by the number of matches. Finally, apply LIMIT 1 to retrieve the year with the most matches.","397":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Ref_Template_Types.Template_Type_Code\" and the count of documents associated with each template type. 2. Condition Structure: No specific filtering condition is needed, as we want to count all documents for each template type. 3. Join Structure: Use JOIN clauses to connect the \"Documents\" table with the \"Templates\" table based on \"Template_ID,\" and then join the \"Templates\" table with the \"Ref_Template_Types\" table based on \"Template_Type_Code.\" 4. Aggregation Structure: Use COUNT to aggregate the number of documents for each template type and GROUP BY \"Ref_Template_Types.Template_Type_Code\" to group the results accordingly.","398":"1. Sequential Structure: Start with the SELECT clause to retrieve the manager name and district from the shop table. Use the FROM clause to specify the shop table and then apply an ORDER BY clause to sort the results by the number of products in descending order. 2. Condition Structure: No specific condition (WHERE clause) is needed as we are interested in the shop that sells the largest number of products. 3. Join Structure: Not required, as we only need data from the shop table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by the number of products and limiting to the top result effectively gives us the shop with the largest number of products.","399":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of teachers, specifically \"teacher.Name.\" 2. Condition Structure: Apply a WHERE clause to filter for courses that are categorized as \"math\" in the \"course\" table. 3. Join Structure: Use JOIN clauses to connect the \"course\" table with the \"course_arrange\" table on \"Course_ID\" and then connect the \"course_arrange\" table with the \"teacher\" table on \"Teacher_ID\" to link each course with its respective teacher. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly to only include math courses.","400":"1. Sequential Structure: Start with the SELECT clause to specify the distinct country codes of players. 2. Condition Structure: No specific filtering condition is needed since we want to count all distinct country codes. 3. Join Structure: No JOIN is required as all necessary information is available in the \"players\" table. 4. Aggregation Structure: Use COUNT(DISTINCT players.country_code) to count the unique country codes of all players.","401":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"Documents.Document_ID\" and \"Documents.Document_Name.\" Additionally, we need to count the paragraphs, so we will include a COUNT function for \"Paragraphs.Paragraph_ID.\" 2. Condition Structure: No specific filtering condition is needed, as we want to include all documents and their associated paragraphs. 3. Join Structure: Use an INNER JOIN to connect the \"Documents\" table with the \"Paragraphs\" table based on the \"Document_ID\" to ensure we get the paragraphs associated with each document. 4. Aggregation Structure: Use COUNT on \"Paragraphs.Paragraph_ID\" to count the number of paragraphs for each document. We will also need to GROUP BY \"Documents.Document_ID\" and \"Documents.Document_Name\" to ensure the count is calculated per document.","402":"1. Sequential Structure: Start with the SELECT clause to retrieve the average age of visitors. Use the FROM clause to specify the visitor table. 2. Condition Structure: Apply a WHERE clause to filter visitors whose membership level is not higher than 4. 3. Join Structure: Not required, as we only need data from the visitor table. 4. Aggregation Structure: Use the AVG function to calculate the average age of the filtered visitors.","403":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Documents.Document_Name\" and \"Documents.Template_ID\". 2. Condition Structure: Use a WHERE clause to filter documents where \"Documents.Document_Description\" contains the letter 'w'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Documents\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the document name and template ID based on the specified condition.","404":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"players.country_code\" since we want to find the country code with the most players. 2. Aggregation Structure: Use COUNT to calculate the number of players from each country. 3. Grouping Structure: Use GROUP BY on \"players.country_code\" to count the players for each country. 4. Ordering Structure: Use ORDER BY in descending order on the count of players to rank countries by the number of players they have. 5. Limiting Structure: Use LIMIT 1 to retrieve only the country code with the highest number of players. 6. Join Structure: No JOIN is required since all necessary data is within the \"players\" table.","405":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"teacher.Name\" and \"course.Course.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to show all teachers and the courses they are arranged to teach. 3. Join Structure: Use JOIN clauses to connect the \"teacher\" table with the \"course_arrange\" table based on \"Teacher_ID,\" and then connect \"course_arrange\" with the \"course\" table based on \"Course_ID.\" 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of teachers along with the courses they teach.","406":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the smallest version number and its corresponding template type code. 2. Aggregation Structure: Use the MIN function to find the smallest version number from the \"Templates\" table. 3. Grouping Structure: Since we want to retrieve the template type code associated with the smallest version number, we will use GROUP BY on \"Templates.Template_Type_Code\". 4. Condition Structure: No specific filtering condition is needed, as we want to find the smallest version number across all templates. 5. Join Structure: A JOIN is necessary to connect the \"Templates\" table with the \"Ref_Template_Types\" table to retrieve the template type code.","407":"1. Sequential Structure: Start with the SELECT clause to specify that we want all columns from the \"hiring\" table. 2. Condition Structure: No specific filtering condition is needed since we want all information about hiring. 3. Join Structure: No JOIN is necessary as we are only retrieving data from the \"hiring\" table. 4. Aggregation Structure: No aggregation is needed since we are retrieving all records without summarization.","408":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Paragraphs.Paragraph_Text\" for the specified document. 2. Condition Structure: Apply a WHERE clause to filter for the document with the name \"Customer reviews.\" 3. Join Structure: Use a JOIN between the \"Paragraphs\" and \"Documents\" tables based on \"Document_ID\" to link each paragraph with its corresponding document. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the paragraph texts for the specified document.","409":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"line_1\" and \"line_2\" from the \"Addresses\" table. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all addresses. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Addresses\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the address lines.","410":"1. Sequential Structure: Start with the SELECT clause to count distinct winners. Use the FROM clause to specify the matches table and JOIN it with the players table to link winners with their hand information. 2. Condition Structure: Use the WHERE clause to filter for matches where the tournament name is 'WTA Championships' and the player's hand is 'left'. 3. Join Structure: Use an INNER JOIN between the matches and players tables based on the winner_id to connect match winners with their player details. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the number of different winners who meet the specified conditions.","411":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID and Document_Name from the Documents table. Use the FROM clause to specify the Documents table and join it with the Paragraphs table to relate documents to their paragraphs. 2. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their corresponding paragraphs. 3. Aggregation Structure: Use GROUP BY to group the results by Document_ID and Document_Name, allowing us to count the number of paragraphs for each document. 4. Condition Structure: Apply a HAVING clause to filter for the document that has the maximum number of paragraphs, using the COUNT function to determine the number of paragraphs per document.","412":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and join it with the Paragraphs table to relate documents to their paragraphs. 2. Aggregation Structure: Use GROUP BY to group the results by Document_ID, allowing us to count the number of paragraphs associated with each document. 3. Condition Structure: Use the HAVING clause to filter for the document with the minimum number of paragraphs. 4. Order Structure: Use ORDER BY to sort the results by the count of paragraphs in ascending order and limit the result to the first entry to get the document with the fewest paragraphs.","413":"1. Sequential Structure: Start with the SELECT clause to specify the total count of players. 2. Condition Structure: No specific filtering condition is needed since we want the total number of players. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"players\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of players in the \"players\" table.","414":"1. Sequential Structure: Start with the SELECT clause to retrieve the ID, name, and age of visitors. Use the FROM clause to specify the visitor table and JOIN it with the visit table to link visitors with their visit records. 2. Condition Structure: Use the HAVING clause to filter for visitors who have visited museums more than once. This will require counting the number of visits per visitor. 3. Join Structure: Use an INNER JOIN between the visitor and visit tables based on the visitor ID to get the relevant visit records for each visitor. 4. Aggregation Structure: Use COUNT to aggregate the number of visits per visitor and filter those with a count greater than one using the HAVING clause.","415":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"teacher.Hometown\" since the question asks for the most common hometowns for teachers. 2. Aggregation Structure: Use COUNT to determine the number of teachers from each hometown. 3. Grouping Structure: Use GROUP BY on \"teacher.Hometown\" to aggregate the results by each hometown. 4. Ordering Structure: Use ORDER BY in descending order on the count to rank hometowns by the number of teachers from each. 5. Limiting Structure: Use LIMIT 1 to retrieve only the most common hometown. 6. Join Structure: No JOIN is required since all necessary information is in the \"teacher\" table.","416":"1. Sequential Structure: Start with the SELECT clause to retrieve the country code and first name of players. Use the FROM clause to specify the players table and JOIN it with the matches table to link players with their match results. 2. Condition Structure: Use a WHERE clause to filter for matches where the tournament name is either 'WTA Championships' or 'Australian Open'. We will also need to ensure that the player has won in both tournaments. 3. Join Structure: Use an INNER JOIN between the players and matches tables based on the winner_id to get the names and country codes of players who won matches. 4. Aggregation Structure: Use GROUP BY to group the results by player_id and HAVING clause to filter for players who have won in both tournaments by counting the distinct tournament names.","417":"1. Sequential Structure: Start with the SELECT clause to retrieve the template type code. Use the FROM clause to specify the Templates table. We will also need to count the number of templates per type, so we will use the COUNT function. 2. Aggregation Structure: Use GROUP BY to group the results by the template type code, allowing us to count the number of templates for each type. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of templates, so that the type with the most templates appears first. 4. Limiting Results: Finally, use LIMIT to restrict the output to only the top result, which will be the template type code with the most templates.","418":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of employees. Use the FROM clause to specify the employee table. 2. Condition Structure: Use a WHERE clause to filter employees who have never received an evaluation. This can be done by ensuring that the Employee_ID from the employee table is not present in the evaluation table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching Employee_ID entries in the evaluation table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","419":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Documents.Document_ID\" and the count of paragraphs for each document. 2. Condition Structure: No specific filtering condition is needed, as we want to include all documents and their associated paragraphs. 3. Join Structure: Use a JOIN between the \"Documents\" and \"Paragraphs\" tables based on \"Document_ID\" to link each document with its paragraphs. 4. Aggregation Structure: Use COUNT on \"Paragraphs.Paragraph_ID\" to count the number of paragraphs per document, and GROUP BY \"Documents.Document_ID\" to group the results by each document. Finally, apply ORDER BY to sort the results by document ID.","420":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country code and the count of players. 2. Condition Structure: No specific filtering condition is required as we want to count all players grouped by their country. 3. Grouping Structure: Use GROUP BY on \"players.country_code\" to count the number of players from each country. 4. Aggregation Structure: Use COUNT to calculate the number of players for each country. 5. Join Structure: No JOIN is required since all necessary information is available in the \"players\" table.","421":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the hand type and the count of players for each hand type. 2. Condition Structure: No specific filtering condition is required as we want to count all players grouped by their hand type. 3. Grouping Structure: Use GROUP BY on \"players.hand\" to count the number of players for each hand type. 4. Aggregation Structure: Use COUNT to calculate the number of players for each hand type. 5. Join Structure: No JOIN is required since all necessary information is available in the \"players\" table.","422":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct districts from the shop table. Use the FROM clause to specify the shop table. 2. Condition Structure: Use a WHERE clause to filter shops based on the number of products they sell, specifically looking for shops with less than 3000 products and shops with more than 10000 products. 3. Join Structure: Not required, as we are only working with the shop table. 4. Aggregation Structure: Use GROUP BY to group the results by district and apply a HAVING clause to ensure that each district has at least one shop in both product categories (less than 3000 and more than 10000).","423":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Templates.Template_ID\" since we are interested in the IDs of the templates. 2. Condition Structure: Apply a WHERE clause to filter for the specific template type codes, which are \"PP\" or \"PPT.\" 3. Join Structure: No JOIN is necessary here, as the information needed is available within the \"Templates\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the IDs based on the specified conditions.","424":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of shops. Use the FROM clause to specify the shop table. 2. Condition Structure: Apply a WHERE clause to filter shops that do not have any associated employees in the hiring table. 3. Join Structure: Use a LEFT JOIN between the shop and hiring tables on the Shop_ID to include all shops and check for the absence of hires. 4. Aggregation Structure: Not needed, as we are simply filtering for shops without any employees.","425":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the battle name, date, and result. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all battles. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"battle\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the specified fields for each battle.","426":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of paragraphs. 2. Condition Structure: No specific filtering condition is needed since we want to count all paragraphs. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Paragraphs\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of paragraphs.","427":"1. Sequential Structure: Start with the SELECT clause to retrieve the shop name. Use the FROM clause to specify the shop table. 2. Join Structure: Join the shop table with the hiring table on the Shop_ID to relate shops with their employees. 3. Aggregation Structure: Use GROUP BY to group the results by shop name and COUNT to count the number of employees per shop. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the employee count and limit the results to get the shop with the most employees.","428":"1. Sequential Structure: Start with the SELECT clause to retrieve the first and last names of winners. Use the FROM clause to specify the matches table and JOIN it with the players table to link winners with their names. 2. Condition Structure: Use a WHERE clause to filter for matches that occurred in both 2013 and 2016. This will require checking for the presence of the winner's ID in matches for both years. 3. Join Structure: Use an INNER JOIN between the matches and players tables based on the winner_id to get the names of the winners. 4. Aggregation Structure: Use GROUP BY to group the results by the winner's ID to ensure that we only get winners who played in both years, and use HAVING to filter for those who have matches in both years.","429":"1. Sequential Structure: Start with the SELECT clause to specify the distinct count of battle results. 2. Aggregation Structure: Use COUNT(DISTINCT) to count the different results from the \"battle.result\" column. 3. Condition Structure: No specific filtering condition is needed since we want to count all unique results. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"battle\" table.","430":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Documents.Document_ID\", \"Documents.Document_Name\", and \"Documents.Document_Description\". 2. Condition Structure: No specific filtering condition is required since we want all documents. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Documents\" table. 4. Aggregation Structure: No aggregation is needed since we are retrieving the document IDs, names, and descriptions directly.","431":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and last name of the winners, along with their ranks. Use the FROM clause to specify the matches table and join it with the players and rankings tables to get the necessary information. 2. Condition Structure: No specific condition is needed in the WHERE clause, as we want to consider all winners. However, we will need to order the results by the birth date of the winners to find the youngest. 3. Join Structure: Use JOINs to connect the matches table with the players table on the winner_id and the players table with the rankings table on player_id to get the ranks of the winners. 4. Aggregation Structure: Use ORDER BY to sort the results by the birth date in ascending order and LIMIT to restrict the output to the three youngest winners.","432":"1. Sequential Structure: Start with the SELECT clause to specify the total count of paragraphs. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all paragraphs. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Paragraphs\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of paragraphs.","433":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Templates.Template_ID\" since we need the IDs of the templates. 2. Condition Structure: Apply a WHERE clause to filter for templates with the \"Template_Type_Code\" being either 'PP' or 'PPT'. 3. Join Structure: A JOIN is necessary to connect the \"Templates\" table with the \"Ref_Template_Types\" table based on the \"Template_Type_Code\" to access the descriptions. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the IDs based on the specified conditions.","434":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of documents. Use the FROM clause to specify the Documents table. 2. Condition Structure: Apply a WHERE clause to filter documents that are using the template with the type code 'PPT'. 3. Join Structure: Use an INNER JOIN between the Documents and Templates tables based on Template_ID to relate documents to their templates. Additionally, filter the templates based on the Template_Type_Code. 4. Aggregation Structure: Use the COUNT function to aggregate the number of documents that meet the specified conditions.","435":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"battle.name\" and \"battle.result\" for the battles where the Bulgarian commander is not 'Boril'. 2. Condition Structure: Use a WHERE clause to filter battles where \"battle.bulgarian_commander\" is not equal to 'Boril'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"battle\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and results of battles that meet the specified condition.","436":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"teacher.Name\" and the count of courses they teach. 2. Condition Structure: No specific filtering condition is needed, as we want to count all courses taught by each teacher. 3. Join Structure: Use a JOIN between the \"teacher\" and \"course_arrange\" tables based on \"Teacher_ID\" to link each teacher with the courses they teach. 4. Aggregation Structure: Use COUNT on \"course_arrange.Course_ID\" to count the number of courses for each teacher, and GROUP BY \"teacher.Name\" to group the results by teacher.","437":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of stores. Use the FROM clause to specify the shop table. 2. Condition Structure: Apply a WHERE clause to filter stores based on their number of products compared to the average number of products. 3. Join Structure: Not required, as we only need data from the shop table. 4. Aggregation Structure: Use a subquery within the WHERE clause to calculate the average number of products across all stores, filtering out stores with a number of products below this average.","438":"1. Sequential Structure: Start with the SELECT clause to retrieve the average number of injuries. Use the FROM clause to specify the death table, as it contains the injury data. 2. Aggregation Structure: Use the AVG function to calculate the average number of injuries from the death table. 3. Join Structure: Join the death table with the ship table on the ship ID to relate injuries to specific ships. Then, join the ship table with the battle table on the battle ID to connect injuries to specific battles. 4. Condition Structure: No specific conditions are needed since we want the average across all records.","439":"1. Sequential Structure: Start with the SELECT clause to specify the count of courses. 2. Condition Structure: No specific filtering condition is needed since we want the total number of courses. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Courses\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of courses available in the \"Courses\" table.","440":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"players.country_code\". 2. Aggregation Structure: Use COUNT to calculate the number of players for each country. 3. Grouping Structure: Use GROUP BY on \"players.country_code\" to aggregate the results by each country code. 4. Condition Structure: Apply the HAVING clause to filter for countries that have more than 50 players. 5. Join Structure: No JOIN is required since all necessary information is available in the \"players\" table.","441":"1. Sequential Structure: Start with the SELECT clause to specify the distinct store locations we want to count. 2. Aggregation Structure: Use the COUNT function to count the number of unique locations. 3. Grouping Structure: No GROUP BY is needed since we are counting distinct locations directly. 4. Condition Structure: No specific filtering condition is required as we want to count all unique store locations.","442":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"Paragraphs.Paragraph_Text\" along with any other relevant details from the \"Paragraphs\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific paragraph text that matches 'Korea'. 3. Join Structure: Use a JOIN between the \"Paragraphs\" and \"Documents\" tables based on \"Document_ID\" to link each paragraph with its corresponding document. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the details of the specified paragraph.","443":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"first_name\" and \"last_name\" of players who are left-handed. 2. Condition Structure: Use a WHERE clause to filter for players whose \"hand\" is 'L' (indicating left-handed). 3. Join Structure: No JOIN is necessary since all required information is available in the \"players\" table. 4. Ordering Structure: Use ORDER BY to sort the results by \"birth_date\" in ascending order.","444":"1. Sequential Structure: Start with the SELECT clause to retrieve the template type codes. Use the FROM clause to specify the Ref_Template_Types table. We will need to join this table with the Templates table to count the number of templates associated with each template type code. 2. Aggregation Structure: Use GROUP BY to group the results by Template_Type_Code, allowing us to count the number of templates for each type. We will use the COUNT function to determine how many templates exist for each template type code. 3. Condition Structure: Apply a HAVING clause to filter the results, ensuring we only include template type codes that have fewer than three templates. 4. Join Structure: Use an INNER JOIN between the Ref_Template_Types and Templates tables based on the Template_Type_Code to relate template types to their corresponding templates.","445":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of teachers. Use the FROM clause to specify the teacher table. 2. Aggregation Structure: Use GROUP BY to group the results by Teacher_ID to count the number of courses each teacher teaches. 3. Condition Structure: Apply a HAVING clause to filter the groups to only include those teachers who teach at least two courses. 4. Join Structure: Use an INNER JOIN between the teacher and course_arrange tables based on Teacher_ID to relate teachers to the courses they teach.","446":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct templates used by documents. Use the FROM clause to specify the Templates table. 2. Condition Structure: No specific condition is needed since we want to count all distinct templates used by documents. 3. Join Structure: Use an INNER JOIN between the Documents and Templates tables based on Template_ID to relate documents to their templates. 4. Aggregation Structure: Use the COUNT function to count the distinct Template_IDs from the Templates table that are associated with documents.","447":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"players.first_name\" and the average ranking from the \"rankings\" table. 2. Condition Structure: No specific filtering condition is needed, as we want to calculate the average ranking for all players. 3. Join Structure: Use a JOIN clause to connect the \"players\" table with the \"rankings\" table based on the player ID. 4. Aggregation Structure: Use AVG to calculate the average ranking for each player and GROUP BY \"players.first_name\" to ensure the results are grouped by each player's first name.","448":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the player's first name and last name. 2. Condition Structure: No specific filtering condition is required as we want to list all players. 3. Join Structure: No JOIN is necessary since all required information is available in the \"players\" table. 4. Ordering Structure: Use ORDER BY to sort the results by the players' birth dates in ascending order.","449":"1. Sequential Structure: Start with the SELECT clause to retrieve the ship ID and name. Use the FROM clause to specify the ship table. 2. Join Structure: Join the ship table with the death table on the ship ID to relate ships to the injuries they caused. 3. Aggregation Structure: Use GROUP BY to group the results by ship ID and name, allowing us to sum the total injuries caused by each ship. 4. Condition Structure: Use ORDER BY to sort the results by the total injuries in descending order and limit the results to the top entry to find the ship that caused the most injuries.","450":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Paragraphs.Paragraph_ID\" and \"Paragraphs.Paragraph_Text.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific document title, which is 'Welcome to NY.' 3. Join Structure: Use a JOIN between the \"Paragraphs\" and \"Documents\" tables based on \"Document_ID\" to link each paragraph with its corresponding document. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the paragraph IDs and texts based on the specified document title.","451":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the distinct hometowns of teachers and the count of teachers from each hometown. 2. Aggregation Structure: Use COUNT to calculate the number of teachers from each hometown. 3. Grouping Structure: Use GROUP BY on \"teacher.Hometown\" to aggregate the results by each hometown. 4. Join Structure: No JOIN is required since all necessary information is available in the \"teacher\" table.","452":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the teacher's name. 2. Condition Structure: No specific filtering condition is required as we want to retrieve all teachers. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results in ascending order based on the teacher's age.","453":"1. Sequential Structure: Start with the SELECT clause to specify the \"zip_postcode\" from the \"Addresses\" table. 2. Condition Structure: Use a WHERE clause to filter for addresses where the \"city\" is 'Port Chelsea'. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Addresses\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the zip code for the specified city.","454":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Documents.Document_ID\", \"Documents.Template_ID\", and \"Documents.Document_Description\". 2. Condition Structure: Use a WHERE clause to filter for the document where \"Documents.Document_Name\" is equal to \"Robbin CV\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Documents\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving specific fields based on a condition.","455":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and country code of players. Use the FROM clause to specify the players table and JOIN it with the rankings table to link players with their tour data. 2. Aggregation Structure: Use GROUP BY to group records by player_id to count the number of tours for each player. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of tours in descending order, and limit the results to get the player with the most tours. 4. Join Structure: Use an INNER JOIN between the players and rankings tables based on player_id to connect player details with their tour counts.","456":"1. Sequential Structure: Start with the SELECT clause to count the number of museums that meet the specified opening year conditions. 2. Condition Structure: Use a WHERE clause to filter museums that were opened after 2013 or before 2008. 3. Join Structure: No JOIN is necessary since all required information is available in the \"museum\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of museums that satisfy the conditions.","457":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the teacher's name and age. 2. Condition Structure: No specific filtering condition is required as we want all teachers and their ages. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation function is needed here, but use ORDER BY to sort the results in ascending order based on \"teacher.Age\".","458":"1. Sequential Structure: Start with the SELECT clause to retrieve the names, results, and Bulgarian commanders from the battle table. Use the FROM clause to specify the battle table. 2. Condition Structure: Apply a WHERE clause to filter battles that have no ships lost in the 'English Channel'. This will involve checking the ship table for entries where the location is 'English Channel' and ensuring that there are no corresponding entries in the battle table for those ships. 3. Join Structure: Use a LEFT JOIN between the battle and ship tables based on the battle ID to identify battles and their associated ships. This will help in determining if any ships were lost in the specified location. 4. Aggregation Structure: Not needed, as we are simply filtering based on the presence or absence of ships in a specific location without requiring any aggregation.","459":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"teacher.Name\" for the specified course. 2. Condition Structure: Apply a WHERE clause to filter for the course name \"math.\" 3. Join Structure: Use a JOIN between the \"course\" and \"course_arrange\" tables based on \"Course_ID\" to link each course with its arrangement, and then join with the \"teacher\" table based on \"Teacher_ID\" to get the teacher's name. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the teacher's name for the specified course.","460":"1. Sequential Structure: Start with the SELECT clause to retrieve the average ranking of winners. Use the FROM clause to specify the rankings table, as it contains the ranking information we need. 2. Join Structure: Use an INNER JOIN between the rankings and matches tables based on the winner_id to connect the rankings of the winners to their respective matches. 3. Aggregation Structure: Use the AVG function to calculate the average ranking of the winners from the matches. 4. Condition Structure: No specific condition is needed since we want the average rank for all winners across all matches.","461":"1. Sequential Structure: Start with the SELECT clause to retrieve the employee name. Use the FROM clause to specify the employee table. 2. Join Structure: Join the employee table with the evaluation table on the Employee_ID to connect employees with their awards. 3. Aggregation Structure: Use GROUP BY to group records by Employee_ID to count the number of awards each employee received. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of awards in descending order and limit the results to the top entry to find the employee with the most awards.","462":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the hand type and the count of players for each hand type. 2. Condition Structure: No specific filtering condition is required since we want to count all players grouped by their hand type. 3. Grouping Structure: Use GROUP BY on \"players.hand\" to count the number of players for each hand type. 4. Aggregation Structure: Use COUNT to calculate the number of players for each hand type. 5. Join Structure: No JOIN is required since all necessary information is available in the \"players\" table.","463":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct loser names from the matches table. 2. Condition Structure: No specific filtering condition is needed since we want to count all different loser names. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"matches\" table. 4. Aggregation Structure: Use COUNT(DISTINCT matches.loser_name) to count the unique names of losers.","464":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"death.killed\" and \"death.injured\" to get the death and injury situations. 2. Condition Structure: Apply a WHERE clause to filter for the specific ship with the tonnage 't'. 3. Join Structure: Use a JOIN between the \"death\" and \"ship\" tables based on the relationship where \"ship.id\" matches \"death.caused_by_ship_id\" to link the death records to the corresponding ship. 4. Aggregation Structure: No aggregation is needed here since we are directly retrieving the death and injury counts for the specified ship.","465":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct countries from which players come. 2. Condition Structure: No specific filtering condition is needed since we want to count all distinct countries present in the \"players\" table. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"players\" table. 4. Aggregation Structure: Use COUNT(DISTINCT players.country_code) to count the unique country codes in the \"players\" table.","466":"1. Sequential Structure: Start with the SELECT clause to retrieve the best rank of losers. Use the FROM clause to specify the matches table, as it contains the information about the losers. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to consider all matches. 3. Join Structure: Use an INNER JOIN between the matches and players tables based on the loser_id to connect the matches with the corresponding player details. 4. Aggregation Structure: Use the MIN function to find the best rank among all losers, as a lower rank number indicates a better rank.","467":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Ref_Template_Types.Template_Type_Code\" and the count of \"Templates.Template_ID.\" 2. Condition Structure: No specific filtering condition is needed, as we want to count all templates for each template type code. 3. Join Structure: Use a JOIN between the \"Templates\" table and the \"Ref_Template_Types\" table based on \"Template_Type_Code\" to link each template with its corresponding type. 4. Aggregation Structure: Use COUNT on \"Templates.Template_ID\" to count the number of templates for each template type code, and GROUP BY \"Ref_Template_Types.Template_Type_Code\" to group the results accordingly.","468":"1. Sequential Structure: Start with the SELECT clause to retrieve the winner's name (first name and last name) and their ranking points. Use the FROM clause to specify the matches table and JOIN it with the players table to get the winner's details. Additionally, we will need to join the rankings table to get the ranking points for the winner. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the winner with the most matches, which will be handled in the aggregation step. 3. Join Structure: Use INNER JOINs between the matches table and the players table on the winner_id to get the winner's name, and then join the rankings table on player_id to get the ranking points. 4. Aggregation Structure: Use GROUP BY to group the results by the winner's ID and count the number of matches won. Use ORDER BY to sort the results by the count of matches in descending order and limit the results to get the winner with the most matches.","469":"1. Sequential Structure: Start with the SELECT clause to specify the total count of teachers. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all teachers. 3. Join Structure: No JOIN is necessary as all required information is available in the \"teacher\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of teachers.","470":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"shop.Name\" and the count of employees hired in each shop. 2. Condition Structure: No specific filtering condition is needed, as we want to count all employees hired in each shop. 3. Join Structure: Use an INNER JOIN between the \"shop\" and \"hiring\" tables based on \"Shop_ID\" to link each shop with its hired employees. 4. Aggregation Structure: Use COUNT on \"hiring.Employee_ID\" to count the number of employees hired per shop, and GROUP BY \"shop.Name\" to group the results by shop name.","471":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"teacher.Name\" and the count of courses they teach. 2. Condition Structure: No specific filtering condition is needed, as we want to count all courses taught by each teacher. 3. Join Structure: Use an INNER JOIN between the \"teacher\" table and the \"course_arrange\" table based on \"Teacher_ID\" to link each teacher with the courses they teach. 4. Aggregation Structure: Use COUNT on \"course_arrange.Course_ID\" to count the number of courses for each teacher, and GROUP BY \"teacher.Name\" to group the results by teacher.","472":"1. Sequential Structure: Start with the SELECT clause to retrieve the employee name. Use the FROM clause to specify the evaluation table, as it contains the bonus information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the employee with the biggest bonus. 3. Join Structure: Use an INNER JOIN between the evaluation and employee tables based on Employee_ID to link bonuses to the corresponding employee names. 4. Aggregation Structure: Use the MAX function to find the largest bonus and filter the results accordingly.","473":"1. Sequential Structure: Start with the SELECT clause to count the number of templates. We will use the COUNT function on the \"Templates.Template_ID\" field. 2. Condition Structure: Apply a WHERE clause to filter for templates of the type \"CV\" by checking the \"Template_Type_Code\" in the \"Templates\" table. 3. Join Structure: No JOIN is necessary here, as we can directly filter the \"Templates\" table based on the template type. 4. Aggregation Structure: Use COUNT to aggregate the number of templates that match the specified type.","474":"1. Sequential Structure: Start with the SELECT clause to retrieve the shop name. Use the FROM clause to specify the shop table. We will need to join the hiring table to count the number of employees hired by each shop. 2. Join Structure: Use an INNER JOIN between the shop and hiring tables based on the Shop_ID to relate shops with their hiring records. 3. Aggregation Structure: Use GROUP BY to group the results by Shop_ID and COUNT to count the number of employees hired by each shop. 4. Condition Structure: Use ORDER BY to sort the results by the count of employees in descending order and limit the results to the top one to get the shop hiring the largest number of employees.","475":"1. Sequential Structure: Start with the SELECT clause to retrieve the visitor's name. Use the FROM clause to specify the visitor table and JOIN it with the visit table to link visitors with their museum visits. 2. Condition Structure: Use a WHERE clause to filter for visits to museums opened before 2009 and after 2011. This will help identify visitors who meet both conditions. 3. Join Structure: Use JOINs between the visitor and visit tables based on visitor ID, and then join the visit table with the museum table based on museum ID to access the opening year of the museums. 4. Aggregation Structure: Use GROUP BY to group by visitor ID and name, and then use HAVING to ensure that the visitor has visited at least one museum from each of the specified time periods (before 2009 and after 2011).","476":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the teacher's name. 2. Condition Structure: Use a WHERE clause to filter out teachers whose hometown is 'Little Lever Urban District'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of teachers based on a specific condition.","477":"1. Sequential Structure: Start with the SELECT clause to retrieve the district from the shop table. Use the FROM clause to specify the shop table. 2. Condition Structure: Use a HAVING clause to filter districts that have both stores with less than 3000 products and stores with more than 10000 products. 3. Join Structure: Not required, as we only need data from the shop table. 4. Aggregation Structure: Use GROUP BY to group the results by district and use conditional aggregation to check for the existence of both conditions (less than 3000 products and more than 10000 products) within the same district.","478":"1. Sequential Structure: Start with the SELECT clause to count the number of matches played in the specified years. 2. Condition Structure: Use a WHERE clause to filter for matches that occurred in either 2013 or 2016. 3. Join Structure: No JOIN is necessary since all required information is available in the \"matches\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of matches that meet the specified conditions.","479":"1. Sequential Structure: Start with the SELECT clause to specify the required fields, which are the minimum and maximum number of products from the \"shop\" table. 2. Aggregation Structure: Use the MIN and MAX functions to calculate the minimum and maximum number of products across all shops. 3. Grouping Structure: No GROUP BY is needed since we want the overall minimum and maximum values across all records in the \"shop\" table. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"shop\" table.","480":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Template_ID\" from the \"Templates\" table. 2. Condition Structure: Apply a WHERE clause to filter for templates where the \"Template_Type_Description\" is 'Presentation'. 3. Join Structure: Use a JOIN between the \"Templates\" and \"Ref_Template_Types\" tables based on \"Template_Type_Code\" to link templates with their descriptions. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the IDs of the templates that match the condition.","481":"1. Sequential Structure: Start with the SELECT clause to retrieve the visitor's name and age. Use the FROM clause to specify the visit table, as it contains the ticket purchase information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the maximum number of tickets purchased. 3. Join Structure: Use an INNER JOIN between the visit and visitor tables based on the visitor ID to link ticket purchases with visitor details. 4. Aggregation Structure: Use the MAX function to find the maximum number of tickets purchased and filter the results accordingly.","482":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the template IDs, version numbers, and template type codes from the \"Templates\" table. 2. Condition Structure: No specific filtering condition is required since we want all templates. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Templates\" table. 4. Aggregation Structure: No aggregation is needed since we are retrieving the specified fields directly.","483":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"Documents.Document_ID,\" \"Documents.Document_Name,\" and the count of paragraphs. 2. Condition Structure: No specific filtering condition is needed, as we want to include all documents regardless of the number of paragraphs. 3. Join Structure: Use a JOIN between the \"Documents\" and \"Paragraphs\" tables based on \"Document_ID\" to associate each document with its paragraphs. 4. Aggregation Structure: Use COUNT on \"Paragraphs.Paragraph_ID\" to count the number of paragraphs for each document, and GROUP BY \"Documents.Document_ID\" to group the results by each document.","484":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the teacher's age and hometown. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all teachers' ages and hometowns. 3. Join Structure: No JOIN is necessary because all required information is contained within the \"teacher\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the age and hometown of each teacher.","485":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Documents.Document_ID\" and the count of paragraphs associated with each document. 2. Condition Structure: No specific filtering condition is needed, as we want to count all paragraphs for each document. 3. Join Structure: Use a JOIN between the \"Documents\" and \"Paragraphs\" tables based on \"Document_ID\" to link each document with its corresponding paragraphs. 4. Aggregation Structure: Use COUNT on \"Paragraphs.Paragraph_ID\" to count the number of paragraphs for each document, and GROUP BY \"Documents.Document_ID\" to group the results by document ID. Finally, apply ORDER BY to sort the results by document ID.","486":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"teacher.Name\" and \"course.Course.\" 2. Condition Structure: No specific filtering condition is needed, as we want to list all teachers and the courses they teach. 3. Join Structure: Use JOIN clauses to connect the \"teacher\" table with the \"course_arrange\" table based on \"Teacher_ID,\" and then join the \"course\" table based on \"Course_ID\" to link each teacher with their respective courses. 4. Aggregation Structure: No aggregation is needed, but we will apply ORDER BY to sort the results in ascending alphabetical order by the teacher's name.","487":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"ship.name\" and \"ship.tonnage\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all ships. 3. Join Structure: No JOIN is necessary since all required data is contained within the \"ship\" table. 4. Ordering Structure: Use ORDER BY to sort the results in descending alphabetical order based on \"ship.name\".","488":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the average and maximum number of tickets bought during visits. 2. Aggregation Structure: Use the AVG function to calculate the average number of tickets and the MAX function to find the maximum number of tickets bought. 3. Grouping Structure: No GROUP BY is needed since we want the overall average and maximum across all visits. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"visit\" table.","489":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the location and the count of shops. 2. Condition Structure: No specific filtering condition is required since we want to count all shops in each location. 3. Grouping Structure: Use GROUP BY on \"shop.Location\" to count the number of shops in each location. 4. Aggregation Structure: Use COUNT to calculate the number of shops for each location. 5. Join Structure: No JOIN is required since all necessary data is within the \"shop\" table.","490":"1. Sequential Structure: Start with the SELECT clause to retrieve the country code from the players table. Use the FROM clause to specify the players table. 2. Aggregation Structure: Use GROUP BY to group the records by country code, allowing us to count the number of players from each country. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of players, and limit the results to the top one to find the country with the greatest number of players. 4. Join Structure: Not required, as all necessary data is available within the players table.","491":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"shop.Name\" and the count of employees working at each shop. 2. Condition Structure: No specific filtering condition is needed, as we want to count all employees for each shop. 3. Join Structure: Use a JOIN between the \"shop\" and \"hiring\" tables based on \"Shop_ID\" to link each shop with its employees. 4. Aggregation Structure: Use COUNT on \"hiring.Employee_ID\" to count the number of employees per shop, and GROUP BY \"shop.Name\" to group the results by each shop.","492":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template IDs from the Templates table. Use the FROM clause to specify the Templates table and join it with the Documents table to relate templates to their documents. 2. Aggregation Structure: Use GROUP BY to group the results by Template ID, allowing us to count the number of documents associated with each template. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of documents is greater than 1, ensuring we only get templates used in more than one document. 4. Join Structure: Use an INNER JOIN between the Templates and Documents tables based on Template ID to connect templates with their respective documents.","493":"1. Sequential Structure: Start with the SELECT clause to retrieve the winner's name and rank. Use the FROM clause to specify the matches table and join it with the players and rankings tables to get the necessary details about the winners. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the youngest winners across all matches. 3. Join Structure: Use JOINs between the matches, players, and rankings tables based on the winner's ID to connect the match details with the player and their ranking. 4. Aggregation Structure: Use ORDER BY to sort the results by birth date in ascending order to find the youngest winners, and then use LIMIT to restrict the results to the top 3 youngest winners.","494":"1. Sequential Structure: Start with the SELECT clause to specify the average number of staff from the \"museum\" table. 2. Condition Structure: Use a WHERE clause to filter museums that were opened before the year 2009. 3. Join Structure: No JOIN is necessary since all required information is available in the \"museum\" table. 4. Aggregation Structure: Use the AVG function to calculate the average number of staff for the filtered museums.","495":"1. Sequential Structure: Start with the SELECT clause to retrieve the city names from the employee table. Use the FROM clause to specify the employee table. 2. Condition Structure: Apply a WHERE clause to filter employees who are under the age of 30. 3. Aggregation Structure: Use GROUP BY to group the results by city and apply the HAVING clause to filter for cities that have more than one employee under the specified age.","496":"1. Sequential Structure: Start with the SELECT clause to retrieve the average ranking of winners. Use the FROM clause to specify the matches table, and then join it with the players and rankings tables to access the necessary ranking information. 2. Condition Structure: No specific condition is needed since we want the average rank of all winners across all matches. 3. Join Structure: Use JOIN clauses to connect the matches table with the players table on the winner_id and player_id, and then join the rankings table on player_id to access the ranking data. 4. Aggregation Structure: Use the AVG function to calculate the average ranking of the winners from the rankings table.","497":"1. Sequential Structure: Start with the SELECT clause to specify the year and the count of matches played in that year. 2. Condition Structure: No specific filtering condition is needed since we want to count all matches for each year. 3. Grouping Structure: Use GROUP BY on \"matches.year\" to aggregate the match counts by year. 4. Aggregation Structure: Use COUNT to calculate the total number of matches played for each year. 5. Join Structure: No JOIN is required since all necessary information is available in the \"matches\" table.","498":"1. Sequential Structure: Start with the SELECT clause to retrieve the Document_ID from the Documents table. Use the FROM clause to specify the Documents table and join it with the Paragraphs table to relate documents to their paragraphs. 2. Aggregation Structure: Use GROUP BY to group the results by Document_ID, allowing us to count the number of paragraphs associated with each document. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of paragraphs is 2 or more, ensuring we only get documents with at least two paragraphs. 4. Join Structure: Use an INNER JOIN between the Documents and Paragraphs tables based on Document_ID to connect documents with their paragraphs.","499":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"teacher.Hometown\". 2. Aggregation Structure: Use COUNT to determine the frequency of each hometown among teachers. 3. Grouping Structure: Use GROUP BY on \"teacher.Hometown\" to aggregate the results by each hometown. 4. Ordering Structure: Use ORDER BY in descending order on the count to rank the hometowns by their frequency. 5. Limiting Structure: Use LIMIT 1 to retrieve only the most common hometown. 6. Join Structure: No JOIN is required since all necessary information is in the \"teacher\" table.","500":"1. Sequential Structure: Start with the SELECT clause to specify the total number of matches, which will be represented by a count. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all matches. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"matches\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of matches.","501":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the location and the count of shops. 2. Condition Structure: No specific filtering condition is required since we want to count all shops in each location. 3. Grouping Structure: Use GROUP BY on \"shop.Location\" to count the number of shops for each location. 4. Aggregation Structure: Use COUNT to calculate the number of shops in each location. 5. Join Structure: No JOIN is required since all necessary data is within the \"shop\" table.","502":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct visitor IDs. Use the FROM clause to specify the visitor table. 2. Condition Structure: Use a WHERE clause to filter visitors who did not visit any museum opened after 2010. This will involve a subquery to identify visitor IDs that have visited such museums. 3. Join Structure: Not required in the main query, but we will use a subquery to join the visit and museum tables to find the relevant visitor IDs. 4. Aggregation Structure: Use COUNT(DISTINCT visitor.ID) to count the number of unique visitors who meet the criteria.","503":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"visitor.Name\" and \"visitor.Level_of_membership\" of visitors whose membership level is higher than 4. 2. Condition Structure: Use a WHERE clause to filter for visitors with \"visitor.Level_of_membership\" greater than 4. 3. Join Structure: Use a JOIN clause to combine the \"visitor\" table with the \"visit\" table based on the foreign key relationship (visit.visitor_ID = visitor.ID) to ensure we are only considering visitors who have made visits. 4. Ordering Structure: Use ORDER BY to sort the results by \"visitor.Age\" in descending order (from old to young).","504":"1. Sequential Structure: Start with the SELECT clause to count the number of paragraphs. Use the FROM clause to specify the Paragraphs table, as we need to count entries from this table. 2. Condition Structure: Apply a WHERE clause to filter for paragraphs that belong to the document named 'Summer Show'. This will involve joining the Documents table to access the document name. 3. Join Structure: Use an INNER JOIN between the Paragraphs and Documents tables based on Document_ID to relate paragraphs to their respective documents. 4. Aggregation Structure: Use the COUNT function to aggregate the number of paragraphs that meet the specified condition.","505":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of templates. 2. Condition Structure: No specific filtering condition is needed since we want to count all templates. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Templates\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of templates.","506":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the employee names and their ages. 2. Condition Structure: No specific filtering condition is required as we want to retrieve all employee names and their ages. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"employee\" table. 4. Aggregation Structure: No aggregation function is needed here, but use ORDER BY to sort the results in ascending order based on \"employee.Age\".","507":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the template type codes and their descriptions. 2. Condition Structure: No specific filtering condition is required since we want all template types. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Ref_Template_Types\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the type codes and descriptions.","508":"1. Sequential Structure: Start with the SELECT clause to retrieve the Template IDs from the Templates table. Use the FROM clause to specify the Templates table. 2. Condition Structure: Use a WHERE clause to filter for Template IDs that are not present in the Documents table, indicating that these templates are not used by any document. 3. Join Structure: Not required, as we are only filtering based on the absence of matching Template IDs in the Documents table. 4. Aggregation Structure: Not needed, as we are simply retrieving Template IDs without any aggregation.","509":"1. Sequential Structure: Start with the SELECT clause to retrieve the employee's name. Use the FROM clause to specify the evaluation table, as it contains the bonus information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the highest bonus. 3. Join Structure: Use an INNER JOIN between the evaluation and employee tables based on Employee_ID to link the bonus information with the corresponding employee names. 4. Aggregation Structure: Use the MAX function to find the highest bonus and apply a WHERE clause to filter for that specific bonus.","510":"1. Sequential Structure: Start with the SELECT clause to specify the \"zip_postcode\" for the city \"Port Chelsea\". 2. Condition Structure: Use a WHERE clause to filter for records where \"Addresses.city\" is equal to \"Port Chelsea\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Addresses\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the zip code for the specified city.","511":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of paragraphs. Use the FROM clause to specify the Paragraphs table, as we want to count the paragraphs related to a specific document. 2. Condition Structure: Use the WHERE clause to filter for the document with the name 'Summer Show'. This will ensure we are only counting paragraphs for that specific document. 3. Join Structure: A JOIN is not necessary here since we can filter directly using the Document_ID from the Paragraphs table and the Document_Name from the Documents table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of paragraphs associated with the specified document.","512":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of employees. Use the FROM clause to specify the employee table. 2. Condition Structure: Use a WHERE clause to filter employees who have never won any awards. This can be achieved by checking that the Employee_ID is not present in the evaluation table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching Employee_ID entries in the evaluation table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","513":"1. Sequential Structure: Start with the SELECT clause to retrieve the shop names. Use the FROM clause to specify the shop table. 2. Condition Structure: Apply a WHERE clause to filter shops based on their number of products being greater than the average number of products across all shops. 3. Join Structure: Not required, as we only need data from the shop table. 4. Aggregation Structure: Use a subquery within the WHERE clause to calculate the average number of products from the shop table, filtering out shops with a number of products below this average.","514":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"players.first_name\" and the total ranking points from \"rankings.ranking_points.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to calculate the total ranking points for each player. 3. Join Structure: Use an INNER JOIN to connect the \"players\" table with the \"rankings\" table based on the player ID, ensuring we get the ranking points for each player. 4. Aggregation Structure: Use SUM to aggregate the ranking points for each player and GROUP BY \"players.first_name\" to group the results by each player's first name.","515":"1. Sequential Structure: Start with the SELECT clause to specify the required fields, which are the minimum and maximum share of TV series. 2. Aggregation Structure: Use MIN and MAX functions to calculate the minimum and maximum share from the \"TV_series\" table. 3. Grouping Structure: No GROUP BY is needed since we want the overall minimum and maximum values across all TV series. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"TV_series\" table.","516":"1. Sequential Structure: Start with the SELECT clause to retrieve distinct nationalities from the people table. Use the FROM clause to specify the people table. 2. Aggregation Structure: Use GROUP BY to group records by nationality, allowing us to count how many people share each nationality. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of people is at least 2, ensuring we only get nationalities shared by at least two people. 4. Join Structure: Not required, as we only need data from the people table to determine shared nationalities.","517":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"transcript_date\" and \"other_details\" from the \"Transcripts\" table. 2. Condition Structure: No specific filtering condition is needed since we want the earliest transcript date. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use ORDER BY to sort the transcripts by \"transcript_date\" in ascending order and apply LIMIT 1 to retrieve the first transcript released.","518":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"people.Nationality\" and the count of people from each nationality. 2. Aggregation Structure: Use COUNT to calculate the number of people for each nationality. 3. Grouping Structure: Use GROUP BY on \"people.Nationality\" to aggregate the results by each nationality. 4. Join Structure: No JOIN is required since all necessary information is available in the \"people\" table.","519":"1. Sequential Structure: Start with the SELECT clause to retrieve the population and name of the city. Use the FROM clause to specify the city table and JOIN it with the countrylanguage table to filter for cities that speak English. 2. Condition Structure: Use a WHERE clause to filter for the language being 'English'. 3. Join Structure: Use an INNER JOIN between the city and countrylanguage tables based on the CountryCode to relate cities with their languages. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the results to the top entry to find the most populous city that speaks English.","520":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Region\" for the city \"Kabul.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"Kabul.\" 3. Join Structure: Use a JOIN between the \"city\" and \"country\" tables based on the foreign key relationship where \"city.CountryCode\" matches \"country.Code.\" 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the region for a specific city.","521":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct countries. Use the FROM clause to specify the countrylanguage table, as we need to filter languages used by countries. 2. Condition Structure: Use a WHERE clause to filter for countries that use either 'English' or 'Dutch'. This will involve checking the Language column for both languages. 3. Join Structure: Not required, as we can directly filter the countrylanguage table based on the languages without needing to join with the country table for this specific count. 4. Aggregation Structure: Use COUNT(DISTINCT CountryCode) to count the number of unique countries that use either of the specified languages.","522":"1. Sequential Structure: Start with the SELECT clause to retrieve the average GNP and total population. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries whose government form indicates they are US territories. 3. Join Structure: Not required, as all necessary data is available in the country table. 4. Aggregation Structure: Use AVG to calculate the average GNP and SUM to calculate the total population for the filtered countries.","523":"1. Sequential Structure: Start with the SELECT clause to retrieve the last names of students. Use the FROM clause to specify the Students table. 2. Condition Structure: Apply a WHERE clause to filter students who live in North Carolina by checking the state_province_county in the Addresses table. Additionally, we need to ensure that these students have not registered in any degree programs, which will require a subquery to check for the absence of their IDs in the Student_Enrolment table. 3. Join Structure: Use an INNER JOIN between the Students and Addresses tables based on the permanent_address_id to link students with their addresses. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","524":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"poker_player.Final_Table_Made\" and \"poker_player.Best_Finish\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all poker players' final tables made and their best finishes. 3. Join Structure: A JOIN is necessary to combine the \"poker_player\" table with the \"people\" table based on the shared key \"People_ID\". 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the final tables made and best finishes for all poker players.","525":"1. Sequential Structure: Start with the SELECT clause to specify the count of cartoons written by \"Joseph Kuhr\". 2. Condition Structure: Use a WHERE clause to filter for cartoons where \"Cartoon.Written_by\" is equal to 'Joseph Kuhr'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Cartoon\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cartoons that meet the specified condition.","526":"1. Sequential Structure: Start with the SELECT clause to retrieve the production code and channel from the Cartoon table. Use the FROM clause to specify the Cartoon table. 2. Condition Structure: Apply a WHERE clause to filter for the most recent cartoon by using the Original_air_date field. 3. Join Structure: Not required, as we only need data from the Cartoon table. 4. Aggregation Structure: Use ORDER BY to sort the cartoons by Original_air_date in descending order and limit the result to the top entry to get the most recent cartoon.","527":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"transcript_date\" and \"other_details\" from the \"Transcripts\" table. 2. Condition Structure: No specific filtering condition is needed since we want the earliest transcript release date. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use MIN to find the earliest transcript release date. Since we want to retrieve details associated with that date, we will need to group by the \"transcript_date\" to ensure we can get the corresponding details.","528":"1. Sequential Structure: Start with the SELECT clause to specify the count of transcripts. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all transcripts. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of transcripts.","529":"1. Sequential Structure: Start with the SELECT clause to retrieve the languages spoken by countries. Use the FROM clause to specify the countrylanguage table and join it with the country table to filter based on government form. 2. Condition Structure: Use the WHERE clause to filter for countries that have a government form of 'Republic' and where the language is official (Percentage = 100). 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Use GROUP BY to group the results by language and apply HAVING to filter for languages that are spoken by only one country.","530":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Students table. 2. Condition Structure: Use the WHERE clause to filter students based on two conditions: those who have a permanent address in Haiti or those who have the specified cell phone number. 3. Join Structure: Use an INNER JOIN between the Students table and the Addresses table based on the permanent_address_id to access the country information. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","531":"1. Sequential Structure: Start with the SELECT clause to retrieve the region names. Use the FROM clause to specify the country table, as it contains the region information. 2. Condition Structure: Use the WHERE clause to filter for countries where the language is either 'Dutch' or 'English'. 3. Join Structure: Use JOIN between the country and countrylanguage tables based on the CountryCode to link regions with their respective languages. 4. Aggregation Structure: Not required, as we are simply retrieving distinct regions without needing to aggregate data.","532":"1. Sequential Structure: Start with the SELECT clause to specify the field \"section_name\" from the \"Sections\" table. 2. Condition Structure: No specific filtering condition is needed since we want to retrieve all section names. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Sections\" table. 4. Ordering Structure: Use ORDER BY in descending order to achieve reversed lexicographical order for the section names.","533":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"country.Name\" of the nations founded after 1950. 2. Condition Structure: Use a WHERE clause to filter for countries where \"country.IndepYear\" is greater than 1950. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of countries that meet the specified condition.","534":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, middle name, and last name of the student. 2. Condition Structure: No specific filtering condition is needed since we want the first student to register based on the registration date. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Students\" table. 4. Aggregation Structure: Use ORDER BY to sort the results by \"Students.date_first_registered\" in ascending order and apply LIMIT 1 to get the first student who registered.","535":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct languages spoken in Aruba. Use the FROM clause to specify the countrylanguage table. 2. Condition Structure: Apply a WHERE clause to filter records for the country with the name 'Aruba'. 3. Join Structure: Use a JOIN between the countrylanguage and country tables based on the CountryCode to ensure we are only counting languages for Aruba. 4. Aggregation Structure: Use the COUNT function to count the distinct languages spoken in Aruba.","536":"1. Sequential Structure: Start with the SELECT clause to specify the field \"Students.other_student_details\" that we want to retrieve, along with the names of the students for context. 2. Condition Structure: No specific filtering condition is needed since we want to retrieve details for all students. 3. Join Structure: No JOIN is required as all necessary information is available in the \"Students\" table. 4. Ordering Structure: Use ORDER BY to sort the results in reverse alphabetical order based on the concatenated names of the students (first name, middle name, last name).","537":"1. Sequential Structure: Start with the SELECT clause to specify the \"Cartoon.Title\" of the cartoons directed by either \"Ben Jones\" or \"Brandon Vietti\". 2. Condition Structure: Use a WHERE clause to filter for cartoons where \"Cartoon.Directed_by\" is either \"Ben Jones\" or \"Brandon Vietti\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Cartoon\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of cartoons that meet the specified conditions.","538":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct regions from the country table. Use the FROM clause to specify the country table. 2. Condition Structure: Use the WHERE clause to filter for countries where the language is either 'English' or 'Dutch'. This will ensure we only get regions that use these languages. 3. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the CountryCode to relate countries with their languages. 4. Aggregation Structure: Use DISTINCT to ensure that each region is listed only once, even if multiple countries in the same region use English or Dutch.","539":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the package options and the series name from the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for TV channels that support high definition TV, indicated by the \"Hight_definition_TV\" field. 3. Join Structure: No JOIN is necessary since all required information is available in the \"TV_Channel\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the package options and series names based on the specified condition.","540":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Students.cell_mobile_number\" of the student whose first name is 'Timmothy' and last name is 'Ward'. 2. Condition Structure: Use a WHERE clause to filter for the specific first name and last name. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Students\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the phone number based on specific conditions.","541":"1. Sequential Structure: Start with the SELECT clause to retrieve the course name from the Courses table. Use the FROM clause to specify the Courses table and JOIN it with the Student_Enrolment_Courses table to link courses with their enrollments. 2. Aggregation Structure: Use GROUP BY to group the results by course_id to count the number of enrollments for each course. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of enrollments in descending order, ensuring that the course with the most enrollments appears first. 4. Limiting Results: Use LIMIT to restrict the output to only the top result, which will be the course with the most enrollments.","542":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of continents. Use the FROM clause to specify the countrylanguage table, as it contains the language information. 2. Condition Structure: Use a WHERE clause to filter for records where the language is 'Chinese'. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries and their continents. 4. Aggregation Structure: Use COUNT(DISTINCT country.Continent) to count the distinct continents where Chinese is spoken.","543":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names from the TV_Channel table. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for countries whose channels do not have any cartoons written by 'Todd Casey'. 3. Join Structure: Use a LEFT JOIN between the TV_Channel and Cartoon tables based on the channel ID to identify channels and their corresponding cartoons. 4. Aggregation Structure: Use a WHERE clause to filter out countries that have cartoons written by 'Todd Casey' by checking for NULL values in the Cartoon table after the LEFT JOIN.","544":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"TV_Channel.series_name\" for the specified cartoon title. 2. Condition Structure: Apply a WHERE clause to filter for the specific cartoon title \"The Rise of the Blue Beetle.\" 3. Join Structure: Use a JOIN between the \"Cartoon\" and \"TV_Channel\" tables based on the \"Channel\" field to link the cartoon with its corresponding TV channel. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the series name associated with the cartoon.","545":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of TV channels. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Use a HAVING clause to filter for countries that have more than two TV channels. 3. Join Structure: Use a GROUP BY clause to group the results by country, allowing us to count the number of TV channels per country. 4. Aggregation Structure: Use COUNT to aggregate the number of TV channels for each country and filter those with a count greater than two.","546":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of people from the \"people\" table. Use the FROM clause to specify the \"people\" table. 2. Condition Structure: Use a WHERE clause to filter out those people who are poker players by ensuring their People_ID is not present in the \"poker_player\" table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching People_ID entries in the \"poker_player\" table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","547":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"TV_series.Episode\" and \"TV_series.Rating\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve the highest rated episodes. 3. Grouping Structure: No GROUP BY is needed as we are not aggregating data but rather retrieving specific episodes and their ratings. 4. Ordering Structure: Use ORDER BY in descending order on \"TV_series.Rating\" to rank the episodes by their ratings. 5. Limiting Structure: Use LIMIT 3 to retrieve only the top 3 episodes with the highest ratings. 6. Join Structure: No JOIN is required since all necessary data is within the \"TV_series\" table.","548":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"people.Name\". 2. Condition Structure: Use a WHERE clause to filter out people whose nationality is 'Russia'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"people\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving names based on the specified condition.","549":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of official languages. Use the FROM clause to specify the countrylanguage table. 2. Condition Structure: Use the WHERE clause to filter for languages that are official (IsOfficial = 'T') and belong to Afghanistan (CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')). 3. Join Structure: Not required, as we can filter directly from the countrylanguage table using a subquery to get the country code for Afghanistan. 4. Aggregation Structure: Use the COUNT function to count the number of official languages that meet the specified conditions.","550":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Cartoon.Title\" and \"Cartoon.Directed_by.\" 2. Condition Structure: No specific filtering condition is needed, as we want all cartoons. 3. Join Structure: Use a JOIN between the \"Cartoon\" and \"TV_Channel\" tables based on the \"Channel\" to link cartoons with their respective channels, although the channel information is not required in the output. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results by \"Cartoon.Original_air_date.\"","551":"1. Sequential Structure: Start with the SELECT clause to specify the count of votes, as the question asks for the number of votes from specific states. 2. Condition Structure: Use a WHERE clause to filter votes where the state is either 'NY' or 'CA'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"VOTES\" table. 4. Aggregation Structure: Use COUNT to aggregate the total number of votes that meet the specified conditions.","552":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Sections.section_id\", \"Sections.course_id\", \"Sections.section_name\", and \"Sections.section_description\" for the section described as 'h'. 2. Condition Structure: Use a WHERE clause to filter for the specific section where \"Sections.section_name\" is 'h'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Sections\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of a specific section.","553":"1. Sequential Structure: Start with the SELECT clause to retrieve the mean GNP and total population. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter countries that are considered US territories based on the USTerritoryCondition. 3. Join Structure: Not required, as all necessary data is contained within the country table. 4. Aggregation Structure: Use the AVG function to calculate the mean GNP and the SUM function to calculate the total population of the filtered countries.","554":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of contestants. Use the FROM clause to specify the CONTESTANTS table. 2. Condition Structure: Use a WHERE clause to filter contestants who did not receive any votes. This can be achieved by checking if the contestant_number is not present in the VOTES table. 3. Join Structure: Not required, as we are only filtering based on the absence of votes for contestants. 4. Aggregation Structure: Use COUNT to aggregate the number of contestants who meet the specified condition.","555":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"Students.first_name,\" \"Students.middle_name,\" and \"Students.last_name.\" 2. Condition Structure: Apply a WHERE clause to filter for students enrolled in a Bachelor's program. This will involve checking the \"Degree_Programs.degree_summary_name\" for the term \"Bachelors.\" 3. Join Structure: Use JOIN clauses to connect the \"Students\" table with the \"Student_Enrolment\" table based on \"student_id,\" and then join \"Student_Enrolment\" with \"Degree_Programs\" based on \"degree_program_id\" to filter by the degree program. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving names based on the specified condition.","556":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"section_description\" for the section named 'h'. 2. Condition Structure: Use a WHERE clause to filter for the section where \"section_name\" is equal to 'h'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Sections\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the description for a specific section.","557":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the contestant number and contestant name. 2. Condition Structure: No specific filtering condition is required as we want to retrieve all contestants. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"CONTESTANTS\" table. 4. Ordering Structure: Use ORDER BY to sort the results in descending order based on \"CONTESTANTS.contestant_name\".","558":"1. Sequential Structure: Start with the SELECT clause to specify the count of cartoons written by Joseph Kuhr. 2. Condition Structure: Use a WHERE clause to filter for cartoons where \"Cartoon.Written_by\" is equal to 'Joseph Kuhr'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Cartoon\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cartoons that meet the specified condition.","559":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"Sections.section_name\". 2. Condition Structure: No specific filtering condition is required since we want all section names. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Sections\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the section names in reverse alphabetical order.","560":"1. Sequential Structure: Start with the SELECT clause to specify the total surface area of countries in Asia or Europe. 2. Aggregation Structure: Use the SUM function to calculate the total surface area for the specified continents. 3. Condition Structure: Apply a WHERE clause to filter for countries that belong to either the 'Asia' or 'Europe' continent. 4. Join Structure: No JOIN is needed since all necessary information is available in the \"country\" table.","561":"1. Sequential Structure: Start with the SELECT clause to specify the unique languages we want to count. 2. Aggregation Structure: Use the COUNT function to count the distinct languages from the \"countrylanguage\" table. 3. Condition Structure: No specific filtering condition is needed since we want to count all unique languages. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"countrylanguage\" table.","562":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" and the count of \"poker_player.Final_Table_Made.\" 2. Condition Structure: No specific filtering condition is needed, as we want to include all poker players. 3. Join Structure: Use a JOIN between the \"people\" and \"poker_player\" tables based on \"People_ID\" to associate each poker player with their name. 4. Aggregation Structure: Use COUNT on \"poker_player.Final_Table_Made\" to count the number of final tables made by each player, and then GROUP BY \"people.Name\" to group results by player name. Finally, apply ORDER BY to sort the results in ascending order by the count of final tables made.","563":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"TV_Channel.series_name\" associated with the cartoon \"The Rise of the Blue Beetle!\". 2. Condition Structure: Apply a WHERE clause to filter for the specific cartoon title \"The Rise of the Blue Beetle!\". 3. Join Structure: Use a JOIN between the \"Cartoon\" and \"TV_Channel\" tables based on the \"Channel\" field to link the cartoon with its corresponding TV channel. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the series name for the specified cartoon.","564":"1. Sequential Structure: Start with the SELECT clause to retrieve the Money Rank of the poker player. Use the FROM clause to specify the poker_player table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the player with the highest earnings. 3. Join Structure: Not required, as we only need data from the poker_player table to find the highest earnings. 4. Aggregation Structure: Use the MAX function to find the highest earnings and filter the results to get the corresponding Money Rank.","565":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"first_name\" of the student whose permanent address is different from their current address. 2. Condition Structure: Use a WHERE clause to filter for students where \"Students.permanent_address_id\" is not equal to \"Students.current_address_id\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Students\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the first names of students that meet the specified condition.","566":"1. Sequential Structure: Start with the SELECT clause to retrieve the average life expectancy. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries that are in Africa and have a government form of 'Republic'. 3. Join Structure: Not required, as all necessary data is available in the country table. 4. Aggregation Structure: Use the AVG function to calculate the average life expectancy for the filtered countries.","567":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" of all poker players. 2. Condition Structure: No specific filtering condition is needed since we want all poker players. 3. Join Structure: Use a JOIN between the \"poker_player\" and \"people\" tables based on \"People_ID\" to link each poker player with their corresponding name. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving names.","568":"1. Sequential Structure: Start with the SELECT clause to retrieve the total count of distinct official languages. Use the FROM clause to specify the countrylanguage table, as we need to count languages associated with countries. 2. Condition Structure: Use a WHERE clause to filter countries founded before 1930 by checking the IndepYear in the country table. 3. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the number of distinct official languages for the filtered countries.","569":"1. Sequential Structure: Start with the SELECT clause to retrieve the course enrollment ID and the count of how many times it appears in different transcripts. Use the FROM clause to specify the Transcript_Contents table, which links to the Student_Enrolment_Courses table. 2. Aggregation Structure: Use COUNT to aggregate the number of times each course enrollment ID appears in the Transcript_Contents table. This will help us determine how many times a course enrollment can show in different transcripts. 3. Grouping Structure: Use GROUP BY to group the results by the course enrollment ID to count occurrences for each unique enrollment. 4. Condition Structure: Use HAVING to filter the results to find the maximum count of occurrences across all course enrollments.","570":"1. Sequential Structure: Start with the SELECT clause to specify the \"Cartoon.Title\" that we want to retrieve. 2. Condition Structure: No specific filtering condition is needed since we want all cartoon titles. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Cartoon\" table. 4. Aggregation Structure: No aggregation is needed; however, we will use ORDER BY to sort the titles alphabetically.","571":"1. Sequential Structure: Start with the SELECT clause to retrieve the transcript date and ID. Use the FROM clause to specify the Transcripts table. 2. Aggregation Structure: Use GROUP BY to group records by transcript ID, allowing us to count the number of course results associated with each transcript. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of course results is at least 2, ensuring we only get transcripts with two or more course results. 4. Join Structure: Use an INNER JOIN between the Transcripts and Transcript_Contents tables based on the transcript ID to relate transcripts to their course results.","572":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"people.Name\" and \"people.Birth_Date\". 2. Condition Structure: No specific filtering condition is required since we want all people and their birth dates. 3. Join Structure: No JOIN is needed since all necessary information is available in the \"people\" table. 4. Aggregation Structure: No aggregation function is needed here, but use ORDER BY to sort the results in alphabetical order based on \"people.Name\".","573":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct fields, which are \"VOTES.state\" and \"VOTES.created.\" 2. Condition Structure: No specific filtering condition is needed, as we want all distinct states and their corresponding created times. 3. Join Structure: No JOIN is necessary since we are only interested in the \"VOTES\" table for this query. 4. Aggregation Structure: Use DISTINCT to ensure that we only get unique combinations of state and created time.","574":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its population. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the countrylanguage table on the CountryCode to link cities with their languages. 3. Condition Structure: Use a WHERE clause to filter for cities where the language is 'English'. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the results to the top entry to find the city with the largest population that uses English.","575":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, middle name, last name, and student ID of students. Use the FROM clause to specify the Students table and join it with the Student_Enrolment table to link students with their enrollment records. 2. Condition Structure: Use a HAVING clause to filter for students who are enrolled in exactly 2 degree programs in one semester. This will require grouping by student ID. 3. Join Structure: Use an INNER JOIN between the Students and Student_Enrolment tables based on student ID to connect student details with their enrollment records. 4. Aggregation Structure: Use COUNT to count the number of degree programs each student is enrolled in, and filter for those with a count of 2 using the HAVING clause.","576":"1. Sequential Structure: Start with the SELECT clause to retrieve the semester name and ID. Use the FROM clause to specify the Semesters table. 2. Join Structure: Join the Semesters table with the Student_Enrolment table on the semester_id to link student registrations to their respective semesters. 3. Aggregation Structure: Use GROUP BY to group the results by semester_id and semester_name, allowing us to count the number of registrations for each semester. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of registrations in descending order and limit the results to the top entry to find the semester with the most registrations.","577":"1. Sequential Structure: Start with the SELECT clause to retrieve the address ID, line 1, and line 2 from the Addresses table. Use the FROM clause to specify the Addresses table. 2. Join Structure: Join the Addresses table with the Students table to relate addresses to students based on the permanent and current address IDs. 3. Aggregation Structure: Use GROUP BY to group the results by address ID to count the number of students associated with each address. 4. Condition Structure: Apply a HAVING clause to filter for the address with the maximum number of students.","578":"1. Sequential Structure: Start with the SELECT clause to specify the maximum number of final tables made by poker players. 2. Condition Structure: Use a WHERE clause to filter for poker players whose earnings are less than 200000. 3. Join Structure: Use a JOIN clause to combine the \"poker_player\" and \"people\" tables based on the shared key \"People_ID\". 4. Aggregation Structure: Use the MAX function to find the maximum number of final tables made among the filtered poker players.","579":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Name\" of the countries that have either English or Dutch as an official language. 2. Condition Structure: Use a WHERE clause to filter for records where \"countrylanguage.Language\" is either 'English' or 'Dutch' and \"countrylanguage.IsOfficial\" is 1 (indicating that it is an official language). 3. Join Structure: Use a JOIN between the \"country\" and \"countrylanguage\" tables based on \"country.Code\" to link each country with its respective languages. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique country names are returned.","580":"1. Sequential Structure: Start with the SELECT clause to retrieve the semester ID. Use the FROM clause to specify the Semesters table. 2. Join Structure: Use JOINs to connect the Semesters table with the Student_Enrolment table on semester_id, and then join with the Degree_Programs table on degree_program_id to filter for both Masters and Bachelors students. 3. Condition Structure: Use a WHERE clause to filter for degree programs that are either 'Masters' or 'Bachelors'. 4. Aggregation Structure: Use GROUP BY to group by semester_id and apply a HAVING clause to ensure that both degree types are present in the results.","581":"1. Sequential Structure: Start with the SELECT clause to retrieve the official language. Use the FROM clause to specify the country table, and then join it with the countrylanguage table to get the official languages associated with each country. 2. Condition Structure: Use a WHERE clause to filter for the country where the head of state is 'Beatrix'. 3. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the country code to relate the country with its official languages. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","582":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct languages from the \"countrylanguage\" table. 2. Condition Structure: No specific filtering condition is needed since we want to count all distinct languages. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"countrylanguage\" table. 4. Aggregation Structure: Use COUNT(DISTINCT countrylanguage.Language) to count the unique languages.","583":"1. Sequential Structure: Start with the SELECT clause to retrieve the semester name from the Semesters table. Use the FROM clause to specify the Semesters table. 2. Condition Structure: Use a WHERE clause to filter semesters that do not have any students enrolled. This can be achieved by checking for semesters that do not exist in the Student_Enrolment table. 3. Join Structure: Use a LEFT JOIN between the Semesters table and the Student_Enrolment table on the semester_id to identify semesters without any corresponding student enrollments. 4. Aggregation Structure: Not needed, as we are simply filtering for semesters without enrollments rather than aggregating data.","584":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of unique official languages. Use the FROM clause to specify the countrylanguage table. 2. Condition Structure: Use a WHERE clause to filter for countries that were founded before 1930 by joining with the country table and applying the condition on the IndepYear. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Use the COUNT(DISTINCT Language) function to count the unique official languages from the filtered results.","585":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of poker players. 2. Condition Structure: No specific filtering condition is needed since we want to count all poker players. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"poker_player\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of poker players.","586":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"poker_player.Earnings\". 2. Condition Structure: No specific filtering condition is required since we want to list all poker players' earnings. 3. Join Structure: No JOIN is necessary as all required information is available in the \"poker_player\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the earnings in descending order.","587":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" and \"poker_player.Earnings\" fields. 2. Condition Structure: No specific filtering condition is needed, as we want to return all poker players. 3. Join Structure: Use a JOIN between the \"people\" and \"poker_player\" tables based on the \"People_ID\" to associate each poker player with their respective name. 4. Aggregation Structure: No aggregation is needed, but we will apply ORDER BY to sort the results by \"poker_player.Earnings\" in descending order.","588":"1. Sequential Structure: Start with the SELECT clause to retrieve the birth date of the poker player. Use the FROM clause to specify the poker_player table, and then join it with the people table to access the birth date. 2. Condition Structure: Use a WHERE clause to filter for the poker player with the lowest earnings. 3. Join Structure: Use an INNER JOIN between the poker_player and people tables based on the People_ID to relate the poker player's earnings with their birth date. 4. Aggregation Structure: Use the MIN function to find the lowest earnings among the poker players, which will be used in the WHERE clause to filter the relevant player.","589":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the maximum and minimum share values from the TV series. 2. Aggregation Structure: Use the MAX and MIN functions to calculate the maximum and minimum share for the TV series. 3. Join Structure: No JOIN is required since all necessary information is available in the \"TV_series\" table. 4. Condition Structure: No specific filtering condition is needed as we want to calculate the maximum and minimum share across all TV series.","590":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, middle name, last name, student ID, and the count of enrollments. Use the FROM clause to specify the Students table and join it with the Student_Enrolment table to link students with their enrollments. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the student with the maximum number of enrollments. 3. Join Structure: Use an INNER JOIN between the Students and Student_Enrolment tables based on the student ID to connect student details with their enrollment records. 4. Aggregation Structure: Use COUNT to aggregate the number of enrollments per student and apply GROUP BY on the student ID to group the results. Use the ORDER BY clause to sort by the count of enrollments in descending order and limit the result to the top entry to find the student with the most enrollments.","591":"1. Sequential Structure: Start with the SELECT clause to retrieve the Money Rank of the poker player. Use the FROM clause to specify the poker_player table. 2. Join Structure: Use an INNER JOIN between the poker_player and people tables based on the People_ID to connect poker players with their respective height information. 3. Condition Structure: Apply a WHERE clause to filter for the tallest poker player by using the MAX function on the Height column from the people table. 4. Aggregation Structure: Use the MAX function to find the maximum height and filter the results to get the Money Rank of the player with that height.","592":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Join Structure: Use JOIN to connect the country table with the countrylanguage table based on the CountryCode to get the language information for each country. 3. Condition Structure: Use a GROUP BY clause to group the results by country name, and apply a HAVING clause to filter for countries that have both English and French as official languages. 4. Aggregation Structure: Use COUNT to ensure that each country has both languages as official, checking that the count of distinct languages for each country is equal to 2 (for English and French).","593":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Cartoon.Title\" and \"Cartoon.Directed_by.\" 2. Condition Structure: No specific filtering condition is needed, as we want to list all cartoons. 3. Join Structure: Use a JOIN between the \"Cartoon\" and \"TV_Channel\" tables based on the \"Channel\" to link each cartoon with its respective channel. 4. Aggregation Structure: No aggregation is needed, but apply ORDER BY on \"Cartoon.Original_air_date\" to order the results by the air date of the cartoons.","594":"1. Sequential Structure: Start with the SELECT clause to retrieve the semester name from the Semesters table. Use the FROM clause to specify the Semesters table. 2. Condition Structure: Use a WHERE clause to filter for semesters that do not have any students enrolled. This can be achieved by checking for semesters that do not exist in the Student_Enrolment table. 3. Join Structure: Not required, as we are only interested in the Semesters table and filtering based on the absence of related records in the Student_Enrolment table. 4. Aggregation Structure: Not needed, as we are simply retrieving semester names without any aggregation.","595":"1. Sequential Structure: Start with the SELECT clause to retrieve the Money Rank of the poker player. Use the FROM clause to specify the poker_player table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the poker player with the greatest height. 3. Join Structure: Use an INNER JOIN between the poker_player and people tables based on the People_ID to relate poker players to their respective height. 4. Aggregation Structure: Use the MAX function to find the maximum height and filter the results to get the corresponding Money Rank of the poker player with that height.","596":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the pixel aspect ratio and the country of the TV channels. 2. Condition Structure: Use a WHERE clause to filter for TV channels where the language is not 'English'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"TV_Channel\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the pixel aspect ratio and country for the specified condition.","597":"1. Sequential Structure: Start with the SELECT clause to retrieve the mean life expectancy. Use the FROM clause to specify the country table. 2. Condition Structure: Use a WHERE clause to filter for countries where English is not the official language. This involves checking the countrylanguage table for entries where the language is 'English' and IsOfficial is 1, and excluding those countries. 3. Join Structure: Use a JOIN between the country and countrylanguage tables based on the country code to relate countries with their languages. 4. Aggregation Structure: Use the AVG function to calculate the mean life expectancy of the filtered countries.","598":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"VOTES.created\" field, as we are interested in the last date created of votes. 2. Condition Structure: Apply a WHERE clause to filter the records for the state 'CA'. 3. Join Structure: No JOIN is necessary here since we are only querying the \"VOTES\" table for the specified state. 4. Aggregation Structure: Use the MAX function to find the latest date in the \"VOTES.created\" column for the filtered records.","599":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"country.Region\" and \"country.Population\" for Angola. 2. Condition Structure: Apply a WHERE clause to filter for the specific country, which is \"Angola.\" 3. Join Structure: No JOIN is necessary here, as the information about the region and population is available within the \"country\" table. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the region and population for Angola.","600":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct continents. Use the FROM clause to specify the countrylanguage table, as we need to filter languages spoken in different countries. 2. Condition Structure: Use the WHERE clause to filter for records where the language is 'Chinese'. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries and continents. 4. Aggregation Structure: Use the COUNT(DISTINCT continent) function to count the number of unique continents where Chinese is spoken.","601":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" of the poker players. 2. Condition Structure: Apply a WHERE clause to filter for poker players whose \"poker_player.Earnings\" are above 300000. 3. Join Structure: Use a JOIN between the \"poker_player\" and \"people\" tables based on \"poker_player.People_ID\" and \"people.People_ID\" to associate each poker player with their respective name. 4. Aggregation Structure: No aggregation is needed here, as we are simply filtering and retrieving names based on the earnings condition.","602":"1. Sequential Structure: Start with the SELECT clause to retrieve the language and its percentage. Use the FROM clause to specify the countrylanguage table and JOIN it with the country table to filter by continent. 2. Condition Structure: Use a WHERE clause to filter for countries that are located in the 'Asia' continent. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Use GROUP BY to group the results by language and SUM to calculate the total percentage of each language across all Asian countries. Then, use ORDER BY to sort the results in descending order of the total percentage and limit the results to get the most popular language.","603":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Cartoon.Production_code\" and \"Cartoon.Channel.\" 2. Condition Structure: No specific filtering condition is needed, but we will need to order the results to find the most recently aired cartoon. 3. Join Structure: Use a JOIN between the \"Cartoon\" and \"TV_Channel\" tables based on the \"Channel\" to link each cartoon with its respective channel. 4. Aggregation Structure: Use ORDER BY on \"Cartoon.Original_air_date\" in descending order to get the most recently aired cartoon, and apply LIMIT 1 to select only that cartoon.","604":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count distinct nationalities from the \"people\" table. 2. Condition Structure: No specific filtering condition is needed since we want to count all distinct nationalities present in the table. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"people\" table. 4. Aggregation Structure: Use COUNT(DISTINCT people.Nationality) to count the unique nationalities.","605":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population and maximum GNP. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter records for countries that are in the continent of Asia. 3. Aggregation Structure: Use SUM to calculate the total population and MAX to find the maximum GNP for the filtered records.","606":"1. Sequential Structure: Start with the SELECT clause to specify the average earnings of poker players. 2. Aggregation Structure: Use the AVG function to calculate the average of the \"poker_player.Earnings\" field. 3. Condition Structure: No specific filtering condition is needed since we want the average earnings across all poker players. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"poker_player\" table.","607":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct degree programs. 2. Condition Structure: No specific filtering condition is needed since we want to count all different degrees offered. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Degree_Programs\" table. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the unique degree program IDs in the \"Degree_Programs\" table.","608":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of cartoons. Use the FROM clause to specify the Cartoon table. 2. Condition Structure: Apply a WHERE clause to filter for cartoons that are on the TV Channel with the series name \"Sky Radio\". 3. Join Structure: Use an INNER JOIN between the Cartoon and TV_Channel tables based on the Channel ID to connect cartoons with their respective TV channels. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified condition without any aggregation.","609":"1. Sequential Structure: Start with the SELECT clause to retrieve the country and the count of TV channels. Use the FROM clause to specify the TV_Channel table. 2. Aggregation Structure: Use the COUNT function to count the number of TV channels per country. Apply GROUP BY to group the results by country. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of TV channels, and limit the results to the top entry to find the country with the most channels. 4. Join Structure: Not required, as all necessary data is available in the TV_Channel table.","610":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" and \"poker_player.Earnings\" fields. 2. Condition Structure: No specific filtering condition is needed, as we want to list all poker players. 3. Join Structure: Use a JOIN between the \"people\" and \"poker_player\" tables based on the \"People_ID\" to associate each poker player with their respective name. 4. Aggregation Structure: Use ORDER BY in descending order on \"poker_player.Earnings\" to sort the results by earnings.","611":"1. Sequential Structure: Start with the SELECT clause to retrieve the continent and the count of languages spoken. Use the FROM clause to specify the country table and JOIN it with the countrylanguage table to link countries with their languages. 2. Aggregation Structure: Use COUNT to count the number of distinct languages spoken per continent. Apply GROUP BY to group the results by continent. 3. Condition Structure: No specific condition is needed in the WHERE clause since we want to count all languages for each continent. 4. Order Structure: Use ORDER BY to sort the results by the count of languages in descending order, and limit the results to the top one to find the continent that speaks the most languages.","612":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, middle name, and last name of students. Use the FROM clause to specify the Students table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the first student based on the registration date. 3. Join Structure: Not required, as all necessary data is contained within the Students table. 4. Aggregation Structure: Use ORDER BY to sort the results by the date of first registration in ascending order and limit the result to the first entry to get the earliest registered student.","613":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the first name, middle name, and last name of the students. 2. Condition Structure: No specific filtering condition is needed since we want to find the earliest graduate based on the registration date. 3. Join Structure: No JOIN is required as all necessary information is available in the \"Students\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"Students.date_first_registered\" to find the earliest graduate and apply LIMIT 1 to select the student with the earliest registration date.","614":"1. Sequential Structure: Start with the SELECT clause to retrieve the continent name from the country table. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for the country name 'Anguilla' to get the specific continent associated with it. 3. Join Structure: Not required, as we only need data from the country table and can directly filter by country name. 4. Aggregation Structure: Not needed, as we are retrieving a specific record without any aggregation.","615":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Content\" of the series named \"Sky Radio\". 2. Condition Structure: Use a WHERE clause to filter for the series name \"Sky Radio\". 3. Join Structure: A JOIN is necessary to connect the \"TV_Channel\" table with the \"TV_series\" table based on the shared \"Channel\" key. 4. Aggregation Structure: No aggregation is needed since we are retrieving a specific field based on a condition.","616":"1. Sequential Structure: Start with the SELECT clause to retrieve the package option from the TV_Channel table. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for channels that do not have any cartoons directed by 'Ben Jones'. This will involve a subquery to identify channels that have cartoons directed by 'Ben Jones'. 3. Join Structure: Use a LEFT JOIN between the TV_Channel and Cartoon tables based on the channel ID to connect TV channels with their cartoons. 4. Aggregation Structure: Not needed, as we are filtering based on the existence of records rather than aggregating data.","617":"1. Sequential Structure: Start with the SELECT clause to specify the \"Cartoon.Title\" of the cartoons directed by \"Ben Jones\". 2. Condition Structure: Use a WHERE clause to filter for cartoons where \"Cartoon.Directed_by\" is equal to 'Ben Jones'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Cartoon\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of cartoons that meet the specified condition.","618":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"poker_player.Final_Table_Made\" and \"poker_player.Best_Finish\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all poker players' final tables made and best finishes. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"poker_player\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields for all poker players.","619":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of people from the \"people\" table. Use the FROM clause to specify the \"people\" table. 2. Condition Structure: Use a WHERE clause to filter for people whose IDs are not present in the \"poker_player\" table, indicating they do not play poker. 3. Join Structure: Not required, as we are only filtering based on the absence of matching People_ID entries in the poker_player table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","620":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Region\" where the city \"Kabul\" is located. 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"Kabul.\" 3. Join Structure: Use a JOIN between the \"city\" and \"country\" tables based on the foreign key relationship where \"city.CountryCode\" matches \"country.Code.\" 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the region for a specific city.","621":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, middle name, last name, and student ID of students. Use the FROM clause to specify the Students table and JOIN it with the Student_Enrolment table to link students with their enrollment records. 2. Condition Structure: Use a GROUP BY clause to group records by student ID, first name, middle name, and last name. Apply a HAVING clause to filter groups where the count of degree programs (from the Student_Enrolment table) is exactly 2, ensuring we only get students enrolled in two degree programs in one semester. 3. Join Structure: Use an INNER JOIN between the Students and Student_Enrolment tables based on student ID to connect student details with their enrollment records. 4. Aggregation Structure: Use COUNT to aggregate the number of degree programs each student is enrolled in and filter for those with exactly two.","622":"1. Sequential Structure: Start with the SELECT clause to retrieve the last names of students. Use the FROM clause to specify the Students table. 2. Condition Structure: Apply a WHERE clause to filter students who currently live in North Carolina. Additionally, use a subquery in the WHERE clause to ensure that these students have not registered in any degree program. 3. Join Structure: Use an INNER JOIN between the Students table and the Addresses table based on the current_address_id to link students with their address information. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on conditions without any aggregation.","623":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"TV_Channel.Package_Option\" for the specified series name. 2. Condition Structure: Apply a WHERE clause to filter for records where \"TV_Channel.series_name\" is 'Sky Radio.' 3. Join Structure: Use a JOIN between the \"TV_Channel\" and \"TV_series\" tables based on the foreign key relationship where \"TV_series.Channel\" matches \"TV_Channel.id\" to link the channels with their respective series. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the package options for the specified series.","624":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Join Structure: Use JOIN to connect the country table with the countrylanguage table based on the CountryCode to get the languages spoken in each country. 3. Condition Structure: Use a GROUP BY clause to group the results by country name, and apply a HAVING clause to filter for countries that have both English and French as official languages. 4. Aggregation Structure: Use COUNT to ensure that both languages are present for each country in the HAVING clause.","625":"1. Sequential Structure: Start with the SELECT clause to retrieve the course names from the Courses table. Use the FROM clause to specify the Courses table. 2. Join Structure: Since we need to find courses that have students enrolled, we will join the Courses table with the Student_Enrolment_Courses table on the course_id. 3. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in all courses that have at least one student enrolled. 4. Aggregation Structure: Not required, as we are simply retrieving course names without any aggregation.","626":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"poker_player.Earnings\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all poker players' earnings. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"poker_player\" table. 4. Aggregation Structure: No aggregation function is needed, but we will use ORDER BY to sort the earnings in descending order.","627":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of TV channels. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Apply a WHERE clause to filter for channels that do not have any cartoons directed by 'Ben Jones'. This will involve checking the absence of such cartoons in the Cartoon table. 3. Join Structure: Use a LEFT JOIN between the TV_Channel and Cartoon tables based on the channel ID to identify channels and their associated cartoons. 4. Aggregation Structure: Use a WHERE clause with a subquery to ensure that the selected channel IDs do not appear in the Cartoon table for cartoons directed by 'Ben Jones'.","628":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names from the TV_Channel table. Use the FROM clause to specify the TV_Channel table and JOIN it with the Cartoon table to link cartoons with their respective channels. 2. Condition Structure: Use the WHERE clause to filter for cartoons that were written by 'Todd Casey'. 3. Join Structure: Use an INNER JOIN between the TV_Channel and Cartoon tables based on the channel ID to connect cartoons to their respective channels. 4. Aggregation Structure: Not needed, as we are simply retrieving distinct country names without any aggregation.","629":"1. Sequential Structure: Start with the SELECT clause to retrieve the language and the count of TV channels. Use the FROM clause to specify the TV_Channel table. 2. Aggregation Structure: Use the COUNT function to count the number of TV channels for each language. Apply GROUP BY to group the results by language. 3. Condition Structure: Use the HAVING clause to filter for the language that is used the least number of times across TV channels. 4. Order Structure: Use ORDER BY to sort the results by the count of TV channels in ascending order and limit the results to get the least used language.","630":"1. Sequential Structure: Start with the SELECT clause to specify the \"Cartoon.Title\" of the cartoons directed by either Ben Jones or Brandon Vietti. 2. Condition Structure: Use a WHERE clause to filter for cartoons where \"Cartoon.Directed_by\" is either 'Ben Jones' or 'Brandon Vietti'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Cartoon\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of cartoons that meet the specified conditions.","631":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum count of course occurrences and the corresponding enrollment ID. Use the FROM clause to specify the Transcript_Contents table and join it with the Student_Enrolment_Courses table to link course occurrences with their enrollment IDs. 2. Aggregation Structure: Use COUNT to aggregate the number of times each course appears in the Transcript_Contents table. This will allow us to determine the maximum number of occurrences. 3. Grouping Structure: Use GROUP BY to group the results by the student_course_id to count occurrences for each course. 4. Condition Structure: Use a HAVING clause to filter for the maximum count of occurrences, ensuring we only retrieve the course with the highest number of appearances in transcripts.","632":"1. Sequential Structure: Start with the SELECT clause to retrieve the transcript date and ID. Use the FROM clause to specify the Transcripts table. 2. Aggregation Structure: Use GROUP BY to group records by transcript ID, allowing us to count the number of courses listed in each transcript. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of courses is at least 2, ensuring we only get transcripts with two or more courses. 4. Join Structure: Use an INNER JOIN between the Transcripts and Transcript_Contents tables based on the transcript ID to relate transcripts to their corresponding courses.","633":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Name\" of the country with the shortest life expectancy in Asia. 2. Condition Structure: Use a WHERE clause to filter for countries in the \"Asia\" continent. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"country.LifeExpectancy\" to rank countries by life expectancy and apply LIMIT 1 to select the country with the shortest life expectancy.","634":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the episode and its rating from the TV_series table. 2. Condition Structure: No specific filtering condition is required since we want all episodes and their ratings. 3. Join Structure: A JOIN is necessary to connect the TV_series table with the TV_Channel table based on the Channel ID. 4. Ordering Structure: Use ORDER BY to sort the results by the rating in descending order to get the highest-rated episodes first.","635":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the language and the count of TV channels. 2. Condition Structure: No specific filtering condition is required since we want to count all TV channels by language. 3. Grouping Structure: Use GROUP BY on \"TV_Channel.Language\" to count the number of channels for each language. 4. Aggregation Structure: Use COUNT to calculate the number of TV channels for each language. 5. Join Structure: No JOIN is needed since all necessary information is available in the \"TV_Channel\" table.","636":"1. Sequential Structure: Start with the SELECT clause to retrieve the semester ID. Use the FROM clause to specify the Student_Enrolment table. 2. Join Structure: Join the Student_Enrolment table with the Degree_Programs table on the degree_program_id to filter for both Master and Bachelor students. 3. Condition Structure: Use a WHERE clause to filter for the degree programs that correspond to Master and Bachelor students. 4. Aggregation Structure: Use GROUP BY to group by semester_id and HAVING to ensure that both Master and Bachelor students are enrolled in the same semester.","637":"1. Sequential Structure: Start with the SELECT clause to retrieve the course name. Use the FROM clause to specify the Courses table. 2. Join Structure: Join the Courses table with the Student_Enrolment_Courses table on the course_id to link courses with their enrollments. 3. Aggregation Structure: Use GROUP BY to group the results by course_id, allowing us to count the number of students enrolled in each course. 4. Condition Structure: Use ORDER BY to sort the results by the count of students enrolled in descending order and limit the results to the top one to get the course with the most students enrolled.","638":"1. Sequential Structure: Start with the SELECT clause to retrieve the series name and country from the TV_Channel table. Use the FROM clause to specify the TV_Channel table. 2. Join Structure: Use an INNER JOIN to connect the TV_Channel table with the Cartoon table based on the Channel ID, which is a common key between the two tables. 3. Condition Structure: Apply a WHERE clause to filter for cartoons directed by either Ben Jones or Michael Chang. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","639":"1. Sequential Structure: Start with the SELECT clause to specify the total surface area of the countries in the Caribbean region. 2. Aggregation Structure: Use the SUM function to calculate the total surface area for the countries in the specified region. 3. Condition Structure: Apply a WHERE clause to filter for countries that belong to the 'Caribbean' region. 4. Join Structure: No JOIN is needed since all necessary information is available in the \"country\" table.","640":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"people.Name\". 2. Condition Structure: Use a WHERE clause to filter for people whose nationality is not \"Russia\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"people\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving names based on the specified condition.","641":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"transcript_date\" from the \"Transcripts\" table, as the question asks for the last transcript release date. 2. Condition Structure: No specific filtering condition is needed since we want the last transcript release date. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"Transcripts.transcript_date\" to rank the transcripts by date and apply LIMIT 1 to select the most recent date.","642":"1. Sequential Structure: Start with the SELECT clause to retrieve the degree program ID and the degree summary name. Use the FROM clause to specify the Degree_Programs table. 2. Join Structure: Use an INNER JOIN between the Degree_Programs table and the Student_Enrolment table based on the degree_program_id to relate the degree programs with their enrollments. 3. Aggregation Structure: Use GROUP BY to group the results by degree_program_id and degree_summary_name, allowing us to count the number of students enrolled in each program. 4. Condition Structure: Apply a HAVING clause to filter for the degree program with the maximum number of students enrolled, using the COUNT function to determine the number of enrollments per program.","643":"1. Sequential Structure: Start with the SELECT clause to specify the count of TV channels that use the English language. 2. Condition Structure: Use a WHERE clause to filter for channels where \"TV_Channel.Language\" is 'English'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"TV_Channel\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of TV channels that meet the specified language condition.","644":"1. Sequential Structure: Start with the SELECT clause to retrieve the package options from the TV_Channel table. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for channels that do not have any cartoons directed by 'Ben Jones'. This will involve a subquery to identify channels that do have such cartoons. 3. Join Structure: Not required in the main query, but we will need to ensure that we are checking the relationship between the Cartoon and TV_Channel tables based on the Channel ID. 4. Aggregation Structure: Not needed, as we are simply retrieving package options without any aggregation.","645":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"Cartoon.Title\" for the cartoons directed by Ben Jones. 2. Condition Structure: Use a WHERE clause to filter for cartoons where \"Cartoon.Directed_by\" is equal to 'Ben Jones'. 3. Join Structure: A JOIN is necessary to connect the \"Cartoon\" table with the \"TV_Channel\" table based on the \"Channel\" field, but since we only need the title of the cartoons, we can focus on the \"Cartoon\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of cartoons that meet the specified condition.","646":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of degree programs. Use the FROM clause to specify the Degree_Programs table. 2. Condition Structure: Apply a WHERE clause to filter degree programs that belong to the engineering department by matching the department_id. 3. Join Structure: Use a JOIN clause to connect the Degree_Programs table with the Departments table based on the department_id to ensure we are only counting degrees from the engineering department. 4. Aggregation Structure: Use the COUNT function to aggregate the number of degree programs that meet the specified condition.","647":"1. Sequential Structure: Start with the SELECT clause to retrieve the degree summary name. Use the FROM clause to specify the Degree_Programs table. 2. Join Structure: Join the Degree_Programs table with the Student_Enrolment table on the degree_program_id to relate degree programs with their student enrollments. 3. Aggregation Structure: Use GROUP BY to group the results by degree_program_id and degree_summary_name, allowing us to count the number of students enrolled in each degree program. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of students in descending order and limit the results to the top one to find the degree summary name with the most students enrolled.","648":"1. Sequential Structure: Start with the SELECT clause to retrieve the department name and ID. Use the FROM clause to specify the Departments table. 2. Join Structure: Join the Departments table with the Degree_Programs table on the department_id to relate departments to their degrees. 3. Aggregation Structure: Use GROUP BY to group the results by department_id and department_name, allowing us to count the number of degrees associated with each department. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of degrees in descending order and limit the results to the top one to get the department with the most degrees.","649":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of countries. Use the FROM clause to specify the countrylanguage table, as it contains the language information linked to countries. 2. Join Structure: Use JOIN to connect the countrylanguage table with the country table based on the CountryCode to ensure we are counting countries that exist in the country table. 3. Condition Structure: Use a WHERE clause to filter for records where the language is either 'English' or 'Dutch'. To ensure we only count countries that speak both languages, we will group by the country code and use a HAVING clause. 4. Aggregation Structure: Use COUNT to count the number of distinct languages spoken by each country and filter for those countries that have both languages using the HAVING clause.","650":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country name and the count of TV channels. 2. Aggregation Structure: Use COUNT to calculate the number of TV channels for each country. 3. Grouping Structure: Use GROUP BY on \"TV_Channel.Country\" to count the number of channels for each country. 4. Ordering Structure: Use ORDER BY in descending order on the count of channels to rank countries by the number of TV channels they have. 5. Limiting Structure: Use LIMIT 1 to retrieve only the country with the most TV channels. 6. Join Structure: No JOIN is required since all necessary data is within the \"TV_Channel\" table.","651":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the distinct series names and contents from the TV_Channel table. 2. Condition Structure: No specific filtering condition is required since we want to count all different series and contents. 3. Join Structure: No JOIN is necessary as all required data is contained within the TV_Channel table. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the unique series names and contents in the TV_Channel table.","652":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population and the maximum GNP. Use the FROM clause to specify the country table, as it contains the GNP information. We will also need to join the city table to get the population data. 2. Condition Structure: Use a WHERE clause to filter for countries in the 'Asia' region, ensuring we only consider the relevant countries. 3. Join Structure: Use an INNER JOIN between the city and country tables based on the CountryCode to relate cities to their respective countries. 4. Aggregation Structure: Use SUM to calculate the total population of cities in Asia and MAX to find the largest GNP among those countries.","653":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Nationality\" since the question asks for the most common nationality. 2. Aggregation Structure: Use COUNT to determine the frequency of each nationality. 3. Grouping Structure: Use GROUP BY on \"people.Nationality\" to aggregate the results by each nationality. 4. Ordering Structure: Use ORDER BY in descending order on the count to rank nationalities by their frequency. 5. Limiting Structure: Use LIMIT 1 to retrieve only the most common nationality. 6. Join Structure: No JOIN is required since all necessary information is in the \"people\" table.","654":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"transcript_date\" from the \"Transcripts\" table, as the question asks for the last transcript released. 2. Condition Structure: No specific filtering condition is needed since we want the most recent transcript date. 3. Join Structure: No JOIN is necessary because all required information is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"Transcripts.transcript_date\" to rank the transcripts by date and apply LIMIT 1 to select the most recent one.","655":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"country.Name\" of the countries that became independent after 1950. 2. Condition Structure: Use a WHERE clause to filter for countries where \"country.IndepYear\" is greater than 1950. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of countries that meet the specified independence year condition.","656":"1. Sequential Structure: Start with the SELECT clause to retrieve the address ID and all address lines from the Addresses table. Use the FROM clause to specify the Addresses table. 2. Join Structure: Join the Addresses table with the Students table on the address ID to relate students to their permanent addresses. 3. Aggregation Structure: Use GROUP BY to group the results by address ID and address lines, allowing us to count the number of students associated with each address. 4. Condition Structure: Apply a HAVING clause to filter for the address that has the maximum count of students, ensuring we only get the address with the most students.","657":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the director's name and the count of cartoons they created. 2. Aggregation Structure: Use COUNT to calculate the number of cartoons for each director. 3. Grouping Structure: Use GROUP BY on \"Cartoon.Directed_by\" to count cartoons created by each director. 4. Join Structure: No JOIN is required since all necessary information is available in the \"Cartoon\" table.","658":"1. Sequential Structure: Start with the SELECT clause to retrieve the degree program ID and summary name. Use the FROM clause to specify the Degree_Programs table. 2. Aggregation Structure: Use GROUP BY to group the results by degree program ID to count the number of students enrolled in each program. 3. Condition Structure: Use the HAVING clause to filter for the program with the maximum number of students enrolled. 4. Join Structure: Use an INNER JOIN between the Student_Enrolment and Degree_Programs tables based on the degree_program_id to relate student enrollments to their respective degree programs.","659":"1. Sequential Structure: Start with the SELECT clause to retrieve the student ID, first name, middle name, last name, and the count of enrollments. Use the FROM clause to specify the Students table and JOIN it with the Student_Enrolment table to link students with their enrollments. 2. Aggregation Structure: Use COUNT to aggregate the number of enrollments for each student. Apply GROUP BY to group the results by student ID and their names. 3. Condition Structure: Use the ORDER BY clause to sort the results by the number of enrollments in descending order, and limit the results to get the student with the maximum enrollments. 4. Join Structure: Use an INNER JOIN between the Students and Student_Enrolment tables based on the student ID to connect student details with their enrollment records.","660":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct states from the AREA_CODE_STATE table. 2. Condition Structure: No specific filtering condition is needed since we want to count all unique states. 3. Join Structure: No JOIN is necessary as all required information is contained within the AREA_CODE_STATE table. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the number of unique states.","661":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Weekly_Rank\" for the specified episode. 2. Condition Structure: Use a WHERE clause to filter for the episode titled \"A Love of a Lifetime\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"TV_series\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","662":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Cartoon.Title\" for the cartoons that meet the specified condition. 2. Condition Structure: Use a WHERE clause to filter for records where the \"TV_Channel.series_name\" is \"Sky Radio.\" 3. Join Structure: Use a JOIN between the \"Cartoon\" and \"TV_Channel\" tables based on the \"Channel\" field to link cartoons with their respective TV channels. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the titles of the cartoons.","663":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the average of the \"transcript_date\" from the \"Transcripts\" table. 2. Condition Structure: No specific filtering condition is required since we want the average of all transcript dates. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use the AVG function to calculate the average of the \"transcript_date\".","664":"1. Sequential Structure: Start with the SELECT clause to specify the average earnings of poker players. 2. Aggregation Structure: Use the AVG function to calculate the average of the \"poker_player.Earnings\" field. 3. Condition Structure: No specific filtering condition is needed since we want the average earnings of all poker players. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"poker_player\" table.","665":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Continent\" for the specified country \"Anguilla.\" 2. Condition Structure: Apply a WHERE clause to filter for the country name \"Anguilla.\" 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"country\" table. 4. Aggregation Structure: No aggregation is needed since we are retrieving a single value based on the condition.","666":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct nationalities from the \"people\" table. 2. Condition Structure: No specific filtering condition is needed since we want to count all different nationalities. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"people\" table. 4. Aggregation Structure: Use COUNT(DISTINCT people.Nationality) to count the unique nationalities present in the table.","667":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population. Use the FROM clause to specify the country table, as it contains the population data. 2. Condition Structure: Use a WHERE clause to filter for countries that do not have English as an official language. This can be done by checking the countrylanguage table for entries where the language is not 'English' and is marked as official. 3. Join Structure: Use a JOIN between the country and countrylanguage tables based on the country code to relate the population data with the language data. 4. Aggregation Structure: Use the SUM function to calculate the total population of the filtered countries.","668":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Air_Date\" of the episode titled \"A Love of a Lifetime\". 2. Condition Structure: Use a WHERE clause to filter for the specific episode name \"A Love of a Lifetime\". 3. Join Structure: A JOIN is necessary to connect the \"TV_series\" table with the \"TV_Channel\" table based on the \"Channel\" foreign key. 4. Aggregation Structure: No aggregation is needed since we are retrieving a specific air date for a particular episode.","669":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Departments.department_description\" for the department whose name contains the specified substring. 2. Condition Structure: Use a WHERE clause with the LIKE operator to filter for department names that contain the substring 'computer'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Departments\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","670":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"countrylanguage.Language\" that is predominantly spoken in Aruba. 2. Condition Structure: Apply a WHERE clause to filter for the specific country name, which is \"Aruba.\" 3. Join Structure: Use a JOIN between the \"countrylanguage\" and \"country\" tables based on \"CountryCode\" to link the languages to their respective countries. 4. Aggregation Structure: Since we are looking for the predominantly spoken language, we will need to filter for the language with the highest percentage, which can be done using ORDER BY and LIMIT.","671":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of degree programs. Use the FROM clause to specify the Degree_Programs table. 2. Condition Structure: Apply a WHERE clause to filter degree programs that belong to the engineering department by matching the department_id. 3. Join Structure: Use a JOIN clause to connect the Degree_Programs table with the Departments table based on the department_id to ensure we are only counting degrees from the engineering department. 4. Aggregation Structure: Use the COUNT function to aggregate the number of degree programs offered by the engineering department.","672":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"Students.first_name,\" \"Students.middle_name,\" and \"Students.last_name.\" 2. Condition Structure: Apply a WHERE clause to filter for students enrolled in a Bachelor degree program. This will involve checking the \"Degree_Programs.degree_summary_name\" for \"Bachelor.\" 3. Join Structure: Use JOIN clauses to connect the \"Students\" table with the \"Student_Enrolment\" table based on \"student_id,\" and then join \"Student_Enrolment\" with \"Degree_Programs\" based on \"degree_program_id.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names of students who meet the criteria.","673":"1. Sequential Structure: Start with the SELECT clause to retrieve the average earnings of poker players. Use the FROM clause to specify the poker_player table and join it with the people table to access the height information. 2. Condition Structure: Use the WHERE clause to filter for poker players whose height is greater than 200. 3. Join Structure: Use an INNER JOIN between the poker_player and people tables based on the People_ID to relate poker players with their height. 4. Aggregation Structure: Use the AVG function to calculate the average earnings of the filtered poker players.","674":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"contestant_name\" from the \"CONTESTANTS\" table. 2. Condition Structure: Use a WHERE clause to filter out contestants whose names are 'Jessie Alloway'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"CONTESTANTS\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of contestants that meet the specified condition.","675":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the distinct series names and contents from the TV_Channel table. 2. Condition Structure: No specific filtering condition is required since we want to count all different series names and contents. 3. Join Structure: No JOIN is necessary as all required data is contained within the TV_Channel table. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the unique series names and contents.","676":"1. Sequential Structure: Start with the SELECT clause to retrieve the most popular language. Use the FROM clause to specify the countrylanguage table, as it contains the language data. 2. Condition Structure: Use a WHERE clause to filter for the country name 'Aruba' to focus on the relevant country. 3. Join Structure: Use JOIN clauses to connect the countrylanguage table with the country table based on the CountryCode to ensure we are looking at the correct country. 4. Aggregation Structure: Use GROUP BY to group the results by language and apply an ORDER BY clause to sort by the percentage in descending order, allowing us to select the most popular language.","677":"1. Sequential Structure: Start with the SELECT clause to specify the \"Episode\" from the \"TV_series\" table, as we want to list all episodes. 2. Condition Structure: No specific filtering condition is needed since we want to retrieve all episodes regardless of their ratings. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"TV_series\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the episodes based on their ratings in descending order.","678":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name. Use the FROM clause to specify the country table. 2. Join Structure: Join the country table with the countrylanguage table on the CountryCode to relate countries with their languages. 3. Aggregation Structure: Use GROUP BY to group the results by country, allowing us to count the number of languages spoken in each country. 4. Condition Structure: Use ORDER BY to sort the results by the count of languages in descending order and limit the results to the top entry to find the country that speaks the largest number of languages.","679":"1. Sequential Structure: Start with the SELECT clause to specify the total population of the Gelderland district. 2. Condition Structure: Use a WHERE clause to filter for cities that belong to the \"Gelderland\" district. 3. Join Structure: No JOIN is necessary since all required information is available in the \"city\" table. 4. Aggregation Structure: Use the SUM function to calculate the total population for the specified district.","680":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Condition Structure: Use a WHERE clause to filter countries based on their surface area being greater than the maximum surface area of any country in Europe. 3. Join Structure: Not required, as we only need data from the country table. 4. Aggregation Structure: Use a subquery to find the maximum surface area of countries in Europe, which will be used in the WHERE clause to filter the main query.","681":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the director's name and the count of cartoons directed by each. 2. Aggregation Structure: Use COUNT to calculate the number of cartoons directed by each director. 3. Grouping Structure: Use GROUP BY on \"Cartoon.Directed_by\" to count cartoons for each director. 4. Join Structure: No JOIN is required since all necessary data is within the \"Cartoon\" table.","682":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" of the poker players. 2. Condition Structure: No specific filtering condition is needed, as we want to list all poker players. 3. Join Structure: Use a JOIN between the \"people\" and \"poker_player\" tables based on \"People_ID\" to associate each poker player with their name. 4. Aggregation Structure: No aggregation is needed, but apply ORDER BY to sort the results by \"poker_player.Final_Table_Made\" in ascending order.","683":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter countries based on their surface area being greater than the maximum surface area of any country in Europe. 3. Join Structure: Not required, as we only need data from the country table and can filter based on the region. 4. Aggregation Structure: Use a subquery to find the maximum surface area of countries in Europe, which will be used in the WHERE clause to filter the countries with a greater area.","684":"1. Sequential Structure: Start with the SELECT clause to retrieve the Money Rank of the player. Use the FROM clause to specify the poker_player table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the player with the greatest earnings. 3. Join Structure: Not required, as we only need data from the poker_player table. 4. Aggregation Structure: Use the MAX function to find the maximum earnings and filter the results to get the corresponding Money Rank.","685":"1. Sequential Structure: Start with the SELECT clause to retrieve the official language. Use the FROM clause to specify the countrylanguage table, as we need to find the official language associated with a specific country. 2. Condition Structure: Use a WHERE clause to filter for the country whose head of state is 'Beatrix'. 3. Join Structure: Use a JOIN between the country and countrylanguage tables based on the CountryCode to link the country with its official language. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","686":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names from the TV_Channel table. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for countries that are not associated with cartoons written by 'Todd Casey'. 3. Join Structure: Use a LEFT JOIN between the TV_Channel and Cartoon tables based on the channel ID to connect countries with their cartoons. This will allow us to identify countries that do not have any cartoons written by Todd Casey. 4. Aggregation Structure: Not needed, as we are simply filtering records based on the presence or absence of a specific condition without any aggregation.","687":"1. Sequential Structure: Start with the SELECT clause to retrieve the course names and IDs from the Courses table. Use the FROM clause to specify the Courses table and join it with the Sections table to relate courses to their sections. 2. Join Structure: Use an INNER JOIN between the Courses and Sections tables based on the course_id to connect courses with their sections. 3. Aggregation Structure: Use GROUP BY to group the results by course_id, allowing us to count the number of sections for each course. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of sections is less than 2, ensuring we only get courses with fewer than two sections.","688":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the country. Use the FROM clause to specify the country table. 2. Aggregation Structure: Use GROUP BY to group the results by country code to count the number of languages spoken in each country. 3. Condition Structure: Use the HAVING clause to filter for the country with the maximum number of languages. 4. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the country code to relate countries with their languages.","689":"1. Sequential Structure: Start with the SELECT clause to retrieve the total surface area. Use the FROM clause to specify the country table. 2. Condition Structure: Use the WHERE clause to filter for countries that belong to the continents 'Asia' and 'Europe'. 3. Join Structure: Not required, as all necessary data is contained within the country table. 4. Aggregation Structure: Use the SUM function to calculate the total surface area of the selected countries.","690":"1. Sequential Structure: Start with the SELECT clause to retrieve the contestant number and name from the CONTESTANTS table. Use the FROM clause to specify the CONTESTANTS table and JOIN it with the VOTES table to link contestants with their votes. 2. Aggregation Structure: Use GROUP BY to group the results by contestant number and name, allowing us to count the votes for each contestant. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of votes in ascending order, so that the contestant with the least votes appears first. 4. Limiting Results: Use LIMIT to restrict the output to only the first result, which will be the contestant with the least votes.","691":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"TV_Channel.series_name\" which represents the name of the series. 2. Condition Structure: Apply a WHERE clause to filter for the specific episode titled \"A Love of a Lifetime.\" 3. Join Structure: Use a JOIN between the \"TV_series\" and \"TV_Channel\" tables based on the \"Channel\" to link each episode with its respective series. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the name of the series based on the episode title.","692":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names. Use the FROM clause to specify the country table and JOIN it with the countrylanguage table to link countries with their official languages. 2. Condition Structure: Use the WHERE clause to filter for records where the language is either 'English' or 'Dutch' and is marked as official. 3. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the CountryCode to get the names of countries that have the specified official languages. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","693":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the package option and series name from the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for channels that have high definition TV, indicated by the \"Hight_definition_TV\" column. 3. Join Structure: No JOIN is necessary since all required information is available in the \"TV_Channel\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the package choice and series name based on the specified condition.","694":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"TV_series.Episode\" for the specified TV series. 2. Condition Structure: Use a WHERE clause to filter for the records where \"TV_Channel.series_name\" matches \"Sky Radio.\" 3. Join Structure: Use a JOIN between the \"TV_series\" and \"TV_Channel\" tables based on the \"Channel\" to link each episode with its respective channel. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the episode information for the specified series.","695":"1. Sequential Structure: Start with the SELECT clause to retrieve the country of the TV channels. Use the FROM clause to specify the TV_Channel table, as it contains the country information. 2. Join Structure: Use JOIN clauses to connect the TV_Channel table with the Cartoon table and the TV_series table based on the channel ID. This will allow us to filter cartoons written by Todd Casey that are associated with the channels. 3. Condition Structure: Apply a WHERE clause to filter for cartoons that are written by 'Todd Casey'. 4. Aggregation Structure: Not needed, as we are simply retrieving the country names without any aggregation.","696":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"Cartoon.Title\". 2. Condition Structure: No specific filtering condition is required since we want to list all cartoon titles. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Cartoon\" table. 4. Aggregation Structure: No aggregation is needed; however, we will use ORDER BY to sort the titles in alphabetical order.","697":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"contestant_name\" from the \"CONTESTANTS\" table. 2. Condition Structure: Use a WHERE clause with the LIKE operator to filter for contestant names that contain the substring 'Al'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"CONTESTANTS\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving contestant names based on a specific condition.","698":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"first_name\" of the students whose permanent address is different from their current address. 2. Condition Structure: Use a WHERE clause to filter for students where \"Students.permanent_address_id\" is not equal to \"Students.current_address_id\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Students\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the first names of students that meet the specified condition.","699":"1. Sequential Structure: Start with the SELECT clause to retrieve the nationality from the people table. Use the FROM clause to specify the people table. 2. Aggregation Structure: Use GROUP BY to group records by nationality, allowing us to count the number of people for each nationality. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of people is two or more, ensuring we only get nationalities with at least two people. 4. Join Structure: Not required, as we only need data from the people table for this query.","700":"1. Sequential Structure: Start with the SELECT clause to retrieve the total count of languages. Use the FROM clause to specify the countrylanguage table. 2. Condition Structure: Apply a WHERE clause to filter records for the country with the name 'Aruba'. 3. Join Structure: Not required, as we can directly filter the countrylanguage table using the country name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of distinct languages used in Aruba.","701":"1. Sequential Structure: Start with the SELECT clause to retrieve the average life expectancy. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries that are in the continent of Africa and have a government form of 'Republic'. 3. Join Structure: Not required, as we only need data from the country table for this query. 4. Aggregation Structure: Use the AVG function to calculate the average life expectancy for the filtered countries.","702":"1. Sequential Structure: Start with the SELECT clause to retrieve the create dates, states, and phone numbers from the VOTES table. 2. Join Structure: Use an INNER JOIN between the VOTES table and the CONTESTANTS table based on the contestant_number to link votes to the corresponding contestant. 3. Condition Structure: Apply a WHERE clause to filter for votes that are associated with the contestant named 'Tabatha Gehling'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","703":"1. Sequential Structure: Start with the SELECT clause to specify the nationality and the count of people for each nationality. 2. Aggregation Structure: Use COUNT to calculate the number of people for each nationality. 3. Grouping Structure: Use GROUP BY on \"people.Nationality\" to aggregate the results by each nationality. 4. Join Structure: No JOIN is required since all necessary information is available in the \"people\" table.","704":"1. Sequential Structure: Start with the SELECT clause to specify the population of the city in the Gelderland district. 2. Condition Structure: Use a WHERE clause to filter for cities that are located in the \"Gelderland\" district. 3. Join Structure: No JOIN is necessary since all required information is available in the \"city\" table. 4. Aggregation Structure: Use SUM to calculate the total population of all cities in the Gelderland district.","705":"1. Sequential Structure: Start with the SELECT clause to retrieve the area code. Use the FROM clause to specify the AREA_CODE_STATE table. We will also need to join the VOTES table to count the votes per area code. 2. Join Structure: Use an INNER JOIN between the AREA_CODE_STATE and VOTES tables based on the state to connect area codes with the votes cast in those states. 3. Aggregation Structure: Use COUNT to aggregate the number of votes for each area code. We will group the results by area code to get the total votes per area code. 4. Condition Structure: Use ORDER BY to sort the results by the count of votes in descending order and limit the results to the top one to find the area code with the most votes.","706":"1. Sequential Structure: Start with the SELECT clause to specify the total surface area of countries in the Caribbean. 2. Condition Structure: Use a WHERE clause to filter for countries where the \"country.Continent\" is 'Carribean'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"country\" table. 4. Aggregation Structure: Use the SUM function to calculate the total surface area of the countries that meet the specified condition.","707":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of TV channels. Use the FROM clause to specify the TV_Channel table. 2. Aggregation Structure: Use GROUP BY to group the results by the channel ID, allowing us to count the number of TV series and cartoons associated with each channel. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of TV series and cartoons is greater than 2, ensuring we only get channels with more than 2 associated entries. 4. Join Structure: Use LEFT JOIN to combine the TV_Channel table with the TV_series and Cartoon tables based on the channel ID to count the total number of associated entries.","708":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Join Structure: Use JOIN to connect the country table with the countrylanguage table based on the CountryCode to get the languages spoken in each country. 3. Condition Structure: Use a GROUP BY clause to group the results by country name, and apply a HAVING clause to filter for countries that have both English and French as official languages. 4. Aggregation Structure: Use COUNT to ensure that only countries with both languages are selected, specifically checking for the presence of both languages in the results.","709":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name, middle name, and last name of the student. 2. Condition Structure: No specific filtering condition is needed since we are looking for the earliest graduate based on the registration date. 3. Join Structure: No JOIN is required as all necessary information is available in the \"Students\" table. 4. Aggregation Structure: Use ORDER BY on \"Students.date_first_registered\" in ascending order to find the earliest graduate and apply LIMIT 1 to select that student.","710":"1. Sequential Structure: Start with the SELECT clause to retrieve the area codes. Use the FROM clause to specify the VOTES table, as it contains the relevant voting information. 2. Condition Structure: Use a WHERE clause to filter votes for both contestants 'Tabatha Gehling' and 'Kelly Clauss'. This will involve checking for votes that match both contestants. 3. Join Structure: Use JOIN clauses to connect the VOTES table with the CONTESTANTS table based on the contestant number to filter by contestant names. 4. Aggregation Structure: Use GROUP BY to group the results by area code and apply a HAVING clause to ensure that only area codes with votes for both contestants are included.","711":"1. Sequential Structure: Start with the SELECT clause to specify the distinct types of government forms we want to count. 2. Condition Structure: Use a WHERE clause to filter for countries that are in the \"Africa\" continent. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: Use COUNT(DISTINCT country.GovernmentForm) to count the unique types of government forms present in Africa.","712":"1. Sequential Structure: Start with the SELECT clause to retrieve the average transcript date. 2. Aggregation Structure: Use the AVG function to calculate the average of the \"Transcripts.transcript_date\". 3. Condition Structure: No specific filtering condition is needed since we want the average of all transcript dates. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"Transcripts\" table.","713":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct departments. Use the FROM clause to specify the Departments table. 2. Join Structure: Use an INNER JOIN between the Departments and Degree_Programs tables based on the department_id to link departments with their offered degree programs. 3. Aggregation Structure: Use COUNT(DISTINCT) to count the unique departments that offer any degree program. 4. Condition Structure: No specific condition is needed since we want to count all departments that have at least one degree program.","714":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names of students. Use the FROM clause to specify the Students table. 2. Condition Structure: Use the WHERE clause to filter students based on two conditions: either their permanent address is in Haiti or their cell phone number matches '09700166582'. 3. Join Structure: An INNER JOIN is needed between the Students table and the Addresses table to access the country information for the permanent address of the students. 4. Aggregation Structure: Not required, as we are retrieving specific records based on the defined conditions without any aggregation.","715":"1. Sequential Structure: Start with the SELECT clause to specify the count of countries with a government form of 'republic'. 2. Condition Structure: Use a WHERE clause to filter for countries where \"country.GovernmentForm\" is equal to 'republic'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"country\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of countries that meet the specified condition.","716":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the section name and section description. 2. Condition Structure: No specific filtering condition is required since we want all sections and their descriptions. 3. Join Structure: No JOIN is needed since all necessary information is available in the \"Sections\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and descriptions of all sections.","717":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Air_Date\" of the TV series that has the specified episode title. 2. Condition Structure: Use a WHERE clause to filter for the episode titled \"A Love of a Lifetime\". 3. Join Structure: A JOIN is necessary to connect the \"TV_series\" table with the \"TV_Channel\" table based on the \"Channel\" foreign key. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the air date for a specific episode.","718":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" of poker players. 2. Condition Structure: No specific filtering condition is needed since we want all poker players' names. 3. Join Structure: Use a JOIN between the \"poker_player\" and \"people\" tables based on \"People_ID\" to link poker players with their corresponding names. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving names.","719":"1. Sequential Structure: Start with the SELECT clause to retrieve the continent and the count of distinct languages. Use the FROM clause to specify the country table and JOIN it with the countrylanguage table to link countries with their languages. 2. Aggregation Structure: Use COUNT(DISTINCT countrylanguage.Language) to count the number of distinct languages for each continent. 3. Grouping Structure: Use GROUP BY to group the results by continent to get the count of languages per continent. 4. Ordering Structure: Use ORDER BY to sort the results in descending order based on the count of distinct languages, and limit the results to get the continent with the most diverse languages.","720":"1. Sequential Structure: Start with the SELECT clause to retrieve the transcript ID and date. Use the FROM clause to specify the Transcripts table. 2. Aggregation Structure: Use a JOIN to connect the Transcripts table with the Transcript_Contents table based on the transcript ID. We will need to count the number of results (entries) in the Transcript_Contents for each transcript. 3. Grouping Structure: Use GROUP BY to group the results by transcript ID to count the number of results for each transcript. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of results in ascending order and limit the output to the first result to get the transcript with the least number of results.","721":"1. Sequential Structure: Start with the SELECT clause to retrieve the birth date of the poker player. Use the FROM clause to specify the poker_player table and join it with the people table to access the birth date. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the poker player with the lowest earnings. 3. Join Structure: Use an INNER JOIN between the poker_player and people tables based on the People_ID to connect poker players with their corresponding personal information. 4. Aggregation Structure: Use the MIN function to find the lowest earnings and filter the results accordingly to retrieve the birth date of the poker player with the lowest earnings.","722":"1. Sequential Structure: Start with the SELECT clause to retrieve the language and the count of channels. Use the FROM clause to specify the TV_Channel table. 2. Aggregation Structure: Use COUNT to count the number of channels for each language. 3. Grouping Structure: Use GROUP BY to group the results by language to get the count of channels for each language. 4. Condition Structure: Use the HAVING clause to filter for languages that are used by the least number of channels. This will require a subquery to find the minimum count of channels for any language.","723":"1. Sequential Structure: Start with the SELECT clause to retrieve the language used by the largest number of Asian nations. Use the FROM clause to specify the countrylanguage table and join it with the country table to filter by continent. 2. Condition Structure: Use a WHERE clause to filter for countries that are in the continent of Asia. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Use GROUP BY to group the results by language and COUNT to determine the number of countries using each language. Finally, use ORDER BY to sort the results in descending order based on the count and limit the results to the top entry to find the language used by the largest number of Asian nations.","724":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of TV channels. Use the FROM clause to specify the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for channels that do not have any cartoons directed by 'Ben Jones'. This will involve a subquery to identify channels that do have such cartoons. 3. Join Structure: Not required, as we are only filtering based on the Cartoon table's relationship with the TV_Channel table through the Channel field. 4. Aggregation Structure: Not needed, as we are simply retrieving IDs based on the specified conditions without any aggregation.","725":"1. Sequential Structure: Start with the SELECT clause to count the total number of poker players. We will use the COUNT function on the \"poker_player.Poker_Player_ID\" field. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all poker players. 3. Join Structure: No JOIN is necessary here, as we are only interested in the \"poker_player\" table for counting the players. 4. Aggregation Structure: Use COUNT to aggregate the number of poker players.","726":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"TV_series.Episode\" and \"TV_series.Rating\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve the top ratings. 3. Join Structure: A JOIN is necessary to connect the \"TV_series\" table with the \"TV_Channel\" table based on the shared \"Channel\" key. 4. Aggregation Structure: Use ORDER BY in descending order on \"TV_series.Rating\" to rank the series by their ratings and apply LIMIT 3 to select the top 3 highest-rated TV series.","727":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Sections.section_name\" and \"Sections.section_description\". 2. Condition Structure: No specific filtering condition is required since we want all sections and their descriptions. 3. Join Structure: No JOIN is needed since all necessary information is available in the \"Sections\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and descriptions of all sections.","728":"1. Sequential Structure: Start with the SELECT clause to retrieve the transcript date and transcript ID. Use the FROM clause to specify the Transcripts table. 2. Aggregation Structure: Use the COUNT function to count the number of results associated with each transcript. This will help identify the transcript with the least number of results. 3. Grouping Structure: Use GROUP BY to group the results by transcript ID, allowing us to count the number of entries for each transcript. 4. Condition Structure: Use the HAVING clause to filter for the minimum count of results, ensuring we only get the transcript with the least number of results.","729":"1. Sequential Structure: Start with the SELECT clause to specify the required fields, which are the maximum and minimum values of area codes. 2. Aggregation Structure: Use the MAX and MIN functions to calculate the maximum and minimum area codes. 3. Grouping Structure: No GROUP BY is needed since we want the overall maximum and minimum values across all area codes. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"AREA_CODE_STATE\" table.","730":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Weekly Rank\" of the TV series. 2. Condition Structure: Apply a WHERE clause to filter for the specific episode titled \"A Love of a Lifetime.\" 3. Join Structure: Use a JOIN between the \"TV_series\" and \"TV_Channel\" tables based on the \"Channel\" to link the series with its respective channel. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the \"Weekly Rank\" for the specified episode.","731":"1. Sequential Structure: Start with the SELECT clause to specify the maximum number of final tables made by poker players. 2. Condition Structure: Use a WHERE clause to filter for poker players whose earnings are below 200000. 3. Join Structure: Use a JOIN clause to combine the \"poker_player\" table with the \"people\" table based on the shared key \"People_ID\". 4. Aggregation Structure: Use the MAX function to find the maximum number of final tables made by the filtered poker players.","732":"1. Sequential Structure: Start with the SELECT clause to retrieve the languages. Use the FROM clause to specify the countrylanguage table. 2. Condition Structure: Apply a WHERE clause to filter for languages that are only used by a single country and have a republic government. This will involve checking the government form in the country table. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Use GROUP BY to group the results by language and apply a HAVING clause to filter for languages that are used by exactly one country.","733":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"country.Name\", \"country.Population\", and \"country.LifeExpectancy\" for the Asian country with the largest area. 2. Condition Structure: Use a WHERE clause to filter for countries in the \"Asia\" continent. 3. Aggregation Structure: Use ORDER BY in descending order on \"country.SurfaceArea\" to rank countries by their area and apply LIMIT 1 to select the country with the largest area. 4. Join Structure: No JOIN is needed since all necessary information is available in the \"country\" table.","734":"1. Sequential Structure: Start with the SELECT clause to retrieve the contestant numbers and names. Use the FROM clause to specify the CONTESTANTS table. 2. Aggregation Structure: Use GROUP BY to group the results by contestant number, allowing us to count the votes for each contestant. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of votes is at least 2, ensuring we only get contestants with two or more votes. 4. Join Structure: Use an INNER JOIN between the CONTESTANTS and VOTES tables based on contestant number to relate contestants with their votes.","735":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the pixel aspect ratio and the country of origin from the TV_Channel table. 2. Condition Structure: Use a WHERE clause to filter for TV channels where the language is not 'English'. 3. Join Structure: No JOIN is necessary since all required information is available in the TV_Channel table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields based on the condition.","736":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of official languages. Use the FROM clause to specify the countrylanguage table, as it contains the language data related to countries. 2. Condition Structure: Use the WHERE clause to filter for the country named 'Afghanistan' and ensure that the language is marked as official. 3. Join Structure: Use a JOIN between the country and countrylanguage tables based on the CountryCode to relate the languages to the specific country. 4. Aggregation Structure: Use the COUNT function to aggregate the number of official languages for Afghanistan.","737":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"country.Population\" and \"country.LifeExpectancy\" for Brazil. 2. Condition Structure: Apply a WHERE clause to filter for the specific country, which is \"Brazil.\" 3. Join Structure: No JOIN is necessary here, as the required information is available within the \"country\" table. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the population and life expectancy for Brazil.","738":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the degree summary name. 2. Condition Structure: No specific filtering condition is required since we want to count all distinct degree names. 3. Aggregation Structure: Use COUNT DISTINCT to count the number of different degree names offered. 4. Join Structure: No JOIN is needed since all necessary information is available in the \"Degree_Programs\" table.","739":"1. Sequential Structure: Start with the SELECT clause to specify the distinct forms of government we want to count. 2. Condition Structure: Use a WHERE clause to filter for countries that are located in the \"Africa\" continent. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: Use COUNT(DISTINCT country.GovernmentForm) to count the unique forms of government in Africa.","740":"1. Sequential Structure: Start with the SELECT clause to retrieve the average life expectancy. Use the FROM clause to specify the country table. 2. Condition Structure: Use a WHERE clause to filter for countries where English is not the official language. This involves checking the countrylanguage table for entries where the language is 'English' and IsOfficial is true, and then excluding those countries from the results. 3. Join Structure: Use a JOIN between the country and countrylanguage tables based on the CountryCode to relate countries with their languages. 4. Aggregation Structure: Use the AVG function to calculate the average life expectancy for the filtered countries.","741":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population. Use the FROM clause to specify the city table, and then join it with the country table to relate cities to their respective countries. 2. Condition Structure: Use a WHERE clause to filter for countries that do not have English as an official language. This will involve checking the countrylanguage table for the absence of 'English'. 3. Join Structure: Use JOINs between the city and country tables, and also include the countrylanguage table to filter based on the language spoken in each country. 4. Aggregation Structure: Use SUM to calculate the total population of cities in countries that do not speak English.","742":"1. Sequential Structure: Start with the SELECT clause to retrieve the average earnings of poker players. Use the FROM clause to specify the poker_player table and join it with the people table to access the height information. 2. Condition Structure: Use the WHERE clause to filter for poker players whose height is greater than 200. 3. Join Structure: Use an INNER JOIN between the poker_player and people tables based on the People_ID to relate poker players with their height. 4. Aggregation Structure: Use the AVG function to calculate the average earnings of the filtered poker players.","743":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the language and the count of TV channels that use each language. 2. Aggregation Structure: Use COUNT to calculate the number of TV channels for each language. 3. Grouping Structure: Use GROUP BY on \"TV_Channel.Language\" to aggregate the results by each language. 4. Join Structure: No JOIN is required since all necessary information is available in the \"TV_Channel\" table.","744":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Departments.department_description\" for the department whose name contains the word \"computer\". 2. Condition Structure: Use a WHERE clause with the LIKE operator to filter for department names that contain the word 'computer'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Departments\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","745":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries that are in the continent of Asia. 3. Aggregation Structure: Use the ORDER BY clause to sort the countries by life expectancy in ascending order and limit the result to the top entry to get the country with the lowest life expectancy. 4. Join Structure: Not required, as all necessary data is available in the country table.","746":"1. Sequential Structure: Start with the SELECT clause to retrieve the course names from the \"Courses\" table. 2. Condition Structure: No specific filtering condition is needed, as we want to find all courses that have students enrolled. 3. Join Structure: Use a JOIN between the \"Courses\" table and the \"Student_Enrolment_Courses\" table based on the course_id to link courses with their enrollments. 4. Aggregation Structure: No aggregation is needed, but we will use DISTINCT to ensure that each course name is listed only once.","747":"1. Sequential Structure: Start with the SELECT clause to retrieve the series name and country from the TV_Channel table. Use the FROM clause to specify the TV_Channel table. 2. Join Structure: Use an INNER JOIN between the TV_Channel and Cartoon tables based on the Channel ID to connect TV channels with the cartoons they are playing. 3. Condition Structure: Apply a WHERE clause to filter for cartoons directed by either 'Ben Jones' or 'Michael Chang'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","748":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Region\" and \"country.Population\" for Angola. 2. Condition Structure: Use a WHERE clause to filter for the country where \"country.Name\" is 'Angola'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the region and population for a specific country.","749":"1. Sequential Structure: Start with the SELECT clause to specify the count of TV channels that use the English language. 2. Condition Structure: Use a WHERE clause to filter for channels where \"TV_Channel.Language\" is 'English'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"TV_Channel\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of TV channels that meet the specified language condition.","750":"1. Sequential Structure: Start with the SELECT clause to specify all the fields from the \"Students\" table that we want to retrieve. 2. Condition Structure: No specific filtering condition is needed since we want to list all student details. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Students\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results in reversed lexicographical order based on the last name, followed by the first name and middle name.","751":"1. Sequential Structure: Start with the SELECT clause to specify the count of countries that have a government form of \"republic\". 2. Condition Structure: Use a WHERE clause to filter for countries where \"country.GovernmentForm\" is equal to 'republic'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"country\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of countries that meet the specified condition.","752":"1. Sequential Structure: Start with the SELECT clause to retrieve the degree program ID, which represents the kind of program. Use the FROM clause to specify the Student_Enrolment table, as it contains the enrollment information. 2. Aggregation Structure: Use GROUP BY to group the results by degree program ID to count the number of students enrolled in each program. 3. Aggregation Structure: Use COUNT to count the number of students enrolled in each degree program. 4. Condition Structure: Apply a HAVING clause to filter for the program with the maximum number of enrollments, which can be achieved using a subquery to find the maximum count of students enrolled in any program.","753":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct departments offering degrees. Use the FROM clause to specify the Degree_Programs table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to count all distinct departments that have degree programs. 3. Join Structure: Use a JOIN clause to connect the Degree_Programs table with the Departments table based on the department_id to ensure we are counting valid departments. 4. Aggregation Structure: Use the COUNT function to count the distinct department IDs from the Departments table that are linked to the Degree_Programs table.","754":"1. Sequential Structure: Start with the SELECT clause to retrieve the average life expectancy from the \"country\" table. 2. Condition Structure: Use a WHERE clause to filter for countries that belong to the \"Central Africa\" region. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"country\" table. 4. Aggregation Structure: Use the AVG function to calculate the average life expectancy for the specified region.","755":"1. Sequential Structure: Start with the SELECT clause to specify the count of transcripts. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all transcripts. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Transcripts\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of transcripts listed.","756":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"TV_series.Episode\" that we are interested in. 2. Condition Structure: Use a WHERE clause to filter for records where the \"TV_Channel.series_name\" is \"Sky Radio.\" 3. Join Structure: Use a JOIN between the \"TV_series\" and \"TV_Channel\" tables based on the \"Channel\" to link each TV series with its respective channel. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the episodes without any need for summarization.","757":"1. Sequential Structure: Start with the SELECT clause to retrieve the course names and IDs from the Courses table. Use the FROM clause to specify the Courses table and join it with the Sections table to relate courses to their sections. 2. Join Structure: Use an INNER JOIN between the Courses and Sections tables based on the course_id to connect courses with their sections. 3. Aggregation Structure: Use GROUP BY to group records by course_id, allowing us to count the number of sections for each course. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of sections is at most 2, ensuring we only get courses with two or fewer sections.","758":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Join Structure: Use JOIN to connect the country table with the countrylanguage table based on the CountryCode to access language information for each country. 3. Condition Structure: Use a WHERE clause to filter for countries where both English and French are official languages. This can be achieved by checking the IsOfficial column for both languages. 4. Aggregation Structure: Use GROUP BY to group the results by country name and apply a HAVING clause to ensure that both languages are present in the results for each country.","759":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"VOTES.vote_id\", \"VOTES.phone_number\", and \"VOTES.state\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all votes. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"VOTES\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the specified fields from the \"VOTES\" table.","760":"1. Sequential Structure: Start with the SELECT clause to retrieve the semester name and ID. Use the FROM clause to specify the Semesters table. 2. Join Structure: Join the Semesters table with the Student_Enrolment table on the semester_id to link semesters with their respective student enrollments. 3. Aggregation Structure: Use GROUP BY to group the results by semester_id and semester_name, allowing us to count the number of students registered for each semester. 4. Condition Structure: Use the HAVING clause to filter for the semester with the maximum number of students registered. This can be achieved by using a subquery to find the maximum count of students for any semester.","761":"1. Sequential Structure: Start with the SELECT clause to retrieve the average life expectancy for countries in the specified region. 2. Condition Structure: Use a WHERE clause to filter for countries that belong to the \"Central Africa\" region. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"country\" table. 4. Aggregation Structure: Use the AVG function to calculate the average life expectancy for the filtered countries.","762":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"people.Name\" of the poker players. 2. Condition Structure: Apply a WHERE clause to filter for poker players whose \"poker_player.Earnings\" is greater than 300000. 3. Join Structure: Use a JOIN between the \"poker_player\" and \"people\" tables based on \"poker_player.People_ID\" and \"people.People_ID\" to associate each poker player with their respective name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving names based on the specified condition.","763":"1. Sequential Structure: Start with the SELECT clause to retrieve the address fields we need, which include \"Addresses.line_1,\" \"Addresses.line_2,\" \"Addresses.city,\" and \"Addresses.zip_postcode.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to find all addresses that have students living there. 3. Join Structure: Use JOIN clauses to connect the \"Addresses\" table with the \"Students\" table based on the \"permanent_address_id\" and \"current_address_id\" fields to ensure we get addresses associated with students. 4. Aggregation Structure: No aggregation is needed, but DISTINCT should be applied to ensure unique addresses are returned.","764":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"people.Name\" and \"people.Birth_Date\". 2. Condition Structure: No specific filtering condition is required as we want to retrieve all people. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"people\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results in ascending alphabetical order based on \"people.Name\".","765":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"city.Population\" and \"country.LifeExpectancy.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific country, which is \"Brazil.\" 3. Join Structure: Use a JOIN between the \"city\" and \"country\" tables based on the foreign key relationship where \"city.CountryCode\" matches \"country.Code.\" 4. Aggregation Structure: No aggregation is needed here since we are directly retrieving the population and life expectancy for Brazil.","766":"1. Sequential Structure: Start with the SELECT clause to retrieve the nationality from the people table. Use the FROM clause to specify the people table. 2. Aggregation Structure: Use GROUP BY to group the records by nationality to count occurrences of each nationality. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of nationalities in descending order to find the most common nationality. 4. Limit Structure: Use LIMIT to restrict the result to only the top entry, which will be the most common nationality.","767":"1. Sequential Structure: Start with the SELECT clause to retrieve the name, population, and life expectancy of the country. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries that are in the continent of Asia. 3. Aggregation Structure: Use the ORDER BY clause to sort the results by surface area in descending order to identify the largest country, and limit the results to the top entry. 4. Join Structure: Not required, as all necessary data is available in the country table.","768":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"Package Option\" of the TV Channel. 2. Condition Structure: Use a WHERE clause to filter for the specific TV Channel with the series name \"Sky Radio\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"TV_Channel\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","769":"1. Sequential Structure: Start with the SELECT clause to specify the \"Content\" of the TV Channel. 2. Condition Structure: Use a WHERE clause to filter for the specific TV Channel with the series name \"Sky Radio\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"TV_Channel\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the content for the specified channel.","770":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"TV_Channel.series_name.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific episode title \"A Love of a Lifetime\" in the TV_series table. 3. Join Structure: Use a JOIN between the \"TV_series\" and \"TV_Channel\" tables based on the \"Channel\" field to link each TV series with its respective channel. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the series name associated with the specified episode.","771":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the student's mobile phone number. 2. Condition Structure: Use a WHERE clause to filter for the student whose first name is 'Timmothy' and last name is 'Ward'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Students\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on specific conditions.","772":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the grade of the high schoolers and the count of high schoolers in each grade. 2. Aggregation Structure: Use the COUNT function to count the number of high schoolers for each grade. 3. Grouping Structure: Use GROUP BY on \"Highschooler.grade\" to aggregate the results by each grade. 4. Join Structure: No JOIN is required since all necessary information is available in the \"Highschooler\" table.","773":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of conductors. Use the FROM clause to specify the conductor table. 2. Join Structure: Join the conductor table with the orchestra table on the Conductor_ID to relate conductors to the orchestras they have conducted. 3. Aggregation Structure: Use GROUP BY to group the results by conductor ID, allowing us to count the number of orchestras each conductor has conducted. 4. Condition Structure: Apply a HAVING clause to filter for conductors who have conducted at more than one orchestra, ensuring we only get those with a count greater than one.","774":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Breeds.breed_name\" and \"Sizes.size_description.\" 2. Condition Structure: No specific filtering condition is needed here, as we want all possible combinations of breed types and size types. 3. Join Structure: Use a JOIN between the \"Breeds\" and \"Sizes\" tables to combine the breed types with the size types. 4. Aggregation Structure: No aggregation is needed since we want to list all combinations without summarizing the data.","775":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"orchestra.Record_Company\". 2. Condition Structure: No specific filtering condition is required since we want all orchestras and their record companies. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"orchestra\" table. 4. Ordering Structure: Use ORDER BY in descending order on \"orchestra.Year_of_Founded\" to sort the record companies by the years they were founded.","776":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"conductor.Name\" and \"orchestra.Orchestra.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all conductors and their corresponding orchestras. 3. Join Structure: Use an INNER JOIN to connect the \"conductor\" table with the \"orchestra\" table based on the shared key \"Conductor_ID.\" 4. Aggregation Structure: No aggregation is needed since we are simply retrieving names without any summarization.","777":"1. Sequential Structure: Start with the SELECT clause to retrieve the singer's name and the total sales of their songs. We will use the aggregate function SUM on the \"song.Sales\" field. 2. Condition Structure: No specific filtering condition is needed, as we want to calculate total sales for all singers. 3. Join Structure: Use a JOIN clause to connect the \"singer\" table with the \"song\" table based on the shared key \"Singer_ID.\" 4. Aggregation Structure: Use GROUP BY to group the results by the singer's name, allowing us to calculate the total sales for each singer.","778":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct government forms and the total population. Use the FROM clause to specify the country table. 2. Condition Structure: Use the HAVING clause to filter for government forms that have an average life expectancy greater than 72. 3. Join Structure: Not required, as we only need data from the country table for this query. 4. Aggregation Structure: Use GROUP BY to group the results by government form and SUM to calculate the total population for each government form.","779":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of professionals. Use the FROM clause to specify the Professionals table. 2. Condition Structure: Use a WHERE clause to filter professionals who have not treated any dogs. This can be achieved by checking for professionals whose IDs are not present in the Treatments table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching professional IDs in the Treatments table. 4. Aggregation Structure: Use COUNT to aggregate the number of professionals who meet the specified condition.","780":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the charge type and the charge amount. 2. Condition Structure: No specific filtering condition is required since we want to list all charge types and their corresponding amounts. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Charges\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the charge types and their amounts.","781":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of singers. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all singers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"singer\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of singers in the \"singer\" table.","782":"1. Sequential Structure: Start with the SELECT clause to retrieve the total count of countries. Use the FROM clause to specify the countrylanguage table, as it contains the language and percentage information. 2. Condition Structure: Use a WHERE clause to filter for records where the language is 'Spanish'. 3. Aggregation Structure: Use the COUNT function to aggregate the total number of countries where Spanish is spoken by the largest percentage of people. 4. To find the countries where Spanish is spoken by the largest percentage, we will need to group the results by CountryCode and use the HAVING clause to filter for the maximum percentage of Spanish speakers.","783":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" of conductors whose nationalities are not \"USA\". 2. Condition Structure: Use a WHERE clause to filter conductors where \"conductor.Nationality\" is not equal to 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"conductor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of conductors that meet the specified nationality condition.","784":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the dogs. Use the FROM clause to specify the Dogs table and JOIN it with the Treatments table to link dogs with their treatment costs. 2. Condition Structure: Use a HAVING clause to filter for owners whose total treatment costs are less than or equal to 1000. This will ensure we only get dogs belonging to owners who have not spent more than this amount. 3. Join Structure: Use an INNER JOIN between the Dogs and Treatments tables based on the dog_id to relate dogs with their treatment records. Additionally, join the Owners table to access owner information. 4. Aggregation Structure: Use SUM to calculate the total treatment costs for each owner and group the results by owner_id to apply the HAVING clause effectively.","785":"1. Sequential Structure: Start with the SELECT clause to retrieve the names and areas of countries. Use the FROM clause to specify the country table. 2. Condition Structure: No specific condition (WHERE clause) is needed as we want to retrieve the top 5 countries based on area. 3. Join Structure: Not required, as all necessary data is available in the country table. 4. Aggregation Structure: Use ORDER BY to sort the countries by SurfaceArea in descending order and LIMIT to restrict the results to the top 5 countries.","786":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the role, street, city, and state of the professionals. 2. Condition Structure: Use a WHERE clause to filter for professionals whose city contains the substring 'West'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Professionals\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields based on the condition.","787":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of singers. Use the FROM clause to specify the singer table. 2. Condition Structure: Apply a WHERE clause to filter singers who do not have any songs associated with them. 3. Join Structure: Use a LEFT JOIN between the singer and song tables based on Singer_ID to include all singers and their songs, allowing us to identify those without any songs. 4. Aggregation Structure: Use a WHERE clause to check for NULL values in the song table, indicating that the singer has no associated songs.","788":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct names of singers, which is \"singer.Name.\" 2. Condition Structure: Apply a WHERE clause to filter for songs with sales greater than 300,000. 3. Join Structure: Use a JOIN between the \"singer\" and \"song\" tables based on the foreign key relationship \"song.Singer_ID = singer.Singer_ID\" to link each song with its respective singer. 4. Aggregation Structure: Use DISTINCT to ensure that only unique singer names are returned in the result set.","789":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter countries that do not have 'English' as a spoken language and do not have 'Republic' as their government form. 3. Join Structure: Use a LEFT JOIN between the country and countrylanguage tables based on the country code to include all countries and their languages, allowing us to filter out those that speak English. 4. Aggregation Structure: Not needed, as we are simply filtering records based on specific conditions without any aggregation.","790":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries in Asia and to ensure their population is greater than the maximum population of any country in Africa. 3. Join Structure: Not required, as all necessary data is available in the country table. 4. Aggregation Structure: Use a subquery to find the maximum population of countries in Africa, which will be used in the WHERE clause to filter Asian countries.","791":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of dogs. Use the FROM clause to specify the Dogs table. 2. Condition Structure: Use a WHERE clause to filter dogs whose age is below the average age of all dogs. 3. Join Structure: Not required, as all necessary data is contained within the Dogs table. 4. Aggregation Structure: Use the AVG function in a subquery to calculate the average age of all dogs, which will be used in the WHERE clause to filter the results.","792":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" of conductors whose nationality is not \"USA\". 2. Condition Structure: Use a WHERE clause to filter out conductors with the nationality \"USA\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"conductor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of conductors based on a specific condition.","793":"1. Sequential Structure: Start with the SELECT clause to specify the count of high schoolers, which will be derived from the \"Highschooler.ID\". 2. Condition Structure: No specific filtering condition is needed since we want the total count of all high schoolers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Highschooler\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of high schoolers based on their IDs.","794":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" and \"conductor.Year_of_Work\" for sorting purposes. 2. Condition Structure: No specific filtering condition is needed since we want all conductors and their years of work. 3. Join Structure: No JOIN is necessary as all required information is available in the \"conductor\" table. 4. Aggregation Structure: No aggregation function is needed here, but we will use ORDER BY to sort the results in descending order based on \"conductor.Year_of_Work\".","795":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional's ID, role, and email. Use the FROM clause to specify the Professionals table. 2. Condition Structure: Use a WHERE clause to filter professionals who did not operate any treatment on dogs. This can be achieved by checking that the professional ID is not present in the Treatments table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching professional IDs in the Treatments table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","796":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the charge type and charge amount. 2. Condition Structure: No specific filtering condition is required since we want to list all charge types and their amounts. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Charges\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the charge types and their corresponding amounts.","797":"1. Sequential Structure: Start with the SELECT clause to retrieve the language spoken by the largest number of countries. Use the FROM clause to specify the countrylanguage table. 2. Aggregation Structure: Use GROUP BY to group the records by language, allowing us to count the number of distinct countries for each language. 3. Condition Structure: Use the HAVING clause to filter for the maximum count of countries speaking each language. 4. Order Structure: Use ORDER BY to sort the results by the count of countries in descending order and limit the result to the top entry to get the language spoken by the largest number of countries.","798":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner ID and last name from the Owners table. Use the FROM clause to specify the Owners table and join it with the Treatments table to link owners with the treatment costs of their dogs. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the owner who spent the most on treatments, which will be handled in the aggregation. 3. Join Structure: Use an INNER JOIN between the Owners and Dogs tables to connect owners to their dogs, and then join with the Treatments table to access treatment costs. 4. Aggregation Structure: Use SUM to calculate the total treatment costs for each owner and GROUP BY to group the results by owner ID. Finally, use ORDER BY to sort the results in descending order and limit the output to the top result to find the owner who spent the most.","799":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the arrival date and departure date of the dogs. 2. Condition Structure: No specific filtering condition is required since we want to retrieve the arrival and departure dates for all dogs. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Dogs\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the dates for each dog.","800":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional ID, last name, and cell phone number. Use the FROM clause to specify the Professionals table. 2. Condition Structure: Apply a WHERE clause to filter professionals who either live in the state of Indiana or have performed more than 2 treatments. 3. Join Structure: Use a LEFT JOIN between the Professionals table and the Treatments table based on the professional ID to count the number of treatments each professional has performed. 4. Aggregation Structure: Use GROUP BY to group the results by professional ID and last name, and use HAVING to filter for professionals who have performed more than 2 treatments.","801":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the owner's first name, last name, and email address. 2. Condition Structure: Use a WHERE clause to filter for owners whose state contains the substring 'North'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Owners\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields based on the condition.","802":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"Highschooler.name\" to retrieve the names of high schoolers. 2. Condition Structure: Use a WHERE clause to filter for high schoolers in \"grade 10\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of high schoolers in grade 10.","803":"1. Sequential Structure: Start with the SELECT clause to retrieve the grades from the Highschooler table. Use the FROM clause to specify the Highschooler table. 2. Aggregation Structure: Use GROUP BY to group the records by grade, allowing us to count the number of high schoolers in each grade. 3. Condition Structure: Apply a HAVING clause to filter the groups where the count of high schoolers is 4 or more.","804":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the professional's role, street, city, and state. 2. Condition Structure: Use a WHERE clause to filter for professionals whose city contains the substring 'West'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Professionals\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields based on the condition.","805":"1. Sequential Structure: Start with the SELECT clause to retrieve the orchestra names. Use the FROM clause to specify the orchestra table. 2. Condition Structure: Apply a WHERE clause to filter orchestras that do not have any performances by ensuring that the Orchestra_ID is not present in the performance table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching Orchestra_ID entries in the performance table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","806":"1. Sequential Structure: Start with the SELECT clause to retrieve the record company from the orchestra table. Use the FROM clause to specify the orchestra table. 2. Aggregation Structure: Use GROUP BY to group the results by the record company to count the number of orchestras associated with each record company. 3. Condition Structure: Use the HAVING clause to filter for the record company that has the maximum count of orchestras. 4. Join Structure: Not required, as all necessary data is available in the orchestra table.","807":"1. Sequential Structure: Start with the SELECT clause to retrieve the property names from the Properties table. Use the FROM clause to specify the Properties table. 2. Condition Structure: Apply a WHERE clause to filter properties based on their type and room count. We want properties that are either 'houses' or 'apartments' and have more than 1 room. 3. Join Structure: A JOIN is not necessary in this case since we can filter directly from the Properties table based on the property type description. 4. Aggregation Structure: No aggregation is needed as we are simply filtering based on conditions without needing to summarize data.","808":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the arrival date and the departure date of the dogs. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all dogs' arrival and departure dates. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"Dogs\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the dates for all dogs.","809":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" of the singer with the largest net worth. 2. Condition Structure: No specific filtering condition is needed since we are looking for the singer with the highest net worth. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"singer\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"singer.Net_Worth_Millions\" to rank singers by net worth and apply LIMIT 1 to select the singer with the highest net worth.","810":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Highschooler.grade\" since we want to show the grades. 2. Aggregation Structure: Use COUNT to determine the number of students in each grade. 3. Grouping Structure: Use GROUP BY on \"Highschooler.grade\" to aggregate the results by each grade. 4. Condition Structure: Apply the HAVING clause to filter for grades that have at least 4 students, by setting the count to be greater than or equal to 4. 5. Join Structure: No JOIN is required since all necessary information is available in the \"Highschooler\" table.","811":"1. Sequential Structure: Start with the SELECT clause to specify the average attendance from the \"show\" table. 2. Condition Structure: No specific filtering condition is needed since we want the average attendance across all shows. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"show\" table. 4. Aggregation Structure: Use the AVG function to calculate the average attendance from the \"show.Attendance\" column.","812":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of likes. Use the FROM clause to specify the Likes table, as it contains the information about likes associated with students. 2. Condition Structure: Use the WHERE clause to filter for the specific high schooler named 'Kyle' by matching the student_id in the Likes table with the ID of Kyle from the Highschooler table. 3. Join Structure: Use an INNER JOIN between the Likes and Highschooler tables based on the student_id to connect likes to the corresponding high schooler. 4. Aggregation Structure: Use the COUNT function to aggregate the number of likes that Kyle has received.","813":"1. Sequential Structure: Start with the SELECT clause to specify the \"city.Name\" of the cities that meet the population criteria. 2. Condition Structure: Use a WHERE clause to filter cities where \"city.Population\" is between 160000 and 900000. 3. Join Structure: No JOIN is required since all necessary information is in the \"city\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving city names that meet the specified population condition.","814":"1. Sequential Structure: Start with the SELECT clause to retrieve the record company from the orchestra table. Use the FROM clause to specify the orchestra table and apply GROUP BY to group the results by record company. 2. Aggregation Structure: Use COUNT to count the number of orchestras associated with each record company. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of orchestras, and limit the results to get the record company with the greatest number of orchestras. 4. Join Structure: Not required, as we only need data from the orchestra table to determine the record company used by the orchestras.","815":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" and \"conductor.Age\" fields. 2. Condition Structure: No specific filtering condition is required since we want all conductors. 3. Join Structure: No JOIN is needed as all necessary information is available in the \"conductor\" table. 4. Aggregation Structure: No aggregation is needed; however, we will use ORDER BY to sort the results by \"conductor.Age\" in ascending order.","816":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"singer.Citizenship\". 2. Aggregation Structure: Use COUNT to determine the number of singers for each citizenship to find the most common one. 3. Grouping Structure: Use GROUP BY on \"singer.Citizenship\" to aggregate the results by each citizenship. 4. Ordering Structure: Use ORDER BY in descending order on the count to rank the citizenships by the number of singers. 5. Limiting Structure: Use LIMIT 1 to retrieve only the most common citizenship. 6. Join Structure: No JOIN is required since all necessary information is in the \"singer\" table.","817":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of conductors. Use the FROM clause to specify the conductor table. 2. Join Structure: Join the conductor table with the orchestra table on the Conductor_ID to relate conductors to the orchestras they have conducted. 3. Aggregation Structure: Use GROUP BY to group the results by conductor ID, allowing us to count the number of orchestras each conductor has conducted. 4. Condition Structure: Apply a HAVING clause to filter for conductors who have conducted more than one orchestra, ensuring we only get those with multiple associations.","818":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"country.Name\" for the most populated countries. 2. Aggregation Structure: No aggregation function is needed since we are directly retrieving country names based on their population. 3. Ordering Structure: Use ORDER BY in descending order on \"country.Population\" to rank countries by their population. 4. Limiting Structure: Use LIMIT 3 to retrieve only the names of the top 3 most populated countries. 5. Join Structure: No JOIN is required since all necessary information is available in the \"country\" table.","819":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of friends for the student named Kyle. Use the FROM clause to specify the Friend table, which contains the relationships between students and their friends. 2. Condition Structure: Use a WHERE clause to filter for the specific student named Kyle by joining with the Highschooler table to get the corresponding student ID. 3. Join Structure: Use an INNER JOIN between the Friend table and the Highschooler table based on the student ID to relate the friends to the specific high school student. 4. Aggregation Structure: Use the COUNT function to aggregate the number of friends for the specified student.","820":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" of the conductor with the most years of work. 2. Condition Structure: No specific filtering condition is needed since we want to find the conductor with the maximum years of work. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"conductor\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"conductor.Year_of_Work\" to rank conductors by their years of work and apply LIMIT 1 to select the conductor with the highest years of work.","821":"1. Sequential Structure: Start with the SELECT clause to retrieve the treatment type description. Use the FROM clause to specify the Treatments table and join it with the Treatment_Types table to access the treatment type descriptions. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the treatment type with the lowest total cost. 3. Join Structure: Use an INNER JOIN between the Treatments and Treatment_Types tables based on the treatment_type_code to relate treatment costs with their descriptions. 4. Aggregation Structure: Use GROUP BY to group the results by treatment_type_code and SUM to calculate the total cost for each treatment type. Then, use ORDER BY to sort the results by total cost in ascending order and limit the results to the first entry to get the treatment type with the lowest total cost.","822":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the conductor. Use the FROM clause to specify the conductor table. 2. Join Structure: Join the conductor table with the orchestra table on the Conductor_ID to relate conductors to the orchestras they have conducted. 3. Aggregation Structure: Use GROUP BY to group the results by conductor ID, allowing us to count the number of orchestras each conductor has conducted. 4. Condition Structure: Use ORDER BY to sort the results by the count of orchestras in descending order and limit the results to the top one to find the conductor with the most orchestras.","823":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the citizenship and the maximum net worth. 2. Aggregation Structure: Use the MAX function to calculate the maximum net worth for each citizenship. 3. Grouping Structure: Use GROUP BY on \"singer.Citizenship\" to calculate the maximum net worth for each citizenship. 4. Join Structure: No JOIN is required since all necessary information is available in the \"singer\" table.","824":"1. Sequential Structure: Start with the SELECT clause to retrieve the last name of the owner. Use the FROM clause to specify the Owners table and join it with the Dogs table to link owners with their dogs. 2. Condition Structure: Use the WHERE clause to filter for the youngest dog by comparing the date of birth of the dogs. 3. Join Structure: Use an INNER JOIN between the Owners and Dogs tables based on owner_id to connect owners with their respective dogs. 4. Aggregation Structure: Use the MAX function to find the maximum date of birth (which corresponds to the youngest dog) and filter the results accordingly.","825":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name, year of independence, and surface area. Use the FROM clause to specify the country table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the country with the lowest population. 3. Join Structure: Not required, as we only need data from the country table. However, we will need to aggregate the population data from the city table to find the total population for each country. 4. Aggregation Structure: Use a subquery to calculate the total population for each country by joining the city table with the country table on the CountryCode. Then, use the MIN function to find the country with the lowest total population.","826":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"Highschooler.name\" to retrieve the names of high schoolers in grade 10. 2. Condition Structure: Use a WHERE clause to filter for high schoolers where \"Highschooler.grade\" is equal to 10. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of high schoolers that meet the specified grade condition.","827":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Professionals.first_name\" and \"Treatment_Types.treatment_type_description.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all professionals and the treatments they have performed. 3. Join Structure: Use JOIN clauses to connect the \"Treatments\" table with both the \"Professionals\" and \"Treatment_Types\" tables based on their respective foreign keys. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names and treatment descriptions.","828":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" and \"conductor.Year_of_Work\". 2. Condition Structure: No specific filtering condition is needed since we want to list all conductors. 3. Join Structure: No JOIN is necessary as all required information is available in the \"conductor\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results in descending order based on \"conductor.Year_of_Work\".","829":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high school students. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Apply a WHERE clause to filter for students who do not have any friends by ensuring that their ID is not present in the Friend table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching student IDs in the Friend table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","830":"1. Sequential Structure: Start with the SELECT clause to retrieve the feature type name. Use the FROM clause to specify the Other_Available_Features table and join it with the Ref_Feature_Types table to get the corresponding feature type name. 2. Condition Structure: Use the WHERE clause to filter for the feature name 'AirCon' to ensure we only get the relevant feature type. 3. Join Structure: Use an INNER JOIN between the Other_Available_Features and Ref_Feature_Types tables based on the feature_type_code to relate the feature with its type. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","831":"1. Sequential Structure: Start with the SELECT clause to retrieve the grade from the Highschooler table. Use the FROM clause to specify the Highschooler table. We will also need to use GROUP BY to group the results by grade to count the number of high schoolers in each grade. 2. Aggregation Structure: Use the COUNT function to count the number of high schoolers in each grade. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of high schoolers in descending order, so that the grade with the greatest number of high schoolers appears first. 4. Limit Structure: Finally, use LIMIT to return only the top result, which will be the grade with the greatest number of high schoolers.","832":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Dogs.date_arrived\" and \"Dogs.date_departed.\" 2. Condition Structure: No specific filtering condition is needed beyond ensuring that we only include dogs that have received a treatment. 3. Join Structure: Use a JOIN between the \"Dogs\" and \"Treatments\" tables based on \"dog_id\" to link each dog with its treatment records. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the arrival and departure dates for dogs that have received treatments.","833":"1. Sequential Structure: Start with the SELECT clause to specify the average attendance of shows. 2. Aggregation Structure: Use the AVG function to calculate the average attendance from the \"show\" table. 3. Condition Structure: No specific filtering condition is needed since we want the average attendance of all shows. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"show\" table.","834":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Highschooler.ID\" of the high schooler named Kyle. 2. Condition Structure: Use a WHERE clause to filter for the high schooler whose name is 'Kyle'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the ID of the specific high schooler.","835":"1. Sequential Structure: Start with the SELECT clause to retrieve the average grade of students. Use the FROM clause to specify the Highschooler table, as it contains the grade information. 2. Condition Structure: Use a WHERE clause to filter for students who have friends. This can be determined by checking for the existence of records in the Friend table where the student_id matches the ID in the Highschooler table. 3. Join Structure: Use an INNER JOIN between the Highschooler and Friend tables based on the student_id to connect students with their friends. 4. Aggregation Structure: Use the AVG function to calculate the average grade of the filtered students who have friends.","836":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct dog IDs from the Dogs table. Use the FROM clause to specify the Treatments table since we want to count dogs that have undergone treatments. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in all dogs that have gone through any treatments. 3. Join Structure: Not required, as we can directly count the distinct dog IDs from the Treatments table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of distinct dog IDs that appear in the Treatments table.","837":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the dog's name, age, and weight. 2. Condition Structure: Use a WHERE clause to filter for dogs that have been abandoned, indicated by \"Dogs.abandoned_yn\" being equal to 1. 3. Join Structure: No JOIN is necessary since all required information is available in the \"Dogs\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of the abandoned dogs.","838":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct nationalities from the conductor table. 2. Condition Structure: No specific filtering condition is needed since we want to count all different nationalities present in the conductor table. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"conductor\" table. 4. Aggregation Structure: Use COUNT(DISTINCT conductor.Nationality) to count the unique nationalities of conductors.","839":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"song.Title\" and \"singer.Name.\" 2. Condition Structure: No specific filtering condition is needed, as we want to show all titles and names. 3. Join Structure: Use a JOIN between the \"song\" and \"singer\" tables based on the foreign key relationship \"song.Singer_ID = singer.Singer_ID\" to link each song with its respective singer. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the titles and names without any summarization.","840":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Apply a WHERE clause to filter high schoolers with a grade greater than 5. 3. Join Structure: Use a JOIN between the Highschooler table and the Friend table on the student_id to count the number of friends for each high schooler. 4. Aggregation Structure: Use GROUP BY to group the results by high schooler ID and name, and use HAVING to filter for those with 2 or more friends.","841":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers. Use the FROM clause to specify the Highschooler table. 2. Join Structure: Use a JOIN between the Highschooler table and the Friend table to connect high schoolers with their friends based on the student_id and friend_id. 3. Aggregation Structure: Use GROUP BY to group the results by the high schooler's ID, allowing us to count the number of friends each high schooler has. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of friends is at least 3, ensuring we only get high schoolers with three or more friends.","842":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of students. Use the FROM clause to specify the Highschooler table, as we want to get student names from this table. 2. Condition Structure: Use a WHERE clause to filter students who do not have any friends. This can be achieved by ensuring that the student ID does not exist in the Friend table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching student IDs in the Friend table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","843":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional ID, role, and email from the Professionals table. Use the FROM clause to specify the Professionals table. 2. Condition Structure: Use a WHERE clause to filter professionals who did not perform any treatments. This can be achieved by ensuring that the professional ID is not present in the Treatments table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching professional IDs in the Treatments table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","844":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the high schooler. Use the FROM clause to specify the Highschooler table. 2. Join Structure: Join the Highschooler table with the Friend table on the student_id to relate high schoolers with their friends. 3. Aggregation Structure: Use GROUP BY to group the results by high schooler ID, allowing us to count the number of friends for each high schooler. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of friends in descending order and limit the results to the top one to find the high schooler with the greatest number of friends.","845":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the high schooler. Use the FROM clause to specify the Highschooler table. 2. Aggregation Structure: Use GROUP BY to group the results by the high schooler's ID to count the number of likes each high schooler has received. 3. Join Structure: Use an INNER JOIN between the Highschooler and Likes tables based on the student ID to relate high schoolers with their likes. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of likes in descending order and limit the results to the top one to get the high schooler with the greatest number of likes.","846":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"Professionals.email_address\". 2. Condition Structure: Use a WHERE clause to filter for professionals living in either \"Hawaii\" or \"Wisconsin\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Professionals\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving email addresses based on the specified conditions.","847":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"country.Name\". 2. Condition Structure: Use a WHERE clause to filter for countries that are in the continent of 'Europe' and have a population of 80000. 3. Join Structure: A JOIN is necessary to connect the \"country\" table with the \"city\" table based on the foreign key relationship where \"city.CountryCode = country.Code\". 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of countries that meet the specified conditions.","848":"1. Sequential Structure: Start with the SELECT clause to specify the count of orchestras that have a record format of either 'CD' or 'DVD'. 2. Condition Structure: Use a WHERE clause to filter orchestras where \"orchestra.Record_Company\" is either 'CD' or 'DVD'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"orchestra\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of orchestras that meet the specified condition.","849":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the student. Use the FROM clause to specify the Highschooler table. 2. Aggregation Structure: Use COUNT to count the number of likes for each student. 3. Grouping Structure: Use GROUP BY to group the results by student ID to aggregate the likes per student. 4. Condition Structure: Use ORDER BY to sort the results by the count of likes in descending order and limit the results to get the student with the most likes.","850":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Owners.first_name\" and \"Dogs.name.\" 2. Condition Structure: Apply a WHERE clause to filter for owners who live in \"Virginia.\" 3. Join Structure: Use an INNER JOIN to connect the \"Owners\" table with the \"Dogs\" table based on the foreign key relationship where \"Dogs.owner_id\" matches \"Owners.owner_id.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names without any summarization.","851":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the owner's first name, last name, and email address. 2. Condition Structure: Use a WHERE clause to filter for owners whose state contains the substring 'North'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Owners\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields based on the condition.","852":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of students. Use the FROM clause to specify the Highschooler table, as it contains the names of the students. 2. Condition Structure: Use a WHERE clause to filter students who have friends and are liked by someone else. This will involve checking for the existence of records in the Friend and Likes tables. 3. Join Structure: Use JOINs to connect the Highschooler table with the Friend and Likes tables based on the student ID. This will allow us to find students who have friends and are liked. 4. Aggregation Structure: Not needed, as we are simply retrieving names based on the specified conditions without any aggregation.","853":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country names and their surface areas. 2. Condition Structure: No specific filtering condition is required since we want to retrieve the largest countries based on surface area. 3. Aggregation Structure: Use ORDER BY in descending order on \"country.SurfaceArea\" to rank countries by their surface area. 4. Limiting Structure: Use LIMIT 5 to retrieve only the top 5 largest countries by surface area. 5. Join Structure: No JOIN is necessary since all required data is available in the \"country\" table.","854":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"grade\" of each high schooler. 2. Condition Structure: No specific filtering condition is needed since we want the grades of all high schoolers. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the grades of each high schooler.","855":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of friends, which corresponds to \"Highschooler.name.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific high school student named \"Kyle.\" 3. Join Structure: Use a JOIN between the \"Friend\" table and the \"Highschooler\" table based on the foreign key relationships to link each student with their friends. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of friends without any summarization.","856":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries that do not have 'English' as a language and whose government form is not 'Republic'. 3. Join Structure: Use a JOIN between the country and countrylanguage tables based on the CountryCode to relate countries with their languages. 4. Aggregation Structure: Not needed, as we are simply filtering records based on specified conditions without any aggregation.","857":"1. Sequential Structure: Start with the SELECT clause to retrieve the government form name and total population. Use the FROM clause to specify the country table. 2. Aggregation Structure: Use GROUP BY to group the results by government form, allowing us to calculate the total population for each government form. 3. Condition Structure: Use the HAVING clause to filter groups where the average life expectancy is greater than 72, ensuring we only include government forms that meet this criterion. 4. Aggregation Structure: Use the SUM function to calculate the total population for each government form and the AVG function to calculate the average life expectancy.","858":"1. Sequential Structure: Start with the SELECT clause to retrieve the country name and the count of languages spoken. Use the FROM clause to specify the country table and JOIN it with the countrylanguage table to link countries with their languages. 2. Aggregation Structure: Use COUNT to count the number of languages spoken per country. Apply GROUP BY on the country code to aggregate the language counts for each country. 3. Condition Structure: Use the HAVING clause to filter for countries that have at least 3 languages spoken. 4. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the country code to relate countries with their respective languages.","859":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"orchestra.Record_Company\". 2. Condition Structure: No specific filtering condition is required since we want all orchestras and their record companies. 3. Join Structure: No JOIN is necessary as all required information is available in the \"orchestra\" table. 4. Ordering Structure: Use ORDER BY in descending order on \"orchestra.Year_of_Founded\" to sort the record companies based on the years they were founded.","860":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the conductor. Use the FROM clause to specify the conductor table. 2. Join Structure: Join the conductor table with the orchestra table on the Conductor_ID to relate conductors to the orchestras they have conducted. 3. Aggregation Structure: Use GROUP BY to group the results by conductor ID, allowing us to count the number of orchestras each conductor has conducted. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of orchestras in descending order and limit the results to the top one to find the conductor with the most orchestras.","861":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are \"Highschooler.name\" and \"Highschooler.grade\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all high schoolers and their grades. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and grades of all high schoolers.","862":"1. Sequential Structure: Start with the SELECT clause to retrieve the singer's name. Use the FROM clause to specify the singer table. Then, apply the ORDER BY clause to sort the results by net worth in descending order to find the singer with the highest net worth. 2. Condition Structure: No specific condition (WHERE clause) is needed since we want the singer with the maximum net worth. 3. Join Structure: Not required, as we only need data from the singer table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by net worth and limiting to the top result effectively gives us the singer with the highest net worth.","863":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the country name. 2. Aggregation Structure: No aggregation is needed since we are directly retrieving the country names based on their population. 3. Ordering Structure: Use ORDER BY in descending order on \"country.Population\" to rank countries by their population size. 4. Limiting Structure: Use LIMIT 3 to retrieve only the names of the top 3 countries with the largest populations. 5. Join Structure: No JOIN is required since all necessary information is available in the \"country\" table.","864":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of students. Use the FROM clause to specify the Highschooler table, as we need to filter students based on their relationships in the Friend and Likes tables. 2. Condition Structure: Use a WHERE clause to filter for students who have friends and are liked. This will involve checking for the existence of records in both the Friend and Likes tables. 3. Join Structure: Use JOINs to connect the Highschooler table with the Friend and Likes tables based on the student ID. This will allow us to identify students who meet both conditions. 4. Aggregation Structure: Not needed, as we are simply retrieving IDs based on the specified conditions without any aggregation.","865":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"country.Code\" which represents the country codes. 2. Condition Structure: Apply a WHERE clause to filter for records where \"countrylanguage.Language\" is 'Spanish' and \"countrylanguage.Percentage\" indicates that it is predominantly spoken (typically above 50%). 3. Join Structure: Use a JOIN between the \"country\" and \"countrylanguage\" tables based on \"country.Code\" to link each country with its respective languages. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only select countries where Spanish is the predominant language by using the appropriate condition in the WHERE clause.","866":"1. Sequential Structure: Start with the SELECT clause to retrieve the citizenship of singers. Use the FROM clause to specify the singer table. 2. Condition Structure: Apply a WHERE clause to filter singers based on their birth year, specifically those born before 1945 and after 1955. 3. Join Structure: Not required, as all necessary data is contained within the singer table. 4. Aggregation Structure: Use DISTINCT to ensure that only unique citizenship values are returned.","867":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the email, cell phone, and home phone of each professional. 2. Condition Structure: No specific filtering condition is required as we want to retrieve the contact information for all professionals. 3. Join Structure: No JOIN is necessary since all required information is available within the \"Professionals\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields for each professional.","868":"1. Sequential Structure: Start with the SELECT clause to retrieve the breed name from the Breeds table. Use the FROM clause to specify the Breeds table and JOIN it with the Dogs table to relate breeds to their respective dogs. 2. Aggregation Structure: Use GROUP BY to group the results by breed code, allowing us to count the number of dogs for each breed. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of dogs, and limit the results to the top entry to get the breed with the most dogs. 4. Join Structure: Use an INNER JOIN between the Breeds and Dogs tables based on the breed code to connect the breed information with the dogs.","869":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner ID, first name, and last name. Use the FROM clause to specify the Owners table. 2. Join Structure: Join the Owners table with the Dogs table on the owner_id to relate owners to their dogs. 3. Aggregation Structure: Use GROUP BY to group the results by owner_id to count the number of dogs each owner has. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of dogs in descending order and limit the results to the top entry to find the owner with the most dogs.","870":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"Likes.student_id\" and the count of likes for each student. 2. Aggregation Structure: Use COUNT to calculate the number of likes for each student. 3. Grouping Structure: Use GROUP BY on \"Likes.student_id\" to aggregate the results by each student. 4. Join Structure: No JOIN is required since all necessary information is contained within the \"Likes\" table.","871":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"age\" of the oldest dog. 2. Condition Structure: No specific filtering condition is needed since we want to find the maximum age among all dogs. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"Dogs\" table. 4. Aggregation Structure: Use the MAX function to find the maximum age of the dogs.","872":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes and the languages spoken by the greatest percentage of people. Use the FROM clause to specify the country and countrylanguage tables. 2. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the CountryCode to relate countries with their languages. 3. Aggregation Structure: Use GROUP BY to group records by country code and then use the MAX function to find the highest percentage of languages spoken for each country. 4. Condition Structure: Use a HAVING clause to filter the results to ensure we only get the language with the greatest percentage for each country.","873":"1. Sequential Structure: Start with the SELECT clause to retrieve the years in which orchestras were founded. Use the FROM clause to specify the orchestra table. 2. Join Structure: Join the orchestra table with the performance table on the Orchestra_ID to relate orchestras with their performances. 3. Aggregation Structure: Use GROUP BY to group the results by the year of founding, allowing us to count the number of performances for each orchestra. 4. Condition Structure: Apply a HAVING clause to filter for orchestras that have given more than one performance, ensuring we only get the years of those orchestras.","874":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of students. Use the FROM clause to specify the Highschooler table. 2. Join Structure: Use an INNER JOIN between the Highschooler and Likes tables based on the student ID to link students with their likes. 3. Aggregation Structure: Use GROUP BY to group records by student ID, allowing us to count the number of likes for each student. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of likes is 2 or more, ensuring we only get students with at least two likes.","875":"1. Sequential Structure: Start with the SELECT clause to retrieve the language spoken in the most countries. Use the FROM clause to specify the countrylanguage table. 2. Aggregation Structure: Use GROUP BY to group the records by language, allowing us to count how many countries speak each language. 3. Aggregation Structure: Use COUNT to count the number of distinct countries for each language. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the count of countries, and limit the results to the top entry to get the language spoken in the most countries.","876":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of cities. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the country table on the CountryCode to get the country information for each city. Additionally, join the countrylanguage table to filter based on the language spoken in those countries. 3. Condition Structure: Use a WHERE clause to filter for cities in countries located in Europe and ensure that English is not the official language. This involves checking that the country is in the 'Europe' continent and that the language is 'English' with IsOfficial set to false. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","877":"1. Sequential Structure: Start with the SELECT clause to retrieve the states from both the Owners and Professionals tables. Use the FROM clause to specify the Owners table and then apply a JOIN to connect it with the Professionals table. 2. Condition Structure: Use a WHERE clause to ensure that we are only selecting states that are common to both Owners and Professionals. 3. Join Structure: Use an INNER JOIN between the Owners and Professionals tables based on the state column to find matching states. 4. Aggregation Structure: Not needed, as we are simply retrieving distinct states without any aggregation.","878":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of orchestras managed by each record company. Use the FROM clause to specify the orchestra table. 2. Aggregation Structure: Use the COUNT function to count the number of orchestras for each record company. 3. Grouping Structure: Use GROUP BY to group the results by the record company to get the count for each one. 4. Join Structure: Not required, as all necessary data is available in the orchestra table.","879":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes from the country table. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for languages that are not English. This will ensure we only get country codes where other languages are spoken. 3. Join Structure: Use a JOIN clause to connect the country table with the countrylanguage table based on the CountryCode to access the language information. 4. Aggregation Structure: Not needed, as we are simply retrieving country codes based on the specified condition without any aggregation.","880":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Treatments.cost_of_treatment\" and \"Treatment_Types.treatment_type_description.\" 2. Condition Structure: No specific filtering condition is needed, as we want to retrieve all treatments and their associated costs and descriptions. 3. Join Structure: Use a JOIN between the \"Treatments\" and \"Treatment_Types\" tables based on \"treatment_type_code\" to link each treatment with its corresponding treatment type description. 4. Aggregation Structure: No aggregation is needed since we are retrieving individual treatment records.","881":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes from the country table. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter out countries that speak English by checking the language in the countrylanguage table. 3. Join Structure: Use a LEFT JOIN between the country table and the countrylanguage table on the CountryCode to include all countries and their languages. 4. Aggregation Structure: Not needed, as we are simply filtering based on the presence of the English language.","882":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the email address of the professionals. 2. Condition Structure: Use a WHERE clause to filter for professionals who live in either the state of Hawaii or Wisconsin. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Professionals\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the email addresses that meet the specified condition.","883":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers and the count of their likes. We will select \"Highschooler.name\" and use COUNT to get the number of likes. 2. Condition Structure: No specific filtering condition is needed, as we want to include all high schoolers who have likes. 3. Join Structure: Use a JOIN between the \"Highschooler\" and \"Likes\" tables based on the student ID to link each high schooler with their likes. 4. Aggregation Structure: Use COUNT on \"Likes.liked_id\" to count the number of likes for each high schooler, and GROUP BY \"Highschooler.name\" to group the results by each high schooler's name.","884":"1. Sequential Structure: Start with the SELECT clause to count the number of conductors. 2. Condition Structure: No specific filtering condition is needed since we want the total count of conductors. 3. Join Structure: No JOIN is necessary as all required information is in the \"conductor\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of conductors.","885":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the high school student. Use the FROM clause to specify the Highschooler table. 2. Join Structure: Join the Highschooler table with the Friend table on the student_id and friend_id to relate students with their friends. 3. Aggregation Structure: Use GROUP BY to group the results by the student's ID, allowing us to count the number of friends each student has. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of friends in descending order and limit the results to the top one to get the student with the most friends.","886":"1. Sequential Structure: Start with the SELECT clause to specify the count of high schoolers in grades 9 or 10. 2. Condition Structure: Use a WHERE clause to filter for high schoolers whose grade is either 9 or 10. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"Highschooler\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of high schoolers that meet the specified grade condition.","887":"1. Sequential Structure: Start with the SELECT clause to retrieve the record companies from the orchestra table. Use the FROM clause to specify the orchestra table. 2. Condition Structure: Use a WHERE clause to filter orchestras based on their founding year, separating those founded before 2003 and those founded after 2003. 3. Join Structure: Not required for this query since we are only interested in the record companies from the orchestra table. 4. Aggregation Structure: Use INTERSECT to find the common record companies used by both groups of orchestras (those founded before 2003 and those founded after 2003).","888":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"Highschooler.grade\" to retrieve the grades of all high schoolers. 2. Condition Structure: No specific filtering condition is required since we want to show all grades. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the grades.","889":"1. Sequential Structure: Start with the SELECT clause to retrieve the language and percentage. Use the FROM clause to specify the countrylanguage table. 2. Aggregation Structure: Use GROUP BY to group the results by CountryCode, allowing us to find the language with the highest percentage for each country. 3. Join Structure: Use a JOIN between the countrylanguage and country tables based on CountryCode to ensure we are working with valid country data. 4. Condition Structure: Use the HAVING clause to filter for the maximum percentage of language spoken in each country.","890":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of cities. Use the FROM clause to specify the city table. We will also need to join with the country and countrylanguage tables to filter based on the language and region. 2. Condition Structure: Use a WHERE clause to filter for cities located in Europe and where English is not the official language. This will involve checking that the language is 'English' and the IsOfficial field is 'Yes'. 3. Join Structure: Use JOIN clauses to connect the city table with the country table on CountryCode, and then join the countrylanguage table on CountryCode to access language information. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","891":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Professionals.first_name\" and \"Treatment_Types.treatment_type_description.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all professionals and their corresponding treatment descriptions. 3. Join Structure: Use JOIN clauses to connect the \"Treatments\" table with both the \"Professionals\" and \"Treatment_Types\" tables based on their respective foreign keys. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names and descriptions without any summarization.","892":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct combinations of breed type and size type. We will select \"Breeds.breed_name\" and \"Sizes.size_description.\" 2. Condition Structure: No specific filtering condition is needed, as we want all distinct combinations of breed and size types. 3. Join Structure: Use JOIN clauses to connect the \"Dogs\" table with the \"Breeds\" and \"Sizes\" tables based on the foreign keys \"breed_code\" and \"size_code.\" 4. Aggregation Structure: Use DISTINCT to ensure that we only get unique combinations of breed and size types.","893":"1. Sequential Structure: Start with the SELECT clause to retrieve the record companies from the orchestra table. Use the FROM clause to specify the orchestra table. 2. Condition Structure: Use a WHERE clause to filter orchestras based on their founding year, specifically those founded before 2003 and after 2003. 3. Join Structure: Not required, as we are only retrieving data from the orchestra table. 4. Aggregation Structure: Not needed, as we are interested in distinct record companies without any aggregation.","894":"1. Sequential Structure: Start with the SELECT clause to count the number of friends. Use the FROM clause to specify the Friend table, as it contains the relationships between students and their friends. 2. Condition Structure: Use a WHERE clause to filter the records for the student named 'Kyle' by matching the student_id in the Friend table with the ID of Kyle from the Highschooler table. 3. Join Structure: An INNER JOIN is needed between the Friend table and the Highschooler table to get the correct student ID for Kyle. 4. Aggregation Structure: Use the COUNT function to aggregate the number of friends associated with Kyle's student ID.","895":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the dogs and their treatment dates. Use the FROM clause to specify the Dogs table and join it with the Treatments table to get the treatment dates. 2. Condition Structure: We need to filter for the rarest breed, which requires a subquery to determine which breed has the least number of dogs. 3. Join Structure: Use JOIN clauses to connect the Dogs table with the Breeds table to identify the breed of each dog and with the Treatments table to get the treatment dates. 4. Aggregation Structure: Use GROUP BY to count the number of dogs per breed and use a HAVING clause to filter for the breed with the minimum count, identifying the rarest breed.","896":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner ID and zip code. Use the FROM clause to specify the Owners table. We will need to join the Treatments table to calculate the total amount paid by each owner. 2. Join Structure: Use an INNER JOIN between the Owners and Dogs tables on owner_id to link owners to their dogs. Then, join the Treatments table on dog_id to access the treatment costs associated with each dog. 3. Aggregation Structure: Use GROUP BY to group the results by owner ID and zip code, allowing us to calculate the total amount paid by each owner using the SUM function on the cost_of_treatment. 4. Condition Structure: Use the ORDER BY clause to sort the results by the total amount paid in descending order and limit the results to the top entry to find the owner who has paid the largest amount.","897":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Highschooler.name\" and the count of friends for each high schooler. 2. Condition Structure: No specific filtering condition is needed, as we want to count friends for all high schoolers. 3. Join Structure: Use a JOIN between the \"Highschooler\" and \"Friend\" tables based on the student ID to link each high schooler with their friends. 4. Aggregation Structure: Use COUNT on \"Friend.friend_id\" to count the number of friends for each high schooler, and GROUP BY \"Highschooler.name\" to group the results by each high schooler's name.","898":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers, specifically \"Highschooler.name.\" 2. Condition Structure: We need to filter the records to find friends of a specific high schooler named \"Kyle.\" This will be done using a WHERE clause. 3. Join Structure: Use a JOIN between the \"Friend\" table and the \"Highschooler\" table to link each high schooler with their friends based on the student_id and friend_id. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of friends without any summarization.","899":"1. Sequential Structure: Start with the SELECT clause to specify the count of orchestras that meet the specified record format condition. 2. Condition Structure: Use a WHERE clause to filter orchestras where \"orchestra.Record_Company\" is either \"CD\" or \"DVD\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"orchestra\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of orchestras that meet the specified condition.","900":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"singer.Citizenship\" and the maximum \"singer.Net_Worth_Millions\" for each citizenship. 2. Condition Structure: No specific filtering condition is needed, as we want to include all singers in the results. 3. Join Structure: No JOIN is necessary since we are only using the \"singer\" table to get the required information. 4. Aggregation Structure: Use MAX to find the maximum net worth for each citizenship and GROUP BY \"singer.Citizenship\" to group the results accordingly.","901":"1. Sequential Structure: Start with the SELECT clause to count the number of dogs that went through a treatment. We will use the COUNT function on \"Dogs.dog_id.\" 2. Condition Structure: No specific filtering condition is needed since we want to count all dogs that have at least one treatment. 3. Join Structure: Use a JOIN between the \"Dogs\" and \"Treatments\" tables based on \"dog_id\" to link each dog with its treatment records. 4. Aggregation Structure: Use COUNT to aggregate the number of distinct dogs that have undergone treatment, ensuring we only count each dog once.","902":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Highschooler.name\" and the count of friends for each student. 2. Condition Structure: No specific filtering condition is needed, as we want to count all friends for each high school student. 3. Join Structure: Use a JOIN between the \"Highschooler\" and \"Friend\" tables based on the relationship where \"Friend.student_id\" matches \"Highschooler.ID\" to link each student with their friends. 4. Aggregation Structure: Use COUNT on \"Friend.friend_id\" to count the number of friends for each student, and GROUP BY \"Highschooler.name\" to group the results by each student's name.","903":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers. Use the FROM clause to specify the Highschooler table. 2. Join Structure: Use a JOIN between the Highschooler table and the Friend table to connect high schoolers with their friends based on the student_id and friend_id. 3. Aggregation Structure: Use GROUP BY to group the results by the high schooler's ID, allowing us to count the number of friends each high schooler has. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of friends is 3 or more, ensuring we only get high schoolers with at least three friends.","904":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Highschooler.ID\" for the student named 'Kyle'. 2. Condition Structure: Use a WHERE clause to filter for the student whose name is 'Kyle'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the ID for the specific student.","905":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"grade\" of the student named \"Kyle\". 2. Condition Structure: Use a WHERE clause to filter for the student whose name is 'Kyle'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the grade of a specific student.","906":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the student ID and the count of likes. 2. Aggregation Structure: Use COUNT to calculate the number of likes for each student. 3. Grouping Structure: Use GROUP BY on \"Likes.student_id\" to aggregate the results by each student ID. 4. Join Structure: No JOIN is required since all necessary information is contained within the \"Likes\" table.","907":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"country.Name\" of the nations with the lowest populations. 2. Condition Structure: No specific filtering condition is required since we want to find the nations with the lowest populations. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"country\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"country.Population\" to rank nations by population and apply LIMIT 3 to select the three nations with the lowest populations.","908":"1. Sequential Structure: Start with the SELECT clause to specify the \"singer.Name\" of the singers whose birth year is either 1948 or 1949. 2. Condition Structure: Use a WHERE clause to filter for singers whose \"singer.Birth_Year\" is either 1948 or 1949. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of singers that meet the specified birth year condition.","909":"1. Sequential Structure: Start with the SELECT clause to retrieve the average life expectancy and total population. Use the FROM clause to specify the country table, as it contains the necessary data for life expectancy and population. 2. Aggregation Structure: Use the AVG function to calculate the average life expectancy and SUM function to calculate the total population for each continent. Apply GROUP BY to group the results by continent. 3. Condition Structure: Use the HAVING clause to filter the results to only include continents where the average life expectancy is less than 72. 4. Join Structure: Not required, as all necessary data is available within the country table.","910":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the dog names and their treatment dates. 2. Condition Structure: To find the rarest breed, we need to determine which breed has the least number of dogs. This will require a subquery to count the number of dogs per breed and identify the breed with the minimum count. 3. Join Structure: We will need to join the Dogs table with the Treatments table to get the treatment dates, and also join with the Breeds table to identify the breed of each dog. 4. Aggregation Structure: Use COUNT to determine the number of dogs for each breed and then use a HAVING clause to filter for the breed with the minimum count.","911":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner ID and last name. Use the FROM clause to specify the Owners table. We will need to join the Treatments table to calculate the total cost of treatments for each owner. 2. Join Structure: Use JOIN clauses to connect the Owners table with the Dogs table (to link owners to their dogs) and then with the Treatments table (to link dogs to their treatments). 3. Aggregation Structure: Use GROUP BY to group the results by owner ID and last name, and use SUM to calculate the total cost of treatments for each owner. 4. Condition Structure: Apply the ORDER BY clause to sort the results by the total cost of treatments in descending order, and use LIMIT to get only the owner with the highest total cost.","912":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"singer.Name\". 2. Condition Structure: Use a WHERE clause to filter out singers whose citizenship is \"France\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving names based on a specific condition.","913":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" of the singers whose birth years are specified. 2. Condition Structure: Use a WHERE clause to filter for singers whose \"singer.Birth_Year\" is either 1948 or 1949. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of singers that meet the specified birth year condition.","914":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional ID, last name, and cell phone number from the Professionals table. Use the FROM clause to specify the Professionals table. 2. Condition Structure: Apply a WHERE clause to filter professionals who either live in the state of Indiana or have performed more than two treatments. 3. Join Structure: Use a LEFT JOIN between the Professionals table and the Treatments table on the professional ID to relate professionals to their treatments. 4. Aggregation Structure: Use GROUP BY on the professional ID to count the number of treatments per professional and apply a HAVING clause to filter for those who have performed more than two treatments.","915":"1. Sequential Structure: Start with the SELECT clause to specify the count of countries. 2. Condition Structure: Use a WHERE clause to filter for countries that are in the \"Asia\" continent. 3. Join Structure: No JOIN is necessary since all required information is available in the \"country\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of countries that meet the specified condition.","916":"1. Sequential Structure: Start with the SELECT clause to count the number of countries in the \"country\" table. 2. Condition Structure: Use a WHERE clause to filter for countries that are in the \"Asia\" region. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"country\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of countries that meet the specified condition.","917":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers, specifically \"Highschooler.name.\" 2. Condition Structure: We need to ensure that the high schoolers have both friends and are liked. This will be handled through JOINs and conditions in the WHERE clause. 3. Join Structure: Use INNER JOINs to connect the \"Highschooler\" table with the \"Friend\" table and the \"Likes\" table based on the student ID. This will ensure we only get high schoolers who have entries in both the \"Friend\" and \"Likes\" tables. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered to include only those high schoolers who meet both conditions.","918":"1. Sequential Structure: Start with the SELECT clause to retrieve the treatment type description. Use the FROM clause to specify the Treatments table and join it with the Treatment_Types table to get the treatment type descriptions. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the treatment type with the least total cost. 3. Join Structure: Use an INNER JOIN between the Treatments and Treatment_Types tables based on the treatment_type_code to relate treatment costs with their descriptions. 4. Aggregation Structure: Use SUM to calculate the total cost of treatments grouped by treatment type, and then use ORDER BY to sort these totals in ascending order, limiting the result to the top entry to find the least expensive treatment type.","919":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of orchestras. Use the FROM clause to specify the orchestra table. 2. Condition Structure: Apply a WHERE clause to filter orchestras that do not have any performance records. This can be achieved by ensuring that the Orchestra_ID from the orchestra table is not present in the performance table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching Orchestra_ID entries in the performance table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","920":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Citizenship\" and the count of distinct \"singer.Singer_ID\" for each citizenship. 2. Condition Structure: No specific filtering condition is needed, as we want to count all singers grouped by their citizenship. 3. Join Structure: No JOIN is necessary since we are only using the \"singer\" table to get the citizenship and singer information. 4. Aggregation Structure: Use COUNT to aggregate the number of singers for each citizenship and GROUP BY \"singer.Citizenship\" to group the results accordingly.","921":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names from both the Professionals and Owners tables. Use the FROM clause to specify these tables. 2. Condition Structure: Use a WHERE clause to filter out first names that are also present in the Dogs table, ensuring we only get first names that are not used as dog names. 3. Join Structure: Not required, as we are querying from two separate tables (Professionals and Owners) and comparing them against the Dogs table. 4. Aggregation Structure: Not needed, as we are simply retrieving distinct first names without any aggregation.","922":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional ID, role, and first name from the Professionals table. Use the FROM clause to specify the Professionals table and join it with the Treatments table to link professionals with their treatment records. 2. Condition Structure: Use the HAVING clause to filter for professionals who have performed two or more treatments, which will be determined by counting the number of treatments associated with each professional. 3. Join Structure: Use an INNER JOIN between the Professionals and Treatments tables based on the professional ID to connect professionals with their treatment records. 4. Aggregation Structure: Use COUNT to aggregate the number of treatments per professional and filter the results using the HAVING clause to include only those professionals with two or more treatments.","923":"1. Sequential Structure: Start with the SELECT clause to count the number of owners. Use the FROM clause to specify the Owners table. 2. Condition Structure: Use a WHERE clause to filter owners who do not have any dogs. This can be achieved by checking for owners whose owner_id is not present in the Dogs table. 3. Join Structure: Not required, as we are only filtering based on the presence of owner_id in the Dogs table. 4. Aggregation Structure: Use COUNT to aggregate the number of owners who meet the specified condition.","924":"1. Sequential Structure: Start with the SELECT clause to retrieve the breed name from the Breeds table. Use the FROM clause to specify the Breeds table and join it with the Dogs table to relate breeds to the dogs. 2. Join Structure: Use an INNER JOIN between the Breeds and Dogs tables based on the breed_code to connect dogs with their respective breeds. 3. Aggregation Structure: Use GROUP BY to group the results by breed_code, allowing us to count the number of dogs for each breed. 4. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of dogs, and limit the results to the top entry to find the breed with the most dogs.","925":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of students. Use the FROM clause to specify the Highschooler table. 2. Aggregation Structure: Use GROUP BY to group records by student ID to count the number of likes each student has. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of likes is at least 2, ensuring we only get students with two or more likes. 4. Join Structure: Use an INNER JOIN between the Highschooler and Likes tables based on student ID to relate students with their likes.","926":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of students from the Highschooler table. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Apply a WHERE clause to filter students who do not have any friends. This can be done by ensuring that the student ID does not exist in the Friend table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching entries in the Friend table. 4. Aggregation Structure: Not needed, as we are simply retrieving IDs based on specified conditions without any aggregation.","927":"1. Sequential Structure: Start with the SELECT clause to retrieve the average age of the dogs. We will use the AVG function on the \"Dogs.age\" field. 2. Condition Structure: No specific filtering condition is needed beyond ensuring we only consider dogs that have undergone treatments. 3. Join Structure: Use a JOIN between the \"Dogs\" and \"Treatments\" tables based on the dog ID to link each dog with its treatment records. 4. Aggregation Structure: Use the AVG function to calculate the average age of the dogs that have treatments.","928":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner's first name and last name, as well as the size of the dog. 2. Condition Structure: No specific filtering condition is needed, as we want to list all owners and their corresponding dog's size. 3. Join Structure: Use an INNER JOIN to connect the \"Owners\" table with the \"Dogs\" table based on the owner_id, ensuring we get the correct dog size for each owner. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the required fields without summarizing data.","929":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Treatments.date_of_treatment\" and \"Professionals.first_name.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to retrieve all treatments and their corresponding professionals. 3. Join Structure: Use a JOIN between the \"Treatments\" and \"Professionals\" tables based on \"professional_id\" to link each treatment with the professional who performed it. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the date and the professional's first name for each treatment.","930":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct professionals. Use the FROM clause to specify the Treatments table, as it contains the relationship between treatments and professionals. 2. Condition Structure: No specific condition is needed since we want to count all professionals who have performed any treatment. 3. Join Structure: Not required, as we can directly count the distinct professional IDs from the Treatments table. 4. Aggregation Structure: Use the COUNT function to count the distinct professional IDs from the Treatments table.","931":"1. Sequential Structure: Start with the SELECT clause to count the number of dogs. Use the FROM clause to specify the Dogs table. 2. Condition Structure: Use a WHERE clause to filter dogs whose age is less than the average age of all dogs. 3. Join Structure: Not required, as all necessary data is available within the Dogs table. 4. Aggregation Structure: Use the AVG function in a subquery to calculate the average age of dogs, which will be used in the WHERE clause to filter the records.","932":"1. Sequential Structure: Start with the SELECT clause to retrieve the first name and last name of professionals. Use the FROM clause to specify the Treatments table and join it with the Professionals table to link treatments with the professionals who performed them. 2. Condition Structure: Use a WHERE clause to filter for treatments where the cost is below the average cost of all treatments. 3. Join Structure: Use an INNER JOIN between the Treatments and Professionals tables based on the professional_id to connect treatment records with the professionals who performed them. 4. Aggregation Structure: Use a subquery within the WHERE clause to calculate the average cost of treatments, filtering out those that are equal to or above this average.","933":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Name\" of singers who are not French citizens. 2. Condition Structure: Use a WHERE clause to filter out singers whose citizenship is 'French'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of singers based on the specified condition.","934":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of singers. Use the FROM clause to specify the singer table. 2. Condition Structure: Apply a WHERE clause to filter singers who do not have any songs. This can be achieved by ensuring that the Singer_ID from the singer table is not present in the song table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching Singer_ID entries in the song table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","935":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of dogs. Use the FROM clause to specify the Dogs table. 2. Condition Structure: Use a WHERE clause to filter for dogs that do not have any corresponding entries in the Treatments table, indicating they have not received any treatment. 3. Join Structure: Not required, as we can use a subquery to check for the absence of treatments for each dog. 4. Aggregation Structure: Use COUNT to aggregate the number of dogs that meet the specified condition.","936":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of high schoolers. Use the FROM clause to specify the Highschooler table. 2. Join Structure: Use JOINs to connect the Highschooler table with the Friend table to ensure the high schoolers have friends, and with the Likes table to ensure they are liked by someone else. 3. Condition Structure: No specific WHERE clause is needed since we are looking for high schoolers who meet both conditions (having friends and being liked). 4. Aggregation Structure: Not required, as we are simply retrieving IDs based on the specified relationships without any aggregation.","937":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"conductor.Name\" and \"orchestra.Orchestra.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to show all conductors and their corresponding orchestras. 3. Join Structure: Use an INNER JOIN to connect the \"conductor\" table with the \"orchestra\" table based on the shared key \"Conductor_ID.\" 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of conductors and their orchestras.","938":"1. Sequential Structure: Start with the SELECT clause to specify the cost of the treatment, which is \"Treatments.cost_of_treatment\". 2. Condition Structure: No specific filtering condition is needed since we want the most recent treatment. 3. Join Structure: No JOIN is necessary as all required information is in the \"Treatments\" table. 4. Aggregation Structure: Use ORDER BY on \"Treatments.date_of_treatment\" in descending order to get the most recent treatment and apply LIMIT 1 to retrieve its cost.","939":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the grade of the high schoolers and the count of high schoolers in each grade. 2. Aggregation Structure: Use COUNT to calculate the number of high schoolers for each grade. 3. Grouping Structure: Use GROUP BY on \"Highschooler.grade\" to aggregate the results by each grade. 4. Join Structure: No JOIN is required since all necessary information is available in the \"Highschooler\" table.","940":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries in Africa and to ensure their population is less than the population of any country in Asia. 3. Join Structure: Not required, as we only need data from the country table and the filtering can be done using a subquery. 4. Aggregation Structure: Use a subquery in the WHERE clause to compare the population of African countries against the populations of all Asian countries.","941":"1. Sequential Structure: Start with the SELECT clause to retrieve the name, independence year, and surface area of the country. Use the FROM clause to specify the country table. 2. Condition Structure: No specific condition is needed in the WHERE clause, as we are interested in the country with the smallest population. 3. Join Structure: Not required, as we only need data from the country table. 4. Aggregation Structure: Use the MIN function to find the smallest population and filter the country based on this value.","942":"1. Sequential Structure: Start with the SELECT clause to retrieve the last name of the owner. Use the FROM clause to specify the Owners table. 2. Condition Structure: Use a WHERE clause to filter for the youngest dog by selecting the minimum age from the Dogs table. 3. Join Structure: Use an INNER JOIN between the Owners and Dogs tables based on the owner_id to link each dog to its owner. 4. Aggregation Structure: Use the MIN function to find the youngest dog's age and filter the results accordingly.","943":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"age\" of the oldest dog. 2. Condition Structure: No specific filtering condition is needed since we want to find the maximum age among all dogs. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"Dogs\" table. 4. Aggregation Structure: Use the MAX function to find the maximum age of the dogs.","944":"1. Sequential Structure: Start with the SELECT clause to count the number of professionals. Use the FROM clause to specify the Professionals table. 2. Condition Structure: Use a WHERE clause to filter professionals who did not operate any treatment on dogs. This can be achieved by checking that the professional_id is not present in the Treatments table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching professional_id entries in the Treatments table. 4. Aggregation Structure: Use COUNT to aggregate the number of professionals who meet the specified condition.","945":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional ID and cell phone number from the Professionals table. Use the FROM clause to specify the Professionals table. 2. Join Structure: Use an INNER JOIN between the Treatments and Professionals tables based on the professional ID to link treatment records with the professionals who performed them. 3. Aggregation Structure: Use GROUP BY to group the results by professional ID, allowing us to count the number of distinct treatment types each professional operates. 4. Condition Structure: Apply a HAVING clause to filter for professionals who operate two or more types of treatments, ensuring we only get those with a count of treatment types greater than or equal to 2.","946":"1. Sequential Structure: Start with the SELECT clause to retrieve the district and the count of cities. Use the FROM clause to specify the city table. 2. Aggregation Structure: Use GROUP BY to group the results by district to count the number of cities in each district. 3. Condition Structure: Use the HAVING clause to filter the groups where the population of cities is greater than the average population of all cities. 4. Subquery Structure: Use a subquery in the HAVING clause to calculate the average population of cities, which will be used to filter the districts.","947":"1. Sequential Structure: Start with the SELECT clause to retrieve the minimum grade from the Highschooler table. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Use a WHERE clause to filter for students who have no friends. This can be achieved by ensuring that the student ID does not exist in the Friend table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching student IDs in the Friend table. 4. Aggregation Structure: Use the MIN function to find the minimum grade among the filtered students who have no friends.","948":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Treatments.cost_of_treatment\" and \"Treatment_Types.treatment_type_description.\" 2. Condition Structure: No specific filtering condition is needed, as we want to list all treatments and their corresponding descriptions. 3. Join Structure: Use a JOIN between the \"Treatments\" and \"Treatment_Types\" tables based on \"treatment_type_code\" to link each treatment with its type description. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the costs and descriptions.","949":"1. Sequential Structure: Start with the SELECT clause to retrieve \"Friend.student_id\" and the count of friends for each student. 2. Condition Structure: No specific filtering condition is needed, as we want to count all friends for each student. 3. Join Structure: Use a JOIN between the \"Highschooler\" and \"Friend\" tables based on \"Highschooler.ID\" and \"Friend.student_id\" to associate each student with their friends. 4. Aggregation Structure: Use COUNT to count the number of friends for each student and GROUP BY \"Friend.student_id\" to group the results by each student.","950":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes from the country table. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter out countries that speak English by checking the language in the countrylanguage table. 3. Join Structure: Use a LEFT JOIN between the country table and the countrylanguage table on the country code to include all countries and their languages. 4. Aggregation Structure: Not needed, as we are simply filtering based on the presence of the English language.","951":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"orchestra.Record_Company\". 2. Aggregation Structure: Use COUNT to determine the number of orchestras for each record format. 3. Grouping Structure: Use GROUP BY on \"orchestra.Record_Company\" to aggregate the results by each record format. 4. Ordering Structure: Use ORDER BY in ascending order on the count of orchestras to sort the results. 5. Join Structure: No JOIN is required since all necessary information is available in the \"orchestra\" table.","952":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional ID and cell phone number from the Professionals table. Use the FROM clause to specify the Professionals table and join it with the Treatments table to link professionals with the treatments they have performed. 2. Condition Structure: Use the HAVING clause to filter for professionals who have performed at least two different types of treatments. This will be determined by counting the distinct treatment types associated with each professional. 3. Join Structure: Use an INNER JOIN between the Professionals and Treatments tables based on the professional ID to connect professionals with their treatment records. 4. Aggregation Structure: Use COUNT(DISTINCT treatment_type_code) within the HAVING clause to ensure that only professionals who have performed two or more distinct treatment types are included in the results.","953":"1. Sequential Structure: Start with the SELECT clause to retrieve the professional's ID, role, and first name. Use the FROM clause to specify the Professionals table. 2. Aggregation Structure: Use GROUP BY to group records by professional ID to count the number of treatments each professional has done. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of treatments is at least 2, ensuring we only get professionals who have performed two or more treatments. 4. Join Structure: Use an INNER JOIN between the Treatments and Professionals tables based on the professional ID to relate treatments to the professionals who performed them.","954":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct names of cities, specifically \"city.Name.\" 2. Condition Structure: Apply a WHERE clause to filter for cities that are in Asia and have Chinese as the official language. This will involve checking both the continent and the language. 3. Join Structure: Use JOIN clauses to connect the \"city\" table with the \"country\" table based on \"city.CountryCode = country.Code\" and the \"countrylanguage\" table based on \"countrylanguage.CountryCode = country.Code.\" 4. Aggregation Structure: Use DISTINCT to ensure that only unique city names are returned.","955":"1. Sequential Structure: Start with the SELECT clause to retrieve the district and the count of cities. Use the FROM clause to specify the city table. 2. Aggregation Structure: Use GROUP BY to group the results by district, allowing us to count the number of cities in each district. 3. Condition Structure: Use the HAVING clause to filter the groups where the population of cities is greater than the average population of all cities. 4. Aggregation Structure: Use a subquery to calculate the average population of all cities, which will be used in the HAVING clause to filter districts based on the population condition.","956":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the singer's name. 2. Condition Structure: No specific filtering condition is required since we want all singers and their net worth. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed, but we will use ORDER BY to sort the results in ascending order based on \"singer.Net_Worth_Millions\".","957":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of conductors, specifically \"conductor.Name.\" 2. Condition Structure: Apply a WHERE clause to filter for orchestras that were founded after the year 2008, using \"orchestra.Year_of_Founded > 2008.\" 3. Join Structure: Use a JOIN between the \"orchestra\" and \"conductor\" tables based on the foreign key relationship \"orchestra.Conductor_ID = conductor.Conductor_ID\" to link each orchestra with its respective conductor. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of conductors without any need for grouping or counting.","958":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"singer.Name\" and the total sales of their songs. We will use the SUM function on \"song.Sales\" to get the total sales for each singer. 2. Condition Structure: No specific filtering condition is needed here, as we want to include all singers and their corresponding song sales. 3. Join Structure: Use an INNER JOIN to connect the \"singer\" table with the \"song\" table based on the shared key \"Singer_ID\" to associate each singer with their songs. 4. Aggregation Structure: Use GROUP BY on \"singer.Name\" to aggregate the total sales for each singer, ensuring that we get the total sales per singer.","959":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of high schoolers. 2. Condition Structure: No specific filtering condition is needed since we want to count all high schoolers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"Highschooler\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of high schoolers.","960":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"name\" and \"grade\" of each high schooler. 2. Condition Structure: No specific filtering condition is needed since we want to retrieve all high schoolers. 3. Join Structure: No JOIN is necessary as all required information is available in the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and grades of all high schoolers.","961":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner ID and zip code from the Owners table. Use the FROM clause to specify the Owners table and join it with the Treatments and Dogs tables to access the treatment costs associated with each dog owned by the owner. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to calculate the total spending for each owner. 3. Join Structure: Use JOIN clauses to connect the Owners table with the Dogs table on owner_id and then join the Treatments table on dog_id to access the treatment costs for each dog. 4. Aggregation Structure: Use GROUP BY to group the results by owner_id and then use SUM to calculate the total cost of treatments for each owner. Finally, apply the ORDER BY clause to sort the results in descending order based on the total spending and limit the results to get the owner who spent the most.","962":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"orchestra.Major_Record_Format\". 2. Condition Structure: No specific filtering condition is required since we want to retrieve all major record formats. 3. Grouping Structure: Use GROUP BY on \"orchestra.Major_Record_Format\" to aggregate the results by each major record format. 4. Aggregation Structure: Use COUNT to determine the frequency of each major record format. 5. Ordering Structure: Use ORDER BY in descending order on the count to sort the major record formats by their frequency. 6. Join Structure: No JOIN is required since all necessary information is available in the \"orchestra\" table.","963":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Owners.first_name\" and \"Dogs.name.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all pairs of owners and their dogs. 3. Join Structure: Use an INNER JOIN to connect the \"Owners\" table with the \"Dogs\" table based on the shared key \"owner_id.\" 4. Aggregation Structure: No aggregation is needed since we are simply listing the pairs of names.","964":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct professionals. Use the FROM clause to specify the Professionals table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to count all professionals who have treated dogs. 3. Join Structure: Use an INNER JOIN between the Professionals table and the Treatments table based on the professional_id to link professionals with their treatment records. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the unique professional IDs from the joined tables, ensuring we only count each professional once.","965":"1. Sequential Structure: Start with the SELECT clause to retrieve the lowest grade from the Highschooler table. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Use a WHERE clause to filter for students who do not have any friends. This can be done by ensuring that the student ID is not present in the Friend table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching student IDs in the Friend table. 4. Aggregation Structure: Use the MIN function to find the lowest grade among the filtered students who do not have any friends.","966":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries from the country table. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries in the African region and to ensure their population is less than any country in Asia. This will involve a subquery to get the minimum population of countries in Asia. 3. Join Structure: Not required, as all necessary data is contained within the country table. 4. Aggregation Structure: Use a subquery to find the minimum population of countries in Asia, which will be used in the WHERE clause to filter African countries.","967":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the dog's name, age, and weight. 2. Condition Structure: Use a WHERE clause to filter for dogs that have been abandoned, indicated by \"Dogs.abandoned_yn\" being equal to 1. 3. Join Structure: No JOIN is necessary since all required information is available in the \"Dogs\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of the abandoned dogs.","968":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names and last names of professionals. Use the FROM clause to specify the Treatments table and JOIN it with the Professionals table to link treatments with the professionals who performed them. 2. Condition Structure: Use a WHERE clause to filter for treatments that cost less than the average cost of treatments. This will involve a subquery to calculate the average cost. 3. Join Structure: Use an INNER JOIN between the Treatments and Professionals tables based on the professional_id to connect treatment records with the corresponding professionals. 4. Aggregation Structure: Use the AVG function in a subquery to calculate the average cost of treatments, which will be used in the WHERE clause to filter the results.","969":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the email, cell phone, and home phone of the professionals. 2. Condition Structure: No specific filtering condition is required as we want to retrieve all professionals' contact information. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"Professionals\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the specified fields for all professionals.","970":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of singers. Use the FROM clause to specify the singer table. 2. Join Structure: Join the singer table with the song table on the Singer_ID to relate singers to their songs. 3. Aggregation Structure: Use GROUP BY to group records by Singer_ID, allowing us to count the number of songs for each singer. 4. Condition Structure: Apply a HAVING clause to filter groups where the count of songs is greater than one, ensuring we only get singers with more than one song.","971":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct names of singers, which is \"singer.Name.\" 2. Condition Structure: Apply a WHERE clause to filter for songs with sales greater than 300,000. 3. Join Structure: Use a JOIN between the \"singer\" and \"song\" tables based on \"Singer_ID\" to associate each song with its respective singer. 4. Aggregation Structure: Use DISTINCT to ensure that only unique singer names are returned.","972":"1. Sequential Structure: Start with the SELECT clause to count the number of singers, which will be a single aggregate value. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all singers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"singer\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of singers in the \"singer\" table.","973":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are the owner's first name and the dog's name. 2. Condition Structure: Apply a WHERE clause to filter for owners who live in Virginia. 3. Join Structure: Use a JOIN between the \"Dogs\" and \"Owners\" tables based on the owner_id to link each dog with its respective owner. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names without any summarization.","974":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conductor.Name\" of the conductors we are interested in. 2. Condition Structure: Apply a WHERE clause to filter for orchestras that were founded after the year 2008. 3. Join Structure: Use a JOIN between the \"orchestra\" and \"conductor\" tables based on the foreign key relationship \"orchestra.Conductor_ID = conductor.Conductor_ID\" to link each orchestra with its respective conductor. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of conductors without any need for summarization.","975":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct continents, total population, and average life expectancy. Use the FROM clause to specify the country table, as it contains the necessary fields for continents, population, and life expectancy. 2. Aggregation Structure: Use GROUP BY to group the results by continent, allowing us to calculate the total population and average life expectancy for each continent. 3. Condition Structure: Apply a HAVING clause to filter the results to only include continents where the average life expectancy is less than 72. 4. Join Structure: Not required in this case, as all necessary data can be obtained from the country table alone.","976":"1. Sequential Structure: Start with the SELECT clause to retrieve the average grade of students. Use the FROM clause to specify the Highschooler table, as it contains the grade information. 2. Condition Structure: Use a WHERE clause to filter for students who have friends. This can be determined by checking for the existence of records in the Friend table that match the student IDs in the Highschooler table. 3. Join Structure: Use an INNER JOIN between the Highschooler and Friend tables based on the student ID to ensure we are only considering students who have friends. 4. Aggregation Structure: Use the AVG function to calculate the average grade of the filtered students.","977":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Highschooler.grade\" and the count of high schoolers in each grade. 2. Aggregation Structure: Use COUNT to calculate the number of high schoolers for each grade. 3. Grouping Structure: Use GROUP BY on \"Highschooler.grade\" to aggregate the results by each grade. 4. Ordering Structure: Use ORDER BY in descending order on the count to rank grades by the number of high schoolers. 5. Limiting Structure: Use LIMIT 1 to retrieve only the grade with the most high schoolers.","978":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct states from the Owners and Professionals tables. Use the FROM clause to specify the Owners table. 2. Join Structure: Use an INNER JOIN between the Owners and Professionals tables based on the state column to find states that have both owners and professionals. 3. Condition Structure: No additional conditions are needed since we are only interested in states that appear in both tables. 4. Aggregation Structure: Not required, as we are retrieving distinct states without any aggregation.","979":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the dogs. Use the FROM clause to specify the Dogs table. 2. Condition Structure: Apply a WHERE clause to filter dogs based on the total cost of treatments. We need to ensure that the total cost of treatments for each dog is less than or equal to 1000. 3. Join Structure: Use a JOIN clause to connect the Dogs table with the Treatments table based on the dog_id to access treatment costs associated with each dog. 4. Aggregation Structure: Use the SUM function to calculate the total cost of treatments for each dog and apply a HAVING clause to filter for those dogs whose total treatment cost is less than or equal to 1000.","980":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct citizenships from the singer table. Use the FROM clause to specify the singer table. 2. Condition Structure: Apply a WHERE clause to filter singers based on their birth year, ensuring we only include those born before 1945 or after 1955. 3. Join Structure: Not required, as we are only working with the singer table. 4. Aggregation Structure: Use the DISTINCT keyword to ensure that we only get unique citizenships that meet the specified birth year conditions.","981":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the distinct citizenships of singers and the count of singers for each citizenship. 2. Aggregation Structure: Use COUNT to calculate the number of singers for each citizenship. 3. Grouping Structure: Use GROUP BY on \"singer.Citizenship\" to aggregate the results by each citizenship. 4. Join Structure: No JOIN is required since all necessary information is available in the \"singer\" table.","982":"1. Sequential Structure: Start with the SELECT clause to retrieve the cost of the treatment. Use the FROM clause to specify the Treatments table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want the most recent treatment based on the date. 3. Join Structure: Not required, as we only need data from the Treatments table. 4. Aggregation Structure: Use the ORDER BY clause to sort the treatments by date in descending order and limit the result to the top entry to get the most recent treatment cost.","983":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the birth years and citizenships of the singers. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all singers' birth years and citizenships. 3. Join Structure: No JOIN is necessary because all required information is contained within the \"singer\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth years and citizenships of all singers.","984":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of students. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Apply a WHERE clause to filter students who have a grade higher than 5. 3. Join Structure: Use a JOIN between the Highschooler table and the Friend table to count the number of friends for each student. 4. Aggregation Structure: Use GROUP BY to group the results by student ID and use HAVING to filter for students who have at least 2 friends.","985":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the singer's name. 2. Condition Structure: No specific filtering condition is required since we want to list all singers. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"singer\" table. 4. Ordering Structure: Use ORDER BY to sort the results in ascending order based on \"singer.Net_Worth_Millions\".","986":"1. Sequential Structure: Start with the SELECT clause to count the number of dogs. Use the FROM clause to specify the Dogs table. 2. Condition Structure: Use a WHERE clause to filter for dogs that do not have any corresponding entries in the Treatments table, indicating they have not gone through any treatment. 3. Join Structure: Not required, as we can use a subquery to check for the absence of treatments for each dog. 4. Aggregation Structure: Use COUNT to aggregate the total number of dogs that meet the specified condition.","987":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"country.Name\". 2. Condition Structure: Use a WHERE clause to filter for countries that are in the \"Europe\" continent and have a population equal to 80000. 3. Join Structure: Use a JOIN clause to combine the \"country\" table with the \"city\" table based on the foreign key relationship where \"city.CountryCode\" equals \"country.Code\". 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of countries that meet the specified conditions.","988":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the total population and average area of the countries. 2. Condition Structure: Use a WHERE clause to filter for countries in the continent of 'North America' and whose area is greater than 3000. 3. Join Structure: Use JOIN to combine the \"country\" table with the \"city\" table based on the foreign key relationship where \"city.CountryCode\" equals \"country.Code\". 4. Aggregation Structure: Use SUM to calculate the total population and AVG to calculate the average area for the filtered countries.","989":"1. Sequential Structure: Start with the SELECT clause to count the number of countries. Use the FROM clause to specify the countrylanguage table, as it contains the language data associated with countries. 2. Condition Structure: Use the WHERE clause to filter for records where the language is 'Spanish' and the percentage is greater than 50, indicating that Spanish is the predominantly spoken language. 3. Join Structure: Not required, as we can directly filter the countrylanguage table based on the language condition without needing to join with the country table for this specific count. 4. Aggregation Structure: Use the COUNT function to aggregate the number of countries that meet the specified condition.","990":"1. Sequential Structure: Start with the SELECT clause to retrieve the owner ID, first name, and last name from the Owners table. Use the FROM clause to specify the Owners table. 2. Join Structure: Use an INNER JOIN between the Owners and Dogs tables based on the owner_id to relate owners to their dogs. 3. Aggregation Structure: Use GROUP BY to group the results by owner_id to count the number of dogs each owner has. 4. Condition Structure: Apply a HAVING clause to filter for the owner with the maximum number of dogs, using a subquery to find the maximum count of dogs.","991":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"orchestra.Record_Company\" and the count of orchestras associated with each record company. 2. Condition Structure: No specific filtering condition is needed, as we want to count all orchestras grouped by their record companies. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"orchestra\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of orchestras for each record company and GROUP BY \"orchestra.Record_Company\" to group the results accordingly.","992":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"song.Title\" and \"singer.Name.\" 2. Condition Structure: No specific filtering condition is needed, as we want to retrieve all song titles and their corresponding singer names. 3. Join Structure: Use a JOIN between the \"song\" and \"singer\" tables based on the \"Singer_ID\" to link each song with its respective singer. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and names without any summarization.","993":"1. Sequential Structure: Start with the SELECT clause to specify the average age of all dogs. 2. Condition Structure: No specific filtering condition is needed since we want the average age of all dogs. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Dogs\" table. 4. Aggregation Structure: Use the AVG function to calculate the average age of the dogs.","994":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of high schoolers and the count of their likes. We will select \"Highschooler.name\" and use COUNT to get the number of likes. 2. Condition Structure: No specific filtering condition is needed, but we will ensure that we only include high schoolers who have likes. 3. Join Structure: Use a JOIN between the \"Highschooler\" and \"Likes\" tables based on the student ID to link each high schooler with their likes. 4. Aggregation Structure: Use COUNT on \"Likes.liked_id\" to count the number of likes for each high schooler, and GROUP BY \"Highschooler.name\" to aggregate the results by each high schooler.","995":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of singers. Use the FROM clause to specify the singer table and JOIN it with the song table to link singers with their songs. 2. Aggregation Structure: Use GROUP BY to group records by singer ID, allowing us to count the number of songs for each singer. 3. Condition Structure: Apply a HAVING clause to filter groups where the count of songs is greater than one, ensuring we only get singers with more than one song. 4. Join Structure: Use an INNER JOIN between the singer and song tables based on Singer_ID to relate singers to their songs.","996":"1. Sequential Structure: Start with the SELECT clause to retrieve the average age of dogs. Use the FROM clause to specify the Dogs table. 2. Join Structure: Use an INNER JOIN between the Dogs and Treatments tables based on the dog_id to connect dogs with their treatment records. 3. Aggregation Structure: Use the AVG function to calculate the average age of the dogs that have undergone treatments. 4. Condition Structure: No additional filtering is needed since we are interested in all dogs that have gone through any treatments.","997":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the number of conductors. 2. Condition Structure: No specific filtering condition is needed since we want to count all conductors. 3. Join Structure: No JOIN is necessary as all required information is in the \"conductor\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of conductors.","998":"1. Sequential Structure: Start with the SELECT clause to retrieve the first names from both the Professionals and Owners tables. Use the FROM clause to specify these tables. 2. Condition Structure: Use a WHERE clause to filter out first names that are also present in the Dogs table, ensuring we only get names that are not used as dog names. 3. Join Structure: Not required, as we are only filtering based on the presence of names in the Dogs table without needing to join tables. 4. Aggregation Structure: Not needed, as we are simply retrieving distinct first names without any aggregation.","999":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the country's population, name, and head of state. 2. Condition Structure: No specific filtering condition is needed since we want the country with the largest area. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"country\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"country.SurfaceArea\" to rank countries by area and apply LIMIT 1 to retrieve the country with the largest area.","1000":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of likes. Use the FROM clause to specify the Likes table, as we need to count the likes associated with a specific student. 2. Condition Structure: Use the WHERE clause to filter for the student named 'Kyle' by joining with the Highschooler table to match the student ID. 3. Join Structure: Use an INNER JOIN between the Likes table and the Highschooler table based on the student ID to link likes to the correct student. 4. Aggregation Structure: Use the COUNT function to aggregate the number of likes for Kyle.","1001":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population and average surface area. Use the FROM clause to specify the country table as the primary source of data. 2. Condition Structure: Apply a WHERE clause to filter for countries in North America with a surface area greater than 3000. 3. Join Structure: Not required, as we are only using data from the country table. 4. Aggregation Structure: Use SUM to calculate the total population and AVG to calculate the average surface area for the filtered countries.","1002":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes. Use the FROM clause to specify the countrylanguage table, as it contains the language information linked to countries. 2. Condition Structure: Use the WHERE clause to filter for languages that are not English. This will ensure we only get country codes for countries where English is not spoken. 3. Join Structure: Use an INNER JOIN between the countrylanguage and country tables based on the CountryCode to relate languages to their respective countries. 4. Aggregation Structure: Not needed, as we are simply retrieving country codes based on the specified condition without any aggregation.","1003":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Dogs.date_arrived\" and \"Dogs.date_departed.\" 2. Condition Structure: No specific filtering condition is needed beyond ensuring that we only include dogs that have undergone treatment. 3. Join Structure: Use a JOIN between the \"Dogs\" and \"Treatments\" tables based on \"dog_id\" to link each dog with its treatment records. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the arrival and departure dates for dogs that have received treatment.","1004":"1. Sequential Structure: Start with the SELECT clause to retrieve the years of founding from the orchestra table. Use the FROM clause to specify the orchestra table and JOIN it with the performance table to link orchestras with their performances. 2. Condition Structure: Use the HAVING clause to filter orchestras that have had more than one performance by counting the performances associated with each orchestra. 3. Join Structure: Use an INNER JOIN between the orchestra and performance tables based on the Orchestra_ID to connect orchestras with their performances. 4. Aggregation Structure: Use GROUP BY to group the results by the orchestra's ID and apply COUNT to determine the number of performances for each orchestra, filtering those with more than one performance using the HAVING clause.","1005":"1. Sequential Structure: Start with the SELECT clause to specify the count of high schoolers. 2. Condition Structure: Use a WHERE clause to filter for high schoolers in grades 9 or 10. 3. Join Structure: No JOIN is necessary since all relevant information is in the \"Highschooler\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of high schoolers that meet the specified grade condition.","1006":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the conductor. Use the FROM clause to specify the conductor table. 2. Condition Structure: No specific condition is needed since we want to find the conductor with the greatest number of years worked. 3. Join Structure: Not required, as we only need data from the conductor table. 4. Aggregation Structure: Use the MAX function to find the maximum value of years worked and filter the results accordingly.","1007":"1. Sequential Structure: Start with the SELECT clause to retrieve the country names and the count of languages spoken. Use the FROM clause to specify the country table and JOIN it with the countrylanguage table to link countries with their languages. 2. Aggregation Structure: Use GROUP BY to group the results by country code, allowing us to count the number of languages spoken by each country. 3. Condition Structure: Apply a HAVING clause to filter the results to include only those countries that speak more than 2 languages. 4. Join Structure: Use an INNER JOIN between the country and countrylanguage tables based on the country code to relate countries with their respective languages.","1008":"1. Sequential Structure: Start with the SELECT clause to specify the average age of all dogs. 2. Condition Structure: No specific filtering condition is needed since we want the average age of all dogs. 3. Join Structure: No JOIN is required as all necessary information is available in the \"Dogs\" table. 4. Aggregation Structure: Use the AVG function to calculate the average age of the dogs.","1009":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of friends for each student. We will use COUNT to aggregate the number of friends. 2. Condition Structure: No specific filtering condition is needed, as we want to count all friends for each student. 3. Join Structure: Use a JOIN between the \"Highschooler\" table and the \"Friend\" table based on the student ID to associate each student with their friends. 4. Aggregation Structure: Use GROUP BY to group the results by each student, allowing us to count the number of friends for each student.","1010":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the birth year and citizenship of the singers. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all singers' birth years and citizenships. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"singer\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the specified fields.","1011":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"conductor.Name\". 2. Condition Structure: No specific filtering condition is required since we want to list all conductors. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"conductor\" table. 4. Aggregation Structure: No aggregation is needed; however, we will use ORDER BY to sort the results in ascending order based on \"conductor.Age\".","1012":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"property_type_description\" from the \"Ref_Property_Types\" table. 2. Condition Structure: No specific filtering condition is mentioned in the question, but we will need to join the tables based on the property type code. 3. Join Structure: Use a JOIN clause to connect the \"Properties\" table with the \"Ref_Property_Types\" table based on the \"property_type_code\" to get the corresponding property type descriptions. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the property type descriptions.","1013":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the maximum charge amount from the \"Charges\" table. 2. Aggregation Structure: Use the MAX function to find the highest charge amount. 3. Condition Structure: No specific filtering condition is needed since we want the maximum charge amount across all charge types. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"Charges\" table.","1014":"1. Sequential Structure: Start with the SELECT clause to retrieve the name, population, and head of state of the country. Use the FROM clause to specify the country table. 2. Condition Structure: No specific condition (WHERE clause) is needed as we are interested in the country with the largest area. 3. Join Structure: Not required, as we only need data from the country table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by surface area and limiting to the top result effectively gives us the country with the largest area.","1015":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of countries. Use the FROM clause to specify the country table. 2. Condition Structure: Apply a WHERE clause to filter for countries in the continent of Asia and to ensure their population is greater than the maximum population of any country in Africa. 3. Join Structure: Not required, as all necessary data is available in the country table. 4. Aggregation Structure: Use a subquery to find the maximum population of countries in Africa, which will be used in the WHERE clause to filter Asian countries.","1016":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"singer.Citizenship\" field, as we want to find the most common citizenship. 2. Condition Structure: No specific filtering condition is needed here, as we are interested in all citizenships present in the singer table. 3. Join Structure: No JOIN is necessary since we are only querying the \"singer\" table for citizenship data. 4. Aggregation Structure: Use GROUP BY to group the results by \"singer.Citizenship\" and apply COUNT to determine the frequency of each citizenship. Use ORDER BY in descending order to rank them by count, and LIMIT 1 to get the most common citizenship.","1017":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct nationalities of conductors. 2. Condition Structure: No specific filtering condition is needed since we want to count all different nationalities present in the conductor table. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"conductor\" table. 4. Aggregation Structure: Use COUNT(DISTINCT conductor.Nationality) to count the unique nationalities of conductors.","1018":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, which are \"Owners.first_name\" and \"Dogs.name.\" 2. Condition Structure: No specific filtering condition is needed here, as we want to list all owners and their dogs. 3. Join Structure: Use an INNER JOIN to connect the \"Owners\" table with the \"Dogs\" table based on the shared key \"owner_id.\" 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names without any summarization.","1019":"1. Sequential Structure: Start with the SELECT clause to specify the city names for cities with populations in the specified range. 2. Condition Structure: Use a WHERE clause to filter cities where \"city.Population\" is between 160000 and 900000. 3. Join Structure: No JOIN is required, as all necessary information is in the \"city\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving city names that meet the specified population condition.","1020":"1. Sequential Structure: Start with the SELECT clause to specify the count of available features. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all available features. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"Other_Available_Features\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of available features.","1021":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"Treatments.date_of_treatment\" and \"Professionals.first_name.\" 2. Condition Structure: No specific filtering condition is needed, as we want to list all treatments and their corresponding professionals. 3. Join Structure: Use a JOIN between the \"Treatments\" and \"Professionals\" tables based on \"professional_id\" to link each treatment with the professional who performed it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the treatment dates and professional names.","1022":"1. Sequential Structure: Start with the SELECT clause to retrieve the country codes. Use the FROM clause to specify the countrylanguage table, as it contains the language and percentage information. 2. Condition Structure: Use the WHERE clause to filter for records where the language is 'Spanish'. 3. Aggregation Structure: Use GROUP BY to group the results by country code and apply the MAX function to find the largest percentage of Spanish speakers for each country. 4. Join Structure: Join the countrylanguage table with the country table on the CountryCode to ensure we are only considering valid country codes.","1023":"1. Sequential Structure: Start with the SELECT clause to specify the required fields, which are the maximum and minimum share of performances. 2. Condition Structure: Use a WHERE clause to filter performances where the \"performance.Type\" is not equal to \"Live final\". 3. Aggregation Structure: Use the MAX and MIN functions to calculate the maximum and minimum share of the filtered performances. 4. Join Structure: No JOIN is required since all necessary information is contained within the \"performance\" table.","1024":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of owners. Use the FROM clause to specify the Owners table. 2. Condition Structure: Use a WHERE clause to filter owners who do not own any dogs. This can be achieved by ensuring that the owner_id from the Owners table does not exist in the Dogs table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching owner_id entries in the Dogs table. 4. Aggregation Structure: Use COUNT to aggregate the number of owners who meet the specified condition.","1025":"1. Sequential Structure: Start with the SELECT clause to retrieve unique city names. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the country table on the CountryCode to filter cities based on their countries. Additionally, join the countrylanguage table to filter for countries where Chinese is the official language. 3. Condition Structure: Use a WHERE clause to filter for countries that are in the continent of Asia and where the language is 'Chinese' and is marked as official. 4. Aggregation Structure: Use DISTINCT to ensure that only unique city names are returned.","1026":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the country name. 2. Aggregation Structure: No aggregation is needed since we are directly interested in the country names and their populations. 3. Ordering Structure: Use ORDER BY in ascending order on \"country.Population\" to rank countries by their population size. 4. Limiting Structure: Use LIMIT 3 to retrieve only the names of the 3 countries with the fewest people. 5. Join Structure: No JOIN is required since all necessary information is available in the \"country\" table.","1027":"1. Sequential Structure: Start with the SELECT clause to retrieve the charge amount from the Charges table. Use the FROM clause to specify the Charges table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the most expensive charge type. 3. Join Structure: Not required, as we only need data from the Charges table. 4. Aggregation Structure: Use the MAX function to find the maximum charge amount from the Charges table.","1028":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"Highschooler.grade\" for the high schooler named Kyle. 2. Condition Structure: Use a WHERE clause to filter for the high schooler whose name is 'Kyle'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"Highschooler\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the grade for a specific high schooler.","1029":"1. Sequential Structure: Start with the SELECT clause to retrieve the IDs of high school students. Use the FROM clause to specify the Highschooler table. 2. Condition Structure: Apply a WHERE clause to filter for students whose IDs are not present in the Friend table, indicating they do not have any friends. 3. Join Structure: Not required, as we are only filtering based on the absence of matching IDs in the Friend table. 4. Aggregation Structure: Not needed, as we are simply retrieving IDs based on specified conditions without any aggregation.","1030":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum and minimum shares from the performance table. Use the FROM clause to specify the performance table. 2. Condition Structure: Apply a WHERE clause to filter out performances that have the type \"Live final\". 3. Join Structure: Not required, as all necessary data is contained within the performance table. 4. Aggregation Structure: Use the MAX and MIN aggregate functions to calculate the maximum and minimum shares for the filtered performances.","1031":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields: \"Owners.first_name,\" \"Owners.last_name,\" and \"Dogs.size_code.\" 2. Condition Structure: No specific filtering condition is needed, as we want to retrieve information for all owners and their dogs. 3. Join Structure: Use an INNER JOIN to connect the \"Owners\" table with the \"Dogs\" table based on the shared key \"owner_id.\" 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the names and sizes without any summarization.","1032":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of airlines. Use the FROM clause to specify the airlines table. 2. Condition Structure: Use a WHERE clause to filter for airlines that have flights from the airport 'CVO' and do not have flights from 'APG'. 3. Join Structure: Use an INNER JOIN between the airlines and flights tables based on the airline name to connect airlines with their respective flights. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","1033":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct addresses. Use the FROM clause to specify the Addresses table. 2. Condition Structure: Use a WHERE clause to filter the addresses based on the current addresses of students. 3. Join Structure: Use an INNER JOIN between the Students and Addresses tables based on the current_address_id to link students to their current addresses. 4. Aggregation Structure: Use the COUNT function to count the distinct addresses from the Addresses table that are linked to students' current addresses."},"score":{"0":0.0,"1":1.0,"2":1.0,"3":1.0,"4":1.0,"5":1.0,"6":1.0,"7":0.0,"8":1.0,"9":0.0,"10":0.0,"11":1.0,"12":1.0,"13":1.0,"14":0.0,"15":1.0,"16":1.0,"17":0.0,"18":0.0,"19":1.0,"20":0.0,"21":1.0,"22":1.0,"23":0.0,"24":1.0,"25":0.0,"26":1.0,"27":1.0,"28":1.0,"29":0.0,"30":1.0,"31":1.0,"32":1.0,"33":1.0,"34":1.0,"35":1.0,"36":1.0,"37":1.0,"38":1.0,"39":0.0,"40":1.0,"41":1.0,"42":0.0,"43":0.0,"44":1.0,"45":1.0,"46":1.0,"47":1.0,"48":1.0,"49":1.0,"50":1.0,"51":1.0,"52":1.0,"53":1.0,"54":1.0,"55":1.0,"56":1.0,"57":0.0,"58":1.0,"59":1.0,"60":1.0,"61":1.0,"62":1.0,"63":1.0,"64":0.0,"65":1.0,"66":1.0,"67":0.0,"68":1.0,"69":1.0,"70":0.0,"71":1.0,"72":0.0,"73":1.0,"74":1.0,"75":1.0,"76":1.0,"77":1.0,"78":1.0,"79":1.0,"80":1.0,"81":0.0,"82":1.0,"83":0.0,"84":0.0,"85":1.0,"86":0.0,"87":1.0,"88":1.0,"89":1.0,"90":1.0,"91":0.0,"92":1.0,"93":1.0,"94":1.0,"95":1.0,"96":1.0,"97":1.0,"98":0.0,"99":1.0,"100":0.0,"101":1.0,"102":1.0,"103":1.0,"104":1.0,"105":1.0,"106":1.0,"107":0.0,"108":1.0,"109":1.0,"110":0.0,"111":1.0,"112":1.0,"113":0.0,"114":1.0,"115":1.0,"116":1.0,"117":0.0,"118":1.0,"119":1.0,"120":1.0,"121":1.0,"122":1.0,"123":1.0,"124":1.0,"125":1.0,"126":1.0,"127":1.0,"128":1.0,"129":1.0,"130":1.0,"131":1.0,"132":1.0,"133":0.0,"134":1.0,"135":0.0,"136":1.0,"137":1.0,"138":0.0,"139":1.0,"140":1.0,"141":1.0,"142":1.0,"143":1.0,"144":1.0,"145":1.0,"146":1.0,"147":1.0,"148":1.0,"149":1.0,"150":1.0,"151":0.0,"152":0.0,"153":1.0,"154":0.0,"155":1.0,"156":0.0,"157":0.0,"158":1.0,"159":1.0,"160":1.0,"161":1.0,"162":1.0,"163":1.0,"164":1.0,"165":0.0,"166":1.0,"167":0.0,"168":1.0,"169":1.0,"170":1.0,"171":1.0,"172":1.0,"173":0.0,"174":0.0,"175":1.0,"176":1.0,"177":1.0,"178":1.0,"179":1.0,"180":1.0,"181":1.0,"182":1.0,"183":1.0,"184":1.0,"185":0.0,"186":0.0,"187":1.0,"188":1.0,"189":1.0,"190":1.0,"191":1.0,"192":0.0,"193":1.0,"194":1.0,"195":0.0,"196":1.0,"197":1.0,"198":0.0,"199":0.0,"200":1.0,"201":0.0,"202":1.0,"203":1.0,"204":1.0,"205":0.0,"206":1.0,"207":1.0,"208":0.0,"209":1.0,"210":1.0,"211":1.0,"212":1.0,"213":1.0,"214":1.0,"215":1.0,"216":1.0,"217":1.0,"218":1.0,"219":1.0,"220":0.0,"221":1.0,"222":1.0,"223":1.0,"224":1.0,"225":1.0,"226":0.0,"227":1.0,"228":0.0,"229":1.0,"230":1.0,"231":1.0,"232":1.0,"233":0.0,"234":1.0,"235":0.0,"236":1.0,"237":1.0,"238":1.0,"239":1.0,"240":1.0,"241":1.0,"242":1.0,"243":1.0,"244":1.0,"245":1.0,"246":1.0,"247":0.0,"248":1.0,"249":1.0,"250":1.0,"251":1.0,"252":0.0,"253":1.0,"254":1.0,"255":1.0,"256":0.0,"257":1.0,"258":0.0,"259":1.0,"260":1.0,"261":0.0,"262":1.0,"263":1.0,"264":0.0,"265":1.0,"266":0.0,"267":1.0,"268":1.0,"269":1.0,"270":1.0,"271":0.0,"272":1.0,"273":1.0,"274":1.0,"275":1.0,"276":1.0,"277":1.0,"278":0.0,"279":0.0,"280":1.0,"281":1.0,"282":0.0,"283":1.0,"284":1.0,"285":1.0,"286":1.0,"287":1.0,"288":1.0,"289":1.0,"290":1.0,"291":1.0,"292":1.0,"293":1.0,"294":0.0,"295":0.0,"296":1.0,"297":1.0,"298":1.0,"299":1.0,"300":1.0,"301":1.0,"302":1.0,"303":1.0,"304":1.0,"305":1.0,"306":0.0,"307":1.0,"308":1.0,"309":1.0,"310":1.0,"311":0.0,"312":1.0,"313":0.0,"314":0.0,"315":1.0,"316":1.0,"317":1.0,"318":1.0,"319":1.0,"320":1.0,"321":1.0,"322":0.0,"323":1.0,"324":1.0,"325":1.0,"326":0.0,"327":1.0,"328":1.0,"329":0.0,"330":1.0,"331":1.0,"332":1.0,"333":1.0,"334":1.0,"335":1.0,"336":1.0,"337":1.0,"338":1.0,"339":1.0,"340":1.0,"341":0.0,"342":1.0,"343":1.0,"344":1.0,"345":1.0,"346":1.0,"347":1.0,"348":1.0,"349":1.0,"350":1.0,"351":1.0,"352":1.0,"353":1.0,"354":1.0,"355":1.0,"356":0.0,"357":1.0,"358":1.0,"359":1.0,"360":1.0,"361":1.0,"362":1.0,"363":1.0,"364":1.0,"365":1.0,"366":1.0,"367":1.0,"368":1.0,"369":1.0,"370":1.0,"371":0.0,"372":1.0,"373":1.0,"374":0.0,"375":1.0,"376":0.0,"377":1.0,"378":1.0,"379":1.0,"380":1.0,"381":1.0,"382":1.0,"383":1.0,"384":0.0,"385":1.0,"386":1.0,"387":0.0,"388":1.0,"389":1.0,"390":0.0,"391":1.0,"392":1.0,"393":1.0,"394":1.0,"395":1.0,"396":1.0,"397":1.0,"398":1.0,"399":1.0,"400":1.0,"401":0.0,"402":1.0,"403":1.0,"404":1.0,"405":1.0,"406":0.0,"407":1.0,"408":1.0,"409":1.0,"410":1.0,"411":1.0,"412":1.0,"413":1.0,"414":1.0,"415":1.0,"416":0.0,"417":0.0,"418":1.0,"419":1.0,"420":1.0,"421":1.0,"422":1.0,"423":1.0,"424":1.0,"425":0.0,"426":1.0,"427":1.0,"428":0.0,"429":1.0,"430":1.0,"431":0.0,"432":1.0,"433":1.0,"434":1.0,"435":1.0,"436":1.0,"437":1.0,"438":1.0,"439":1.0,"440":1.0,"441":1.0,"442":0.0,"443":1.0,"444":1.0,"445":1.0,"446":1.0,"447":1.0,"448":1.0,"449":0.0,"450":1.0,"451":1.0,"452":1.0,"453":1.0,"454":1.0,"455":0.0,"456":1.0,"457":1.0,"458":0.0,"459":1.0,"460":0.0,"461":1.0,"462":1.0,"463":1.0,"464":1.0,"465":1.0,"466":1.0,"467":1.0,"468":0.0,"469":1.0,"470":1.0,"471":1.0,"472":1.0,"473":1.0,"474":1.0,"475":1.0,"476":1.0,"477":1.0,"478":1.0,"479":1.0,"480":1.0,"481":1.0,"482":1.0,"483":0.0,"484":1.0,"485":1.0,"486":1.0,"487":1.0,"488":1.0,"489":1.0,"490":1.0,"491":1.0,"492":1.0,"493":0.0,"494":1.0,"495":1.0,"496":0.0,"497":1.0,"498":1.0,"499":1.0,"500":1.0,"501":1.0,"502":1.0,"503":0.0,"504":1.0,"505":1.0,"506":1.0,"507":1.0,"508":1.0,"509":1.0,"510":1.0,"511":1.0,"512":1.0,"513":1.0,"514":1.0,"515":1.0,"516":1.0,"517":1.0,"518":1.0,"519":1.0,"520":1.0,"521":0.0,"522":1.0,"523":0.0,"524":1.0,"525":1.0,"526":1.0,"527":1.0,"528":1.0,"529":0.0,"530":1.0,"531":1.0,"532":1.0,"533":1.0,"534":1.0,"535":1.0,"536":0.0,"537":1.0,"538":1.0,"539":1.0,"540":1.0,"541":0.0,"542":1.0,"543":0.0,"544":1.0,"545":1.0,"546":1.0,"547":1.0,"548":1.0,"549":1.0,"550":1.0,"551":1.0,"552":0.0,"553":0.0,"554":1.0,"555":1.0,"556":1.0,"557":1.0,"558":1.0,"559":1.0,"560":1.0,"561":1.0,"562":0.0,"563":1.0,"564":1.0,"565":1.0,"566":1.0,"567":1.0,"568":1.0,"569":1.0,"570":1.0,"571":1.0,"572":1.0,"573":1.0,"574":1.0,"575":1.0,"576":1.0,"577":0.0,"578":1.0,"579":0.0,"580":0.0,"581":1.0,"582":1.0,"583":1.0,"584":0.0,"585":1.0,"586":1.0,"587":0.0,"588":1.0,"589":1.0,"590":0.0,"591":1.0,"592":1.0,"593":1.0,"594":1.0,"595":1.0,"596":1.0,"597":0.0,"598":1.0,"599":1.0,"600":1.0,"601":1.0,"602":0.0,"603":1.0,"604":1.0,"605":1.0,"606":1.0,"607":1.0,"608":1.0,"609":1.0,"610":0.0,"611":0.0,"612":1.0,"613":1.0,"614":1.0,"615":1.0,"616":0.0,"617":1.0,"618":1.0,"619":1.0,"620":1.0,"621":1.0,"622":1.0,"623":0.0,"624":1.0,"625":1.0,"626":1.0,"627":0.0,"628":1.0,"629":1.0,"630":1.0,"631":0.0,"632":1.0,"633":1.0,"634":0.0,"635":1.0,"636":0.0,"637":0.0,"638":0.0,"639":1.0,"640":1.0,"641":1.0,"642":1.0,"643":1.0,"644":1.0,"645":1.0,"646":1.0,"647":1.0,"648":1.0,"649":0.0,"650":1.0,"651":1.0,"652":0.0,"653":1.0,"654":1.0,"655":1.0,"656":0.0,"657":1.0,"658":1.0,"659":0.0,"660":1.0,"661":1.0,"662":1.0,"663":1.0,"664":1.0,"665":1.0,"666":1.0,"667":0.0,"668":1.0,"669":1.0,"670":1.0,"671":1.0,"672":1.0,"673":1.0,"674":1.0,"675":1.0,"676":1.0,"677":0.0,"678":0.0,"679":1.0,"680":0.0,"681":1.0,"682":1.0,"683":0.0,"684":1.0,"685":1.0,"686":0.0,"687":0.0,"688":0.0,"689":1.0,"690":1.0,"691":1.0,"692":1.0,"693":1.0,"694":1.0,"695":0.0,"696":1.0,"697":1.0,"698":1.0,"699":1.0,"700":1.0,"701":1.0,"702":1.0,"703":1.0,"704":1.0,"705":1.0,"706":0.0,"707":0.0,"708":1.0,"709":1.0,"710":0.0,"711":1.0,"712":1.0,"713":1.0,"714":1.0,"715":1.0,"716":1.0,"717":1.0,"718":1.0,"719":0.0,"720":1.0,"721":1.0,"722":1.0,"723":1.0,"724":1.0,"725":1.0,"726":1.0,"727":1.0,"728":0.0,"729":1.0,"730":1.0,"731":1.0,"732":1.0,"733":1.0,"734":1.0,"735":1.0,"736":1.0,"737":1.0,"738":1.0,"739":1.0,"740":0.0,"741":0.0,"742":1.0,"743":1.0,"744":1.0,"745":1.0,"746":1.0,"747":0.0,"748":1.0,"749":1.0,"750":0.0,"751":1.0,"752":0.0,"753":1.0,"754":1.0,"755":1.0,"756":1.0,"757":1.0,"758":1.0,"759":1.0,"760":1.0,"761":1.0,"762":1.0,"763":0.0,"764":1.0,"765":0.0,"766":1.0,"767":1.0,"768":1.0,"769":1.0,"770":1.0,"771":1.0,"772":1.0,"773":1.0,"774":0.0,"775":1.0,"776":1.0,"777":1.0,"778":1.0,"779":1.0,"780":1.0,"781":1.0,"782":0.0,"783":1.0,"784":0.0,"785":1.0,"786":1.0,"787":1.0,"788":1.0,"789":0.0,"790":1.0,"791":1.0,"792":1.0,"793":1.0,"794":1.0,"795":1.0,"796":1.0,"797":1.0,"798":0.0,"799":1.0,"800":0.0,"801":1.0,"802":1.0,"803":1.0,"804":1.0,"805":1.0,"806":1.0,"807":0.0,"808":1.0,"809":1.0,"810":1.0,"811":1.0,"812":1.0,"813":1.0,"814":1.0,"815":1.0,"816":1.0,"817":1.0,"818":1.0,"819":1.0,"820":1.0,"821":1.0,"822":1.0,"823":1.0,"824":0.0,"825":0.0,"826":1.0,"827":1.0,"828":1.0,"829":1.0,"830":1.0,"831":1.0,"832":1.0,"833":1.0,"834":1.0,"835":0.0,"836":1.0,"837":1.0,"838":1.0,"839":1.0,"840":1.0,"841":1.0,"842":1.0,"843":1.0,"844":1.0,"845":1.0,"846":1.0,"847":1.0,"848":0.0,"849":1.0,"850":1.0,"851":1.0,"852":0.0,"853":1.0,"854":1.0,"855":1.0,"856":0.0,"857":1.0,"858":1.0,"859":1.0,"860":1.0,"861":1.0,"862":1.0,"863":1.0,"864":0.0,"865":0.0,"866":0.0,"867":1.0,"868":1.0,"869":1.0,"870":1.0,"871":1.0,"872":0.0,"873":0.0,"874":1.0,"875":1.0,"876":0.0,"877":0.0,"878":1.0,"879":1.0,"880":1.0,"881":0.0,"882":1.0,"883":0.0,"884":1.0,"885":1.0,"886":1.0,"887":1.0,"888":1.0,"889":0.0,"890":0.0,"891":1.0,"892":0.0,"893":0.0,"894":1.0,"895":1.0,"896":1.0,"897":0.0,"898":1.0,"899":0.0,"900":1.0,"901":1.0,"902":0.0,"903":1.0,"904":1.0,"905":1.0,"906":1.0,"907":1.0,"908":1.0,"909":1.0,"910":1.0,"911":0.0,"912":1.0,"913":1.0,"914":0.0,"915":1.0,"916":0.0,"917":0.0,"918":1.0,"919":1.0,"920":1.0,"921":1.0,"922":1.0,"923":1.0,"924":1.0,"925":1.0,"926":1.0,"927":0.0,"928":0.0,"929":1.0,"930":1.0,"931":1.0,"932":0.0,"933":1.0,"934":1.0,"935":1.0,"936":0.0,"937":1.0,"938":1.0,"939":1.0,"940":1.0,"941":0.0,"942":0.0,"943":1.0,"944":1.0,"945":1.0,"946":0.0,"947":1.0,"948":1.0,"949":1.0,"950":0.0,"951":0.0,"952":1.0,"953":1.0,"954":1.0,"955":1.0,"956":1.0,"957":1.0,"958":1.0,"959":1.0,"960":1.0,"961":1.0,"962":0.0,"963":1.0,"964":1.0,"965":1.0,"966":0.0,"967":1.0,"968":0.0,"969":1.0,"970":1.0,"971":1.0,"972":1.0,"973":1.0,"974":1.0,"975":1.0,"976":0.0,"977":0.0,"978":0.0,"979":0.0,"980":0.0,"981":1.0,"982":1.0,"983":1.0,"984":1.0,"985":1.0,"986":1.0,"987":1.0,"988":1.0,"989":0.0,"990":1.0,"991":1.0,"992":1.0,"993":1.0,"994":0.0,"995":1.0,"996":0.0,"997":1.0,"998":1.0,"999":1.0,"1000":1.0,"1001":1.0,"1002":1.0,"1003":1.0,"1004":1.0,"1005":1.0,"1006":1.0,"1007":1.0,"1008":1.0,"1009":1.0,"1010":1.0,"1011":1.0,"1012":0.0,"1013":1.0,"1014":1.0,"1015":0.0,"1016":1.0,"1017":1.0,"1018":1.0,"1019":1.0,"1020":1.0,"1021":1.0,"1022":0.0,"1023":1.0,"1024":1.0,"1025":1.0,"1026":1.0,"1027":1.0,"1028":1.0,"1029":1.0,"1030":1.0,"1031":1.0,"1032":1.0,"1033":1.0},"filtered_schema":{"0":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","1":"table Student , columns = [ Student.Age , Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.pet_age , Pets.PetType , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","2":"table singer , columns = [ singer.Song_Name , singer.Age , singer.Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year , singer.Country ]\ntable stadium , columns = [ stadium.Name , stadium.Average , stadium.Location , stadium.Capacity , stadium.Lowest , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","3":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","4":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.FullName , car_makers.Id , car_makers.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","5":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.City , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","6":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.MPG , cars_data.Accelerate , cars_data.Edispl ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","7":"table model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable car_names , columns = [ car_names.MakeId , car_names.Make , car_names.Model ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","8":"table airports , columns = [ airports.AirportCode , airports.AirportName , airports.City , airports.Country , airports.CountryAbbrev ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","9":"table model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.Maker , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","10":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","11":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","12":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Edispl , cars_data.MPG , cars_data.Horsepower , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","13":"table car_makers , columns = [ car_makers.Maker , car_makers.FullName , car_makers.Id , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable cars_data , columns = [ cars_data.Weight , cars_data.Id , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","14":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","15":"table flights , columns = [ flights.SourceAirport , flights.FlightNo , flights.DestAirport , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Airline , airlines.Abbreviation , airlines.uid ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","16":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportCode , airports.AirportName , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Airline , airlines.Abbreviation ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","17":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","18":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.city_code , Student.Major , Student.Age , Student.Advisor ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","19":"table stadium , columns = [ stadium.Capacity , stadium.Average , stadium.Name , stadium.Highest , stadium.Location , stadium.Stadium_ID , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year ]\ntable concert , columns = [ concert.Stadium_ID , concert.Theme , concert.Year , concert.concert_Name , concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","20":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Cylinders , cars_data.MPG , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","21":"table singer , columns = [ singer.Age , singer.Country , singer.Name , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable stadium , columns = [ stadium.Average , stadium.Name , stadium.Lowest , stadium.Location , stadium.Highest , stadium.Capacity , stadium.Stadium_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","22":"table cars_data , columns = [ cars_data.Weight , cars_data.Year , cars_data.Id , cars_data.Cylinders , cars_data.Horsepower , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","23":"table singer , columns = [ singer.Song_Name , singer.Name , singer.Country , singer.Is_male , singer.Singer_ID , singer.Age , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Lowest , stadium.Average , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Theme , concert.Year , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","24":"table singer , columns = [ singer.Age , singer.Country , singer.Name , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Lowest , stadium.Highest , stadium.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","25":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","26":"table cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Cylinders , cars_data.Edispl , cars_data.MPG , cars_data.Horsepower , cars_data.Accelerate ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","27":"table Pets , columns = [ Pets.weight , Pets.pet_age , Pets.PetType , Pets.PetID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.Fname , Student.LName , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","28":"table Student , columns = [ Student.StuID , Student.Age , Student.LName , Student.Fname , Student.Sex , Student.Major , Student.Advisor , Student.city_code ]\ntable Pets , columns = [ Pets.pet_age , Pets.PetID , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","29":"table Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.pet_age , Pets.weight ]\ntable Student , columns = [ Student.StuID , Student.city_code , Student.LName , Student.Major , Student.Age , Student.Sex , Student.Fname , Student.Advisor ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","30":"table Student , columns = [ Student.Age , Student.StuID , Student.Major , Student.Sex , Student.LName , Student.Advisor , Student.city_code , Student.Fname ]\ntable Pets , columns = [ Pets.PetID , Pets.pet_age , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","31":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Edispl , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","32":"table flights , columns = [ flights.Airline , flights.DestAirport , flights.SourceAirport , flights.FlightNo ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","33":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","34":"table countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.FullName , car_makers.Maker ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","35":"table stadium , columns = [ stadium.Capacity , stadium.Stadium_ID , stadium.Highest , stadium.Name , stadium.Average , stadium.Location , stadium.Lowest ]\ntable concert , columns = [ concert.Stadium_ID , concert.concert_ID , concert.Year , concert.Theme , concert.concert_Name ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Singer_ID , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","36":"table concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID ]\ntable stadium , columns = [ stadium.Stadium_ID , stadium.Location , stadium.Name , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","37":"table stadium , columns = [ stadium.Average , stadium.Capacity , stadium.Highest , stadium.Lowest , stadium.Location , stadium.Name , stadium.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.Theme , concert.Year , concert.Stadium_ID , concert.concert_Name , concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Song_Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","38":"table Pets , columns = [ Pets.pet_age , Pets.PetType , Pets.weight , Pets.PetID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Advisor , Student.Major , Student.StuID , Student.Fname , Student.LName , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","39":"table cars_data , columns = [ cars_data.Accelerate , cars_data.Id , cars_data.Year , cars_data.Weight , cars_data.Cylinders , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl ]\ntable model_list , columns = [ model_list.ModelId , model_list.Maker , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","40":"table airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","41":"table Student , columns = [ Student.Age , Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.pet_age , Pets.PetID , Pets.PetType , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","42":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","43":"table concert , columns = [ concert.Year , concert.concert_Name , concert.Theme , concert.Stadium_ID , concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_release_year , singer.Song_Name , singer.Singer_ID , singer.Is_male ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Stadium_ID , stadium.Capacity , stadium.Lowest , stadium.Highest , stadium.Average ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","44":"table flights , columns = [ flights.DestAirport , flights.FlightNo , flights.SourceAirport , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.City , airports.Country , airports.AirportCode , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Airline , airlines.Abbreviation ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","45":"table singer , columns = [ singer.Country , singer.Name , singer.Age , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Lowest , stadium.Average , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","46":"table continents , columns = [ continents.ContId , continents.Continent ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.FullName , car_makers.Maker ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG , cars_data.Cylinders ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","47":"table model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable cars_data , columns = [ cars_data.Weight , cars_data.Id , cars_data.Year , cars_data.MPG , cars_data.Horsepower , cars_data.Cylinders , cars_data.Edispl , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","48":"table Student , columns = [ Student.Sex , Student.StuID , Student.Fname , Student.Major , Student.Age , Student.Advisor , Student.LName , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetType , Pets.PetID , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","49":"table flights , columns = [ flights.SourceAirport , flights.FlightNo , flights.DestAirport , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","50":"table car_makers , columns = [ car_makers.Maker , car_makers.FullName , car_makers.Id , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Cylinders , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","51":"table car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.Model , car_names.MakeId , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","52":"table continents , columns = [ continents.ContId , continents.Continent ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.Country , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","53":"table Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Student , columns = [ Student.StuID , Student.LName , Student.city_code , Student.Age , Student.Sex , Student.Advisor , Student.Major , Student.Fname ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.weight , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","54":"table airports , columns = [ airports.AirportName , airports.City , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","55":"table cars_data , columns = [ cars_data.Accelerate , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Edispl , cars_data.Cylinders ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","56":"table concert , columns = [ concert.Year , concert.concert_Name , concert.concert_ID , concert.Theme , concert.Stadium_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_release_year , singer.Song_Name , singer.Singer_ID , singer.Is_male ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Stadium_ID , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","57":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","58":"table airlines , columns = [ airlines.Country , airlines.Airline , airlines.Abbreviation , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","59":"table cars_data , columns = [ cars_data.Cylinders , cars_data.MPG , cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","60":"table Pets , columns = [ Pets.pet_age , Pets.weight , Pets.PetType , Pets.PetID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.Fname , Student.LName , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","61":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Is_male , singer.Age , singer.Country , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.concert_ID , concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Average , stadium.Stadium_ID , stadium.Highest , stadium.Lowest , stadium.Capacity ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","62":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","63":"table cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Cylinders , cars_data.Edispl , cars_data.Accelerate , cars_data.Horsepower , cars_data.MPG ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.Country , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","64":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Cylinders , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.Maker , car_makers.FullName ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","65":"table flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","66":"table singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest , stadium.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","67":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","68":"table continents , columns = [ continents.ContId , continents.Continent ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_names , columns = [ car_names.Model , car_names.Make , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.FullName , car_makers.Maker ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","69":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Age , singer.Is_male , singer.Country , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.concert_ID , concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest , stadium.Stadium_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","70":"table cars_data , columns = [ cars_data.Year , cars_data.Weight , cars_data.Id , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","71":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","72":"table singer , columns = [ singer.Song_release_year , singer.Song_Name , singer.Age , singer.Name , singer.Is_male , singer.Singer_ID , singer.Country ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Lowest , stadium.Average , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID , concert.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","73":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.DestAirport , flights.SourceAirport , flights.FlightNo ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","74":"table Pets , columns = [ Pets.weight , Pets.PetType , Pets.PetID , Pets.pet_age ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","75":"table concert , columns = [ concert.Stadium_ID , concert.Year , concert.concert_Name , concert.Theme , concert.concert_ID ]\ntable stadium , columns = [ stadium.Stadium_ID , stadium.Name , stadium.Location , stadium.Capacity , stadium.Highest , stadium.Average , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","76":"table countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.FullName , car_makers.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","77":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","78":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate , cars_data.MPG ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","79":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Age , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetType , Pets.PetID , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","80":"table Student , columns = [ Student.Age , Student.StuID , Student.Major , Student.LName , Student.Sex , Student.city_code , Student.Advisor , Student.Fname ]\ntable Pets , columns = [ Pets.pet_age , Pets.PetID , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","81":"table car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","82":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","83":"table model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable car_names , columns = [ car_names.Model , car_names.Make , car_names.MakeId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","84":"table singer , columns = [ singer.Age , singer.Country , singer.Is_male , singer.Name , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Lowest , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","85":"table continents , columns = [ continents.ContId , continents.Continent ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate , cars_data.Cylinders ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","86":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","87":"table Pets , columns = [ Pets.pet_age , Pets.PetType , Pets.PetID , Pets.weight ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","88":"table Pets , columns = [ Pets.weight , Pets.PetType , Pets.PetID , Pets.pet_age ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","89":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Accelerate , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","90":"table Pets , columns = [ Pets.PetType , Pets.pet_age , Pets.weight , Pets.PetID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.Fname , Student.LName , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","91":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Make , car_names.Model ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.ContId , continents.Continent ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","92":"table concert , columns = [ concert.concert_Name , concert.Theme , concert.concert_ID , concert.Year , concert.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Singer_ID , singer.Age , singer.Country , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Stadium_ID , stadium.Capacity , stadium.Highest , stadium.Average , stadium.Lowest ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","93":"table airlines , columns = [ airlines.Airline , airlines.Country , airlines.Abbreviation , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","94":"table Pets , columns = [ Pets.PetType , Pets.weight , Pets.PetID , Pets.pet_age ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Sex , Student.Age , Student.Major , Student.Advisor , Student.Fname , Student.LName , Student.StuID , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","95":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.Edispl , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","96":"table singer , columns = [ singer.Age , singer.Name , singer.Country , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Lowest , stadium.Average , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","97":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Weight , cars_data.Year , cars_data.Id , cars_data.Horsepower , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.Country , car_makers.FullName ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","98":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Accelerate , cars_data.Edispl , cars_data.MPG ]\ntable model_list , columns = [ model_list.ModelId , model_list.Maker , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Make , car_names.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","99":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportCode , airports.AirportName , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","100":"table countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable continents , columns = [ continents.ContId , continents.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","101":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Weight , cars_data.Year , cars_data.Id , cars_data.Horsepower , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","102":"table model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.Model , car_names.MakeId , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Year , cars_data.Weight , cars_data.Edispl , cars_data.Cylinders , cars_data.MPG , cars_data.Accelerate , cars_data.Horsepower ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.Country , car_makers.FullName ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","103":"table singer , columns = [ singer.Song_Name , singer.Age , singer.Name , singer.Is_male , singer.Singer_ID , singer.Country , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Average , stadium.Location , stadium.Highest , stadium.Capacity , stadium.Lowest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Theme , concert.Year , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","104":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Age , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","105":"table Pets , columns = [ Pets.PetType , Pets.weight , Pets.PetID , Pets.pet_age ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Major , Student.Sex , Student.Age , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","106":"table Pets , columns = [ Pets.pet_age , Pets.PetType , Pets.PetID , Pets.weight ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","107":"table model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable cars_data , columns = [ cars_data.Weight , cars_data.Id , cars_data.Year , cars_data.Cylinders , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl , cars_data.Accelerate ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","108":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","109":"table flights , columns = [ flights.SourceAirport , flights.FlightNo , flights.DestAirport , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.Airline , airlines.uid ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","110":"table cars_data , columns = [ cars_data.Accelerate , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.MPG , cars_data.Edispl ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable countries , columns = [ countries.CountryId , countries.Continent , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","111":"table flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","112":"table cars_data , columns = [ cars_data.Weight , cars_data.Year , cars_data.Id , cars_data.Cylinders , cars_data.Horsepower , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","113":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","114":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airports , columns = [ airports.City , airports.AirportCode , airports.AirportName , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","115":"table flights , columns = [ flights.DestAirport , flights.FlightNo , flights.SourceAirport , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","116":"table airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","117":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate , cars_data.Cylinders ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.Maker , car_makers.FullName ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","118":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.Accelerate , cars_data.MPG ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable countries , columns = [ countries.CountryId , countries.Continent , countries.CountryName ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","119":"table flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","120":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","121":"table stadium , columns = [ stadium.Stadium_ID , stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Singer_ID , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","122":"table Pets , columns = [ Pets.pet_age , Pets.weight , Pets.PetID , Pets.PetType ]\ntable Student , columns = [ Student.Age , Student.StuID , Student.Sex , Student.Advisor , Student.Major , Student.LName , Student.Fname , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","123":"table airports , columns = [ airports.AirportName , airports.City , airports.Country , airports.CountryAbbrev , airports.AirportCode ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","124":"table stadium , columns = [ stadium.Capacity , stadium.Location , stadium.Name , stadium.Stadium_ID , stadium.Highest , stadium.Average , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\ntable concert , columns = [ concert.Stadium_ID , concert.Theme , concert.Year , concert.concert_Name , concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","125":"table countries , columns = [ countries.CountryId , countries.Continent , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable continents , columns = [ continents.ContId , continents.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","126":"table flights , columns = [ flights.Airline , flights.DestAirport , flights.SourceAirport , flights.FlightNo ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","127":"table concert , columns = [ concert.concert_Name , concert.Theme , concert.concert_ID , concert.Year , concert.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Singer_ID , singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Stadium_ID , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","128":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Edispl , cars_data.Accelerate , cars_data.Cylinders ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.Model , car_names.MakeId , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","129":"table singer , columns = [ singer.Name , singer.Age , singer.Is_male , singer.Country , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID , concert.Stadium_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Average , stadium.Capacity , stadium.Highest , stadium.Lowest , stadium.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","130":"table Pets , columns = [ Pets.weight , Pets.PetType , Pets.PetID , Pets.pet_age ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","131":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Age , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.weight , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","132":"table airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","133":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.uid , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","134":"table airlines , columns = [ airlines.Airline , airlines.Country , airlines.Abbreviation , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","135":"table cars_data , columns = [ cars_data.Accelerate , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl , cars_data.Cylinders ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable model_list , columns = [ model_list.ModelId , model_list.Maker , model_list.Model ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","136":"table cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Cylinders , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate , cars_data.MPG ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","137":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","138":"table model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","139":"table Student , columns = [ Student.StuID , Student.Sex , Student.LName , Student.Fname , Student.Age , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.weight , Pets.PetType , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","140":"table concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID ]\ntable stadium , columns = [ stadium.Stadium_ID , stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Song_Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","141":"table airports , columns = [ airports.AirportCode , airports.AirportName , airports.Country , airports.City , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","142":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","143":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","144":"table concert , columns = [ concert.Year , concert.concert_Name , concert.concert_ID , concert.Theme , concert.Stadium_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_release_year , singer.Song_Name , singer.Singer_ID , singer.Is_male ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Stadium_ID , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","145":"table cars_data , columns = [ cars_data.Edispl , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate , cars_data.Cylinders ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.Country , car_makers.FullName ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","146":"table car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","147":"table Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.city_code , Student.Age , Student.Major , Student.Sex , Student.Advisor ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.weight , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","148":"table airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","149":"table Student , columns = [ Student.StuID , Student.Age , Student.LName , Student.Fname , Student.Sex , Student.Major , Student.Advisor , Student.city_code ]\ntable Pets , columns = [ Pets.pet_age , Pets.PetID , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","150":"table car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable continents , columns = [ continents.ContId , continents.Continent ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","151":"table cars_data , columns = [ cars_data.MPG , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.Accelerate , cars_data.Cylinders , cars_data.Edispl ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","152":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","153":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","154":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Edispl , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.MakeId , car_names.Make , car_names.Model ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.FullName , car_makers.Maker , car_makers.Country ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","155":"table Student , columns = [ Student.Age , Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Major , Student.Advisor , Student.city_code ]\ntable Pets , columns = [ Pets.pet_age , Pets.PetID , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","156":"table model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","157":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","158":"table airlines , columns = [ airlines.Country , airlines.Airline , airlines.Abbreviation , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","159":"table flights , columns = [ flights.DestAirport , flights.FlightNo , flights.SourceAirport , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","160":"table singer , columns = [ singer.Age , singer.Name , singer.Country , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Lowest , stadium.Highest , stadium.Capacity , stadium.Average , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","161":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Accelerate , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Horsepower , cars_data.Edispl ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","162":"table stadium , columns = [ stadium.Stadium_ID , stadium.Name , stadium.Capacity , stadium.Location , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable concert , columns = [ concert.Stadium_ID , concert.concert_Name , concert.Theme , concert.Year , concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","163":"table singer , columns = [ singer.Age , singer.Country , singer.Name , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Lowest , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","164":"table car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable continents , columns = [ continents.ContId , continents.Continent ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","165":"table airports , columns = [ airports.AirportCode , airports.AirportName , airports.City , airports.Country , airports.CountryAbbrev ]\ntable flights , columns = [ flights.FlightNo , flights.SourceAirport , flights.DestAirport , flights.Airline ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","166":"table airports , columns = [ airports.AirportName , airports.AirportCode , airports.Country , airports.City , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","167":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.Model , car_names.MakeId , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","168":"table model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Cylinders , cars_data.Edispl , cars_data.MPG , cars_data.Horsepower , cars_data.Accelerate ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.Maker , car_makers.FullName ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","169":"table car_makers , columns = [ car_makers.Maker , car_makers.FullName , car_makers.Id , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","170":"table cars_data , columns = [ cars_data.Year , cars_data.Weight , cars_data.Id , cars_data.Edispl , cars_data.Cylinders , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","171":"table flights , columns = [ flights.DestAirport , flights.FlightNo , flights.SourceAirport , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","172":"table Pets , columns = [ Pets.PetType , Pets.weight , Pets.PetID , Pets.pet_age ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Sex , Student.Age , Student.Major , Student.Advisor , Student.Fname , Student.LName , Student.StuID , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","173":"table airports , columns = [ airports.AirportCode , airports.AirportName , airports.City , airports.Country , airports.CountryAbbrev ]\ntable flights , columns = [ flights.FlightNo , flights.SourceAirport , flights.DestAirport , flights.Airline ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","174":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Accelerate , cars_data.MPG ]\ntable car_names , columns = [ car_names.MakeId , car_names.Make , car_names.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","175":"table flights , columns = [ flights.SourceAirport , flights.Airline , flights.FlightNo , flights.DestAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.uid , airlines.Country ]\ntable airports , columns = [ airports.AirportName , airports.Country , airports.City , airports.AirportCode , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","176":"table flights , columns = [ flights.DestAirport , flights.FlightNo , flights.SourceAirport , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","177":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","178":"table cars_data , columns = [ cars_data.Cylinders , cars_data.MPG , cars_data.Id , cars_data.Weight , cars_data.Horsepower , cars_data.Year , cars_data.Accelerate , cars_data.Edispl ]\ntable car_names , columns = [ car_names.Model , car_names.Make , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","179":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Edispl , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","180":"table concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID ]\ntable stadium , columns = [ stadium.Capacity , stadium.Stadium_ID , stadium.Name , stadium.Location , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","181":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.Advisor , Student.city_code , Student.Sex , Student.Age , Student.Major ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.weight , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","182":"table car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.Model , car_names.MakeId , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","183":"table continents , columns = [ continents.Continent , continents.ContId ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Accelerate , cars_data.Horsepower , cars_data.MPG ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","184":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Maker , car_makers.Id , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","185":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.Model , car_names.Make , car_names.MakeId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","186":"table concert , columns = [ concert.Stadium_ID , concert.concert_Name , concert.concert_ID , concert.Theme , concert.Year ]\ntable stadium , columns = [ stadium.Stadium_ID , stadium.Name , stadium.Capacity , stadium.Location , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","187":"table flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","188":"table cars_data , columns = [ cars_data.Weight , cars_data.Id , cars_data.Year , cars_data.Horsepower , cars_data.Edispl , cars_data.MPG , cars_data.Accelerate , cars_data.Cylinders ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","189":"table airports , columns = [ airports.AirportName , airports.City , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","190":"table airports , columns = [ airports.AirportName , airports.City , airports.Country , airports.AirportCode , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","191":"table singer , columns = [ singer.Country , singer.Name , singer.Age , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","192":"table airports , columns = [ airports.AirportCode , airports.AirportName , airports.City , airports.Country , airports.CountryAbbrev ]\ntable flights , columns = [ flights.SourceAirport , flights.FlightNo , flights.DestAirport , flights.Airline ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","193":"table flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","194":"table Student , columns = [ Student.Sex , Student.StuID , Student.Age , Student.LName , Student.Major , Student.Fname , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","195":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable cars_data , columns = [ cars_data.Weight , cars_data.Id , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","196":"table concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID ]\ntable stadium , columns = [ stadium.Stadium_ID , stadium.Location , stadium.Name , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Singer_ID , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","197":"table airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","198":"table model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable cars_data , columns = [ cars_data.MPG , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","199":"table stadium , columns = [ stadium.Capacity , stadium.Average , stadium.Highest , stadium.Location , stadium.Lowest , stadium.Name , stadium.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.Theme , concert.Year , concert.Stadium_ID , concert.concert_Name , concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Song_Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","200":"table flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","201":"table Student , columns = [ Student.Major , Student.Age , Student.StuID , Student.LName , Student.Sex , Student.Fname , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","202":"table cars_data , columns = [ cars_data.Edispl , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","203":"table cars_data , columns = [ cars_data.Cylinders , cars_data.MPG , cars_data.Id , cars_data.Weight , cars_data.Horsepower , cars_data.Year , cars_data.Edispl , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.Country , car_makers.FullName ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","204":"table Student , columns = [ Student.Sex , Student.LName , Student.StuID , Student.Fname , Student.Major , Student.Age , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.weight , Pets.PetType , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","205":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","206":"table stadium , columns = [ stadium.Capacity , stadium.Average , stadium.Name , stadium.Highest , stadium.Location , stadium.Stadium_ID , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year ]\ntable concert , columns = [ concert.Stadium_ID , concert.Theme , concert.Year , concert.concert_Name , concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","207":"table singer , columns = [ singer.Song_Name , singer.Name , singer.Country , singer.Is_male , singer.Singer_ID , singer.Age , singer.Song_release_year ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Lowest , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","208":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","209":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.city_code , Student.Advisor , Student.Age , Student.Sex , Student.Major ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.weight , Pets.pet_age ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","210":"table flights , columns = [ flights.Airline , flights.DestAirport , flights.FlightNo , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","211":"table Pets , columns = [ Pets.pet_age , Pets.weight , Pets.PetID , Pets.PetType ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Age , Student.StuID , Student.Sex , Student.Advisor , Student.Major , Student.LName , Student.Fname , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","212":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Age , singer.Country , singer.Is_male , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.Year , concert.concert_ID , concert.concert_Name , concert.Stadium_ID , concert.Theme ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Stadium_ID , stadium.Capacity , stadium.Average , stadium.Lowest , stadium.Highest ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","213":"table stadium , columns = [ stadium.Stadium_ID , stadium.Name , stadium.Location , stadium.Capacity , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable concert , columns = [ concert.Stadium_ID , concert.Theme , concert.concert_Name , concert.Year , concert.concert_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Singer_ID , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","214":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportCode , airports.AirportName , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","215":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Age , singer.Country , singer.Is_male , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.Year , concert.concert_ID , concert.concert_Name , concert.Theme , concert.Stadium_ID ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Stadium_ID , stadium.Lowest , stadium.Average , stadium.Highest ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","216":"table countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable car_makers , columns = [ car_makers.Country , car_makers.Id , car_makers.Maker , car_makers.FullName ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","217":"table stadium , columns = [ stadium.Capacity , stadium.Location , stadium.Name , stadium.Stadium_ID , stadium.Highest , stadium.Average , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_Name , singer.Is_male , singer.Singer_ID , singer.Song_release_year ]\ntable concert , columns = [ concert.Stadium_ID , concert.Theme , concert.Year , concert.concert_Name , concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","218":"table cars_data , columns = [ cars_data.Weight , cars_data.Id , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl , cars_data.Accelerate , cars_data.Cylinders ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","219":"table concert , columns = [ concert.Year , concert.concert_Name , concert.Theme , concert.Stadium_ID , concert.concert_ID ]\ntable singer , columns = [ singer.Name , singer.Age , singer.Country , singer.Song_release_year , singer.Song_Name , singer.Singer_ID , singer.Is_male ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Stadium_ID , stadium.Lowest , stadium.Highest , stadium.Average ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","220":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","221":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Edispl , cars_data.Accelerate ]\ntable model_list , columns = [ model_list.ModelId , model_list.Maker , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Make , car_names.Model ]\ntable car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","222":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable model_list , columns = [ model_list.Maker , model_list.ModelId , model_list.Model ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Cylinders , cars_data.Edispl , cars_data.Horsepower , cars_data.MPG , cars_data.Accelerate ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","223":"table flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","224":"table continents , columns = [ continents.Continent , continents.ContId ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable cars_data , columns = [ cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Edispl , cars_data.Accelerate , cars_data.Cylinders , cars_data.Horsepower , cars_data.MPG ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","225":"table Pets , columns = [ Pets.PetType , Pets.weight , Pets.PetID , Pets.pet_age ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","226":"table cars_data , columns = [ cars_data.Accelerate , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Cylinders , cars_data.Edispl ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable countries , columns = [ countries.Continent , countries.CountryId , countries.CountryName ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","227":"table cars_data , columns = [ cars_data.Cylinders , cars_data.MPG , cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_names , columns = [ car_names.Model , car_names.Make , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.Country , car_makers.FullName ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","228":"table Student , columns = [ Student.Major , Student.Age , Student.StuID , Student.Sex , Student.LName , Student.Advisor , Student.Fname , Student.city_code ]\ntable Pets , columns = [ Pets.PetID , Pets.pet_age , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","229":"table Student , columns = [ Student.Age , Student.StuID , Student.Major , Student.LName , Student.Sex , Student.city_code , Student.Advisor , Student.Fname ]\ntable Pets , columns = [ Pets.pet_age , Pets.PetID , Pets.PetType , Pets.weight ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","230":"table cars_data , columns = [ cars_data.Horsepower , cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.Edispl , cars_data.MPG , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","231":"table flights , columns = [ flights.SourceAirport , flights.FlightNo , flights.DestAirport , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Airline , airlines.Abbreviation , airlines.uid ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","232":"table flights , columns = [ flights.FlightNo , flights.DestAirport , flights.Airline , flights.SourceAirport ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable airlines , columns = [ airlines.Airline , airlines.Country , airlines.Abbreviation , airlines.uid ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","233":"table flights , columns = [ flights.Airline , flights.FlightNo , flights.DestAirport , flights.SourceAirport ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","234":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Accelerate , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl ]\ntable model_list , columns = [ model_list.Model , model_list.Maker , model_list.ModelId ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","235":"table car_makers , columns = [ car_makers.Maker , car_makers.Id , car_makers.FullName , car_makers.Country ]\ntable cars_data , columns = [ cars_data.Year , cars_data.Id , cars_data.Weight , cars_data.MPG , cars_data.Edispl , cars_data.Horsepower , cars_data.Cylinders , cars_data.Accelerate ]\ntable car_names , columns = [ car_names.Make , car_names.MakeId , car_names.Model ]\ntable model_list , columns = [ model_list.Maker , model_list.Model , model_list.ModelId ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","236":"table concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_Name , concert.concert_ID ]\ntable stadium , columns = [ stadium.Stadium_ID , stadium.Capacity , stadium.Name , stadium.Location , stadium.Average , stadium.Highest , stadium.Lowest ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Singer_ID , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","237":"table airports , columns = [ airports.AirportName , airports.AirportCode , airports.Country , airports.City , airports.CountryAbbrev ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","238":"table flights , columns = [ flights.FlightNo , flights.DestAirport , flights.SourceAirport , flights.Airline ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable airlines , columns = [ airlines.Country , airlines.Airline , airlines.Abbreviation , airlines.uid ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","239":"table Student , columns = [ Student.Age , Student.StuID , Student.Sex , Student.Major , Student.LName , Student.Advisor , Student.city_code , Student.Fname ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetID , Pets.pet_age , Pets.PetType , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","240":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.Country , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.City , airports.CountryAbbrev , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","241":"table airlines , columns = [ airlines.Airline , airlines.Country , airlines.Abbreviation , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","242":"table stadium , columns = [ stadium.Capacity , stadium.Stadium_ID , stadium.Highest , stadium.Name , stadium.Location , stadium.Average , stadium.Lowest ]\ntable concert , columns = [ concert.Stadium_ID , concert.Year , concert.Theme , concert.concert_ID , concert.concert_Name ]\ntable singer , columns = [ singer.Name , singer.Country , singer.Age , singer.Singer_ID , singer.Song_Name , singer.Is_male , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.concert_ID , singer_in_concert.Singer_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","243":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate , cars_data.MPG ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable countries , columns = [ countries.CountryId , countries.CountryName , countries.Continent ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","244":"table airlines , columns = [ airlines.Airline , airlines.Country , airlines.Abbreviation , airlines.uid ]\ntable airports , columns = [ airports.Country , airports.CountryAbbrev , airports.City , airports.AirportName , airports.AirportCode ]\ntable flights , columns = [ flights.Airline , flights.FlightNo , flights.SourceAirport , flights.DestAirport ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","245":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.Edispl , cars_data.Accelerate , cars_data.MPG ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable countries , columns = [ countries.CountryName , countries.CountryId , countries.Continent ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","246":"table Pets , columns = [ Pets.weight , Pets.PetID , Pets.PetType , Pets.pet_age ]\ntable Has_Pet , columns = [ Has_Pet.PetID , Has_Pet.StuID ]\ntable Student , columns = [ Student.Age , Student.Sex , Student.Major , Student.Advisor , Student.StuID , Student.LName , Student.Fname , Student.city_code ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","247":"table singer , columns = [ singer.Song_release_year , singer.Song_Name , singer.Age , singer.Name , singer.Is_male , singer.Singer_ID , singer.Country ]\ntable stadium , columns = [ stadium.Name , stadium.Location , stadium.Capacity , stadium.Lowest , stadium.Average , stadium.Highest , stadium.Stadium_ID ]\ntable concert , columns = [ concert.Year , concert.concert_Name , concert.Theme , concert.concert_ID , concert.Stadium_ID ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","248":"table Student , columns = [ Student.StuID , Student.LName , Student.Fname , Student.Sex , Student.Age , Student.Major , Student.Advisor , Student.city_code ]\ntable Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Pets , columns = [ Pets.PetType , Pets.PetID , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","249":"table flights , columns = [ flights.Airline , flights.DestAirport , flights.SourceAirport , flights.FlightNo ]\ntable airlines , columns = [ airlines.Airline , airlines.uid , airlines.Abbreviation , airlines.Country ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","250":"table singer , columns = [ singer.Age , singer.Country , singer.Name , singer.Is_male , singer.Singer_ID , singer.Song_Name , singer.Song_release_year ]\ntable singer_in_concert , columns = [ singer_in_concert.Singer_ID , singer_in_concert.concert_ID ]\ntable concert , columns = [ concert.Year , concert.Theme , concert.concert_Name , concert.Stadium_ID , concert.concert_ID ]\ntable stadium , columns = [ stadium.Average , stadium.Name , stadium.Lowest , stadium.Location , stadium.Highest , stadium.Capacity , stadium.Stadium_ID ]\nforeign keys :\nconcert.Stadium_ID = stadium.Stadium_IDsinger_in_concert.Singer_ID = singer.Singer_IDsinger_in_concert.concert_ID = concert.concert_ID","251":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Abbreviation , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","252":"table Has_Pet , columns = [ Has_Pet.StuID , Has_Pet.PetID ]\ntable Student , columns = [ Student.StuID , Student.city_code , Student.LName , Student.Age , Student.Fname , Student.Sex , Student.Major , Student.Advisor ]\ntable Pets , columns = [ Pets.PetID , Pets.PetType , Pets.pet_age , Pets.weight ]\nforeign keys :\nHas_Pet.StuID = Student.StuIDHas_Pet.PetID = Pets.PetID","253":"table cars_data , columns = [ cars_data.Accelerate , cars_data.Horsepower , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.MPG , cars_data.Edispl , cars_data.Cylinders ]\ntable model_list , columns = [ model_list.Model , model_list.ModelId , model_list.Maker ]\ntable countries , columns = [ countries.CountryName , countries.Continent , countries.CountryId ]\ntable car_names , columns = [ car_names.Make , car_names.Model , car_names.MakeId ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Country , car_makers.FullName , car_makers.Maker ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","254":"table flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.City , airports.AirportName , airports.AirportCode , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.uid , airlines.Airline , airlines.Abbreviation ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","255":"table airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\ntable flights , columns = [ flights.SourceAirport , flights.DestAirport , flights.FlightNo , flights.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","256":"table cars_data , columns = [ cars_data.Cylinders , cars_data.Accelerate , cars_data.Id , cars_data.Weight , cars_data.Year , cars_data.Horsepower , cars_data.MPG , cars_data.Edispl ]\ntable car_names , columns = [ car_names.MakeId , car_names.Model , car_names.Make ]\ntable model_list , columns = [ model_list.ModelId , model_list.Model , model_list.Maker ]\ntable car_makers , columns = [ car_makers.Id , car_makers.Maker , car_makers.FullName , car_makers.Country ]\ntable countries , columns = [ countries.Continent , countries.CountryName , countries.CountryId ]\ntable continents , columns = [ continents.Continent , continents.ContId ]\nforeign keys :\ncountries.Continent = continents.ContIdcar_makers.Country = countries.CountryIdmodel_list.Maker = car_makers.Idcar_names.Model = model_list.Modelcars_data.Id = car_names.MakeId","257":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","258":"table Courses , columns = [ Courses.course_description , Courses.course_name , Courses.course_id , Courses.other_details ]\ntable Departments , columns = [ Departments.other_details , Departments.department_name , Departments.department_description , Departments.department_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Sections , columns = [ Sections.other_details , Sections.course_id , Sections.section_name , Sections.section_description , Sections.section_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.degree_summary_description , Degree_Programs.degree_summary_name , Degree_Programs.department_id , Degree_Programs.degree_program_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_description , Semesters.semester_name , Semesters.semester_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","259":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Template_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","260":"table museum , columns = [ museum.Open_Year , museum.Num_of_Staff , museum.Name , museum.Museum_ID ]\ntable visit , columns = [ visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent , visit.visitor_ID ]\ntable visitor , columns = [ visitor.Name , visitor.ID , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","261":"table matches , columns = [ matches.winner_rank_points , matches.winner_name , matches.tourney_name , matches.winner_rank , matches.tourney_id , matches.winner_id , matches.tourney_date , matches.winner_age , matches.tourney_level , matches.winner_seed ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","262":"table players , columns = [ players.birth_date , players.first_name , players.last_name , players.hand , players.country_code , players.player_id ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_name , matches.loser_rank_points , matches.match_num , matches.winner_rank_points , matches.draw_size ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","263":"table visitor , columns = [ visitor.Age , visitor.ID , visitor.Name , visitor.Level_of_membership ]\ntable visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable museum , columns = [ museum.Name , museum.Museum_ID , museum.Num_of_Staff , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","264":"table flights , columns = [ flights.DestAirport , flights.SourceAirport , flights.FlightNo , flights.Airline ]\ntable airports , columns = [ airports.AirportName , airports.AirportCode , airports.City , airports.Country , airports.CountryAbbrev ]\ntable airlines , columns = [ airlines.Country , airlines.Abbreviation , airlines.uid , airlines.Airline ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","265":"table visitor , columns = [ visitor.Level_of_membership , visitor.ID , visitor.Name , visitor.Age ]\ntable visit , columns = [ visit.visitor_ID , visit.Total_spent , visit.Num_of_Ticket , visit.Museum_ID ]\ntable museum , columns = [ museum.Name , museum.Museum_ID , museum.Num_of_Staff , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","266":"table players , columns = [ players.country_code , players.player_id , players.first_name , players.last_name , players.hand , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.ranking_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.match_num , matches.draw_size , matches.winner_rank , matches.winner_rank_points , matches.loser_rank_points ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","267":"table Paragraphs , columns = [ Paragraphs.Paragraph_Text , Paragraphs.Document_ID , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","268":"table rankings , columns = [ rankings.tours , rankings.ranking_date , rankings.ranking , rankings.ranking_points , rankings.player_id ]\ntable players , columns = [ players.hand , players.player_id , players.first_name , players.country_code , players.birth_date , players.last_name ]\ntable matches , columns = [ matches.tourney_date , matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_rank , matches.loser_rank_points , matches.winner_rank_points , matches.draw_size ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","269":"table teacher , columns = [ teacher.Hometown , teacher.Age , teacher.Name , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","270":"table players , columns = [ players.first_name , players.country_code , players.birth_date , players.last_name , players.hand , players.player_id ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_age , matches.match_num , matches.winner_name , matches.draw_size , matches.loser_rank_points ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","271":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","272":"table employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","273":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","274":"table Documents , columns = [ Documents.Document_Name , Documents.Template_ID , Documents.Document_Description , Documents.Document_ID , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","275":"table players , columns = [ players.first_name , players.birth_date , players.country_code , players.last_name , players.hand , players.player_id ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_name , matches.match_num , matches.draw_size , matches.winner_rank_points , matches.winner_hand ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","276":"table players , columns = [ players.last_name , players.birth_date , players.hand , players.first_name , players.country_code , players.player_id ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_name , matches.winner_hand , matches.draw_size , matches.loser_rank_points , matches.winner_rank_points ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","277":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_Details , Templates.Template_ID , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Documents , columns = [ Documents.Other_Details , Documents.Template_ID , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","278":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","279":"table matches , columns = [ matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_age , matches.winner_rank , matches.loser_id , matches.loser_seed , matches.match_num , matches.loser_ht , matches.winner_rank_points ]\ntable players , columns = [ players.hand , players.first_name , players.player_id , players.last_name , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.ranking , rankings.ranking_points , rankings.player_id , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","280":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","281":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","282":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","283":"table shop , columns = [ shop.Number_products , shop.District , shop.Name , shop.Location , shop.Shop_ID , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","284":"table matches , columns = [ matches.year , matches.match_num , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_seed , matches.loser_rank_points , matches.winner_rank_points , matches.draw_size ]\ntable players , columns = [ players.hand , players.birth_date , players.first_name , players.country_code , players.last_name , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date , rankings.player_id ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","285":"table teacher , columns = [ teacher.Age , teacher.Name , teacher.Hometown , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","286":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Template_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","287":"table employee , columns = [ employee.Age , employee.City , employee.Name , employee.Employee_ID ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","288":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","289":"table museum , columns = [ museum.Num_of_Staff , museum.Museum_ID , museum.Name , museum.Open_Year ]\ntable visit , columns = [ visit.Museum_ID , visit.Num_of_Ticket , visit.visitor_ID , visit.Total_spent ]\ntable visitor , columns = [ visitor.Name , visitor.ID , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","290":"table Documents , columns = [ Documents.Document_Name , Documents.Other_Details , Documents.Document_Description , Documents.Document_ID , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Version_Number , Templates.Template_Type_Code , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","291":"table matches , columns = [ matches.loser_age , matches.winner_age , matches.winner_id , matches.winner_name , matches.winner_entry , matches.loser_id , matches.winner_ht , matches.loser_entry , matches.winner_rank , matches.winner_seed ]\ntable players , columns = [ players.hand , players.birth_date , players.player_id , players.first_name , players.last_name , players.country_code ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","292":"table Documents , columns = [ Documents.Document_Name , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_From , Templates.Version_Number ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","293":"table Documents , columns = [ Documents.Document_Name , Documents.Template_ID , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","294":"table players , columns = [ players.first_name , players.country_code , players.player_id , players.last_name , players.hand , players.birth_date ]\ntable matches , columns = [ matches.tourney_name , matches.winner_name , matches.tourney_date , matches.winner_id , matches.tourney_id , matches.tourney_level , matches.year , matches.round , matches.surface , matches.minutes ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","295":"table matches , columns = [ matches.loser_name , matches.winner_name , matches.minutes , matches.winner_age , matches.loser_id , matches.match_num , matches.loser_age , matches.winner_seed , matches.winner_entry , matches.loser_hand ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","296":"table Courses , columns = [ Courses.course_description , Courses.course_name , Courses.course_id , Courses.other_details ]\ntable Departments , columns = [ Departments.other_details , Departments.department_description , Departments.department_name , Departments.department_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Sections , columns = [ Sections.course_id , Sections.other_details , Sections.section_name , Sections.section_description , Sections.section_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.degree_summary_description , Degree_Programs.degree_summary_name , Degree_Programs.department_id , Degree_Programs.degree_program_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_description , Semesters.semester_name , Semesters.semester_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","297":"table ship , columns = [ ship.id , ship.lost_in_battle , ship.disposition_of_ship , ship.ship_type , ship.name , ship.location , ship.tonnage ]\ntable battle , columns = [ battle.id , battle.result , battle.name , battle.date , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.id , death.caused_by_ship_id , death.killed , death.note , death.injured ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","298":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_Details , Templates.Template_ID , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","299":"table hiring , columns = [ hiring.Start_from , hiring.Employee_ID , hiring.Is_full_time , hiring.Shop_ID ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Shop_ID , shop.Manager_name , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","300":"table Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","301":"table shop , columns = [ shop.Location , shop.District , shop.Name , shop.Shop_ID , shop.Manager_name , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","302":"table players , columns = [ players.hand , players.player_id , players.first_name , players.last_name , players.country_code , players.birth_date ]\ntable matches , columns = [ matches.round , matches.minutes , matches.year , matches.score , matches.surface , matches.loser_rank_points , matches.match_num , matches.winner_seed , matches.draw_size , matches.winner_rank_points ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","303":"table Documents , columns = [ Documents.Document_Name , Documents.Document_ID , Documents.Template_ID , Documents.Document_Description , Documents.Other_Details ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Type_Code , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","304":"table players , columns = [ players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.minutes , matches.year , matches.round , matches.surface , matches.score , matches.loser_rank_points , matches.draw_size , matches.winner_rank_points , matches.winner_age , matches.winner_hand ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","305":"table shop , columns = [ shop.Number_products , shop.District , shop.Location , shop.Name , shop.Shop_ID , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","306":"table Paragraphs , columns = [ Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Other_Details , Documents.Document_Name , Documents.Document_Description , Documents.Document_ID , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Template_ID , Templates.Template_Type_Code , Templates.Version_Number ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","307":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","308":"table shop , columns = [ shop.Number_products , shop.District , shop.Location , shop.Name , shop.Shop_ID , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","309":"table teacher , columns = [ teacher.Age , teacher.Name , teacher.Hometown , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","310":"table Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","311":"table Templates , columns = [ Templates.Version_Number , Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","312":"table players , columns = [ players.country_code , players.birth_date , players.first_name , players.last_name , players.hand , players.player_id ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_name , matches.draw_size , matches.loser_rank_points , matches.winner_rank_points , matches.winner_hand ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","313":"table matches , columns = [ matches.year , matches.winner_name , matches.winner_id , matches.match_num , matches.winner_seed , matches.winner_rank , matches.minutes , matches.surface , matches.round , matches.winner_rank_points ]\ntable players , columns = [ players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.country_code ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","314":"table Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","315":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course , columns = [ course.Course_ID , course.Course , course.Staring_Date ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","316":"table matches , columns = [ matches.tourney_name , matches.tourney_id , matches.winner_id , matches.tourney_level , matches.winner_ht , matches.winner_hand , matches.tourney_date , matches.winner_entry , matches.winner_age , matches.winner_name ]\ntable players , columns = [ players.hand , players.player_id , players.first_name , players.last_name , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","317":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Age , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","318":"table course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","319":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","320":"table players , columns = [ players.first_name , players.birth_date , players.country_code , players.last_name , players.hand , players.player_id ]\ntable matches , columns = [ matches.year , matches.winner_age , matches.minutes , matches.round , matches.surface , matches.score , matches.match_num , matches.loser_age , matches.winner_name , matches.draw_size ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","321":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","322":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","323":"table players , columns = [ players.first_name , players.country_code , players.birth_date , players.player_id , players.last_name , players.hand ]\ntable matches , columns = [ matches.winner_rank_points , matches.loser_rank_points , matches.winner_rank , matches.winner_name , matches.match_num , matches.winner_seed , matches.year , matches.round , matches.surface , matches.winner_id ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","324":"table Templates , columns = [ Templates.Version_Number , Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","325":"table shop , columns = [ shop.Name , shop.Shop_ID , shop.Manager_name , shop.Location , shop.District , shop.Number_products ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time ]\ntable employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","326":"table visitor , columns = [ visitor.Level_of_membership , visitor.ID , visitor.Name , visitor.Age ]\ntable visit , columns = [ visit.visitor_ID , visit.Total_spent , visit.Num_of_Ticket , visit.Museum_ID ]\ntable museum , columns = [ museum.Name , museum.Museum_ID , museum.Num_of_Staff , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","327":"table shop , columns = [ shop.Manager_name , shop.Number_products , shop.District , shop.Location , shop.Shop_ID , shop.Name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","328":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","329":"table ship , columns = [ ship.tonnage , ship.lost_in_battle , ship.id , ship.ship_type , ship.name , ship.disposition_of_ship , ship.location ]\ntable battle , columns = [ battle.id , battle.result , battle.name , battle.date , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.id , death.killed , death.note , death.caused_by_ship_id , death.injured ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","330":"table course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","331":"table Addresses , columns = [ Addresses.line_2 , Addresses.line_1 , Addresses.line_3 , Addresses.state_province_county , Addresses.zip_postcode , Addresses.other_address_details , Addresses.city , Addresses.address_id , Addresses.country ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description , Degree_Programs.degree_program_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","332":"table visitor , columns = [ visitor.Level_of_membership , visitor.Name , visitor.Age , visitor.ID ]\ntable visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable museum , columns = [ museum.Name , museum.Num_of_Staff , museum.Museum_ID , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","333":"table matches , columns = [ matches.year , matches.match_num , matches.round , matches.minutes , matches.winner_seed , matches.winner_name , matches.best_of , matches.surface , matches.score , matches.winner_rank_points ]\ntable players , columns = [ players.player_id , players.hand , players.first_name , players.last_name , players.birth_date , players.country_code ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","334":"table matches , columns = [ matches.loser_age , matches.winner_age , matches.winner_entry , matches.winner_name , matches.winner_id , matches.winner_seed , matches.loser_entry , matches.winner_rank , matches.loser_id , matches.year ]\ntable players , columns = [ players.hand , players.first_name , players.birth_date , players.last_name , players.country_code , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.player_id , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","335":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","336":"table teacher , columns = [ teacher.Hometown , teacher.Age , teacher.Name , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","337":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course_ID , course.Course , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","338":"table matches , columns = [ matches.tourney_name , matches.match_num , matches.tourney_level , matches.tourney_id , matches.round , matches.minutes , matches.year , matches.tourney_date , matches.surface , matches.score ]\ntable players , columns = [ players.hand , players.first_name , players.last_name , players.country_code , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","339":"table matches , columns = [ matches.year , matches.match_num , matches.minutes , matches.round , matches.score , matches.surface , matches.winner_seed , matches.winner_rank_points , matches.loser_rank_points , matches.draw_size ]\ntable players , columns = [ players.hand , players.first_name , players.country_code , players.last_name , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","340":"table matches , columns = [ matches.tourney_name , matches.match_num , matches.tourney_level , matches.tourney_date , matches.tourney_id , matches.round , matches.minutes , matches.year , matches.surface , matches.score ]\ntable players , columns = [ players.hand , players.first_name , players.last_name , players.country_code , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","341":"table players , columns = [ players.player_id , players.first_name , players.country_code , players.birth_date , players.last_name , players.hand ]\ntable matches , columns = [ matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.winner_id , matches.loser_rank_points , matches.winner_age , matches.winner_seed , matches.year , matches.round , matches.minutes ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","342":"table battle , columns = [ battle.latin_commander , battle.bulgarian_commander , battle.name , battle.result , battle.date , battle.id ]\ntable death , columns = [ death.id , death.killed , death.note , death.injured , death.caused_by_ship_id ]\ntable ship , columns = [ ship.name , ship.id , ship.location , ship.lost_in_battle , ship.ship_type , ship.disposition_of_ship , ship.tonnage ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","343":"table Departments , columns = [ Departments.department_name , Departments.department_id , Departments.department_description , Departments.other_details ]\ntable Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description , Degree_Programs.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\ntable Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","344":"table battle , columns = [ battle.id , battle.name , battle.result , battle.date , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.killed , death.id , death.note , death.caused_by_ship_id , death.injured ]\ntable ship , columns = [ ship.name , ship.id , ship.lost_in_battle , ship.location , ship.ship_type , ship.disposition_of_ship , ship.tonnage ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","345":"table players , columns = [ players.first_name , players.player_id , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\ntable matches , columns = [ matches.loser_rank_points , matches.winner_rank_points , matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_rank , matches.winner_name , matches.draw_size ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","346":"table Documents , columns = [ Documents.Document_Name , Documents.Template_ID , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","347":"table Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","348":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","349":"table employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Year_awarded , evaluation.Bonus ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.Name , shop.Manager_name , shop.District , shop.Location , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","350":"table evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","351":"table Documents , columns = [ Documents.Document_Name , Documents.Template_ID , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_Details , Templates.Template_ID , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","352":"table Templates , columns = [ Templates.Template_Details , Templates.Template_ID , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Other_Details ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","353":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","354":"table employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","355":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Age , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","356":"table matches , columns = [ matches.tourney_name , matches.winner_rank_points , matches.winner_name , matches.winner_rank , matches.tourney_id , matches.tourney_date , matches.winner_id , matches.tourney_level , matches.winner_age , matches.winner_seed ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","357":"table museum , columns = [ museum.Num_of_Staff , museum.Open_Year , museum.Name , museum.Museum_ID ]\ntable visit , columns = [ visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent , visit.visitor_ID ]\ntable visitor , columns = [ visitor.Name , visitor.ID , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","358":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","359":"table ship , columns = [ ship.ship_type , ship.lost_in_battle , ship.id , ship.name , ship.location , ship.disposition_of_ship , ship.tonnage ]\ntable battle , columns = [ battle.id , battle.name , battle.result , battle.date , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.id , death.killed , death.caused_by_ship_id , death.note , death.injured ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","360":"table Documents , columns = [ Documents.Document_Name , Documents.Other_Details , Documents.Document_Description , Documents.Document_ID , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Version_Number , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","361":"table ship , columns = [ ship.lost_in_battle , ship.name , ship.id , ship.ship_type , ship.disposition_of_ship , ship.location , ship.tonnage ]\ntable battle , columns = [ battle.date , battle.name , battle.id , battle.result , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.id , death.killed , death.note , death.caused_by_ship_id , death.injured ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","362":"table players , columns = [ players.first_name , players.player_id , players.last_name , players.hand , players.birth_date , players.country_code ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.ranking_date , rankings.tours ]\ntable matches , columns = [ matches.minutes , matches.year , matches.round , matches.surface , matches.score , matches.winner_rank , matches.loser_rank_points , matches.winner_rank_points , matches.winner_name , matches.loser_rank ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","363":"table Documents , columns = [ Documents.Document_Name , Documents.Document_Description , Documents.Document_ID , Documents.Other_Details , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","364":"table Documents , columns = [ Documents.Document_Name , Documents.Template_ID , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","365":"table employee , columns = [ employee.Name , employee.Age , employee.City , employee.Employee_ID ]\ntable shop , columns = [ shop.Name , shop.Manager_name , shop.District , shop.Location , shop.Shop_ID , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","366":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","367":"table Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Sections , columns = [ Sections.course_id , Sections.section_name , Sections.other_details , Sections.section_description , Sections.section_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.other_details , Departments.department_description , Departments.department_id , Departments.department_name ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_name , Semesters.semester_id , Semesters.semester_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","368":"table museum , columns = [ museum.Museum_ID , museum.Name , museum.Open_Year , museum.Num_of_Staff ]\ntable visit , columns = [ visit.Museum_ID , visit.visitor_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable visitor , columns = [ visitor.ID , visitor.Name , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","369":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","370":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","371":"table death , columns = [ death.killed , death.caused_by_ship_id , death.id , death.note , death.injured ]\ntable ship , columns = [ ship.id , ship.ship_type , ship.disposition_of_ship , ship.name , ship.lost_in_battle , ship.location , ship.tonnage ]\ntable battle , columns = [ battle.id , battle.result , battle.name , battle.date , battle.latin_commander , battle.bulgarian_commander ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","372":"table players , columns = [ players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.score , matches.surface , matches.match_num , matches.loser_rank_points , matches.winner_rank_points , matches.draw_size , matches.winner_seed ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","373":"table Documents , columns = [ Documents.Document_Description , Documents.Document_Name , Documents.Template_ID , Documents.Document_ID , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","374":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","375":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","376":"table matches , columns = [ matches.minutes , matches.loser_name , matches.winner_name , matches.loser_id , matches.winner_age , matches.winner_id , matches.loser_age , matches.winner_rank , matches.loser_rank , matches.winner_seed ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","377":"table Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","378":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Template_Details , Templates.Version_Number , Templates.Template_Type_Code ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","379":"table evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.Employee_ID , employee.City , employee.Age ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","380":"table matches , columns = [ matches.loser_name , matches.loser_id , matches.winner_name , matches.loser_rank_points , matches.loser_age , matches.loser_rank , matches.loser_seed , matches.loser_ioc , matches.loser_ht , matches.year ]\ntable players , columns = [ players.last_name , players.first_name , players.hand , players.country_code , players.player_id , players.birth_date ]\ntable rankings , columns = [ rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","381":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","382":"table death , columns = [ death.note , death.killed , death.id , death.caused_by_ship_id , death.injured ]\ntable ship , columns = [ ship.id , ship.ship_type , ship.location , ship.disposition_of_ship , ship.name , ship.lost_in_battle , ship.tonnage ]\ntable battle , columns = [ battle.id , battle.result , battle.name , battle.date , battle.latin_commander , battle.bulgarian_commander ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","383":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","384":"table employee , columns = [ employee.City , employee.Name , employee.Employee_ID , employee.Age ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.District , shop.Name , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","385":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","386":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Version_Number , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","387":"table matches , columns = [ matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.winner_seed , matches.match_num , matches.year , matches.loser_rank_points , matches.winner_id , matches.minutes , matches.round ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","388":"table teacher , columns = [ teacher.Hometown , teacher.Age , teacher.Name , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","389":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Teacher_ID , teacher.Age ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","390":"table employee , columns = [ employee.City , employee.Name , employee.Age , employee.Employee_ID ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","391":"table matches , columns = [ matches.match_num , matches.round , matches.minutes , matches.score , matches.year , matches.surface , matches.draw_size , matches.loser_rank_points , matches.winner_rank_points , matches.winner_seed ]\ntable players , columns = [ players.hand , players.first_name , players.last_name , players.country_code , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","392":"table visit , columns = [ visit.Museum_ID , visit.visitor_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable museum , columns = [ museum.Museum_ID , museum.Name , museum.Num_of_Staff , museum.Open_Year ]\ntable visitor , columns = [ visitor.ID , visitor.Name , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","393":"table rankings , columns = [ rankings.ranking_date , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.player_id ]\ntable matches , columns = [ matches.tourney_date , matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_rank , matches.loser_rank_points , matches.tourney_id , matches.winner_rank_points ]\ntable players , columns = [ players.hand , players.player_id , players.country_code , players.first_name , players.birth_date , players.last_name ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","394":"table Templates , columns = [ Templates.Version_Number , Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","395":"table teacher , columns = [ teacher.Hometown , teacher.Age , teacher.Name , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","396":"table matches , columns = [ matches.year , matches.match_num , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_seed , matches.loser_rank_points , matches.winner_rank_points , matches.draw_size ]\ntable players , columns = [ players.hand , players.first_name , players.country_code , players.last_name , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","397":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","398":"table shop , columns = [ shop.Manager_name , shop.Number_products , shop.District , shop.Location , shop.Shop_ID , shop.Name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","399":"table teacher , columns = [ teacher.Name , teacher.Teacher_ID , teacher.Hometown , teacher.Age ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","400":"table players , columns = [ players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.draw_size , matches.loser_rank_points , matches.match_num , matches.winner_age , matches.winner_id ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","401":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Template_ID , Documents.Other_Details ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","402":"table visitor , columns = [ visitor.Level_of_membership , visitor.Age , visitor.ID , visitor.Name ]\ntable visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable museum , columns = [ museum.Name , museum.Museum_ID , museum.Num_of_Staff , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","403":"table Documents , columns = [ Documents.Document_Name , Documents.Template_ID , Documents.Document_Description , Documents.Document_ID , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","404":"table players , columns = [ players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.score , matches.surface , matches.loser_rank_points , matches.draw_size , matches.winner_hand , matches.winner_rank_points , matches.winner_age ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","405":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course_ID , course.Course , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","406":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Version_Number , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","407":"table hiring , columns = [ hiring.Start_from , hiring.Employee_ID , hiring.Is_full_time , hiring.Shop_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Shop_ID , shop.Manager_name , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","408":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_Name , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_From , Templates.Version_Number ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","409":"table Addresses , columns = [ Addresses.line_2 , Addresses.line_1 , Addresses.line_3 , Addresses.state_province_county , Addresses.other_address_details , Addresses.zip_postcode , Addresses.address_id , Addresses.city , Addresses.country ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description , Degree_Programs.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","410":"table matches , columns = [ matches.loser_hand , matches.winner_hand , matches.winner_name , matches.winner_id , matches.winner_ht , matches.tourney_name , matches.winner_age , matches.winner_entry , matches.loser_ht , matches.tourney_date ]\ntable players , columns = [ players.player_id , players.hand , players.first_name , players.last_name , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","411":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Type_Code , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","412":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Template_Type_Code , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","413":"table players , columns = [ players.first_name , players.hand , players.last_name , players.country_code , players.player_id , players.birth_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.score , matches.surface , matches.draw_size , matches.loser_rank_points , matches.winner_rank_points , matches.winner_seed , matches.match_num ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","414":"table visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Total_spent , visit.Num_of_Ticket ]\ntable visitor , columns = [ visitor.Age , visitor.Name , visitor.ID , visitor.Level_of_membership ]\ntable museum , columns = [ museum.Museum_ID , museum.Name , museum.Num_of_Staff , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","415":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Age , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","416":"table players , columns = [ players.country_code , players.first_name , players.player_id , players.last_name , players.hand , players.birth_date ]\ntable matches , columns = [ matches.tourney_name , matches.tourney_date , matches.tourney_id , matches.tourney_level , matches.winner_id , matches.winner_name , matches.year , matches.winner_age , matches.winner_rank , matches.round ]\ntable rankings , columns = [ rankings.player_id , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","417":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","418":"table employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Year_awarded , evaluation.Bonus ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.Name , shop.Manager_name , shop.District , shop.Location , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","419":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Type_Code , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","420":"table players , columns = [ players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.score , matches.surface , matches.loser_rank_points , matches.draw_size , matches.winner_rank_points , matches.match_num , matches.winner_seed ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","421":"table players , columns = [ players.hand , players.player_id , players.country_code , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.round , matches.minutes , matches.score , matches.year , matches.surface , matches.winner_hand , matches.winner_ht , matches.draw_size , matches.match_num , matches.loser_rank_points ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","422":"table shop , columns = [ shop.District , shop.Number_products , shop.Location , shop.Shop_ID , shop.Name , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.City , employee.Name , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","423":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","424":"table hiring , columns = [ hiring.Shop_ID , hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time ]\ntable shop , columns = [ shop.Shop_ID , shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Number_products ]\ntable employee , columns = [ employee.Name , employee.Age , employee.City , employee.Employee_ID ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","425":"table battle , columns = [ battle.date , battle.name , battle.result , battle.id , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.id , death.note , death.killed , death.caused_by_ship_id , death.injured ]\ntable ship , columns = [ ship.name , ship.id , ship.location , ship.lost_in_battle , ship.ship_type , ship.disposition_of_ship , ship.tonnage ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","426":"table Paragraphs , columns = [ Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Other_Details , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","427":"table shop , columns = [ shop.Name , shop.Shop_ID , shop.Location , shop.District , shop.Manager_name , shop.Number_products ]\ntable employee , columns = [ employee.Employee_ID , employee.Name , employee.City , employee.Age ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","428":"table matches , columns = [ matches.winner_name , matches.year , matches.winner_id , matches.tourney_date , matches.winner_age , matches.match_num , matches.winner_rank_points , matches.winner_rank , matches.winner_seed , matches.winner_entry ]\ntable players , columns = [ players.first_name , players.player_id , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","429":"table battle , columns = [ battle.result , battle.id , battle.name , battle.date , battle.latin_commander , battle.bulgarian_commander ]\ntable death , columns = [ death.id , death.note , death.killed , death.injured , death.caused_by_ship_id ]\ntable ship , columns = [ ship.name , ship.id , ship.location , ship.lost_in_battle , ship.ship_type , ship.disposition_of_ship , ship.tonnage ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","430":"table Documents , columns = [ Documents.Document_Name , Documents.Document_Description , Documents.Document_ID , Documents.Template_ID , Documents.Other_Details ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","431":"table matches , columns = [ matches.winner_rank , matches.winner_name , matches.winner_age , matches.winner_rank_points , matches.loser_age , matches.year , matches.winner_id , matches.winner_entry , matches.round , matches.minutes ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.birth_date , players.hand , players.country_code ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","432":"table Paragraphs , columns = [ Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Document_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Documents , columns = [ Documents.Other_Details , Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Template_ID ]\ntable Templates , columns = [ Templates.Date_Effective_To , Templates.Template_ID , Templates.Template_Details , Templates.Version_Number , Templates.Template_Type_Code , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","433":"table Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","434":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","435":"table battle , columns = [ battle.bulgarian_commander , battle.name , battle.result , battle.latin_commander , battle.date , battle.id ]\ntable death , columns = [ death.id , death.note , death.killed , death.injured , death.caused_by_ship_id ]\ntable ship , columns = [ ship.name , ship.id , ship.location , ship.lost_in_battle , ship.ship_type , ship.disposition_of_ship , ship.tonnage ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","436":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","437":"table shop , columns = [ shop.Number_products , shop.Name , shop.District , shop.Shop_ID , shop.Location , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","438":"table death , columns = [ death.injured , death.id , death.caused_by_ship_id , death.note , death.killed ]\ntable ship , columns = [ ship.id , ship.ship_type , ship.name , ship.location , ship.disposition_of_ship , ship.lost_in_battle , ship.tonnage ]\ntable battle , columns = [ battle.id , battle.result , battle.name , battle.date , battle.latin_commander , battle.bulgarian_commander ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","439":"table Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Sections , columns = [ Sections.course_id , Sections.other_details , Sections.section_name , Sections.section_description , Sections.section_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_description , Departments.department_id , Departments.department_name ]\ntable Addresses , columns = [ Addresses.state_province_county , Addresses.city , Addresses.country , Addresses.address_id , Addresses.other_address_details , Addresses.zip_postcode , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","440":"table players , columns = [ players.country_code , players.player_id , players.hand , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.minutes , matches.year , matches.round , matches.surface , matches.score , matches.loser_rank_points , matches.draw_size , matches.match_num , matches.winner_rank_points , matches.winner_age ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","441":"table shop , columns = [ shop.Location , shop.District , shop.Name , shop.Shop_ID , shop.Manager_name , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Employee_ID , hiring.Is_full_time ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","442":"table Paragraphs , columns = [ Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_Details , Templates.Date_Effective_To , Templates.Template_ID , Templates.Date_Effective_From , Templates.Template_Type_Code , Templates.Version_Number ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","443":"table players , columns = [ players.last_name , players.first_name , players.birth_date , players.hand , players.country_code , players.player_id ]\ntable matches , columns = [ matches.loser_hand , matches.year , matches.surface , matches.minutes , matches.round , matches.score , matches.winner_hand , matches.loser_name , matches.winner_name , matches.loser_rank_points ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","444":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","445":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","446":"table Documents , columns = [ Documents.Template_ID , Documents.Document_Name , Documents.Document_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","447":"table rankings , columns = [ rankings.player_id , rankings.ranking , rankings.ranking_points , rankings.tours , rankings.ranking_date ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.birth_date , players.country_code ]\ntable matches , columns = [ matches.year , matches.minutes , matches.surface , matches.round , matches.score , matches.winner_rank , matches.loser_rank_points , matches.winner_rank_points , matches.winner_name , matches.draw_size ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","448":"table players , columns = [ players.last_name , players.first_name , players.birth_date , players.hand , players.country_code , players.player_id ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.winner_name , matches.draw_size , matches.loser_rank_points , matches.winner_rank_points , matches.match_num ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","449":"table death , columns = [ death.caused_by_ship_id , death.injured , death.id , death.killed , death.note ]\ntable ship , columns = [ ship.id , ship.name , ship.ship_type , ship.location , ship.disposition_of_ship , ship.tonnage , ship.lost_in_battle ]\ntable battle , columns = [ battle.name , battle.id , battle.result , battle.date , battle.latin_commander , battle.bulgarian_commander ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","450":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Template_ID , Documents.Other_Details ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","451":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Age , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","452":"table teacher , columns = [ teacher.Name , teacher.Age , teacher.Hometown , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","453":"table Addresses , columns = [ Addresses.zip_postcode , Addresses.city , Addresses.state_province_county , Addresses.country , Addresses.address_id , Addresses.other_address_details , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description , Degree_Programs.degree_program_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","454":"table Documents , columns = [ Documents.Template_ID , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details ]\ntable Templates , columns = [ Templates.Template_Details , Templates.Template_ID , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","455":"table players , columns = [ players.country_code , players.player_id , players.first_name , players.last_name , players.hand , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.tours , rankings.ranking , rankings.ranking_points , rankings.ranking_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.loser_rank_points , matches.match_num , matches.draw_size , matches.winner_rank_points , matches.winner_name ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","456":"table museum , columns = [ museum.Open_Year , museum.Name , museum.Museum_ID , museum.Num_of_Staff ]\ntable visit , columns = [ visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent , visit.visitor_ID ]\ntable visitor , columns = [ visitor.ID , visitor.Name , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","457":"table teacher , columns = [ teacher.Name , teacher.Age , teacher.Teacher_ID , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","458":"table battle , columns = [ battle.bulgarian_commander , battle.result , battle.latin_commander , battle.name , battle.id , battle.date ]\ntable ship , columns = [ ship.lost_in_battle , ship.name , ship.id , ship.location , ship.ship_type , ship.disposition_of_ship , ship.tonnage ]\ntable death , columns = [ death.id , death.note , death.killed , death.caused_by_ship_id , death.injured ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","459":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course_ID , course.Course , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","460":"table matches , columns = [ matches.winner_rank , matches.winner_rank_points , matches.winner_name , matches.winner_seed , matches.winner_age , matches.match_num , matches.year , matches.winner_id , matches.round , matches.minutes ]\ntable rankings , columns = [ rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date ]\ntable players , columns = [ players.hand , players.first_name , players.player_id , players.last_name , players.country_code , players.birth_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","461":"table employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Year_awarded , evaluation.Bonus ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","462":"table players , columns = [ players.hand , players.player_id , players.country_code , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.round , matches.score , matches.minutes , matches.year , matches.surface , matches.winner_hand , matches.winner_ht , matches.draw_size , matches.match_num , matches.loser_rank_points ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","463":"table matches , columns = [ matches.loser_name , matches.winner_name , matches.loser_id , matches.loser_rank_points , matches.loser_hand , matches.loser_rank , matches.loser_age , matches.loser_ht , matches.year , matches.minutes ]\ntable players , columns = [ players.hand , players.last_name , players.first_name , players.country_code , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","464":"table ship , columns = [ ship.tonnage , ship.id , ship.ship_type , ship.name , ship.location , ship.disposition_of_ship , ship.lost_in_battle ]\ntable death , columns = [ death.caused_by_ship_id , death.injured , death.killed , death.id , death.note ]\ntable battle , columns = [ battle.id , battle.name , battle.result , battle.date , battle.latin_commander , battle.bulgarian_commander ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","465":"table players , columns = [ players.country_code , players.first_name , players.player_id , players.hand , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.loser_rank_points , matches.match_num , matches.winner_rank_points , matches.draw_size , matches.winner_name ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","466":"table matches , columns = [ matches.loser_rank , matches.loser_rank_points , matches.loser_name , matches.loser_age , matches.winner_rank , matches.match_num , matches.loser_seed , matches.loser_id , matches.best_of , matches.winner_rank_points ]\ntable players , columns = [ players.hand , players.first_name , players.country_code , players.last_name , players.player_id , players.birth_date ]\ntable rankings , columns = [ rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","467":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","468":"table matches , columns = [ matches.winner_name , matches.winner_rank_points , matches.winner_rank , matches.winner_id , matches.loser_rank_points , matches.match_num , matches.winner_age , matches.year , matches.round , matches.surface ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","469":"table teacher , columns = [ teacher.Teacher_ID , teacher.Hometown , teacher.Name , teacher.Age ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","470":"table shop , columns = [ shop.Shop_ID , shop.Name , shop.Location , shop.District , shop.Manager_name , shop.Number_products ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time ]\ntable employee , columns = [ employee.Employee_ID , employee.Name , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","471":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","472":"table evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.Name , shop.District , shop.Manager_name , shop.Location , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","473":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_ID , Documents.Document_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","474":"table hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Employee_ID , hiring.Is_full_time ]\ntable shop , columns = [ shop.Shop_ID , shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Number_products ]\ntable employee , columns = [ employee.Employee_ID , employee.Name , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","475":"table visitor , columns = [ visitor.Name , visitor.ID , visitor.Age , visitor.Level_of_membership ]\ntable visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Total_spent , visit.Num_of_Ticket ]\ntable museum , columns = [ museum.Open_Year , museum.Museum_ID , museum.Name , museum.Num_of_Staff ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","476":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Teacher_ID , teacher.Age ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Grade , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","477":"table shop , columns = [ shop.Number_products , shop.District , shop.Location , shop.Name , shop.Shop_ID , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.City , employee.Name , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","478":"table matches , columns = [ matches.year , matches.match_num , matches.round , matches.minutes , matches.score , matches.surface , matches.winner_seed , matches.tourney_date , matches.winner_rank_points , matches.loser_rank_points ]\ntable players , columns = [ players.hand , players.birth_date , players.country_code , players.player_id , players.first_name , players.last_name ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","479":"table shop , columns = [ shop.Number_products , shop.District , shop.Location , shop.Name , shop.Shop_ID , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","480":"table Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Other_Details , Documents.Document_Description , Documents.Document_Name ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","481":"table visit , columns = [ visit.visitor_ID , visit.Num_of_Ticket , visit.Total_spent , visit.Museum_ID ]\ntable visitor , columns = [ visitor.Age , visitor.Name , visitor.ID , visitor.Level_of_membership ]\ntable museum , columns = [ museum.Name , museum.Museum_ID , museum.Num_of_Staff , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","482":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_ID , Templates.Version_Number , Templates.Template_Details , Templates.Date_Effective_From , Templates.Date_Effective_To ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","483":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","484":"table teacher , columns = [ teacher.Hometown , teacher.Age , teacher.Name , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","485":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Template_ID , Documents.Document_Name , Documents.Document_Description , Documents.Other_Details ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","486":"table teacher , columns = [ teacher.Teacher_ID , teacher.Name , teacher.Age , teacher.Hometown ]\ntable course , columns = [ course.Course , course.Course_ID , course.Staring_Date ]\ntable course_arrange , columns = [ course_arrange.Teacher_ID , course_arrange.Course_ID , course_arrange.Grade ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","487":"table ship , columns = [ ship.tonnage , ship.name , ship.ship_type , ship.disposition_of_ship , ship.location , ship.id , ship.lost_in_battle ]\ntable death , columns = [ death.id , death.note , death.killed , death.caused_by_ship_id , death.injured ]\ntable battle , columns = [ battle.name , battle.result , battle.id , battle.date , battle.latin_commander , battle.bulgarian_commander ]\nforeign keys :\nship.lost_in_battle = battle.iddeath.caused_by_ship_id = ship.id","488":"table visit , columns = [ visit.Num_of_Ticket , visit.Total_spent , visit.visitor_ID , visit.Museum_ID ]\ntable visitor , columns = [ visitor.ID , visitor.Name , visitor.Age , visitor.Level_of_membership ]\ntable museum , columns = [ museum.Name , museum.Num_of_Staff , museum.Museum_ID , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","489":"table shop , columns = [ shop.Location , shop.District , shop.Shop_ID , shop.Name , shop.Manager_name , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","490":"table players , columns = [ players.country_code , players.hand , players.player_id , players.first_name , players.last_name , players.birth_date ]\ntable matches , columns = [ matches.year , matches.minutes , matches.round , matches.surface , matches.score , matches.draw_size , matches.winner_rank_points , matches.winner_hand , matches.winner_age , matches.winner_name ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.tours , rankings.ranking_points , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","491":"table shop , columns = [ shop.Name , shop.Shop_ID , shop.Location , shop.District , shop.Manager_name , shop.Number_products ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time ]\ntable employee , columns = [ employee.Employee_ID , employee.Name , employee.City , employee.Age ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","492":"table Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","493":"table matches , columns = [ matches.winner_rank , matches.winner_name , matches.winner_age , matches.winner_rank_points , matches.loser_age , matches.year , matches.winner_id , matches.match_num , matches.winner_entry , matches.minutes ]\ntable players , columns = [ players.player_id , players.first_name , players.last_name , players.birth_date , players.hand , players.country_code ]\ntable rankings , columns = [ rankings.ranking , rankings.player_id , rankings.ranking_points , rankings.tours , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","494":"table museum , columns = [ museum.Num_of_Staff , museum.Open_Year , museum.Name , museum.Museum_ID ]\ntable visit , columns = [ visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent , visit.visitor_ID ]\ntable visitor , columns = [ visitor.Name , visitor.ID , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","495":"table employee , columns = [ employee.Age , employee.City , employee.Employee_ID , employee.Name ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Bonus , evaluation.Year_awarded ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","496":"table matches , columns = [ matches.winner_rank , matches.winner_rank_points , matches.winner_name , matches.winner_age , matches.winner_seed , matches.year , matches.loser_rank_points , matches.round , matches.minutes , matches.score ]\ntable players , columns = [ players.hand , players.first_name , players.last_name , players.player_id , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.ranking , rankings.ranking_points , rankings.tours , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","497":"table matches , columns = [ matches.year , matches.match_num , matches.round , matches.minutes , matches.score , matches.surface , matches.tourney_date , matches.winner_seed , matches.loser_rank_points , matches.winner_rank_points ]\ntable players , columns = [ players.hand , players.country_code , players.first_name , players.player_id , players.last_name , players.birth_date ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","498":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID , Paragraphs.Other_Details ]\ntable Documents , columns = [ Documents.Document_ID , Documents.Document_Name , Documents.Template_ID , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Date_Effective_To , Templates.Template_Details , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","499":"table teacher , columns = [ teacher.Hometown , teacher.Name , teacher.Age , teacher.Teacher_ID ]\ntable course_arrange , columns = [ course_arrange.Grade , course_arrange.Teacher_ID , course_arrange.Course_ID ]\ntable course , columns = [ course.Course , course.Staring_Date , course.Course_ID ]\nforeign keys :\ncourse_arrange.Teacher_ID = teacher.Teacher_IDcourse_arrange.Course_ID = course.Course_ID","500":"table matches , columns = [ matches.match_num , matches.round , matches.minutes , matches.score , matches.year , matches.surface , matches.draw_size , matches.loser_rank_points , matches.best_of , matches.winner_rank_points ]\ntable players , columns = [ players.hand , players.first_name , players.last_name , players.country_code , players.birth_date , players.player_id ]\ntable rankings , columns = [ rankings.ranking , rankings.tours , rankings.ranking_points , rankings.player_id , rankings.ranking_date ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","501":"table shop , columns = [ shop.Location , shop.District , shop.Name , shop.Shop_ID , shop.Manager_name , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","502":"table visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable museum , columns = [ museum.Museum_ID , museum.Open_Year , museum.Name , museum.Num_of_Staff ]\ntable visitor , columns = [ visitor.ID , visitor.Name , visitor.Age , visitor.Level_of_membership ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","503":"table visitor , columns = [ visitor.Level_of_membership , visitor.Age , visitor.Name , visitor.ID ]\ntable visit , columns = [ visit.visitor_ID , visit.Museum_ID , visit.Num_of_Ticket , visit.Total_spent ]\ntable museum , columns = [ museum.Name , museum.Num_of_Staff , museum.Museum_ID , museum.Open_Year ]\nforeign keys :\nvisit.visitor_ID = visitor.IDvisit.Museum_ID = museum.Museum_ID","504":"table Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Document_Name , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Date_Effective_From , Templates.Version_Number ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","505":"table Templates , columns = [ Templates.Template_Type_Code , Templates.Template_Details , Templates.Template_ID , Templates.Date_Effective_To , Templates.Version_Number , Templates.Date_Effective_From ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Other_Details , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","506":"table employee , columns = [ employee.Name , employee.Age , employee.City , employee.Employee_ID ]\ntable shop , columns = [ shop.Name , shop.Manager_name , shop.District , shop.Location , shop.Shop_ID , shop.Number_products ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","507":"table Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Description , Ref_Template_Types.Template_Type_Code ]\ntable Templates , columns = [ Templates.Template_Type_Code , Templates.Template_Details , Templates.Template_ID , Templates.Version_Number , Templates.Date_Effective_To , Templates.Date_Effective_From ]\ntable Paragraphs , columns = [ Paragraphs.Other_Details , Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Paragraph_ID ]\ntable Documents , columns = [ Documents.Other_Details , Documents.Template_ID , Documents.Document_Name , Documents.Document_ID , Documents.Document_Description ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","508":"table Templates , columns = [ Templates.Template_ID , Templates.Template_Type_Code , Templates.Template_Details , Templates.Date_Effective_To , Templates.Date_Effective_From , Templates.Version_Number ]\ntable Documents , columns = [ Documents.Template_ID , Documents.Document_ID , Documents.Document_Name , Documents.Other_Details , Documents.Document_Description ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Other_Details , Paragraphs.Paragraph_ID , Paragraphs.Paragraph_Text ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","509":"table evaluation , columns = [ evaluation.Bonus , evaluation.Employee_ID , evaluation.Year_awarded ]\ntable employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.Name , shop.District , shop.Location , shop.Manager_name , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","510":"table Addresses , columns = [ Addresses.zip_postcode , Addresses.city , Addresses.state_province_county , Addresses.other_address_details , Addresses.address_id , Addresses.country , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","511":"table Documents , columns = [ Documents.Document_Name , Documents.Document_ID , Documents.Document_Description , Documents.Other_Details , Documents.Template_ID ]\ntable Paragraphs , columns = [ Paragraphs.Document_ID , Paragraphs.Paragraph_Text , Paragraphs.Other_Details , Paragraphs.Paragraph_ID ]\ntable Ref_Template_Types , columns = [ Ref_Template_Types.Template_Type_Code , Ref_Template_Types.Template_Type_Description ]\ntable Templates , columns = [ Templates.Template_ID , Templates.Date_Effective_To , Templates.Template_Details , Templates.Template_Type_Code , Templates.Version_Number , Templates.Date_Effective_From ]\nforeign keys :\nTemplates.Template_Type_Code = Ref_Template_Types.Template_Type_CodeDocuments.Template_ID = Templates.Template_IDParagraphs.Document_ID = Documents.Document_ID","512":"table employee , columns = [ employee.Name , employee.Employee_ID , employee.Age , employee.City ]\ntable evaluation , columns = [ evaluation.Employee_ID , evaluation.Year_awarded , evaluation.Bonus ]\ntable hiring , columns = [ hiring.Employee_ID , hiring.Start_from , hiring.Is_full_time , hiring.Shop_ID ]\ntable shop , columns = [ shop.Name , shop.Manager_name , shop.District , shop.Location , shop.Shop_ID , shop.Number_products ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","513":"table shop , columns = [ shop.Number_products , shop.Name , shop.District , shop.Shop_ID , shop.Location , shop.Manager_name ]\ntable evaluation , columns = [ evaluation.Bonus , evaluation.Year_awarded , evaluation.Employee_ID ]\ntable employee , columns = [ employee.Name , employee.City , employee.Age , employee.Employee_ID ]\ntable hiring , columns = [ hiring.Shop_ID , hiring.Start_from , hiring.Is_full_time , hiring.Employee_ID ]\nforeign keys :\nhiring.Employee_ID = employee.Employee_IDhiring.Shop_ID = shop.Shop_IDevaluation.Employee_ID = employee.Employee_ID","514":"table players , columns = [ players.player_id , players.first_name , players.last_name , players.hand , players.country_code , players.birth_date ]\ntable rankings , columns = [ rankings.player_id , rankings.ranking_points , rankings.ranking , rankings.tours , rankings.ranking_date ]\ntable matches , columns = [ matches.loser_rank_points , matches.winner_rank_points , matches.year , matches.minutes , matches.score , matches.surface , matches.round , matches.winner_rank , matches.draw_size , matches.winner_name ]\nforeign keys :\nmatches.winner_id = players.player_idmatches.loser_id = players.player_idrankings.player_id = players.player_id","515":"table TV_series , columns = [ TV_series.Share , TV_series.Rating , TV_series.id , TV_series.18_49_Rating_Share , TV_series.Channel , TV_series.Weekly_Rank , TV_series.Episode , TV_series.Viewers_m , TV_series.Air_Date ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Country , TV_Channel.Language , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","516":"table people , columns = [ people.Nationality , people.Name , people.Height , people.People_ID , people.Birth_Date ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","517":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.other_details , Transcripts.transcript_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_description , Sections.section_name ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_description , Departments.department_name ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.other_address_details , Addresses.state_province_county , Addresses.address_id , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","518":"table people , columns = [ people.Nationality , people.Name , people.Height , people.People_ID , people.Birth_Date ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Poker_Player_ID , poker_player.Final_Table_Made , poker_player.Earnings ]\nforeign keys :\npoker_player.People_ID = people.People_ID","519":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable country , columns = [ country.Name , country.Population , country.Code , country.LocalName , country.Capital , country.Region , country.HeadOfState , country.Code2 , country.GNPOld , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","520":"table country , columns = [ country.Region , country.Code , country.Capital , country.Name , country.LocalName , country.HeadOfState , country.Code2 , country.GovernmentForm , country.GNPOld , country.SurfaceArea ]\ntable city , columns = [ city.CountryCode , city.District , city.Name , city.ID , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","521":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.Code2 , country.HeadOfState , country.LocalName , country.GovernmentForm , country.GNPOld , country.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","522":"table country , columns = [ country.GNP , country.Population , country.GovernmentForm , country.Name , country.GNPOld , country.Code , country.Capital , country.HeadOfState , country.Region , country.IndepYear ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","523":"table Students , columns = [ Students.last_name , Students.student_id , Students.current_address_id , Students.permanent_address_id , Students.first_name , Students.middle_name , Students.date_first_registered , Students.other_student_details , Students.date_left , Students.email_address ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.state_province_county , Addresses.other_address_details , Addresses.city , Addresses.zip_postcode , Addresses.country , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.department_id , Degree_Programs.other_details , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","524":"table poker_player , columns = [ poker_player.Final_Table_Made , poker_player.Best_Finish , poker_player.Money_Rank , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Earnings ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","525":"table Cartoon , columns = [ Cartoon.Written_by , Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Directed_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","526":"table Cartoon , columns = [ Cartoon.Production_code , Cartoon.Channel , Cartoon.Original_air_date , Cartoon.id , Cartoon.Title , Cartoon.Written_by , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.Air_Date , TV_series.id , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","527":"table Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_name , Sections.section_description ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.other_address_details , Addresses.state_province_county , Addresses.address_id , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_description , Departments.department_name ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","528":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.course_id , Sections.section_id , Sections.other_details , Sections.section_name , Sections.section_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_description , Departments.department_name ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","529":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.GovernmentForm , country.Code , country.Name , country.HeadOfState , country.Capital , country.LocalName , country.Region , country.GNPOld , country.IndepYear , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","530":"table Students , columns = [ Students.cell_mobile_number , Students.first_name , Students.permanent_address_id , Students.current_address_id , Students.last_name , Students.middle_name , Students.date_left , Students.email_address , Students.student_id , Students.other_student_details ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.country , Addresses.state_province_county , Addresses.other_address_details , Addresses.city , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","531":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Region , country.Name , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld , country.GovernmentForm , country.Code2 , country.Continent ]\ntable city , columns = [ city.CountryCode , city.Name , city.District , city.ID , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","532":"table Sections , columns = [ Sections.section_name , Sections.section_description , Sections.other_details , Sections.section_id , Sections.course_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Addresses , columns = [ Addresses.state_province_county , Addresses.city , Addresses.country , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 , Addresses.zip_postcode , Addresses.other_address_details , Addresses.address_id ]\ntable Departments , columns = [ Departments.department_name , Departments.other_details , Departments.department_description , Departments.department_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","533":"table country , columns = [ country.IndepYear , country.Name , country.Code , country.Capital , country.GovernmentForm , country.LocalName , country.HeadOfState , country.Region , country.GNPOld , country.SurfaceArea ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","534":"table Students , columns = [ Students.first_name , Students.last_name , Students.date_first_registered , Students.middle_name , Students.student_id , Students.date_left , Students.email_address , Students.other_student_details , Students.cell_mobile_number , Students.ssn ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_id , Courses.course_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","535":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.LocalName , country.Capital , country.Region , country.HeadOfState , country.GovernmentForm , country.Continent , country.Code2 , country.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","536":"table Students , columns = [ Students.other_student_details , Students.first_name , Students.last_name , Students.middle_name , Students.student_id , Students.date_first_registered , Students.date_left , Students.email_address , Students.ssn , Students.cell_mobile_number ]\ntable Addresses , columns = [ Addresses.other_address_details , Addresses.line_1 , Addresses.city , Addresses.country , Addresses.line_3 , Addresses.line_2 , Addresses.state_province_county , Addresses.address_id , Addresses.zip_postcode ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","537":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Title , Cartoon.Channel , Cartoon.id , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","538":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Region , country.Code , country.Name , country.Capital , country.LocalName , country.GovernmentForm , country.HeadOfState , country.GNPOld , country.Code2 , country.Continent ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.District , city.ID , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","539":"table TV_Channel , columns = [ TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.series_name , TV_Channel.id , TV_Channel.Pay_per_view_PPV , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.Title , Cartoon.id , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","540":"table Students , columns = [ Students.cell_mobile_number , Students.last_name , Students.first_name , Students.middle_name , Students.student_id , Students.date_first_registered , Students.email_address , Students.date_left , Students.other_student_details , Students.ssn ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_name , Departments.department_id , Departments.department_description ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","541":"table Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_enrolment_id , Student_Enrolment.student_id , Student_Enrolment.degree_program_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.last_name , Students.first_name , Students.middle_name , Students.email_address , Students.current_address_id , Students.cell_mobile_number ]\ntable Sections , columns = [ Sections.course_id , Sections.section_name , Sections.section_id , Sections.other_details , Sections.section_description ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","542":"table country , columns = [ country.Code , country.Continent , country.Name , country.Capital , country.Region , country.HeadOfState , country.LocalName , country.Code2 , country.GNPOld , country.GovernmentForm ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","543":"table TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable Cartoon , columns = [ Cartoon.Written_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Directed_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","544":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Rating , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Written_by , Cartoon.Original_air_date ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","545":"table TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","546":"table poker_player , columns = [ poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Earnings , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Nationality , people.Height , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","547":"table TV_series , columns = [ TV_series.Rating , TV_series.Episode , TV_series.id , TV_series.Weekly_Rank , TV_series.Channel , TV_series.Share , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","548":"table people , columns = [ people.Nationality , people.Name , people.Height , people.Birth_Date , people.People_ID ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","549":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.HeadOfState , country.Region , country.GovernmentForm , country.LocalName , country.Code2 , country.GNPOld , country.IndepYear ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","550":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Original_air_date , Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Production_code , Cartoon.Written_by ]\ntable TV_series , columns = [ TV_series.Air_Date , TV_series.id , TV_series.Channel , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","551":"table VOTES , columns = [ VOTES.state , VOTES.vote_id , VOTES.created , VOTES.contestant_number , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_number , CONTESTANTS.contestant_name ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","552":"table Sections , columns = [ Sections.section_description , Sections.section_name , Sections.other_details , Sections.section_id , Sections.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_description , Departments.department_name , Departments.department_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_description , Courses.course_name , Courses.course_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_description , Semesters.semester_name , Semesters.semester_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.degree_summary_description , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","553":"table country , columns = [ country.GNP , country.Population , country.Name , country.Code , country.GNPOld , country.Capital , country.HeadOfState , country.Region , country.GovernmentForm , country.Continent ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","554":"table VOTES , columns = [ VOTES.contestant_number , VOTES.created , VOTES.state , VOTES.vote_id , VOTES.phone_number ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_number , CONTESTANTS.contestant_name ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","555":"table Students , columns = [ Students.first_name , Students.last_name , Students.middle_name , Students.student_id , Students.other_student_details , Students.date_first_registered , Students.email_address , Students.date_left , Students.ssn , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_description ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","556":"table Sections , columns = [ Sections.section_description , Sections.section_name , Sections.other_details , Sections.section_id , Sections.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_description , Departments.department_name , Departments.department_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_description , Courses.course_name , Courses.course_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_description , Semesters.semester_name , Semesters.semester_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.degree_summary_description , Degree_Programs.degree_summary_name , Degree_Programs.department_id , Degree_Programs.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","557":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\ntable VOTES , columns = [ VOTES.contestant_number , VOTES.created , VOTES.state , VOTES.phone_number , VOTES.vote_id ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","558":"table Cartoon , columns = [ Cartoon.Written_by , Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Directed_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","559":"table Sections , columns = [ Sections.section_name , Sections.section_description , Sections.other_details , Sections.section_id , Sections.course_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.state_province_county , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 , Addresses.zip_postcode , Addresses.other_address_details , Addresses.address_id ]\ntable Departments , columns = [ Departments.department_name , Departments.other_details , Departments.department_description , Departments.department_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","560":"table country , columns = [ country.SurfaceArea , country.Continent , country.Region , country.Name , country.Code , country.Capital , country.HeadOfState , country.GNPOld , country.LocalName , country.IndepYear ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","561":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.LocalName , country.Region , country.HeadOfState , country.GNPOld , country.Code2 , country.GovernmentForm , country.SurfaceArea ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","562":"table poker_player , columns = [ poker_player.People_ID , poker_player.Final_Table_Made , poker_player.Best_Finish , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Earnings ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","563":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Original_air_date , Cartoon.Written_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Share , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","564":"table poker_player , columns = [ poker_player.Earnings , poker_player.Money_Rank , poker_player.Poker_Player_ID , poker_player.Best_Finish , poker_player.People_ID , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.Height , people.People_ID , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","565":"table Students , columns = [ Students.first_name , Students.permanent_address_id , Students.current_address_id , Students.student_id , Students.last_name , Students.middle_name , Students.other_student_details , Students.date_first_registered , Students.email_address , Students.date_left ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.other_address_details , Addresses.state_province_county , Addresses.city , Addresses.zip_postcode , Addresses.line_1 , Addresses.country , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","566":"table country , columns = [ country.LifeExpectancy , country.GovernmentForm , country.Region , country.Continent , country.Name , country.Code , country.HeadOfState , country.Capital , country.Population , country.IndepYear ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.Population , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","567":"table poker_player , columns = [ poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Earnings , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","568":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.IndepYear , country.Name , country.GovernmentForm , country.Capital , country.HeadOfState , country.Code2 , country.Region , country.LocalName , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","569":"table Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Transcripts , columns = [ Transcripts.transcript_id , Transcripts.transcript_date , Transcripts.other_details ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_enrolment_id , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.other_details ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.first_name , Students.last_name , Students.middle_name , Students.email_address , Students.current_address_id , Students.cell_mobile_number ]\ntable Sections , columns = [ Sections.course_id , Sections.section_id , Sections.other_details , Sections.section_name , Sections.section_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","570":"table Cartoon , columns = [ Cartoon.Title , Cartoon.Channel , Cartoon.id , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Directed_by , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Viewers_m , TV_series.Air_Date , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","571":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Sections , columns = [ Sections.course_id , Sections.section_id , Sections.other_details , Sections.section_name , Sections.section_description ]\ntable Courses , columns = [ Courses.course_id , Courses.other_details , Courses.course_name , Courses.course_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","572":"table people , columns = [ people.Birth_Date , people.Name , people.Height , people.Nationality , people.People_ID ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","573":"table VOTES , columns = [ VOTES.created , VOTES.state , VOTES.vote_id , VOTES.contestant_number , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","574":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable city , columns = [ city.Population , city.CountryCode , city.Name , city.ID , city.District ]\ntable country , columns = [ country.Name , country.Code , country.Population , country.LocalName , country.Capital , country.Region , country.HeadOfState , country.GovernmentForm , country.Code2 , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","575":"table Students , columns = [ Students.first_name , Students.last_name , Students.student_id , Students.middle_name , Students.date_left , Students.date_first_registered , Students.other_student_details , Students.email_address , Students.ssn , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.other_details , Semesters.semester_description ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Courses , columns = [ Courses.course_id , Courses.other_details , Courses.course_name , Courses.course_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","576":"table Student_Enrolment , columns = [ Student_Enrolment.semester_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.degree_program_id ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.semester_description , Semesters.other_details ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.other_student_details , Students.date_left , Students.last_name , Students.first_name , Students.email_address , Students.middle_name , Students.cell_mobile_number , Students.ssn ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","577":"table Addresses , columns = [ Addresses.address_id , Addresses.line_2 , Addresses.line_1 , Addresses.line_3 , Addresses.state_province_county , Addresses.other_address_details , Addresses.zip_postcode , Addresses.city , Addresses.country ]\ntable Students , columns = [ Students.permanent_address_id , Students.student_id , Students.current_address_id , Students.email_address , Students.other_student_details , Students.first_name , Students.date_left , Students.date_first_registered , Students.last_name , Students.middle_name ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","578":"table poker_player , columns = [ poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.People_ID , poker_player.Poker_Player_ID ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","579":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.HeadOfState , country.LocalName , country.GovernmentForm , country.Code2 , country.GNPOld , country.IndepYear ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","580":"table Student_Enrolment , columns = [ Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_description ]\ntable Students , columns = [ Students.student_id , Students.other_student_details , Students.date_first_registered , Students.date_left , Students.email_address , Students.last_name , Students.first_name , Students.middle_name , Students.current_address_id , Students.cell_mobile_number ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.other_details , Semesters.semester_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","581":"table country , columns = [ country.HeadOfState , country.Code , country.Name , country.Capital , country.GovernmentForm , country.Region , country.LocalName , country.GNPOld , country.IndepYear , country.Code2 ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","582":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.HeadOfState , country.LocalName , country.GNPOld , country.Code2 , country.GovernmentForm , country.SurfaceArea ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","583":"table Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.semester_description , Semesters.other_details ]\ntable Student_Enrolment , columns = [ Student_Enrolment.semester_id , Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.last_name , Students.middle_name , Students.email_address , Students.first_name , Students.cell_mobile_number , Students.ssn ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","584":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.IndepYear , country.Name , country.GovernmentForm , country.Capital , country.HeadOfState , country.Code2 , country.Region , country.LocalName , country.Population ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","585":"table poker_player , columns = [ poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.People_ID , poker_player.Earnings , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","586":"table poker_player , columns = [ poker_player.Earnings , poker_player.Money_Rank , poker_player.Poker_Player_ID , poker_player.People_ID , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","587":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","588":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Birth_Date , people.Name , people.Height , people.Nationality ]\nforeign keys :\npoker_player.People_ID = people.People_ID","589":"table TV_series , columns = [ TV_series.Share , TV_series.Rating , TV_series.id , TV_series.18_49_Rating_Share , TV_series.Weekly_Rank , TV_series.Channel , TV_series.Episode , TV_series.Viewers_m , TV_series.Air_Date ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","590":"table Students , columns = [ Students.student_id , Students.first_name , Students.last_name , Students.middle_name , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.email_address , Students.ssn , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id , Student_Enrolment.semester_id , Student_Enrolment.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Courses , columns = [ Courses.course_id , Courses.other_details , Courses.course_name , Courses.course_description ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.department_id , Degree_Programs.other_details , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Sections , columns = [ Sections.course_id , Sections.section_id , Sections.other_details , Sections.section_name , Sections.section_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","591":"table poker_player , columns = [ poker_player.Money_Rank , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Earnings , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Height , people.People_ID , people.Name , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","592":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GovernmentForm , country.GNPOld , country.Code2 , country.IndepYear ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","593":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Title , Cartoon.Original_air_date , Cartoon.Channel , Cartoon.id , Cartoon.Production_code , Cartoon.Written_by ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Air_Date , TV_series.Weekly_Rank , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","594":"table Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.semester_description , Semesters.other_details ]\ntable Student_Enrolment , columns = [ Student_Enrolment.semester_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.degree_program_id ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.last_name , Students.email_address , Students.middle_name , Students.first_name , Students.cell_mobile_number , Students.ssn ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","595":"table poker_player , columns = [ poker_player.Money_Rank , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Earnings , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Height , people.People_ID , people.Name , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","596":"table TV_Channel , columns = [ TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Language , TV_Channel.Country , TV_Channel.Hight_definition_TV , TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","597":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.LifeExpectancy , country.Code , country.Name , country.Capital , country.Region , country.Population , country.HeadOfState , country.LocalName , country.GNPOld , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","598":"table VOTES , columns = [ VOTES.created , VOTES.state , VOTES.vote_id , VOTES.contestant_number , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","599":"table country , columns = [ country.Population , country.Region , country.Name , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.Continent , country.SurfaceArea , country.GNPOld ]\ntable city , columns = [ city.Population , city.Name , city.District , city.CountryCode , city.ID ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","600":"table country , columns = [ country.Continent , country.Code , country.Name , country.Region , country.Capital , country.HeadOfState , country.LocalName , country.GNPOld , country.SurfaceArea , country.GovernmentForm ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","601":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Nationality , people.Height , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","602":"table country , columns = [ country.Continent , country.Code , country.Name , country.Region , country.Population , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld , country.SurfaceArea ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.Population , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","603":"table Cartoon , columns = [ Cartoon.Production_code , Cartoon.Channel , Cartoon.Original_air_date , Cartoon.id , Cartoon.Title , Cartoon.Directed_by , Cartoon.Written_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.Air_Date , TV_series.id , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","604":"table people , columns = [ people.Nationality , people.Name , people.Height , people.Birth_Date , people.People_ID ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","605":"table country , columns = [ country.GNP , country.Population , country.Continent , country.Region , country.Name , country.Code , country.Capital , country.GNPOld , country.HeadOfState , country.LocalName ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","606":"table poker_player , columns = [ poker_player.Earnings , poker_player.Money_Rank , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","607":"table Degree_Programs , columns = [ Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description , Degree_Programs.other_details , Degree_Programs.department_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_description , Departments.department_name ]\ntable Sections , columns = [ Sections.other_details , Sections.section_name , Sections.section_description , Sections.section_id , Sections.course_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_name , Semesters.semester_description , Semesters.semester_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","608":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Share , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","609":"table TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","610":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","611":"table country , columns = [ country.Continent , country.Code , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.Population , country.Code2 ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","612":"table Students , columns = [ Students.first_name , Students.last_name , Students.middle_name , Students.date_first_registered , Students.student_id , Students.date_left , Students.email_address , Students.other_student_details , Students.cell_mobile_number , Students.ssn ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.state_province_county , Addresses.other_address_details , Addresses.address_id , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","613":"table Students , columns = [ Students.last_name , Students.first_name , Students.middle_name , Students.date_left , Students.student_id , Students.date_first_registered , Students.other_student_details , Students.ssn , Students.email_address , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.other_details , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.department_name , Departments.other_details , Departments.department_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Addresses , columns = [ Addresses.state_province_county , Addresses.city , Addresses.country , Addresses.line_1 , Addresses.other_address_details , Addresses.address_id , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","614":"table country , columns = [ country.Continent , country.Name , country.Code , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GovernmentForm , country.SurfaceArea , country.Population ]\ntable city , columns = [ city.Name , city.CountryCode , city.District , city.ID , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Language , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","615":"table TV_Channel , columns = [ TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Episode , TV_series.Share , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Written_by , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","616":"table TV_Channel , columns = [ TV_Channel.Package_Option , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Pay_per_view_PPV , TV_Channel.Country , TV_Channel.Language , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","617":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Title , Cartoon.Channel , Cartoon.id , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","618":"table poker_player , columns = [ poker_player.Final_Table_Made , poker_player.Best_Finish , poker_player.Money_Rank , poker_player.Earnings , poker_player.Poker_Player_ID , poker_player.People_ID ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","619":"table poker_player , columns = [ poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Best_Finish ]\ntable people , columns = [ people.People_ID , people.Name , people.Nationality , people.Height , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","620":"table city , columns = [ city.CountryCode , city.District , city.Name , city.ID , city.Population ]\ntable country , columns = [ country.Region , country.Code , country.Name , country.Capital , country.LocalName , country.Population , country.HeadOfState , country.Code2 , country.GovernmentForm , country.GNPOld ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","621":"table Students , columns = [ Students.first_name , Students.last_name , Students.student_id , Students.middle_name , Students.date_left , Students.other_student_details , Students.date_first_registered , Students.email_address , Students.ssn , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id , Student_Enrolment.semester_id , Student_Enrolment.other_details ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.other_details , Semesters.semester_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Courses , columns = [ Courses.course_id , Courses.other_details , Courses.course_name , Courses.course_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","622":"table Students , columns = [ Students.last_name , Students.student_id , Students.current_address_id , Students.permanent_address_id , Students.first_name , Students.date_first_registered , Students.middle_name , Students.other_student_details , Students.date_left , Students.email_address ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.state_province_county , Addresses.other_address_details , Addresses.city , Addresses.country , Addresses.zip_postcode , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","623":"table TV_Channel , columns = [ TV_Channel.Package_Option , TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Pay_per_view_PPV , TV_Channel.Language , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Share , TV_series.Episode , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","624":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.GovernmentForm , country.Code2 , country.Population ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","625":"table Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.degree_program_id , Student_Enrolment.semester_id ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.last_name , Students.first_name , Students.middle_name , Students.email_address , Students.cell_mobile_number , Students.ssn ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","626":"table poker_player , columns = [ poker_player.Earnings , poker_player.Money_Rank , poker_player.Poker_Player_ID , poker_player.People_ID , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","627":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Rating , TV_series.Share , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","628":"table Cartoon , columns = [ Cartoon.Written_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Directed_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","629":"table TV_Channel , columns = [ TV_Channel.Language , TV_Channel.Country , TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","630":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.id , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","631":"table Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_enrolment_id , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.other_details ]\ntable Transcripts , columns = [ Transcripts.transcript_id , Transcripts.transcript_date , Transcripts.other_details ]\ntable Courses , columns = [ Courses.course_id , Courses.course_name , Courses.other_details , Courses.course_description ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.first_name , Students.last_name , Students.middle_name , Students.email_address , Students.current_address_id , Students.permanent_address_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","632":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.course_id , Sections.section_id , Sections.other_details , Sections.section_name , Sections.section_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Courses , columns = [ Courses.course_id , Courses.course_name , Courses.other_details , Courses.course_description ]\ntable Students , columns = [ Students.student_id , Students.other_student_details , Students.date_first_registered , Students.last_name , Students.first_name , Students.middle_name , Students.email_address , Students.date_left , Students.cell_mobile_number , Students.ssn ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","633":"table country , columns = [ country.LifeExpectancy , country.Name , country.Continent , country.Region , country.Code , country.Capital , country.LocalName , country.Population , country.HeadOfState , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","634":"table TV_series , columns = [ TV_series.Rating , TV_series.Episode , TV_series.id , TV_series.Share , TV_series.Channel , TV_series.Weekly_Rank , TV_series.Viewers_m , TV_series.Air_Date , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","635":"table TV_Channel , columns = [ TV_Channel.Language , TV_Channel.Country , TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","636":"table Student_Enrolment , columns = [ Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.department_id , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.semester_description , Semesters.other_details ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.other_student_details , Students.date_left , Students.last_name , Students.first_name , Students.email_address , Students.middle_name , Students.ssn , Students.cell_mobile_number ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.city , Addresses.country , Addresses.other_address_details , Addresses.state_province_county , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","637":"table Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_enrolment_id , Student_Enrolment.student_id , Student_Enrolment.degree_program_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.other_student_details , Students.date_left , Students.last_name , Students.first_name , Students.middle_name , Students.email_address , Students.cell_mobile_number , Students.current_address_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","638":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Country , TV_Channel.Content , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Directed_by , Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Share , TV_series.Rating , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","639":"table country , columns = [ country.SurfaceArea , country.Region , country.Continent , country.Name , country.Code , country.Capital , country.HeadOfState , country.LocalName , country.GNPOld , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.Name , city.ID , city.District , city.CountryCode , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","640":"table people , columns = [ people.Nationality , people.Name , people.Height , people.People_ID , people.Birth_Date ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","641":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.course_id , Sections.section_id , Sections.section_name , Sections.section_description ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_description , Departments.department_name ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","642":"table Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.department_id ]\ntable Students , columns = [ Students.student_id , Students.other_student_details , Students.date_first_registered , Students.date_left , Students.last_name , Students.first_name , Students.middle_name , Students.email_address , Students.cell_mobile_number , Students.current_address_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_id , Courses.course_description ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","643":"table TV_Channel , columns = [ TV_Channel.Language , TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Hight_definition_TV , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","644":"table TV_Channel , columns = [ TV_Channel.Package_Option , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Pay_per_view_PPV , TV_Channel.Country , TV_Channel.Language , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","645":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Title , Cartoon.Channel , Cartoon.id , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","646":"table Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.department_name , Departments.department_description , Departments.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\ntable Addresses , columns = [ Addresses.state_province_county , Addresses.city , Addresses.country , Addresses.address_id , Addresses.line_1 , Addresses.zip_postcode , Addresses.other_address_details , Addresses.line_3 , Addresses.line_2 ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.section_description , Sections.section_name , Sections.course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","647":"table Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description , Degree_Programs.other_details , Degree_Programs.department_id ]\ntable Students , columns = [ Students.student_id , Students.other_student_details , Students.date_first_registered , Students.date_left , Students.last_name , Students.middle_name , Students.first_name , Students.email_address , Students.cell_mobile_number , Students.ssn ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","648":"table Departments , columns = [ Departments.department_name , Departments.department_id , Departments.department_description , Departments.other_details ]\ntable Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_name , Sections.section_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","649":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Code2 , country.Region , country.HeadOfState , country.LocalName , country.GNPOld , country.GovernmentForm , country.IndepYear ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","650":"table TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Directed_by , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Share , TV_series.Rating , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","651":"table TV_Channel , columns = [ TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Share , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","652":"table country , columns = [ country.GNP , country.Population , country.Continent , country.Region , country.Name , country.Code , country.GNPOld , country.Capital , country.HeadOfState , country.LocalName ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","653":"table people , columns = [ people.Nationality , people.Name , people.Height , people.People_ID , people.Birth_Date ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Poker_Player_ID , poker_player.Final_Table_Made ]\nforeign keys :\npoker_player.People_ID = people.People_ID","654":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.course_id , Sections.section_id , Sections.section_name , Sections.section_description ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_description , Departments.department_name ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","655":"table country , columns = [ country.IndepYear , country.Name , country.Capital , country.Code , country.LocalName , country.HeadOfState , country.GovernmentForm , country.Region , country.GNPOld , country.Continent ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","656":"table Students , columns = [ Students.current_address_id , Students.permanent_address_id , Students.student_id , Students.email_address , Students.date_left , Students.date_first_registered , Students.first_name , Students.other_student_details , Students.cell_mobile_number , Students.last_name ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 , Addresses.other_address_details , Addresses.state_province_county , Addresses.zip_postcode , Addresses.city , Addresses.country ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","657":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","658":"table Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.department_id ]\ntable Students , columns = [ Students.student_id , Students.other_student_details , Students.date_first_registered , Students.date_left , Students.first_name , Students.last_name , Students.middle_name , Students.email_address , Students.current_address_id , Students.cell_mobile_number ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.address_id , Addresses.other_address_details , Addresses.state_province_county , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","659":"table Students , columns = [ Students.student_id , Students.first_name , Students.last_name , Students.middle_name , Students.date_left , Students.date_first_registered , Students.ssn , Students.other_student_details , Students.email_address , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id , Student_Enrolment.semester_id , Student_Enrolment.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Courses , columns = [ Courses.course_id , Courses.other_details , Courses.course_name , Courses.course_description ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.department_id , Degree_Programs.other_details , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.other_details , Semesters.semester_name , Semesters.semester_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","660":"table AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\ntable VOTES , columns = [ VOTES.state , VOTES.created , VOTES.contestant_number , VOTES.vote_id , VOTES.phone_number ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","661":"table TV_series , columns = [ TV_series.Weekly_Rank , TV_series.Episode , TV_series.id , TV_series.Rating , TV_series.Channel , TV_series.Share , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","662":"table Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Written_by , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Episode , TV_series.Share , TV_series.Weekly_Rank , TV_series.Rating , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","663":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.section_name , Sections.section_description , Sections.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.state_province_county , Addresses.zip_postcode , Addresses.line_1 , Addresses.other_address_details , Addresses.address_id , Addresses.line_3 , Addresses.line_2 ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","664":"table poker_player , columns = [ poker_player.Earnings , poker_player.Money_Rank , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","665":"table country , columns = [ country.Continent , country.Name , country.Code , country.Capital , country.LocalName , country.Region , country.HeadOfState , country.Code2 , country.SurfaceArea , country.GovernmentForm ]\ntable city , columns = [ city.Name , city.CountryCode , city.District , city.ID , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Language , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","666":"table people , columns = [ people.Nationality , people.Name , people.Height , people.Birth_Date , people.People_ID ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","667":"table country , columns = [ country.Code , country.Population , country.Name , country.Capital , country.Region , country.GovernmentForm , country.LocalName , country.HeadOfState , country.GNPOld , country.Code2 ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable city , columns = [ city.CountryCode , city.Population , city.Name , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","668":"table TV_series , columns = [ TV_series.Air_Date , TV_series.Episode , TV_series.id , TV_series.Channel , TV_series.Weekly_Rank , TV_series.Rating , TV_series.Share , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Original_air_date , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Written_by ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","669":"table Departments , columns = [ Departments.department_description , Departments.department_name , Departments.other_details , Departments.department_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.state_province_county , Addresses.other_address_details , Addresses.line_1 , Addresses.line_3 , Addresses.line_2 , Addresses.address_id , Addresses.zip_postcode ]\ntable Courses , columns = [ Courses.other_details , Courses.course_description , Courses.course_name , Courses.course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","670":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.LocalName , country.Region , country.Capital , country.HeadOfState , country.GovernmentForm , country.Population , country.Continent , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","671":"table Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.department_name , Departments.department_description , Departments.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","672":"table Students , columns = [ Students.first_name , Students.last_name , Students.student_id , Students.middle_name , Students.other_student_details , Students.date_left , Students.date_first_registered , Students.email_address , Students.cell_mobile_number , Students.ssn ]\ntable Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","673":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Height , people.People_ID , people.Name , people.Birth_Date , people.Nationality ]\nforeign keys :\npoker_player.People_ID = people.People_ID","674":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\ntable VOTES , columns = [ VOTES.contestant_number , VOTES.created , VOTES.state , VOTES.vote_id , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","675":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.Content , TV_Channel.id , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Share , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","676":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.LocalName , country.Population , country.Region , country.Capital , country.GovernmentForm , country.HeadOfState , country.Continent , country.GNPOld ]\ntable city , columns = [ city.CountryCode , city.Name , city.Population , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","677":"table TV_series , columns = [ TV_series.Rating , TV_series.Episode , TV_series.id , TV_series.Share , TV_series.Weekly_Rank , TV_series.Channel , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","678":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.Population , country.LocalName , country.GNPOld , country.HeadOfState , country.Code2 , country.GovernmentForm ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","679":"table city , columns = [ city.District , city.Population , city.Name , city.CountryCode , city.ID ]\ntable country , columns = [ country.Population , country.Name , country.Code , country.Region , country.LocalName , country.Capital , country.HeadOfState , country.GovernmentForm , country.Code2 , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","680":"table country , columns = [ country.SurfaceArea , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.HeadOfState , country.LocalName , country.Population , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","681":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","682":"table poker_player , columns = [ poker_player.People_ID , poker_player.Final_Table_Made , poker_player.Best_Finish , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Earnings ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","683":"table country , columns = [ country.SurfaceArea , country.Name , country.Continent , country.Region , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld , country.Population ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","684":"table poker_player , columns = [ poker_player.Earnings , poker_player.Money_Rank , poker_player.Poker_Player_ID , poker_player.Best_Finish , poker_player.People_ID , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Birth_Date , people.Nationality ]\nforeign keys :\npoker_player.People_ID = people.People_ID","685":"table country , columns = [ country.HeadOfState , country.Code , country.Name , country.Capital , country.GovernmentForm , country.Region , country.LocalName , country.GNPOld , country.Code2 , country.IndepYear ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","686":"table Cartoon , columns = [ Cartoon.Written_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Directed_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","687":"table Sections , columns = [ Sections.course_id , Sections.section_name , Sections.section_id , Sections.section_description , Sections.other_details ]\ntable Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Departments , columns = [ Departments.department_name , Departments.other_details , Departments.department_id , Departments.department_description ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","688":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GovernmentForm , country.Population , country.GNPOld , country.Code2 ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","689":"table country , columns = [ country.SurfaceArea , country.Continent , country.Region , country.Name , country.Code , country.Capital , country.HeadOfState , country.LocalName , country.GNPOld , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.ID , city.District , city.CountryCode , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","690":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_number , CONTESTANTS.contestant_name ]\ntable VOTES , columns = [ VOTES.contestant_number , VOTES.created , VOTES.vote_id , VOTES.state , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","691":"table TV_series , columns = [ TV_series.Episode , TV_series.id , TV_series.Channel , TV_series.Weekly_Rank , TV_series.Share , TV_series.Rating , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Original_air_date ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","692":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.HeadOfState , country.LocalName , country.GovernmentForm , country.Code2 , country.GNPOld , country.IndepYear ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","693":"table TV_Channel , columns = [ TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.series_name , TV_Channel.id , TV_Channel.Pay_per_view_PPV , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.Title , Cartoon.id , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","694":"table TV_series , columns = [ TV_series.Episode , TV_series.id , TV_series.Channel , TV_series.Air_Date , TV_series.Weekly_Rank , TV_series.Rating , TV_series.Share , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","695":"table TV_Channel , columns = [ TV_Channel.Country , TV_Channel.id , TV_Channel.series_name , TV_Channel.Content , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Written_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Directed_by , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Rating , TV_series.Share , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","696":"table Cartoon , columns = [ Cartoon.Title , Cartoon.Channel , Cartoon.id , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.id , TV_series.Rating , TV_series.Channel , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Language , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","697":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\ntable VOTES , columns = [ VOTES.created , VOTES.state , VOTES.contestant_number , VOTES.vote_id , VOTES.phone_number ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","698":"table Students , columns = [ Students.permanent_address_id , Students.first_name , Students.current_address_id , Students.last_name , Students.middle_name , Students.student_id , Students.date_first_registered , Students.date_left , Students.email_address , Students.other_student_details ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.other_address_details , Addresses.state_province_county , Addresses.zip_postcode , Addresses.city , Addresses.line_1 , Addresses.country , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","699":"table people , columns = [ people.Nationality , people.Name , people.Birth_Date , people.People_ID , people.Height ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Poker_Player_ID , poker_player.Final_Table_Made ]\nforeign keys :\npoker_player.People_ID = people.People_ID","700":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.LocalName , country.Capital , country.Region , country.GovernmentForm , country.HeadOfState , country.Code2 , country.GNPOld , country.Population ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","701":"table country , columns = [ country.LifeExpectancy , country.GovernmentForm , country.Region , country.Continent , country.Name , country.Code , country.HeadOfState , country.Capital , country.Population , country.IndepYear ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.Population , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","702":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\ntable VOTES , columns = [ VOTES.created , VOTES.contestant_number , VOTES.state , VOTES.phone_number , VOTES.vote_id ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","703":"table people , columns = [ people.Nationality , people.Name , people.Height , people.People_ID , people.Birth_Date ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Poker_Player_ID , poker_player.Final_Table_Made ]\nforeign keys :\npoker_player.People_ID = people.People_ID","704":"table city , columns = [ city.District , city.Population , city.Name , city.ID , city.CountryCode ]\ntable country , columns = [ country.Population , country.Name , country.Code , country.Region , country.LocalName , country.Capital , country.HeadOfState , country.Code2 , country.GovernmentForm , country.GNPOld ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","705":"table VOTES , columns = [ VOTES.state , VOTES.created , VOTES.vote_id , VOTES.contestant_number , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.area_code , AREA_CODE_STATE.state ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_number , CONTESTANTS.contestant_name ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","706":"table country , columns = [ country.SurfaceArea , country.Region , country.Continent , country.Name , country.Code , country.Capital , country.HeadOfState , country.GNPOld , country.LocalName , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.District , city.ID , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","707":"table TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.series_name , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","708":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.GovernmentForm , country.Code2 , country.Population ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","709":"table Students , columns = [ Students.last_name , Students.first_name , Students.middle_name , Students.date_left , Students.student_id , Students.date_first_registered , Students.other_student_details , Students.ssn , Students.email_address , Students.cell_mobile_number ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_id , Courses.course_description ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_name , Sections.section_id , Sections.section_description , Sections.course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","710":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\ntable VOTES , columns = [ VOTES.contestant_number , VOTES.state , VOTES.vote_id , VOTES.created , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.area_code , AREA_CODE_STATE.state ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","711":"table country , columns = [ country.GovernmentForm , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.HeadOfState , country.LocalName , country.GNPOld , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","712":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_name , Sections.section_description ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_description , Departments.department_name ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","713":"table Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.department_name , Departments.department_description , Departments.other_details ]\ntable Sections , columns = [ Sections.section_id , Sections.other_details , Sections.section_description , Sections.section_name , Sections.course_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","714":"table Students , columns = [ Students.cell_mobile_number , Students.first_name , Students.permanent_address_id , Students.last_name , Students.current_address_id , Students.middle_name , Students.date_left , Students.email_address , Students.student_id , Students.other_student_details ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.country , Addresses.state_province_county , Addresses.other_address_details , Addresses.city , Addresses.line_1 , Addresses.zip_postcode , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","715":"table country , columns = [ country.GovernmentForm , country.Name , country.Code , country.HeadOfState , country.Capital , country.Region , country.LocalName , country.GNPOld , country.IndepYear , country.Code2 ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","716":"table Sections , columns = [ Sections.section_name , Sections.section_description , Sections.other_details , Sections.section_id , Sections.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_name , Departments.department_description , Departments.department_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_description , Semesters.semester_name , Semesters.semester_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","717":"table TV_series , columns = [ TV_series.Air_Date , TV_series.Episode , TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Share , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Original_air_date , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","718":"table poker_player , columns = [ poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Earnings , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","719":"table country , columns = [ country.Continent , country.Code , country.Name , country.Region , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld , country.Population , country.Code2 ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","720":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_name , Sections.section_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","721":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Birth_Date , people.Name , people.Height , people.Nationality ]\nforeign keys :\npoker_player.People_ID = people.People_ID","722":"table TV_Channel , columns = [ TV_Channel.Language , TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","723":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Region , country.Continent , country.Name , country.Population , country.Capital , country.HeadOfState , country.LocalName , country.GNPOld , country.SurfaceArea ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","724":"table Cartoon , columns = [ Cartoon.Directed_by , Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Share , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","725":"table poker_player , columns = [ poker_player.Poker_Player_ID , poker_player.People_ID , poker_player.Money_Rank , poker_player.Earnings , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Name , people.People_ID , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","726":"table TV_series , columns = [ TV_series.Rating , TV_series.Episode , TV_series.id , TV_series.Weekly_Rank , TV_series.Share , TV_series.Channel , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.id , Cartoon.Title , Cartoon.Channel , Cartoon.Written_by , Cartoon.Directed_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","727":"table Sections , columns = [ Sections.section_name , Sections.section_description , Sections.other_details , Sections.section_id , Sections.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_name , Departments.department_description , Departments.department_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_description , Semesters.semester_name , Semesters.semester_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","728":"table Transcripts , columns = [ Transcripts.transcript_date , Transcripts.transcript_id , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_name , Sections.section_description ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.other_details , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","729":"table AREA_CODE_STATE , columns = [ AREA_CODE_STATE.area_code , AREA_CODE_STATE.state ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_number , CONTESTANTS.contestant_name ]\ntable VOTES , columns = [ VOTES.state , VOTES.created , VOTES.contestant_number , VOTES.phone_number , VOTES.vote_id ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","730":"table TV_series , columns = [ TV_series.Episode , TV_series.Weekly_Rank , TV_series.id , TV_series.Channel , TV_series.Rating , TV_series.Share , TV_series.Viewers_m , TV_series.Air_Date , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Title , Cartoon.id , Cartoon.Channel , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","731":"table poker_player , columns = [ poker_player.Earnings , poker_player.Final_Table_Made , poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Poker_Player_ID ]\ntable people , columns = [ people.People_ID , people.Name , people.Height , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","732":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.GovernmentForm , country.Code , country.Name , country.HeadOfState , country.Capital , country.Region , country.LocalName , country.GNPOld , country.IndepYear , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","733":"table country , columns = [ country.LifeExpectancy , country.SurfaceArea , country.Population , country.Name , country.Region , country.Continent , country.Capital , country.Code , country.LocalName , country.HeadOfState ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","734":"table CONTESTANTS , columns = [ CONTESTANTS.contestant_number , CONTESTANTS.contestant_name ]\ntable VOTES , columns = [ VOTES.contestant_number , VOTES.vote_id , VOTES.created , VOTES.state , VOTES.phone_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","735":"table TV_Channel , columns = [ TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Language , TV_Channel.Country , TV_Channel.Hight_definition_TV , TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","736":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.HeadOfState , country.Region , country.GovernmentForm , country.LocalName , country.GNPOld , country.Code2 , country.IndepYear ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","737":"table country , columns = [ country.LifeExpectancy , country.Population , country.Name , country.Code , country.Capital , country.Region , country.Continent , country.LocalName , country.HeadOfState , country.GNPOld ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","738":"table Degree_Programs , columns = [ Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description , Degree_Programs.other_details , Degree_Programs.department_id ]\ntable Departments , columns = [ Departments.department_name , Departments.department_id , Departments.other_details , Departments.department_description ]\ntable Sections , columns = [ Sections.other_details , Sections.section_name , Sections.section_description , Sections.section_id , Sections.course_id ]\ntable Courses , columns = [ Courses.course_name , Courses.other_details , Courses.course_description , Courses.course_id ]\ntable Semesters , columns = [ Semesters.other_details , Semesters.semester_name , Semesters.semester_description , Semesters.semester_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","739":"table country , columns = [ country.GovernmentForm , country.Continent , country.Region , country.Name , country.Code , country.Capital , country.HeadOfState , country.GNPOld , country.LocalName , country.SurfaceArea ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","740":"table country , columns = [ country.LifeExpectancy , country.Code , country.Name , country.Capital , country.Region , country.Population , country.HeadOfState , country.LocalName , country.GNPOld , country.GovernmentForm ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","741":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Population , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.GovernmentForm , country.Code2 ]\ntable city , columns = [ city.Population , city.CountryCode , city.Name , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","742":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.Height , people.People_ID , people.Name , people.Nationality , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","743":"table TV_Channel , columns = [ TV_Channel.Language , TV_Channel.Country , TV_Channel.id , TV_Channel.Content , TV_Channel.series_name , TV_Channel.Package_Option , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","744":"table Departments , columns = [ Departments.department_description , Departments.department_name , Departments.department_id , Departments.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","745":"table country , columns = [ country.LifeExpectancy , country.Name , country.Continent , country.Region , country.Code , country.LocalName , country.Population , country.Capital , country.HeadOfState , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","746":"table Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.degree_program_id , Student_Enrolment.semester_id ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.date_left , Students.other_student_details , Students.last_name , Students.first_name , Students.middle_name , Students.email_address , Students.cell_mobile_number , Students.ssn ]\ntable Departments , columns = [ Departments.department_name , Departments.other_details , Departments.department_id , Departments.department_description ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","747":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Country , TV_Channel.Content , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pay_per_view_PPV , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Directed_by , Cartoon.id , Cartoon.Channel , Cartoon.Title , Cartoon.Written_by , Cartoon.Production_code , Cartoon.Original_air_date ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Share , TV_series.Rating , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","748":"table country , columns = [ country.Population , country.Region , country.Name , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.GovernmentForm , country.Continent , country.GNPOld ]\ntable city , columns = [ city.Population , city.Name , city.District , city.CountryCode , city.ID ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","749":"table TV_Channel , columns = [ TV_Channel.Language , TV_Channel.Country , TV_Channel.Content , TV_Channel.id , TV_Channel.series_name , TV_Channel.Hight_definition_TV , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Rating , TV_series.Share , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","750":"table Students , columns = [ Students.other_student_details , Students.first_name , Students.last_name , Students.student_id , Students.middle_name , Students.email_address , Students.date_left , Students.date_first_registered , Students.ssn , Students.cell_mobile_number ]\ntable Addresses , columns = [ Addresses.line_1 , Addresses.other_address_details , Addresses.line_3 , Addresses.city , Addresses.line_2 , Addresses.country , Addresses.state_province_county , Addresses.address_id , Addresses.zip_postcode ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","751":"table country , columns = [ country.GovernmentForm , country.Name , country.Code , country.Capital , country.HeadOfState , country.Region , country.GNPOld , country.LocalName , country.IndepYear , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","752":"table Student_Enrolment , columns = [ Student_Enrolment.degree_program_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.other_details , Student_Enrolment.semester_id ]\ntable Degree_Programs , columns = [ Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.department_id , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Students , columns = [ Students.student_id , Students.other_student_details , Students.date_first_registered , Students.email_address , Students.date_left , Students.last_name , Students.first_name , Students.middle_name , Students.current_address_id , Students.cell_mobile_number ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Departments , columns = [ Departments.department_id , Departments.department_name , Departments.other_details , Departments.department_description ]\ntable Courses , columns = [ Courses.course_id , Courses.course_name , Courses.other_details , Courses.course_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","753":"table Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.other_details , Degree_Programs.degree_summary_description ]\ntable Departments , columns = [ Departments.department_id , Departments.department_name , Departments.department_description , Departments.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Sections , columns = [ Sections.section_id , Sections.other_details , Sections.section_name , Sections.section_description , Sections.course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Courses , columns = [ Courses.other_details , Courses.course_name , Courses.course_description , Courses.course_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","754":"table country , columns = [ country.LifeExpectancy , country.Region , country.Name , country.Code , country.Continent , country.Population , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","755":"table Transcripts , columns = [ Transcripts.transcript_id , Transcripts.transcript_date , Transcripts.other_details ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Sections , columns = [ Sections.other_details , Sections.section_id , Sections.course_id , Sections.section_name , Sections.section_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id ]\ntable Addresses , columns = [ Addresses.city , Addresses.country , Addresses.state_province_county , Addresses.address_id , Addresses.line_1 , Addresses.zip_postcode , Addresses.other_address_details , Addresses.line_3 , Addresses.line_2 ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","756":"table TV_series , columns = [ TV_series.Episode , TV_series.Channel , TV_series.id , TV_series.Share , TV_series.Rating , TV_series.Weekly_Rank , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Original_air_date , Cartoon.Written_by , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","757":"table Sections , columns = [ Sections.course_id , Sections.section_name , Sections.section_id , Sections.section_description , Sections.other_details ]\ntable Courses , columns = [ Courses.course_id , Courses.course_name , Courses.course_description , Courses.other_details ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.student_enrolment_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Departments , columns = [ Departments.department_name , Departments.other_details , Departments.department_id , Departments.department_description ]\ntable Student_Enrolment , columns = [ Student_Enrolment.other_details , Student_Enrolment.student_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id , Student_Enrolment.student_enrolment_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","758":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GovernmentForm , country.GNPOld , country.Code2 , country.IndepYear ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","759":"table VOTES , columns = [ VOTES.state , VOTES.phone_number , VOTES.vote_id , VOTES.created , VOTES.contestant_number ]\ntable AREA_CODE_STATE , columns = [ AREA_CODE_STATE.state , AREA_CODE_STATE.area_code ]\ntable CONTESTANTS , columns = [ CONTESTANTS.contestant_name , CONTESTANTS.contestant_number ]\nforeign keys :\nVOTES.contestant_number = CONTESTANTS.contestant_numberVOTES.state = AREA_CODE_STATE.state","760":"table Student_Enrolment , columns = [ Student_Enrolment.semester_id , Student_Enrolment.student_id , Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id , Student_Enrolment.other_details ]\ntable Semesters , columns = [ Semesters.semester_id , Semesters.semester_name , Semesters.semester_description , Semesters.other_details ]\ntable Students , columns = [ Students.student_id , Students.date_first_registered , Students.other_student_details , Students.first_name , Students.last_name , Students.email_address , Students.middle_name , Students.date_left , Students.cell_mobile_number , Students.current_address_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id ]\ntable Courses , columns = [ Courses.course_name , Courses.course_id , Courses.other_details , Courses.course_description ]\ntable Sections , columns = [ Sections.course_id , Sections.section_name , Sections.section_id , Sections.other_details , Sections.section_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","761":"table country , columns = [ country.LifeExpectancy , country.Region , country.Continent , country.Name , country.Code , country.Capital , country.Population , country.HeadOfState , country.LocalName , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.ID , city.District , city.CountryCode , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","762":"table poker_player , columns = [ poker_player.Earnings , poker_player.People_ID , poker_player.Poker_Player_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Final_Table_Made ]\ntable people , columns = [ people.People_ID , people.Name , people.Nationality , people.Height , people.Birth_Date ]\nforeign keys :\npoker_player.People_ID = people.People_ID","763":"table Students , columns = [ Students.permanent_address_id , Students.current_address_id , Students.other_student_details , Students.student_id , Students.email_address , Students.date_left , Students.date_first_registered , Students.first_name , Students.last_name , Students.ssn ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.other_address_details , Addresses.state_province_county , Addresses.zip_postcode , Addresses.line_1 , Addresses.city , Addresses.country , Addresses.line_3 , Addresses.line_2 ]\ntable Student_Enrolment , columns = [ Student_Enrolment.student_id , Student_Enrolment.other_details , Student_Enrolment.student_enrolment_id , Student_Enrolment.semester_id , Student_Enrolment.degree_program_id ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.student_course_id , Student_Enrolment_Courses.course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_id , Departments.department_name , Departments.department_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","764":"table people , columns = [ people.Birth_Date , people.Name , people.Height , people.Nationality , people.People_ID ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","765":"table country , columns = [ country.LifeExpectancy , country.Population , country.Name , country.Code , country.Capital , country.Region , country.Continent , country.LocalName , country.HeadOfState , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","766":"table people , columns = [ people.Nationality , people.Name , people.Height , people.People_ID , people.Birth_Date ]\ntable poker_player , columns = [ poker_player.People_ID , poker_player.Money_Rank , poker_player.Best_Finish , poker_player.Earnings , poker_player.Final_Table_Made , poker_player.Poker_Player_ID ]\nforeign keys :\npoker_player.People_ID = people.People_ID","767":"table country , columns = [ country.LifeExpectancy , country.SurfaceArea , country.Population , country.Name , country.Region , country.Continent , country.Capital , country.Code , country.LocalName , country.HeadOfState ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","768":"table TV_Channel , columns = [ TV_Channel.Package_Option , TV_Channel.series_name , TV_Channel.id , TV_Channel.Pay_per_view_PPV , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Hight_definition_TV , TV_Channel.Pixel_aspect_ratio_PAR ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Weekly_Rank , TV_series.Share , TV_series.Episode , TV_series.Rating , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","769":"table TV_Channel , columns = [ TV_Channel.Content , TV_Channel.series_name , TV_Channel.id , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Hight_definition_TV , TV_Channel.Pay_per_view_PPV ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.id , TV_series.Episode , TV_series.Weekly_Rank , TV_series.Share , TV_series.Rating , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.id , Cartoon.Title , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","770":"table TV_Channel , columns = [ TV_Channel.series_name , TV_Channel.id , TV_Channel.Content , TV_Channel.Country , TV_Channel.Language , TV_Channel.Package_Option , TV_Channel.Pixel_aspect_ratio_PAR , TV_Channel.Pay_per_view_PPV , TV_Channel.Hight_definition_TV ]\ntable TV_series , columns = [ TV_series.Channel , TV_series.Episode , TV_series.id , TV_series.Share , TV_series.Weekly_Rank , TV_series.Rating , TV_series.Air_Date , TV_series.Viewers_m , TV_series.18_49_Rating_Share ]\ntable Cartoon , columns = [ Cartoon.Channel , Cartoon.Title , Cartoon.id , Cartoon.Production_code , Cartoon.Written_by , Cartoon.Original_air_date , Cartoon.Directed_by ]\nforeign keys :\nTV_series.Channel = TV_Channel.idCartoon.Channel = TV_Channel.id","771":"table Students , columns = [ Students.cell_mobile_number , Students.first_name , Students.last_name , Students.middle_name , Students.other_student_details , Students.date_first_registered , Students.email_address , Students.date_left , Students.student_id , Students.ssn ]\ntable Transcript_Contents , columns = [ Transcript_Contents.student_course_id , Transcript_Contents.transcript_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Departments , columns = [ Departments.other_details , Departments.department_name , Departments.department_id , Departments.department_description ]\ntable Degree_Programs , columns = [ Degree_Programs.other_details , Degree_Programs.department_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_description ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_date , Transcripts.transcript_id ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id","772":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","773":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Performance_ID , performance.Official_ratings_(millions) ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","774":"table Dogs , columns = [ Dogs.breed_code , Dogs.size_code , Dogs.dog_id , Dogs.name , Dogs.date_of_birth , Dogs.weight , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted , Dogs.age ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.street , Owners.city , Owners.zip_code , Owners.last_name , Owners.cell_number , Owners.first_name , Owners.email_address , Owners.home_phone ]\ntable Professionals , columns = [ Professionals.state , Professionals.street , Professionals.city , Professionals.role_code , Professionals.zip_code , Professionals.cell_number , Professionals.last_name , Professionals.first_name , Professionals.professional_id , Professionals.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","775":"table orchestra , columns = [ orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Nationality , conductor.Year_of_Work , conductor.Conductor_ID ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","776":"table conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Performance_ID , performance.Official_ratings_(millions) ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","777":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Net_Worth_Millions , singer.Citizenship , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Sales , song.Song_ID , song.Title , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","778":"table country , columns = [ country.LifeExpectancy , country.GovernmentForm , country.Population , country.Name , country.Code , country.Capital , country.Region , country.HeadOfState , country.GNPOld , country.LocalName ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","779":"table Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.last_name , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.role_code , Professionals.email_address , Professionals.cell_number ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.age , Dogs.weight , Dogs.date_of_birth , Dogs.date_arrived , Dogs.breed_code , Dogs.date_adopted ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","780":"table Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment , Treatments.treatment_id , Treatments.professional_id , Treatments.dog_id ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.state , Owners.street , Owners.city , Owners.last_name , Owners.zip_code , Owners.home_phone , Owners.first_name , Owners.cell_number , Owners.email_address , Owners.owner_id ]\ntable Professionals , columns = [ Professionals.street , Professionals.city , Professionals.state , Professionals.first_name , Professionals.last_name , Professionals.zip_code , Professionals.role_code , Professionals.cell_number , Professionals.professional_id , Professionals.home_phone ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","781":"table singer , columns = [ singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Sales , song.Title , song.Singer_ID , song.Highest_Position , song.Song_ID ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","782":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.Percentage , countrylanguage.CountryCode , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Population , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.Code2 , country.GNPOld , country.SurfaceArea ]\ntable city , columns = [ city.CountryCode , city.Name , city.Population , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","783":"table conductor , columns = [ conductor.Nationality , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","784":"table Dogs , columns = [ Dogs.dog_id , Dogs.name , Dogs.owner_id , Dogs.breed_code , Dogs.weight , Dogs.date_of_birth , Dogs.age , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.professional_id , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","785":"table country , columns = [ country.SurfaceArea , country.Name , country.Region , country.Capital , country.Code , country.LocalName , country.Population , country.HeadOfState , country.Continent , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.District , city.ID , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","786":"table Professionals , columns = [ Professionals.role_code , Professionals.street , Professionals.state , Professionals.city , Professionals.zip_code , Professionals.last_name , Professionals.first_name , Professionals.professional_id , Professionals.cell_number , Professionals.email_address ]\ntable Owners , columns = [ Owners.street , Owners.state , Owners.city , Owners.zip_code , Owners.last_name , Owners.first_name , Owners.owner_id , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.treatment_type_code , Treatments.date_of_treatment , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.treatment_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.date_of_birth , Dogs.age , Dogs.weight , Dogs.date_arrived , Dogs.dog_id , Dogs.breed_code , Dogs.size_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","787":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Highest_Position , song.Song_ID ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","788":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Sales , song.Title , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","789":"table country , columns = [ country.GovernmentForm , country.Code , country.Code2 , country.Name , country.HeadOfState , country.Capital , country.Region , country.LocalName , country.IndepYear , country.GNPOld ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","790":"table country , columns = [ country.Population , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.SurfaceArea , country.GNPOld ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","791":"table Dogs , columns = [ Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.name , Dogs.gender , Dogs.weight , Dogs.date_arrived , Dogs.date_adopted , Dogs.owner_id , Dogs.abandoned_yn ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.email_address , Owners.first_name , Owners.last_name , Owners.zip_code , Owners.cell_number , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.state , Professionals.city , Professionals.street , Professionals.professional_id , Professionals.first_name , Professionals.last_name , Professionals.zip_code , Professionals.cell_number , Professionals.role_code , Professionals.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","792":"table conductor , columns = [ conductor.Nationality , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","793":"table Highschooler , columns = [ Highschooler.grade , Highschooler.name , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","794":"table conductor , columns = [ conductor.Year_of_Work , conductor.Name , conductor.Age , conductor.Nationality , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","795":"table Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.treatment_id , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.date_of_treatment ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.email_address , Professionals.role_code , Professionals.last_name , Professionals.first_name , Professionals.cell_number , Professionals.home_phone , Professionals.zip_code , Professionals.street , Professionals.state ]\ntable Owners , columns = [ Owners.email_address , Owners.home_phone , Owners.cell_number , Owners.last_name , Owners.owner_id , Owners.first_name , Owners.zip_code , Owners.state , Owners.city , Owners.street ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.date_of_birth , Dogs.breed_code , Dogs.date_arrived , Dogs.date_adopted ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","796":"table Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.email_address , Owners.last_name , Owners.zip_code , Owners.first_name , Owners.home_phone , Owners.cell_number , Owners.owner_id ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Professionals , columns = [ Professionals.city , Professionals.street , Professionals.state , Professionals.first_name , Professionals.zip_code , Professionals.last_name , Professionals.role_code , Professionals.professional_id , Professionals.home_phone , Professionals.email_address ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","797":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.Population , country.LocalName , country.HeadOfState , country.Code2 , country.GNPOld , country.GovernmentForm ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","798":"table Owners , columns = [ Owners.owner_id , Owners.last_name , Owners.first_name , Owners.city , Owners.state , Owners.cell_number , Owners.zip_code , Owners.street , Owners.home_phone , Owners.email_address ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.professional_id , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.dog_id , Dogs.name , Dogs.weight , Dogs.age , Dogs.gender , Dogs.date_of_birth , Dogs.breed_code , Dogs.size_code , Dogs.date_adopted ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","799":"table Dogs , columns = [ Dogs.date_arrived , Dogs.date_departed , Dogs.name , Dogs.date_of_birth , Dogs.date_adopted , Dogs.abandoned_yn , Dogs.weight , Dogs.age , Dogs.gender , Dogs.dog_id ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.state , Professionals.city , Professionals.street , Professionals.last_name , Professionals.first_name , Professionals.zip_code , Professionals.cell_number , Professionals.email_address , Professionals.role_code , Professionals.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","800":"table Treatments , columns = [ Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.state , Professionals.last_name , Professionals.cell_number , Professionals.first_name , Professionals.home_phone , Professionals.zip_code , Professionals.city , Professionals.email_address , Professionals.street ]\ntable Owners , columns = [ Owners.state , Owners.cell_number , Owners.last_name , Owners.home_phone , Owners.first_name , Owners.owner_id , Owners.zip_code , Owners.city , Owners.street , Owners.email_address ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.date_arrived , Dogs.date_adopted , Dogs.date_departed ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","801":"table Owners , columns = [ Owners.state , Owners.first_name , Owners.email_address , Owners.last_name , Owners.home_phone , Owners.cell_number , Owners.zip_code , Owners.owner_id , Owners.city , Owners.street ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Professionals , columns = [ Professionals.state , Professionals.email_address , Professionals.last_name , Professionals.first_name , Professionals.cell_number , Professionals.home_phone , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.dog_id , Treatments.treatment_type_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","802":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","803":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","804":"table Professionals , columns = [ Professionals.role_code , Professionals.street , Professionals.state , Professionals.city , Professionals.first_name , Professionals.last_name , Professionals.zip_code , Professionals.professional_id , Professionals.cell_number , Professionals.email_address ]\ntable Owners , columns = [ Owners.street , Owners.state , Owners.city , Owners.last_name , Owners.zip_code , Owners.first_name , Owners.cell_number , Owners.email_address , Owners.home_phone , Owners.owner_id ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_type_code , Treatments.treatment_id ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","805":"table performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Performance_ID , performance.Official_ratings_(millions) ]\ntable orchestra , columns = [ orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Show_ID , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","806":"table orchestra , columns = [ orchestra.Record_Company , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Conductor_ID ]\ntable performance , columns = [ performance.Share , performance.Orchestra_ID , performance.Type , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","807":"table Properties , columns = [ Properties.property_name , Properties.room_count , Properties.property_type_code , Properties.property_address , Properties.property_id , Properties.apt_feature_1 , Properties.apt_feature_2 , Properties.other_property_details , Properties.date_on_market , Properties.apt_feature_3 ]\ntable Ref_Property_Types , columns = [ Ref_Property_Types.property_type_code , Ref_Property_Types.property_type_description ]\ntable Ref_Feature_Types , columns = [ Ref_Feature_Types.feature_type_name , Ref_Feature_Types.feature_type_code ]\ntable Other_Property_Features , columns = [ Other_Property_Features.property_id , Other_Property_Features.property_feature_description , Other_Property_Features.feature_id ]\ntable Other_Available_Features , columns = [ Other_Available_Features.feature_name , Other_Available_Features.feature_type_code , Other_Available_Features.feature_id , Other_Available_Features.feature_description ]\nforeign keys :\nOther_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_codeProperties.property_type_code = Ref_Property_Types.property_type_codeOther_Property_Features.property_id = Properties.property_idOther_Property_Features.feature_id = Other_Available_Features.feature_id","808":"table Dogs , columns = [ Dogs.date_arrived , Dogs.date_departed , Dogs.date_of_birth , Dogs.name , Dogs.age , Dogs.abandoned_yn , Dogs.weight , Dogs.gender , Dogs.date_adopted , Dogs.owner_id ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.first_name , Owners.last_name , Owners.cell_number , Owners.zip_code , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.state , Professionals.city , Professionals.street , Professionals.last_name , Professionals.zip_code , Professionals.first_name , Professionals.email_address , Professionals.cell_number , Professionals.role_code , Professionals.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","809":"table singer , columns = [ singer.Net_Worth_Millions , singer.Name , singer.Citizenship , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Title , song.Sales , song.Singer_ID , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","810":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","811":"table show , columns = [ show.Attendance , show.Result , show.Show_ID , show.If_first_show , show.Performance_ID ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Performance_ID , performance.Official_ratings_(millions) , performance.Orchestra_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\ntable orchestra , columns = [ orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company , orchestra.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","812":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","813":"table city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable country , columns = [ country.Population , country.Name , country.Code , country.LocalName , country.Capital , country.Region , country.HeadOfState , country.Code2 , country.GNPOld , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","814":"table orchestra , columns = [ orchestra.Record_Company , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","815":"table conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","816":"table singer , columns = [ singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","817":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","818":"table country , columns = [ country.Population , country.Name , country.Capital , country.Code , country.LocalName , country.Region , country.HeadOfState , country.GNPOld , country.GovernmentForm , country.IndepYear ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","819":"table Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","820":"table conductor , columns = [ conductor.Year_of_Work , conductor.Name , conductor.Age , conductor.Conductor_ID , conductor.Nationality ]\ntable show , columns = [ show.Result , show.Show_ID , show.Performance_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","821":"table Treatment_Types , columns = [ Treatment_Types.treatment_type_description , Treatment_Types.treatment_type_code ]\ntable Treatments , columns = [ Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.professional_id ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.size_code , Dogs.owner_id , Dogs.breed_code , Dogs.date_adopted ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Professionals , columns = [ Professionals.city , Professionals.state , Professionals.street , Professionals.first_name , Professionals.zip_code , Professionals.last_name , Professionals.cell_number , Professionals.role_code , Professionals.home_phone , Professionals.professional_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","822":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","823":"table singer , columns = [ singer.Citizenship , singer.Net_Worth_Millions , singer.Singer_ID , singer.Name , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Sales , song.Title , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","824":"table Dogs , columns = [ Dogs.owner_id , Dogs.age , Dogs.date_of_birth , Dogs.name , Dogs.dog_id , Dogs.date_arrived , Dogs.weight , Dogs.gender , Dogs.date_adopted , Dogs.date_departed ]\ntable Owners , columns = [ Owners.owner_id , Owners.last_name , Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.email_address , Owners.home_phone , Owners.cell_number ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","825":"table country , columns = [ country.SurfaceArea , country.Population , country.IndepYear , country.Name , country.Capital , country.Code , country.Region , country.LocalName , country.HeadOfState , country.GovernmentForm ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","826":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","827":"table Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.last_name , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.role_code , Professionals.cell_number , Professionals.email_address ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.treatment_type_code , Treatments.dog_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Dogs , columns = [ Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.owner_id , Dogs.size_code , Dogs.date_arrived , Dogs.breed_code ]\ntable Owners , columns = [ Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.zip_code , Owners.owner_id , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","828":"table conductor , columns = [ conductor.Year_of_Work , conductor.Name , conductor.Age , conductor.Nationality , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","829":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","830":"table Ref_Feature_Types , columns = [ Ref_Feature_Types.feature_type_name , Ref_Feature_Types.feature_type_code ]\ntable Other_Available_Features , columns = [ Other_Available_Features.feature_type_code , Other_Available_Features.feature_name , Other_Available_Features.feature_id , Other_Available_Features.feature_description ]\ntable Other_Property_Features , columns = [ Other_Property_Features.feature_id , Other_Property_Features.property_id , Other_Property_Features.property_feature_description ]\ntable Properties , columns = [ Properties.property_type_code , Properties.property_id , Properties.hse_feature_1 , Properties.oth_feature_1 , Properties.property_name , Properties.other_property_details , Properties.oth_feature_2 , Properties.date_on_market , Properties.room_count , Properties.shp_feature_1 ]\ntable Ref_Property_Types , columns = [ Ref_Property_Types.property_type_code , Ref_Property_Types.property_type_description ]\nforeign keys :\nOther_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_codeProperties.property_type_code = Ref_Property_Types.property_type_codeOther_Property_Features.property_id = Properties.property_idOther_Property_Features.feature_id = Other_Available_Features.feature_id","831":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","832":"table Dogs , columns = [ Dogs.date_arrived , Dogs.dog_id , Dogs.date_departed , Dogs.name , Dogs.date_of_birth , Dogs.owner_id , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_adopted ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.professional_id , Treatments.treatment_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","833":"table show , columns = [ show.Attendance , show.Result , show.If_first_show , show.Show_ID , show.Performance_ID ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID , performance.Orchestra_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\ntable orchestra , columns = [ orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company , orchestra.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","834":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","835":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","836":"table Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.treatment_id , Treatments.professional_id , Treatments.cost_of_treatment , Treatments.date_of_treatment ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.name , Dogs.date_of_birth , Dogs.age , Dogs.gender , Dogs.weight , Dogs.breed_code , Dogs.date_arrived , Dogs.date_adopted ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.zip_code , Owners.first_name , Owners.email_address , Owners.cell_number , Owners.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_amount , Charges.charge_type ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","837":"table Dogs , columns = [ Dogs.age , Dogs.weight , Dogs.name , Dogs.abandoned_yn , Dogs.breed_code , Dogs.gender , Dogs.size_code , Dogs.date_of_birth , Dogs.date_departed , Dogs.owner_id ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.last_name , Owners.state , Owners.first_name , Owners.city , Owners.street , Owners.cell_number , Owners.zip_code , Owners.email_address , Owners.home_phone ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","838":"table conductor , columns = [ conductor.Nationality , conductor.Name , conductor.Year_of_Work , conductor.Age , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.If_first_show , show.Performance_ID , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","839":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Song_ID , song.Sales , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","840":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","841":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","842":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","843":"table Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.email_address , Professionals.role_code , Professionals.last_name , Professionals.first_name , Professionals.cell_number , Professionals.home_phone , Professionals.zip_code , Professionals.state , Professionals.city ]\ntable Owners , columns = [ Owners.email_address , Owners.cell_number , Owners.home_phone , Owners.owner_id , Owners.zip_code , Owners.last_name , Owners.first_name , Owners.state , Owners.city , Owners.street ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.date_of_birth , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","844":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","845":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","846":"table Professionals , columns = [ Professionals.email_address , Professionals.state , Professionals.professional_id , Professionals.zip_code , Professionals.last_name , Professionals.cell_number , Professionals.first_name , Professionals.city , Professionals.street , Professionals.home_phone ]\ntable Owners , columns = [ Owners.state , Owners.email_address , Owners.zip_code , Owners.cell_number , Owners.last_name , Owners.first_name , Owners.city , Owners.owner_id , Owners.street , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","847":"table country , columns = [ country.Population , country.Continent , country.Name , country.Region , country.Code , country.LocalName , country.Capital , country.HeadOfState , country.SurfaceArea , country.GNPOld ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","848":"table orchestra , columns = [ orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Record_Company , orchestra.Year_of_Founded , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Attendance , show.Show_ID ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","849":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","850":"table Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.breed_code , Dogs.weight , Dogs.gender , Dogs.date_of_birth , Dogs.age , Dogs.size_code , Dogs.date_arrived ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.state , Owners.last_name , Owners.zip_code , Owners.city , Owners.street , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","851":"table Owners , columns = [ Owners.email_address , Owners.state , Owners.first_name , Owners.last_name , Owners.cell_number , Owners.home_phone , Owners.zip_code , Owners.owner_id , Owners.city , Owners.street ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Professionals , columns = [ Professionals.state , Professionals.email_address , Professionals.last_name , Professionals.first_name , Professionals.cell_number , Professionals.home_phone , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.dog_id , Treatments.treatment_type_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","852":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","853":"table country , columns = [ country.SurfaceArea , country.Name , country.Population , country.Capital , country.Code , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.Continent ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.Population , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","854":"table Highschooler , columns = [ Highschooler.grade , Highschooler.name , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","855":"table Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","856":"table country , columns = [ country.GovernmentForm , country.Code , country.Name , country.Code2 , country.Capital , country.HeadOfState , country.Region , country.LocalName , country.GNPOld , country.IndepYear ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","857":"table country , columns = [ country.LifeExpectancy , country.GovernmentForm , country.Population , country.Name , country.Code , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.ID , city.District , city.CountryCode ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","858":"table country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.Population , country.LocalName , country.GNPOld , country.HeadOfState , country.Code2 , country.GovernmentForm ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","859":"table orchestra , columns = [ orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Nationality , conductor.Year_of_Work , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","860":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality ]\ntable show , columns = [ show.Result , show.Show_ID , show.Performance_ID , show.Attendance , show.If_first_show ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","861":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","862":"table singer , columns = [ singer.Name , singer.Net_Worth_Millions , singer.Citizenship , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Title , song.Sales , song.Singer_ID , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","863":"table country , columns = [ country.Population , country.Name , country.Capital , country.Code , country.LocalName , country.Region , country.HeadOfState , country.GNPOld , country.GovernmentForm , country.IndepYear ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","864":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","865":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Code2 , country.Name , country.Capital , country.Region , country.HeadOfState , country.Population , country.LocalName , country.GovernmentForm , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","866":"table singer , columns = [ singer.Citizenship , singer.Birth_Year , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","867":"table Professionals , columns = [ Professionals.email_address , Professionals.cell_number , Professionals.home_phone , Professionals.last_name , Professionals.first_name , Professionals.professional_id , Professionals.zip_code , Professionals.role_code , Professionals.state , Professionals.city ]\ntable Owners , columns = [ Owners.home_phone , Owners.email_address , Owners.cell_number , Owners.last_name , Owners.zip_code , Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.owner_id ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.name , Dogs.gender , Dogs.age , Dogs.weight , Dogs.date_of_birth , Dogs.owner_id , Dogs.date_adopted , Dogs.date_arrived , Dogs.dog_id , Dogs.size_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","868":"table Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Dogs , columns = [ Dogs.breed_code , Dogs.name , Dogs.age , Dogs.weight , Dogs.gender , Dogs.date_of_birth , Dogs.size_code , Dogs.date_arrived , Dogs.date_adopted , Dogs.dog_id ]\ntable Owners , columns = [ Owners.state , Owners.street , Owners.city , Owners.zip_code , Owners.last_name , Owners.first_name , Owners.owner_id , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","869":"table Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.age , Dogs.date_of_birth , Dogs.weight , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Professionals , columns = [ Professionals.last_name , Professionals.first_name , Professionals.state , Professionals.street , Professionals.city , Professionals.professional_id , Professionals.zip_code , Professionals.email_address , Professionals.role_code , Professionals.cell_number ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","870":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","871":"table Dogs , columns = [ Dogs.age , Dogs.date_of_birth , Dogs.date_arrived , Dogs.name , Dogs.weight , Dogs.gender , Dogs.date_adopted , Dogs.date_departed , Dogs.dog_id , Dogs.owner_id ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.first_name , Owners.last_name , Owners.cell_number , Owners.zip_code , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Professionals , columns = [ Professionals.state , Professionals.street , Professionals.city , Professionals.last_name , Professionals.first_name , Professionals.zip_code , Professionals.home_phone , Professionals.role_code , Professionals.cell_number , Professionals.professional_id ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","872":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Population , country.Code2 , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.Continent , country.GovernmentForm ]\ntable city , columns = [ city.CountryCode , city.Name , city.Population , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","873":"table orchestra , columns = [ orchestra.Year_of_Founded , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company , orchestra.Conductor_ID ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Performance_ID , performance.Type , performance.Date , performance.Share , performance.Weekly_rank , performance.Official_ratings_(millions) ]\ntable show , columns = [ show.Performance_ID , show.Result , show.If_first_show , show.Show_ID , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","874":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","875":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.Population , country.LocalName , country.Code2 , country.HeadOfState , country.GNPOld , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","876":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.CountryCode , city.Name , city.District , city.ID , city.Population ]\ntable country , columns = [ country.Code , country.Name , country.Continent , country.LocalName , country.Region , country.Capital , country.GovernmentForm , country.Population , country.HeadOfState , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","877":"table Owners , columns = [ Owners.state , Owners.owner_id , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.city , Owners.street , Owners.email_address , Owners.home_phone ]\ntable Professionals , columns = [ Professionals.state , Professionals.professional_id , Professionals.role_code , Professionals.last_name , Professionals.city , Professionals.zip_code , Professionals.street , Professionals.first_name , Professionals.cell_number , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.date_of_birth , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_adopted , Dogs.date_arrived , Dogs.size_code ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","878":"table orchestra , columns = [ orchestra.Record_Company , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Official_ratings_(millions) , performance.Weekly_rank , performance.Performance_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","879":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Code2 , country.Capital , country.Population , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","880":"table Treatments , columns = [ Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.owner_id , Dogs.breed_code , Dogs.size_code , Dogs.date_arrived ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_id , Charges.charge_amount ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","881":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Code2 , country.Capital , country.Region , country.GovernmentForm , country.LocalName , country.HeadOfState , country.Population , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","882":"table Professionals , columns = [ Professionals.email_address , Professionals.state , Professionals.professional_id , Professionals.last_name , Professionals.first_name , Professionals.zip_code , Professionals.cell_number , Professionals.city , Professionals.street , Professionals.role_code ]\ntable Owners , columns = [ Owners.state , Owners.email_address , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.owner_id , Owners.city , Owners.home_phone , Owners.street ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_id , Charges.charge_amount ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.weight , Dogs.date_of_birth , Dogs.age , Dogs.date_arrived , Dogs.date_adopted , Dogs.size_code , Dogs.dog_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","883":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","884":"table conductor , columns = [ conductor.Year_of_Work , conductor.Name , conductor.Conductor_ID , conductor.Age , conductor.Nationality ]\ntable show , columns = [ show.Result , show.If_first_show , show.Performance_ID , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Orchestra_ID , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","885":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","886":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","887":"table orchestra , columns = [ orchestra.Record_Company , orchestra.Year_of_Founded , orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Official_ratings_(millions) , performance.Weekly_rank , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","888":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","889":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Population , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.Code2 , country.GNPOld , country.GovernmentForm ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","890":"table city , columns = [ city.CountryCode , city.Name , city.District , city.ID , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Continent , country.LocalName , country.Region , country.Capital , country.GovernmentForm , country.HeadOfState , country.GNPOld , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","891":"table Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.last_name , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.role_code , Professionals.email_address ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.treatment_type_code , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.date_of_treatment ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Dogs , columns = [ Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.owner_id , Dogs.date_arrived , Dogs.size_code , Dogs.date_adopted ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Owners , columns = [ Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.owner_id , Owners.cell_number , Owners.email_address , Owners.home_phone ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","892":"table Dogs , columns = [ Dogs.breed_code , Dogs.size_code , Dogs.name , Dogs.weight , Dogs.gender , Dogs.date_of_birth , Dogs.dog_id , Dogs.age , Dogs.date_arrived , Dogs.date_adopted ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Owners , columns = [ Owners.state , Owners.street , Owners.city , Owners.owner_id , Owners.last_name , Owners.zip_code , Owners.email_address , Owners.cell_number , Owners.first_name , Owners.home_phone ]\ntable Professionals , columns = [ Professionals.state , Professionals.street , Professionals.city , Professionals.role_code , Professionals.zip_code , Professionals.cell_number , Professionals.last_name , Professionals.first_name , Professionals.email_address , Professionals.professional_id ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","893":"table orchestra , columns = [ orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Share , performance.Type , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","894":"table Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","895":"table Treatments , columns = [ Treatments.dog_id , Treatments.date_of_treatment , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.professional_id , Treatments.treatment_id ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.breed_code , Dogs.name , Dogs.age , Dogs.weight , Dogs.date_of_birth , Dogs.gender , Dogs.date_departed , Dogs.date_arrived , Dogs.size_code ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_id , Charges.charge_amount ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.last_name , Owners.street , Owners.first_name , Owners.owner_id , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","896":"table Owners , columns = [ Owners.owner_id , Owners.zip_code , Owners.first_name , Owners.last_name , Owners.city , Owners.state , Owners.street , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.professional_id , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.dog_id , Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.date_adopted , Dogs.date_arrived , Dogs.size_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","897":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.friend_id , Friend.student_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","898":"table Friend , columns = [ Friend.friend_id , Friend.student_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","899":"table orchestra , columns = [ orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Record_Company , orchestra.Year_of_Founded , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","900":"table singer , columns = [ singer.Net_Worth_Millions , singer.Citizenship , singer.Name , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","901":"table Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.professional_id , Treatments.date_of_treatment ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.name , Dogs.age , Dogs.gender , Dogs.weight , Dogs.date_of_birth , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.email_address , Owners.cell_number , Owners.home_phone ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","902":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","903":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","904":"table Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","905":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","906":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","907":"table country , columns = [ country.Population , country.Name , country.Capital , country.LocalName , country.Code , country.Region , country.HeadOfState , country.GNPOld , country.IndepYear , country.GovernmentForm ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","908":"table singer , columns = [ singer.Birth_Year , singer.Name , singer.Citizenship , singer.Singer_ID , singer.Net_Worth_Millions ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","909":"table country , columns = [ country.LifeExpectancy , country.Continent , country.Population , country.Name , country.Region , country.Code , country.Capital , country.LocalName , country.GNPOld , country.HeadOfState ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.ID , city.District , city.CountryCode ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","910":"table Dogs , columns = [ Dogs.breed_code , Dogs.dog_id , Dogs.name , Dogs.date_of_birth , Dogs.date_arrived , Dogs.age , Dogs.weight , Dogs.gender , Dogs.date_departed , Dogs.abandoned_yn ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.date_of_treatment , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.professional_id , Treatments.treatment_id ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_id , Charges.charge_amount ]\ntable Professionals , columns = [ Professionals.state , Professionals.city , Professionals.street , Professionals.last_name , Professionals.professional_id , Professionals.first_name , Professionals.role_code , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","911":"table Owners , columns = [ Owners.owner_id , Owners.last_name , Owners.first_name , Owners.city , Owners.state , Owners.street , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.professional_id , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.dog_id , Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.breed_code , Dogs.date_adopted , Dogs.size_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.last_name , Professionals.city , Professionals.state , Professionals.street , Professionals.professional_id , Professionals.first_name , Professionals.role_code , Professionals.zip_code , Professionals.email_address , Professionals.home_phone ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","912":"table singer , columns = [ singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","913":"table singer , columns = [ singer.Birth_Year , singer.Name , singer.Citizenship , singer.Singer_ID , singer.Net_Worth_Millions ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","914":"table Treatments , columns = [ Treatments.professional_id , Treatments.treatment_id , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.state , Professionals.last_name , Professionals.cell_number , Professionals.home_phone , Professionals.first_name , Professionals.zip_code , Professionals.city , Professionals.street , Professionals.email_address ]\ntable Owners , columns = [ Owners.state , Owners.cell_number , Owners.last_name , Owners.home_phone , Owners.zip_code , Owners.city , Owners.first_name , Owners.owner_id , Owners.street , Owners.email_address ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.date_arrived , Dogs.date_adopted , Dogs.size_code ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","915":"table country , columns = [ country.Continent , country.Region , country.Name , country.Code , country.Capital , country.HeadOfState , country.SurfaceArea , country.LocalName , country.GNPOld , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","916":"table country , columns = [ country.Continent , country.Region , country.Name , country.Code , country.Capital , country.SurfaceArea , country.HeadOfState , country.LocalName , country.GNPOld , country.Code2 ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","917":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","918":"table Treatment_Types , columns = [ Treatment_Types.treatment_type_description , Treatment_Types.treatment_type_code ]\ntable Treatments , columns = [ Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.professional_id ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.size_code , Dogs.owner_id , Dogs.breed_code , Dogs.date_arrived ]\ntable Professionals , columns = [ Professionals.city , Professionals.state , Professionals.street , Professionals.last_name , Professionals.first_name , Professionals.zip_code , Professionals.role_code , Professionals.cell_number , Professionals.home_phone , Professionals.professional_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","919":"table performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Performance_ID , performance.Date , performance.Share , performance.Official_ratings_(millions) , performance.Weekly_rank ]\ntable orchestra , columns = [ orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Conductor_ID , orchestra.Record_Company ]\ntable show , columns = [ show.Performance_ID , show.Result , show.If_first_show , show.Show_ID , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Conductor_ID , conductor.Nationality ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","920":"table singer , columns = [ singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Sales , song.Title , song.Singer_ID , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","921":"table Professionals , columns = [ Professionals.first_name , Professionals.professional_id , Professionals.last_name , Professionals.role_code , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Owners , columns = [ Owners.first_name , Owners.owner_id , Owners.last_name , Owners.cell_number , Owners.state , Owners.city , Owners.zip_code , Owners.street , Owners.home_phone , Owners.email_address ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.date_of_birth , Dogs.gender , Dogs.weight , Dogs.age , Dogs.date_adopted , Dogs.date_arrived , Dogs.date_departed ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","922":"table Treatments , columns = [ Treatments.professional_id , Treatments.treatment_id , Treatments.dog_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.treatment_type_code ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.role_code , Professionals.first_name , Professionals.last_name , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.owner_id , Dogs.date_arrived , Dogs.size_code , Dogs.date_adopted ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Owners , columns = [ Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","923":"table Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.zip_code , Owners.state , Owners.email_address , Owners.home_phone , Owners.city , Owners.street , Owners.cell_number ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.abandoned_yn , Dogs.dog_id , Dogs.date_of_birth , Dogs.age , Dogs.name , Dogs.gender , Dogs.weight , Dogs.date_arrived , Dogs.date_adopted ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address , Professionals.last_name , Professionals.first_name , Professionals.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_type_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","924":"table Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Dogs , columns = [ Dogs.breed_code , Dogs.name , Dogs.weight , Dogs.date_of_birth , Dogs.gender , Dogs.age , Dogs.size_code , Dogs.dog_id , Dogs.date_arrived , Dogs.date_adopted ]\ntable Owners , columns = [ Owners.state , Owners.street , Owners.city , Owners.zip_code , Owners.owner_id , Owners.last_name , Owners.cell_number , Owners.first_name , Owners.email_address , Owners.home_phone ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.treatment_type_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","925":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","926":"table Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","927":"table Dogs , columns = [ Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.name , Dogs.owner_id , Dogs.weight , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted , Dogs.abandoned_yn ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.professional_id , Treatments.treatment_id ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.email_address , Owners.cell_number , Owners.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","928":"table Dogs , columns = [ Dogs.owner_id , Dogs.size_code , Dogs.name , Dogs.dog_id , Dogs.weight , Dogs.gender , Dogs.date_of_birth , Dogs.age , Dogs.date_arrived , Dogs.date_adopted ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.zip_code , Owners.street , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","929":"table Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.last_name , Professionals.state , Professionals.city , Professionals.street , Professionals.role_code , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.treatment_type_code , Treatments.cost_of_treatment ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.name , Dogs.weight , Dogs.age , Dogs.gender , Dogs.date_of_birth , Dogs.owner_id , Dogs.date_arrived , Dogs.breed_code , Dogs.size_code ]\ntable Owners , columns = [ Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","930":"table Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.treatment_type_code , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.role_code , Professionals.city , Professionals.state , Professionals.street , Professionals.last_name , Professionals.first_name , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.name , Dogs.gender , Dogs.age , Dogs.weight , Dogs.date_of_birth , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.city , Owners.state , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","931":"table Dogs , columns = [ Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.weight , Dogs.name , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted , Dogs.owner_id , Dogs.size_code ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.first_name , Owners.last_name , Owners.email_address , Owners.cell_number , Owners.zip_code , Owners.home_phone ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.first_name , Professionals.professional_id , Professionals.cell_number , Professionals.role_code , Professionals.email_address , Professionals.last_name ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","932":"table Treatments , columns = [ Treatments.professional_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.dog_id , Treatments.date_of_treatment , Treatments.treatment_id ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.last_name , Professionals.first_name , Professionals.city , Professionals.state , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address , Professionals.role_code ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.owner_id , Dogs.size_code , Dogs.breed_code , Dogs.date_arrived ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.last_name , Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.cell_number , Owners.owner_id , Owners.home_phone , Owners.email_address ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","933":"table singer , columns = [ singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","934":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","935":"table Dogs , columns = [ Dogs.dog_id , Dogs.owner_id , Dogs.abandoned_yn , Dogs.date_of_birth , Dogs.name , Dogs.age , Dogs.date_arrived , Dogs.weight , Dogs.gender , Dogs.date_adopted ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.date_of_treatment ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.last_name , Owners.first_name , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","936":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.grade , Highschooler.name ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","937":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Performance_ID , performance.Official_ratings_(millions) ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","938":"table Treatments , columns = [ Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.professional_id , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.name , Dogs.age , Dogs.gender , Dogs.weight , Dogs.date_of_birth , Dogs.owner_id , Dogs.date_arrived , Dogs.breed_code , Dogs.date_adopted ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.email_address , Owners.owner_id , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.home_phone , Owners.cell_number ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","939":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","940":"table country , columns = [ country.Population , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.SurfaceArea , country.IndepYear ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","941":"table country , columns = [ country.SurfaceArea , country.Population , country.IndepYear , country.Name , country.Capital , country.Region , country.Code , country.LocalName , country.HeadOfState , country.GovernmentForm ]\ntable city , columns = [ city.Name , city.Population , city.District , city.CountryCode , city.ID ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","942":"table Dogs , columns = [ Dogs.owner_id , Dogs.age , Dogs.date_of_birth , Dogs.name , Dogs.date_arrived , Dogs.gender , Dogs.weight , Dogs.dog_id , Dogs.date_adopted , Dogs.date_departed ]\ntable Owners , columns = [ Owners.owner_id , Owners.last_name , Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.home_phone , Owners.cell_number , Owners.zip_code , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","943":"table Dogs , columns = [ Dogs.age , Dogs.date_of_birth , Dogs.date_arrived , Dogs.name , Dogs.weight , Dogs.date_departed , Dogs.date_adopted , Dogs.gender , Dogs.dog_id , Dogs.abandoned_yn ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.first_name , Owners.last_name , Owners.cell_number , Owners.zip_code , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.state , Professionals.city , Professionals.street , Professionals.last_name , Professionals.first_name , Professionals.zip_code , Professionals.professional_id , Professionals.cell_number , Professionals.role_code , Professionals.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","944":"table Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.role_code , Professionals.last_name , Professionals.city , Professionals.state , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.owner_id , Dogs.date_of_birth , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.cell_number , Owners.zip_code , Owners.email_address , Owners.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","945":"table Treatments , columns = [ Treatments.professional_id , Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.dog_id ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.cell_number , Professionals.home_phone , Professionals.last_name , Professionals.city , Professionals.state , Professionals.street , Professionals.first_name , Professionals.role_code , Professionals.zip_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Dogs , columns = [ Dogs.gender , Dogs.name , Dogs.weight , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.owner_id , Dogs.size_code , Dogs.breed_code , Dogs.date_arrived ]\ntable Owners , columns = [ Owners.cell_number , Owners.home_phone , Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.zip_code , Owners.last_name , Owners.first_name , Owners.email_address ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_id , Charges.charge_amount ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","946":"table city , columns = [ city.Population , city.District , city.Name , city.ID , city.CountryCode ]\ntable country , columns = [ country.Population , country.Name , country.Code , country.Region , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld , country.Code2 , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","947":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","948":"table Treatments , columns = [ Treatments.treatment_type_code , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id , Treatments.dog_id , Treatments.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.size_code , Dogs.breed_code , Dogs.owner_id , Dogs.date_adopted ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Professionals , columns = [ Professionals.city , Professionals.state , Professionals.street , Professionals.first_name , Professionals.last_name , Professionals.zip_code , Professionals.professional_id , Professionals.role_code , Professionals.home_phone , Professionals.cell_number ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","949":"table Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","950":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Code2 , country.Capital , country.GovernmentForm , country.Region , country.LocalName , country.HeadOfState , country.Population , country.IndepYear ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","951":"table orchestra , columns = [ orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Orchestra_ID , performance.Share , performance.Date , performance.Weekly_rank , performance.Performance_ID , performance.Official_ratings_(millions) ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","952":"table Treatments , columns = [ Treatments.professional_id , Treatments.treatment_type_code , Treatments.dog_id , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.cost_of_treatment ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.cell_number , Professionals.home_phone , Professionals.last_name , Professionals.first_name , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Dogs , columns = [ Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.owner_id , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Owners , columns = [ Owners.cell_number , Owners.home_phone , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.owner_id , Owners.zip_code , Owners.first_name , Owners.email_address ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_id , Charges.charge_amount ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","953":"table Treatments , columns = [ Treatments.professional_id , Treatments.treatment_id , Treatments.dog_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.treatment_type_code ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.role_code , Professionals.last_name , Professionals.state , Professionals.city , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.owner_id , Dogs.date_arrived , Dogs.date_adopted , Dogs.size_code ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","954":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.CountryCode , city.Name , city.District , city.ID , city.Population ]\ntable country , columns = [ country.Code , country.Name , country.Continent , country.Region , country.LocalName , country.Capital , country.HeadOfState , country.GNPOld , country.Code2 , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","955":"table city , columns = [ city.Population , city.District , city.Name , city.ID , city.CountryCode ]\ntable country , columns = [ country.Population , country.Name , country.Code , country.Region , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld , country.Code2 , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","956":"table singer , columns = [ singer.Net_Worth_Millions , singer.Name , singer.Citizenship , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Title , song.Sales , song.Singer_ID , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","957":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Year_of_Founded , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Year_of_Work , conductor.Age , conductor.Nationality ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","958":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Net_Worth_Millions , singer.Citizenship , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Sales , song.Title , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","959":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","960":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","961":"table Owners , columns = [ Owners.owner_id , Owners.zip_code , Owners.first_name , Owners.last_name , Owners.city , Owners.state , Owners.street , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.professional_id , Treatments.date_of_treatment , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.dog_id , Dogs.name , Dogs.weight , Dogs.age , Dogs.gender , Dogs.date_of_birth , Dogs.date_arrived , Dogs.date_adopted , Dogs.breed_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","962":"table orchestra , columns = [ orchestra.Major_Record_Format , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","963":"table Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.date_of_birth , Dogs.gender , Dogs.weight , Dogs.age , Dogs.date_arrived , Dogs.date_adopted , Dogs.breed_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Professionals , columns = [ Professionals.first_name , Professionals.last_name , Professionals.state , Professionals.street , Professionals.city , Professionals.professional_id , Professionals.zip_code , Professionals.cell_number , Professionals.email_address , Professionals.role_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","964":"table Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.treatment_type_code , Treatments.cost_of_treatment ]\ntable Professionals , columns = [ Professionals.professional_id , Professionals.role_code , Professionals.first_name , Professionals.last_name , Professionals.city , Professionals.state , Professionals.street , Professionals.cell_number , Professionals.zip_code , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.dog_id , Dogs.name , Dogs.age , Dogs.gender , Dogs.owner_id , Dogs.weight , Dogs.breed_code , Dogs.date_of_birth , Dogs.date_arrived , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.city , Owners.state , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","965":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","966":"table country , columns = [ country.Population , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.IndepYear , country.SurfaceArea ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","967":"table Dogs , columns = [ Dogs.age , Dogs.weight , Dogs.name , Dogs.abandoned_yn , Dogs.gender , Dogs.owner_id , Dogs.date_departed , Dogs.date_of_birth , Dogs.breed_code , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.cell_number , Owners.zip_code , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_type_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","968":"table Professionals , columns = [ Professionals.professional_id , Professionals.last_name , Professionals.first_name , Professionals.city , Professionals.state , Professionals.street , Professionals.zip_code , Professionals.cell_number , Professionals.email_address , Professionals.role_code ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment , Treatments.dog_id , Treatments.treatment_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.owner_id , Dogs.date_arrived , Dogs.size_code , Dogs.breed_code ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Owners , columns = [ Owners.last_name , Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.cell_number , Owners.owner_id , Owners.email_address , Owners.home_phone ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","969":"table Professionals , columns = [ Professionals.email_address , Professionals.cell_number , Professionals.home_phone , Professionals.last_name , Professionals.first_name , Professionals.professional_id , Professionals.zip_code , Professionals.role_code , Professionals.state , Professionals.city ]\ntable Owners , columns = [ Owners.home_phone , Owners.email_address , Owners.cell_number , Owners.zip_code , Owners.last_name , Owners.first_name , Owners.state , Owners.city , Owners.street , Owners.owner_id ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","970":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","971":"table singer , columns = [ singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Citizenship , singer.Birth_Year ]\ntable song , columns = [ song.Sales , song.Singer_ID , song.Song_ID , song.Title , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","972":"table singer , columns = [ singer.Name , singer.Net_Worth_Millions , singer.Citizenship , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Title , song.Sales , song.Singer_ID , song.Highest_Position , song.Song_ID ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","973":"table Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.weight , Dogs.gender , Dogs.date_of_birth , Dogs.age , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.first_name , Owners.last_name , Owners.city , Owners.zip_code , Owners.street , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","974":"table orchestra , columns = [ orchestra.Conductor_ID , orchestra.Year_of_Founded , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company ]\ntable conductor , columns = [ conductor.Conductor_ID , conductor.Name , conductor.Year_of_Work , conductor.Age , conductor.Nationality ]\ntable show , columns = [ show.Result , show.Performance_ID , show.Show_ID , show.Attendance , show.If_first_show ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","975":"table country , columns = [ country.LifeExpectancy , country.Continent , country.Population , country.Name , country.Region , country.Code , country.Capital , country.GNPOld , country.LocalName , country.HeadOfState ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","976":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","977":"table Highschooler , columns = [ Highschooler.grade , Highschooler.name , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","978":"table Owners , columns = [ Owners.state , Owners.owner_id , Owners.last_name , Owners.zip_code , Owners.first_name , Owners.cell_number , Owners.city , Owners.street , Owners.home_phone , Owners.email_address ]\ntable Professionals , columns = [ Professionals.state , Professionals.professional_id , Professionals.role_code , Professionals.last_name , Professionals.city , Professionals.zip_code , Professionals.street , Professionals.first_name , Professionals.cell_number , Professionals.email_address ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.date_of_birth , Dogs.name , Dogs.gender , Dogs.weight , Dogs.age , Dogs.dog_id , Dogs.date_arrived , Dogs.date_adopted , Dogs.size_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id , Treatments.treatment_type_code ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","979":"table Dogs , columns = [ Dogs.dog_id , Dogs.name , Dogs.breed_code , Dogs.owner_id , Dogs.date_of_birth , Dogs.age , Dogs.weight , Dogs.gender , Dogs.date_arrived , Dogs.size_code ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.professional_id , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Charges , columns = [ Charges.charge_amount , Charges.charge_id , Charges.charge_type ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","980":"table singer , columns = [ singer.Birth_Year , singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions ]\ntable song , columns = [ song.Singer_ID , song.Sales , song.Title , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","981":"table singer , columns = [ singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","982":"table Treatments , columns = [ Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.name , Dogs.dog_id , Dogs.age , Dogs.gender , Dogs.weight , Dogs.date_of_birth , Dogs.owner_id , Dogs.date_arrived , Dogs.breed_code , Dogs.size_code ]\ntable Owners , columns = [ Owners.city , Owners.state , Owners.street , Owners.last_name , Owners.zip_code , Owners.owner_id , Owners.first_name , Owners.email_address , Owners.home_phone , Owners.cell_number ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Professionals , columns = [ Professionals.city , Professionals.street , Professionals.state , Professionals.professional_id , Professionals.zip_code , Professionals.first_name , Professionals.last_name , Professionals.role_code , Professionals.cell_number , Professionals.email_address ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","983":"table singer , columns = [ singer.Birth_Year , singer.Citizenship , singer.Name , singer.Net_Worth_Millions , singer.Singer_ID ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","984":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","985":"table singer , columns = [ singer.Net_Worth_Millions , singer.Name , singer.Citizenship , singer.Singer_ID , singer.Birth_Year ]\ntable song , columns = [ song.Title , song.Sales , song.Singer_ID , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","986":"table Dogs , columns = [ Dogs.dog_id , Dogs.breed_code , Dogs.owner_id , Dogs.abandoned_yn , Dogs.date_of_birth , Dogs.name , Dogs.date_arrived , Dogs.age , Dogs.weight , Dogs.gender ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.professional_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.last_name , Owners.email_address , Owners.first_name , Owners.cell_number , Owners.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_amount , Charges.charge_type ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","987":"table country , columns = [ country.Population , country.Continent , country.Name , country.Region , country.Code , country.LocalName , country.Capital , country.HeadOfState , country.SurfaceArea , country.GNPOld ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","988":"table country , columns = [ country.SurfaceArea , country.Continent , country.Population , country.Region , country.Name , country.Code , country.Capital , country.HeadOfState , country.LocalName , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.Population , city.Name , city.ID , city.District , city.CountryCode ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","989":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Capital , country.Region , country.HeadOfState , country.Population , country.LocalName , country.Code2 , country.IndepYear , country.GNPOld ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","990":"table Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.weight , Dogs.age , Dogs.gender , Dogs.date_of_birth , Dogs.dog_id , Dogs.date_arrived , Dogs.date_adopted , Dogs.size_code ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","991":"table orchestra , columns = [ orchestra.Record_Company , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Conductor_ID ]\ntable show , columns = [ show.Result , show.Show_ID , show.Performance_ID , show.Attendance , show.If_first_show ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","992":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Song_ID , song.Sales , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","993":"table Dogs , columns = [ Dogs.age , Dogs.date_of_birth , Dogs.name , Dogs.weight , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted , Dogs.date_departed , Dogs.size_code , Dogs.dog_id ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Owners , columns = [ Owners.state , Owners.street , Owners.city , Owners.email_address , Owners.first_name , Owners.last_name , Owners.cell_number , Owners.owner_id , Owners.zip_code , Owners.home_phone ]\ntable Professionals , columns = [ Professionals.street , Professionals.state , Professionals.city , Professionals.first_name , Professionals.zip_code , Professionals.last_name , Professionals.cell_number , Professionals.role_code , Professionals.email_address , Professionals.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","994":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","995":"table singer , columns = [ singer.Singer_ID , singer.Name , singer.Citizenship , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","996":"table Dogs , columns = [ Dogs.age , Dogs.dog_id , Dogs.date_of_birth , Dogs.name , Dogs.owner_id , Dogs.weight , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted , Dogs.date_departed ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.professional_id , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.treatment_id ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.home_phone , Owners.email_address ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Charges , columns = [ Charges.charge_id , Charges.charge_type , Charges.charge_amount ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","997":"table conductor , columns = [ conductor.Name , conductor.Year_of_Work , conductor.Age , conductor.Conductor_ID , conductor.Nationality ]\ntable show , columns = [ show.Result , show.If_first_show , show.Performance_ID , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Orchestra_ID , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Orchestra , orchestra.Conductor_ID , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","998":"table Professionals , columns = [ Professionals.first_name , Professionals.professional_id , Professionals.last_name , Professionals.role_code , Professionals.state , Professionals.zip_code , Professionals.city , Professionals.street , Professionals.cell_number , Professionals.email_address ]\ntable Owners , columns = [ Owners.first_name , Owners.owner_id , Owners.last_name , Owners.cell_number , Owners.zip_code , Owners.state , Owners.city , Owners.street , Owners.home_phone , Owners.email_address ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.date_of_birth , Dogs.gender , Dogs.age , Dogs.weight , Dogs.date_adopted , Dogs.date_arrived , Dogs.size_code ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.cost_of_treatment , Treatments.date_of_treatment , Treatments.treatment_id , Treatments.treatment_type_code ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","999":"table country , columns = [ country.SurfaceArea , country.Population , country.Name , country.HeadOfState , country.Capital , country.GovernmentForm , country.Code , country.Region , country.LocalName , country.IndepYear ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1000":"table Likes , columns = [ Likes.student_id , Likes.liked_id ]\ntable Highschooler , columns = [ Highschooler.name , Highschooler.ID , Highschooler.grade ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","1001":"table country , columns = [ country.SurfaceArea , country.Population , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.GNPOld ]\ntable city , columns = [ city.Population , city.Name , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1002":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable country , columns = [ country.Code , country.Name , country.Code2 , country.Capital , country.Region , country.Population , country.HeadOfState , country.LocalName , country.GNPOld , country.GovernmentForm ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable city , columns = [ city.CountryCode , city.Name , city.ID , city.District , city.Population ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1003":"table Dogs , columns = [ Dogs.date_arrived , Dogs.dog_id , Dogs.date_departed , Dogs.date_of_birth , Dogs.name , Dogs.owner_id , Dogs.age , Dogs.weight , Dogs.gender , Dogs.date_adopted ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.treatment_type_code , Treatments.date_of_treatment , Treatments.cost_of_treatment , Treatments.professional_id , Treatments.treatment_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.owner_id , Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.first_name , Owners.zip_code , Owners.cell_number , Owners.email_address , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Charges , columns = [ Charges.charge_type , Charges.charge_amount , Charges.charge_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1004":"table orchestra , columns = [ orchestra.Year_of_Founded , orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company , orchestra.Conductor_ID ]\ntable performance , columns = [ performance.Orchestra_ID , performance.Performance_ID , performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) ]\ntable show , columns = [ show.Performance_ID , show.Result , show.If_first_show , show.Show_ID , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","1005":"table Highschooler , columns = [ Highschooler.grade , Highschooler.ID , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","1006":"table conductor , columns = [ conductor.Year_of_Work , conductor.Name , conductor.Age , conductor.Conductor_ID , conductor.Nationality ]\ntable show , columns = [ show.Result , show.Show_ID , show.Performance_ID , show.If_first_show , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","1007":"table country , columns = [ country.Code , country.Name , country.Capital , country.Code2 , country.Region , country.LocalName , country.Population , country.HeadOfState , country.GNPOld , country.GovernmentForm ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.Name , city.CountryCode , city.ID , city.District , city.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1008":"table Dogs , columns = [ Dogs.age , Dogs.date_of_birth , Dogs.weight , Dogs.gender , Dogs.name , Dogs.date_arrived , Dogs.date_adopted , Dogs.date_departed , Dogs.dog_id , Dogs.size_code ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.first_name , Owners.last_name , Owners.cell_number , Owners.email_address , Owners.owner_id , Owners.zip_code , Owners.home_phone ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.state , Professionals.street , Professionals.city , Professionals.first_name , Professionals.zip_code , Professionals.last_name , Professionals.cell_number , Professionals.email_address , Professionals.role_code , Professionals.professional_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1009":"table Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Highschooler , columns = [ Highschooler.ID , Highschooler.name , Highschooler.grade ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","1010":"table singer , columns = [ singer.Birth_Year , singer.Citizenship , singer.Name , singer.Net_Worth_Millions , singer.Singer_ID ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","1011":"table conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Nationality , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Orchestra_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","1012":"table Ref_Property_Types , columns = [ Ref_Property_Types.property_type_description , Ref_Property_Types.property_type_code ]\ntable Properties , columns = [ Properties.property_type_code , Properties.property_id , Properties.property_name , Properties.date_on_market , Properties.property_address , Properties.other_property_details , Properties.room_count , Properties.date_sold , Properties.apt_feature_1 , Properties.vendor_requested_price ]\ntable Other_Property_Features , columns = [ Other_Property_Features.property_id , Other_Property_Features.property_feature_description , Other_Property_Features.feature_id ]\ntable Ref_Feature_Types , columns = [ Ref_Feature_Types.feature_type_code , Ref_Feature_Types.feature_type_name ]\ntable Other_Available_Features , columns = [ Other_Available_Features.feature_type_code , Other_Available_Features.feature_description , Other_Available_Features.feature_id , Other_Available_Features.feature_name ]\nforeign keys :\nOther_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_codeProperties.property_type_code = Ref_Property_Types.property_type_codeOther_Property_Features.property_id = Properties.property_idOther_Property_Features.feature_id = Other_Available_Features.feature_id","1013":"table Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.dog_id , Treatments.professional_id ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.date_arrived , Dogs.owner_id , Dogs.date_adopted , Dogs.size_code ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.zip_code , Owners.home_phone , Owners.first_name , Owners.cell_number , Owners.email_address , Owners.owner_id ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1014":"table country , columns = [ country.SurfaceArea , country.Population , country.HeadOfState , country.Name , country.Capital , country.GovernmentForm , country.Region , country.Code , country.LocalName , country.GNPOld ]\ntable city , columns = [ city.Population , city.Name , city.ID , city.District , city.CountryCode ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1015":"table country , columns = [ country.Population , country.Continent , country.Name , country.Region , country.Code , country.Capital , country.LocalName , country.HeadOfState , country.SurfaceArea , country.IndepYear ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1016":"table singer , columns = [ singer.Citizenship , singer.Name , singer.Singer_ID , singer.Net_Worth_Millions , singer.Birth_Year ]\ntable song , columns = [ song.Singer_ID , song.Title , song.Sales , song.Song_ID , song.Highest_Position ]\nforeign keys :\nsong.Singer_ID = singer.Singer_ID","1017":"table conductor , columns = [ conductor.Nationality , conductor.Name , conductor.Year_of_Work , conductor.Age , conductor.Conductor_ID ]\ntable show , columns = [ show.Result , show.Performance_ID , show.If_first_show , show.Show_ID , show.Attendance ]\ntable performance , columns = [ performance.Type , performance.Share , performance.Date , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Orchestra_ID , performance.Performance_ID ]\ntable orchestra , columns = [ orchestra.Conductor_ID , orchestra.Orchestra , orchestra.Year_of_Founded , orchestra.Major_Record_Format , orchestra.Orchestra_ID , orchestra.Record_Company ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","1018":"table Dogs , columns = [ Dogs.owner_id , Dogs.name , Dogs.dog_id , Dogs.date_of_birth , Dogs.gender , Dogs.weight , Dogs.age , Dogs.breed_code , Dogs.date_adopted , Dogs.date_arrived ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1019":"table city , columns = [ city.Population , city.Name , city.ID , city.CountryCode , city.District ]\ntable country , columns = [ country.Population , country.Name , country.Code , country.LocalName , country.Capital , country.Region , country.HeadOfState , country.Code2 , country.GNPOld , country.SurfaceArea ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1020":"table Other_Available_Features , columns = [ Other_Available_Features.feature_type_code , Other_Available_Features.feature_name , Other_Available_Features.feature_id , Other_Available_Features.feature_description ]\ntable Properties , columns = [ Properties.property_type_code , Properties.property_id , Properties.fld_feature_1 , Properties.oth_feature_1 , Properties.apt_feature_1 , Properties.hse_feature_1 , Properties.shp_feature_2 , Properties.property_name , Properties.date_on_market , Properties.apt_feature_2 ]\ntable Ref_Feature_Types , columns = [ Ref_Feature_Types.feature_type_code , Ref_Feature_Types.feature_type_name ]\ntable Other_Property_Features , columns = [ Other_Property_Features.feature_id , Other_Property_Features.property_id , Other_Property_Features.property_feature_description ]\ntable Ref_Property_Types , columns = [ Ref_Property_Types.property_type_code , Ref_Property_Types.property_type_description ]\nforeign keys :\nOther_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_codeProperties.property_type_code = Ref_Property_Types.property_type_codeOther_Property_Features.property_id = Properties.property_idOther_Property_Features.feature_id = Other_Available_Features.feature_id","1021":"table Professionals , columns = [ Professionals.professional_id , Professionals.first_name , Professionals.last_name , Professionals.city , Professionals.state , Professionals.street , Professionals.cell_number , Professionals.zip_code , Professionals.role_code , Professionals.email_address ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.date_of_treatment , Treatments.dog_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.dog_id , Dogs.owner_id , Dogs.breed_code , Dogs.date_arrived , Dogs.size_code ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1022":"table countrylanguage , columns = [ countrylanguage.Language , countrylanguage.CountryCode , countrylanguage.Percentage , countrylanguage.IsOfficial ]\ntable country , columns = [ country.Code , country.Name , country.Code2 , country.Population , country.Capital , country.Region , country.LocalName , country.HeadOfState , country.GNPOld , country.Continent ]\ntable city , columns = [ city.CountryCode , city.Population , city.Name , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1023":"table performance , columns = [ performance.Type , performance.Share , performance.Performance_ID , performance.Weekly_rank , performance.Official_ratings_(millions) , performance.Date , performance.Orchestra_ID ]\ntable show , columns = [ show.Performance_ID , show.Result , show.Show_ID , show.If_first_show , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Conductor_ID , conductor.Nationality ]\ntable orchestra , columns = [ orchestra.Orchestra_ID , orchestra.Orchestra , orchestra.Major_Record_Format , orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","1024":"table Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.zip_code , Owners.home_phone , Owners.email_address , Owners.state , Owners.city , Owners.cell_number , Owners.street ]\ntable Dogs , columns = [ Dogs.owner_id , Dogs.dog_id , Dogs.date_of_birth , Dogs.age , Dogs.name , Dogs.gender , Dogs.weight , Dogs.date_adopted , Dogs.date_arrived , Dogs.abandoned_yn ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Professionals , columns = [ Professionals.first_name , Professionals.state , Professionals.professional_id , Professionals.city , Professionals.street , Professionals.last_name , Professionals.cell_number , Professionals.email_address , Professionals.zip_code , Professionals.home_phone ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.professional_id , Treatments.dog_id , Treatments.treatment_id , Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1025":"table countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\ntable city , columns = [ city.CountryCode , city.Name , city.District , city.ID , city.Population ]\ntable country , columns = [ country.Code , country.Name , country.Continent , country.Region , country.LocalName , country.Capital , country.GovernmentForm , country.HeadOfState , country.Code2 , country.Population ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1026":"table country , columns = [ country.Population , country.Name , country.Capital , country.LocalName , country.Code , country.Region , country.HeadOfState , country.GNPOld , country.IndepYear , country.GovernmentForm ]\ntable city , columns = [ city.Name , city.Population , city.CountryCode , city.ID , city.District ]\ntable sqlite_sequence , columns = [ sqlite_sequence.name , sqlite_sequence.seq ]\ntable countrylanguage , columns = [ countrylanguage.CountryCode , countrylanguage.Language , countrylanguage.IsOfficial , countrylanguage.Percentage ]\nforeign keys :\ncity.CountryCode = country.Codecountrylanguage.CountryCode = country.Code","1027":"table Charges , columns = [ Charges.charge_amount , Charges.charge_type , Charges.charge_id ]\ntable Treatments , columns = [ Treatments.cost_of_treatment , Treatments.treatment_type_code , Treatments.treatment_id , Treatments.date_of_treatment , Treatments.dog_id , Treatments.professional_id ]\ntable Breeds , columns = [ Breeds.breed_name , Breeds.breed_code ]\ntable Dogs , columns = [ Dogs.name , Dogs.weight , Dogs.gender , Dogs.age , Dogs.date_of_birth , Dogs.size_code , Dogs.dog_id , Dogs.date_arrived , Dogs.breed_code , Dogs.date_adopted ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Owners , columns = [ Owners.state , Owners.city , Owners.street , Owners.last_name , Owners.zip_code , Owners.home_phone , Owners.email_address , Owners.cell_number , Owners.first_name , Owners.owner_id ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1028":"table Highschooler , columns = [ Highschooler.name , Highschooler.grade , Highschooler.ID ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","1029":"table Highschooler , columns = [ Highschooler.ID , Highschooler.grade , Highschooler.name ]\ntable Friend , columns = [ Friend.student_id , Friend.friend_id ]\ntable Likes , columns = [ Likes.student_id , Likes.liked_id ]\nforeign keys :\nFriend.friend_id = Highschooler.IDFriend.student_id = Highschooler.IDLikes.student_id = Highschooler.IDLikes.liked_id = Highschooler.ID","1030":"table performance , columns = [ performance.Type , performance.Share , performance.Performance_ID , performance.Weekly_rank , performance.Date , performance.Orchestra_ID , performance.Official_ratings_(millions) ]\ntable show , columns = [ show.Performance_ID , show.Result , show.Show_ID , show.If_first_show , show.Attendance ]\ntable conductor , columns = [ conductor.Name , conductor.Age , conductor.Year_of_Work , conductor.Conductor_ID , conductor.Nationality ]\ntable orchestra , columns = [ orchestra.Orchestra , orchestra.Orchestra_ID , orchestra.Major_Record_Format , orchestra.Year_of_Founded , orchestra.Record_Company , orchestra.Conductor_ID ]\nforeign keys :\norchestra.Conductor_ID = conductor.Conductor_IDperformance.Orchestra_ID = orchestra.Orchestra_IDshow.Performance_ID = performance.Performance_ID","1031":"table Dogs , columns = [ Dogs.owner_id , Dogs.size_code , Dogs.name , Dogs.weight , Dogs.dog_id , Dogs.date_of_birth , Dogs.age , Dogs.gender , Dogs.date_arrived , Dogs.date_adopted ]\ntable Owners , columns = [ Owners.owner_id , Owners.first_name , Owners.last_name , Owners.state , Owners.city , Owners.street , Owners.zip_code , Owners.home_phone , Owners.cell_number , Owners.email_address ]\ntable Sizes , columns = [ Sizes.size_code , Sizes.size_description ]\ntable Breeds , columns = [ Breeds.breed_code , Breeds.breed_name ]\ntable Treatment_Types , columns = [ Treatment_Types.treatment_type_code , Treatment_Types.treatment_type_description ]\ntable Treatments , columns = [ Treatments.dog_id , Treatments.professional_id , Treatments.cost_of_treatment , Treatments.treatment_id , Treatments.treatment_type_code , Treatments.date_of_treatment ]\nforeign keys :\nDogs.owner_id = Owners.owner_idDogs.owner_id = Owners.owner_idDogs.size_code = Sizes.size_codeDogs.breed_code = Breeds.breed_codeTreatments.dog_id = Dogs.dog_idTreatments.professional_id = Professionals.professional_idTreatments.treatment_type_code = Treatment_Types.treatment_type_code","1032":"table airlines , columns = [ airlines.Airline , airlines.Abbreviation , airlines.uid , airlines.Country ]\ntable flights , columns = [ flights.Airline , flights.SourceAirport , flights.DestAirport , flights.FlightNo ]\ntable airports , columns = [ airports.AirportCode , airports.AirportName , airports.City , airports.Country , airports.CountryAbbrev ]\nforeign keys :\nflights.DestAirport = airports.AirportCodeflights.SourceAirport = airports.AirportCode","1033":"table Students , columns = [ Students.current_address_id , Students.permanent_address_id , Students.student_id , Students.email_address , Students.first_name , Students.date_first_registered , Students.date_left , Students.last_name , Students.other_student_details , Students.middle_name ]\ntable Addresses , columns = [ Addresses.address_id , Addresses.other_address_details , Addresses.state_province_county , Addresses.zip_postcode , Addresses.line_1 , Addresses.city , Addresses.country , Addresses.line_3 , Addresses.line_2 ]\ntable Transcript_Contents , columns = [ Transcript_Contents.transcript_id , Transcript_Contents.student_course_id ]\ntable Student_Enrolment_Courses , columns = [ Student_Enrolment_Courses.student_enrolment_id , Student_Enrolment_Courses.course_id , Student_Enrolment_Courses.student_course_id ]\ntable Transcripts , columns = [ Transcripts.other_details , Transcripts.transcript_id , Transcripts.transcript_date ]\ntable Degree_Programs , columns = [ Degree_Programs.department_id , Degree_Programs.other_details , Degree_Programs.degree_program_id , Degree_Programs.degree_summary_name , Degree_Programs.degree_summary_description ]\nforeign keys :\nDegree_Programs.department_id = Departments.department_idSections.course_id = Courses.course_idStudents.permanent_address_id = Addresses.address_idStudents.current_address_id = Addresses.address_idStudent_Enrolment.student_id = Students.student_idStudent_Enrolment.semester_id = Semesters.semester_idStudent_Enrolment.degree_program_id = Degree_Programs.degree_program_idStudent_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_idStudent_Enrolment_Courses.course_id = Courses.course_idTranscript_Contents.transcript_id = Transcripts.transcript_idTranscript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id"}}