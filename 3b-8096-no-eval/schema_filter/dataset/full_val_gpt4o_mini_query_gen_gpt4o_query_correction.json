{"question":{"0":"what is the longest river in the us","1":"how many cities does the usa have","2":"what are the states","3":"how many inhabitants does boulder have","4":"which state has the longest river","5":"what is the largest state that borders california","6":"what state has the smallest area","7":"how large is the largest city in alaska","8":"what state has the smallest urban population","9":"what is the biggest state in the usa","10":"what is the lowest point in usa","11":"what is the smallest state by area","12":"what are the rivers in the state of illinois","13":"name the rivers in illinois","14":"how many capitals does rhode island have","15":"what are the populations of all the major cities in wisconsin","16":"what are the populations of states through which the mississippi river run","17":"what state has the largest area","18":"states bordering kentucky","19":"how much population does california have","20":"what is the largest state","21":"which states does the ohio river pass through","22":"what is the largest capital","23":"what is largest capital","24":"what state that borders california is the largest","25":"how many states are there in the usa","26":"what is the capital of the state with the longest river","27":"which state has the highest population density","28":"what is the largest city in the smallest state in the usa","29":"how many rivers does idaho have","30":"which states have points higher than the highest point in colorado","31":"which state is the smallest","32":"what is the adjacent state of kentucky","33":"which state has the largest city","34":"what is the population of the smallest state","35":"what state which the mississippi runs through has the largest population","36":"how large is new mexico","37":"what cities in texas","38":"which state has the most people","39":"what is the highest mountain in the us","40":"which state 's capital city is the largest","41":"what are the populations of states which border texas","42":"what is the city with the smallest population","43":"what is the lowest point in iowa in meters","44":"list the states","45":"which state has the least population density","46":"what is the population of seattle washington","47":"what is the longest river that flows through a state that borders tennessee","48":"what are major rivers in illinois","49":"what is the smallest state that the mississippi river runs through","50":"what is the largest state in usa","51":"what is the major cities in kansas","52":"what is the state with the largest density in usa","53":"what is the state with the largest population density","54":"what are the populations of the states through which the mississippi river runs","55":"what is the area of the state with the capital albany","56":"what is the population density of wyoming","57":"which states lie on the largest river in the united states","58":"how many cities are there in the united states","59":"what is the highest point in the state with the capital des moines","60":"what is the largest city of wyoming","61":"what is the area of new mexico in square kilometers","62":"which state has the largest density","63":"what states border states that the mississippi runs through","64":"which states does the longest river cross","65":"which state has the smallest population density","66":"which river traverses most states","67":"what states have no bordering state","68":"through which states does the ohio run","69":"what states does the ohio run through","70":"count the states which have elevations lower than what alabama has","71":"what is the lowest point of the us","72":"what is the largest capital city in the usa","73":"give me the states that border kentucky","74":"where is the lowest spot in iowa","75":"how long is rio grande","76":"what state has the least population density","77":"what is the population in boulder","78":"what is the most populated state bordering oklahoma","79":"what is the capital of the state with the largest population","80":"what is the combined population of all 50 states","81":"how long is the rio grande","82":"what is the capital of the smallest state","83":"what is the highest point in each state whose lowest point is sea level","84":"give me the number of rivers in idaho","85":"what state has the city with the most population","86":"what is the biggest city in wyoming","87":"what are the states through which the longest river runs","88":"what is the population of the major cities in wisconsin","89":"which state has the sparsest population density","90":"what are the major cities in the usa","91":"what is the elevation of the highest point in the usa","92":"what is the population of california","93":"what can you tell me about the population of california","94":"what is the capital of the state with the largest population density","95":"what city has the largest population","96":"what state has the most people","97":"what is the length of the longest river in the usa","98":"how many people reside in california","99":"what is the longest river that flows through texas","100":"what is the number of neighboring states for kentucky","101":"what is the largest state in the us","102":"what are all the rivers in illinois","103":"where is the lowest point in iowa","104":"which river goes through the most states","105":"what is the longest river in the state with the most major cities","106":"which rivers run through the state with the largest city in the us","107":"what is the tallest mountain in the united states","108":"what is the lowest point of all states through which the mississippi river runs through","109":"what state contains the highest point of those the colorado river traverses","110":"where is the ohio river","111":"what is the smallest state in the usa","112":"what is the size of the capital of texas","113":"what river traverses the most states","114":"what is the highest point in the us","115":"what are the highest points of all the states","116":"what are the names of the major cities in kansas","117":"which state is the city springfield located in","118":"what states are next to the ohio","119":"what river flows through the most states","120":"what is the smallest state bordering texas","121":"what are the capital city in texas","122":"what state has the sparsest population density","123":"kentucky borders how many states","124":"what states does the ohio river go through","125":"what is the smallest city in the usa","126":"what capital has the largest population","127":"what are the populations of states through which the mississippi run","128":"how many people live in the united states","129":"how tall is guadalupe peak","130":"what is the longest river in the states that border tennessee","131":"which rivers are in illinois","132":"which state has the greatest population","133":"how high is the highest point in delaware","134":"what are the population of california","135":"springfield is in what state","136":"what are the population densities of each us state","137":"what is the population of boulder","138":"what is the lowest point in the united states","139":"name the major rivers in illinois","140":"what is the largest river in texas state","141":"what is the largest state bordering california","142":"how long is the rio grande river","143":"which state has the biggest population","144":"how many states border the state with the largest population","145":"how high is the highest point of delaware","146":"what are the high points of states surrounding mississippi","147":"what state has the largest capital","148":"what are the major cities of kansas","149":"what states have rivers named ohio","150":"what is the smallest state that borders texas","151":"which states border no other states","152":"what is the biggest city in the us","153":"what are the major rivers in illinois","154":"what state borders kentucky","155":"number of states bordering kentucky","156":"what is the most populous city in wyoming","157":"what is the longest river in the largest state","158":"what is the longest river flowing through texas","159":"what is the highest point in delaware in meters","160":"which states have cities named springfield","161":"what rivers flow through states that alabama borders","162":"what is the highest elevation in delaware","163":"what is the population density of the state with the smallest area","164":"what is the state with the smallest area","165":"which states does the longest river run through","166":"which is the lowest point of the states that the mississippi runs through","167":"how many rivers are found in idaho","168":"what states does the ohio river run through","169":"how many rivers are called colorado","170":"what state has the smallest population density","171":"what is the biggest city in the usa","172":"what is the tallest mountain in america","173":"what state has the highest population","174":"what is the length of the longest river that runs through texas","175":"how many colorado rivers are there","176":"what are the populations of the states through which the mississippi run","177":"what is the river that cross over illinois","178":"what is the smallest city in alaska","179":"what is the capital of the state with the most inhabitants","180":"how tall is the highest point in delaware","181":"which rivers flow through illinois","182":"name all the rivers in illinois","183":"what is the biggest river in texas","184":"what is the total length of all rivers in the usa","185":"which city in wyoming has the largest population","186":"what is the biggest state in continental us","187":"what is the longest river in america","188":"show major cities in kansas","189":"how many square kilometers in the us","190":"which rivers run through states bordering alabama","191":"what is the most populated capital in the usa","192":"which states does the ohio river run through","193":"how many cities are there in us","194":"which state border kentucky","195":"what state is the biggest","196":"how many states have a higher point than the highest point of the state with the largest capital city in the us","197":"how long is the longest river in texas","198":"what is the highest point in the country","199":"name the longest river in us","200":"what is the largest city in wyoming","201":"how many cities are there in usa","202":"how long is the rio grande river in miles","203":"how many citizens does the biggest city have in the usa","204":"what state is springfield in","205":"what is the most dense state in the usa","206":"what is the most populous state through which the mississippi runs","207":"what is the biggest city in usa","208":"what is the population of the largest city in the state with the largest area","209":"what is the highest point in the usa","210":"what is the population of boulder city","211":"how many states are in the united states","212":"what is the smallest city in the largest state","213":"what are the major cities in states through which the mississippi runs","214":"what state bordering oklahoma has the largest population","215":"what is the biggest city in the smallest state","216":"how many people live in the capital of texas","217":"what is the population density of the largest state","218":"what is the most populous city","219":"what is the highest point in the state with capital des moines","220":"how many cities are there in the us","221":"give me the cities in texas","222":"what is the largest city in wyoming by population","223":"what is the most populous state in the us","224":"what are the rivers in illinois","225":"what city has the most people","226":"how many states does usa have","227":"what is the capital of texas","228":"what city has the least population","229":"which is the smallest state","230":"what states have a city named springfield","231":"could you tell me what is the highest point in the state of texas","232":"how many people live in the state with the largest population density","233":"what is the capital of the state texas","234":"what is the area of the state with the smallest population density","235":"give me the lakes in california","236":"where is the lowest point in the us","237":"how many people stay in california","238":"how high is the highest point in america","239":"what state is springfield located in","240":"how big is new mexico","241":"state the state with the largest area","242":"tell me what cities are in texas","243":"number of people in boulder","244":"what states have towns named springfield","245":"what major cities are located in kansas","246":"how many people are there in california","247":"how high is guadalupe peak","248":"what states border states that border colorado","249":"what state has the lowest population density","250":"which states border the ohio river","251":"what are the populations of the major cities of wisconsin","252":"what is the highest point of the usa","253":"what is the largest city in smallest state through which the mississippi runs","254":"what is the height of the highest point in the usa","255":"how many people in boulder","256":"which river runs through most states","257":"what rivers are there in illinois","258":"what is the area of the new mexico state","259":"what is the density of the wyoming","260":"what are the neighboring states for kentucky","261":"what is the highest point in states bordering colorado","262":"what are the populations of the states through which the mississippi runs","263":"what is the biggest state","264":"what states border kentucky","265":"how many people live in seattle washington","266":"what is the longest river in the united states","267":"what are the major cities in the state of kansas","268":"how many rivers are there in idaho","269":"what are the cities in states through which the mississippi runs","270":"what is the least populous state","271":"how many states are in the usa","272":"whats the largest city","273":"what states have cities named springfield","274":"what is the longest river in texas","275":"population of boulder","276":"what states are next to kentucky","277":"what states high point are higher than that of colorado","278":"which state has the most population","279":"what length is the rio grande","280":"how many rivers run through idaho","281":"what are the major cities of the united states","282":"which state is springfield in","283":"what is the population density of the smallest state","284":"what is the lowest point of iowa","285":"how long is the longest river in the usa","286":"which states do ohio river flow through","287":"what is the length of the rio grande river","288":"which states adjoin kentucky","289":"what state has the city springfield","290":"what are the capitals of the states that border texas","291":"what state has the smallest population","292":"what are the populations of the states through which the mississippi river run","293":"what are the cities in texas","294":"what states neighbor kentucky","295":"where is the highest point in texas","296":"what cities are located in texas","297":"which state borders kentucky","298":"which us city has the highest population density","299":"which state has the ohio river","300":"what is the largest state capital in population","301":"what is the highest elevation in the united states","302":"what cities in wyoming have the highest populations","303":"what state is the largest in population","304":"what rivers run through illinois","305":"how many rivers are in idaho","306":"name the states which have no surrounding states","307":"what rivers flow through illinois","308":"what is the city in wyoming with the largest population","309":"how many citizens in boulder","310":"what is the most populous state","311":"what are the highest points of states surrounding mississippi","312":"what is the highest point in the united states","313":"which state has the lowest population density","314":"what is the highest point of the state with the smallest population density","315":"how many states are there in united states","316":"what is the population of the state with the highest population density","317":"which capitals are in the states that border texas","318":"what states border the ohio river","319":"what is the state with the largest area","320":"what wyoming city has the largest population","321":"how big is the city of boulder","322":"which river runs through the most states","323":"which states border kentucky","324":"what is the highest mountain in us","325":"what are the rivers of illinois","326":"how many citizens in california","327":"what is the area of all the states combined","328":"what state has the longest river","329":"what river is the longest one in the united states","330":"what river runs through the most states","331":"what are the populations of states through which the mississippi river runs","332":"what is the lowest point in iowa","333":"what are the major cities in kansas","334":"how many citizens live in california","335":"what are the capitals of states that border texas","336":"how many states does kentucky border","337":"what are the states that the ohio run through","338":"how many people live in the biggest city in alaska state","339":"what is capital of texas","340":"how many major cities are there","341":"what state has the largest city","342":"rivers in illinois","343":"what is the biggest capital city in the us","344":"what is the high point of texas","345":"how many states are there","346":"which state has the smallest area that borders texas","347":"where is the most populated area of wyoming","348":"what is the maximum elevation of guadalupe peak","349":"what is the size of new mexico","350":"how many people live in california","351":"what is the capital of the texas state","352":"what city in the united states has the highest population density","353":"through which states does the ohio flow","354":"how many residents live in california","355":"what is the highest point in texas","356":"what is the lowest elevation in pennsylvania","357":"give me the cities which are in texas","358":"which is the longest river in usa","359":"what is the total area of the usa","360":"what cities in wyoming have the highest number of citizens","361":"what rivers are in states that border alabama","362":"what is the longest river","363":"name the major lakes in michigan","364":"what are the capital cities of the states which border texas","365":"what state that borders oklahoma has the highest population","366":"which states does the ohio run through","367":"how many people live in boulder","368":"what is the highest mountain in texas","369":"what are the biggest rivers in texas","370":"what is the combined area of all 50 states","371":"what are the populations of states through which the mississippi runs","372":"number of citizens in boulder","373":"what major rivers run through illinois","374":"what is the population of the state with the largest area","375":"what is the area of new mexico","376":"what state has the greatest population density","377":"which state has the greatest density","378":"what is the smallest city in the us","379":"what river runs through illinois","380":"what state has the highest population density","381":"what state has the city with the largest population","382":"give me the largest state","383":"what states surround kentucky","384":"how many people lived in boulder","385":"how many rivers in idaho","386":"people in boulder","387":"what rivers are in illinois","388":"in which state is springfield","389":"what is the density of wyoming","390":"what is the longest river that runs through a state that borders tennessee","391":"what is the lowest point in the state of iowa","392":"give me all the states of usa","393":"what is the state with the lowest population density","394":"give me the longest river that passes through the us","395":"what state has the largest population density","396":"how many people are in the state of california","397":"where is springfield","398":"which states have points that are higher than the highest point in colorado","399":"how many states border kentucky","400":"what is the capital of states that have cities named durham","401":"what is the state with the lowest population","402":"what is the population of the largest state","403":"how many states do not have rivers","404":"what are the major cities of the us","405":"through which states does the longest river in texas run","406":"what states in the united states have a city of springfield","407":"what are the cities of the state with the highest point","408":"can you tell me the capital of texas","409":"what state has the largest population","410":"which of the states bordering oklahoma has the largest population","411":"what is the highest point in the states bordering colorado","412":"what river flows through illinois","413":"what capital is the largest in the us","414":"papers published in the area of Question Answering","415":"papers on TAIL NIPS","416":"journal articles by mohammad rastegari","417":"How many papers used ImageNet dataset ?","418":"how many states are next to major rivers","419":"what rivers run through the state with the lowest point in the usa","420":"how many rivers do not traverse the state with the capital albany","421":"which EMNLP 2010 papers have been cited the most ?","422":"Who are the authors with the most published papers in syntactic parsing ?","423":"What papers were written by authors Peter Mertens and Dina Barbian","424":"convolution paper by brian curless","425":"Papers authored by Liwen Xiong in 2015","426":"how many rivers are in the state with the largest population","427":"what rivers do not run through tennessee","428":"How many citations does noah a smith has ?","429":"Question Answering papers","430":"list datasets for semantic parsing","431":"how many states border at least one other state","432":"what kind of papers does Luke Zettlemoyer publish","433":"convolution by brian curless","434":"what state has no rivers","435":"How many citations does noah a smith have ?","436":"What was the best paper at TACL 2014 ?","437":"Keyphrases used by Luke Zettlemoyer","438":"who published the most papers in syntactic parsing ?","439":"what is the capital of the state that borders the state that borders texas","440":"What are keyphrases by Christof Dallermassl in 2000 ?","441":"What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?","442":"what is the smallest state through which the longest river runs","443":"what is the shortest river in the united states","444":"What papers were published in acl in 2012 about Parsing ?","445":"who has written the most syntactic parsing papers ?","446":"What are the papers of Liwen Xiong in 2015","447":"in what state is mount whitney","448":"Latest paper by oren etzioni","449":"Does sharon goldwater have any papers published ?","450":"How many papers were written on Multiuser Receiver in the Decision Feedback this year ?","451":"papers where sharon goldwater is an author","452":"who had papers at acl 2016 ?","453":"papers on Question Answering","454":"How many papers run experiments on ImageNet ?","455":"what is the state with the lowest point","456":"give me the cities in usa","457":"semantic parsing dataset","458":"how many papers about deep learning ?","459":"How many papers does David M. Blei have in AISTATS","460":"What keywords are in papers by Luke Zettlemoyer ?","461":"List papers that has a keyword Question Answering","462":"most recent papers by oren etzioni","463":"How many papers are in deep learning ?","464":"what rivers run through the states that border the state with the capital atlanta","465":"what state is salem the capital of","466":"Papers published in 2015 by Liwen Xiong","467":"what is the capital city of the largest state in the us","468":"authors of acl 2016 papers","469":"what state has the highest elevation","470":"papers in chi","471":"What papers has brian curless written about convolution ?","472":"what topics does Luke Zettlemoyer publish in","473":"which state has the highest elevation","474":"which state has the lowest point that borders idaho","475":"Papers about chi","476":"what rivers flow through the largest state","477":"which rivers do not run through tennessee","478":"what mountains are in alaska","479":"who published the most in syntactic parsing ?","480":"keywords in the papers written by Luke Zettlemoyer","481":"recent papers by sanjeev arora","482":"papers by Liwen Xiong from 2015","483":"What is the latest paper by oren etzioni ?","484":"what are the major cities in the largest state","485":"sharon goldwater papers","486":"noah a smith citation count","487":"where is massachusetts","488":"Has Peter Mertens and Dina Barbian written a paper together ?","489":"what states border the most populous state","490":"sharon goldwater 's papers","491":"what state contains the highest point in the us","492":"who published Parsing papers at acl 2012","493":"where is mount whitney located","494":"Papers about TAIL in NIPS","495":"what state has highest elevation","496":"TAIL papers used in NIPS","497":"which state is mount whitney in","498":"keyphrases Christof Dallermassl used in papers written last year","499":"does ras bodik publish a lot ?","500":"How many publications does Christopher D. Manning have ?","501":"which capitals are not major cities","502":"What conferences did li dong publish in in 2016 ?","503":"keyphrases used by Luke Zettlemoyer","504":"what are the papers in NIPS about TAIL ?","505":"Fetch me some papers on Question Answering","506":"which rivers do not run through usa","507":"What TAIL paper published in NIPS ?","508":"what paper did Peter Mertens and Dina Barbian write together ?","509":"how many papers has Mirella Lapata cited ?","510":"what is the highest point in the state with the smallest population","511":"Show me the papers on Question Answering","512":"Liwen Xiong 's papers in 2015","513":"papers that used Question Answering","514":"how many papers does Christopher D. Manning have ?","515":"which state has the highest peak in the country","516":"acl papers in 2012 on Parsing","517":"What papers have been written by both Peter Mertens and Dina Barbian ?","518":"How many paper has Ed Desmond written about Semantic Parsing ?","519":"salem is the capital of which state","520":"what is the largest state that borders the state with the lowest point in the usa","521":"What is the paper about convolution from brian curless ?","522":"top syntactic parsing author","523":"acl 2016 authors","524":"in what conferences does Daniella Coelho publish ?","525":"I want the papers on keyphrase0 by brian curless","526":"What papers has brian curless written on convolution ?","527":"papers by authors Peter Mertens and Dina Barbian","528":"show me all the major lakes in the us","529":"How many Semantic Parsing papers has Ed Desmond written ?","530":"chi papers","531":"which state has the smallest average urban population","532":"citation count of zachary tatlock 's papers","533":"How many papers does Christopher D. Manning have ?","534":"which states border the longest river in the usa","535":"How many papers does David M. Blei have in AISTATS ?","536":"what is the shortest river in texas","537":"keywords used by Luke Zettlemoyer","538":"how many papers does David M. Blei have at AISTATS","539":"recent research interests of sanjeev arora","540":"which state capital has the smallest population","541":"What is the paper about Question Answering ?","542":"subhasis chaudhuri","543":"which states border states through which the mississippi traverses","544":"what has Liwen Xiong done in the past year","545":"What are the latest papers by oren etzioni ?","546":"Which papers are about about Question Answering ?","547":"who is the most published author in syntactic parsing ?","548":"what are the major cities in the states through which the major river in virginia runs","549":"How many papers written on ImageNet ?","550":"what is the shortest river","551":"what were some Parsing based papers in acl 2012 ?","552":"how high are the highest points of all the states","553":"what state borders the state with the smallest population","554":"Question Answering publications","555":"How many papers are about deep learning ?","556":"Papers by Peter Mertens and Dina Barbian","557":"How many papers does Ed Desmond have in Semantic Parsing area ?","558":"Peter Mertens and Dina Barbian as co-authors","559":"how many papers has Christopher D. Manning written ?","560":"keyphrases used by Luke Zettlemoyer .","561":"how many states border on the state whose capital is boston","562":"When does Michael Stonebraker publish the first VLDB paper ?","563":"what is the population of the largest state that borders texas","564":"papers on Parsing appeared at acl in 2012","565":"List of papers by subhasis chaudhuri","566":"Journal Papers by mohammad rastegari","567":"what is the area of the smallest state","568":"papers about Parsing in acl 2012","569":"what is the highest point of the state with the largest area","570":"what is the longest river in the smallest state in the usa","571":"how many Parsing papers did acl 2012 have ?","572":"which papers in acl 2012 had Parsing in them ?","573":"Where did li dong publish in 2016 ?","574":"Keyphrases used by Christof Dallermassl in 2000","575":"what states have a capital that is the highest point in the state","576":"what is the area of the states","577":"acl papers in 2012 about Parsing","578":"what is the largest city in states that border california","579":"List prominent scholars in syntactic parsing ?","580":"Which papers have Peter Mertens and Dina Barbian as co-authors ?","581":"How many papers has David M. Blei published in AISTATS ?","582":"When did Peter Mertens and Dina Barbian collaborate ?","583":"what is the capital of the largest state","584":"What papers have Peter Mertens and Dina Barbian written ?","585":"Parsing papers from acl 2012","586":"Liwen Xiong publication 2015","587":"papers at NIPS related to TAIL","588":"What papers did Liwen Xiong publish last year ?","589":"are there any monte carlo simulation papers since 2011 ?","590":"how many states have cities named springfield","591":"how many papers has Christopher D. Manning published ?","592":"author published acl 2016","593":"papers related to Question Answering","594":"how long is the shortest river in the usa","595":"how many parsing papers in ACL 2014","596":"what states border states which the mississippi runs through","597":"List of authors acl 2016","598":"how many major cities are in texas","599":"How many citation noah a smith has ?","600":"which states have a river","601":"How many papers are related to deep learning ?","602":"papers by Peter Mertens and Dina Barbian","603":"Where did li dong publish in 2016","604":"papers on Question Answering experiments","605":"keyphrases used by Christof Dallermassl in 2000","606":"list papers that used Question Answering","607":"How many citations does noah a smith have","608":"Does brian curless do convolution ?","609":"List papers that has keyword Question Answering","610":"What was oren etzioni 's latest paper ?","611":"what rivers flow through the state with the largest population","612":"top author in syntactic parsing","613":"what is the largest of the state that the rio grande runs through","614":"conference papers of subhasis chaudhuri","615":"how many papers does Mirella Lapata cite","616":"which rivers run through states that border the state with the capital atlanta","617":"How many papers does Christopher D. Manning have","618":"list papers by subhasis chaudhuri","619":"how many people live in the smallest state bordering wyoming","620":"What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?","621":"which is the density of the state that the largest river in the united states runs through","622":"Show me chi papers .","623":"papers about TAIL published at NIPS","624":"which states border the state with the smallest area","625":"What papers talk about Question Answering ?","626":"How many papers David M. Blei has in AISTATS ?","627":"how many papers does David M. Blei have in AISTATS ?","628":"what is the size of the largest state in the usa","629":"what are the major cities in the smallest state in the us","630":"where is the highest mountain of the united states","631":"keyphrases by Luke Zettlemoyer","632":"papers by sharon goldwater ?","633":"how many citations does noah a smith have ?","634":"papers by Liwen Xiong in 2015","635":"how many major cities are in states bordering nebraska","636":"what is the population density in the state with capital austin","637":"What conferences does Daniella Coelho submit to ?","638":"give me the keywords used by Luke Zettlemoyer","639":"what is the shortest river in the us","640":"what is the length of the colorado river in texas","641":"What are the papers of brian curless in convolution ?","642":"papers with Question Answering in keyphrases","643":"who has the most publications in syntactic parsing ?","644":"Have Peter Mertens and Dina Barbian written a paper together ?","645":"papers written by sharon goldwater","646":"which states does not border texas","647":"what are the major rivers in the us","648":"What is oren etzioni 's latest paper ?","649":"number of citations of noah a smith","650":"what is capital of the state with the lowest point","651":"How many co-authors has Mark Steedman had ?","652":"papers that mention Question Answering","653":"what is the population of the capital of the smallest state","654":"papers written by Peter Mertens and Dina Barbian","655":"how high is the highest point in the largest state","656":"Papers authored by sharon goldwater","657":"which state has the highest point","658":"which state is the largest city in montana in","659":"how many parsing papers were published at ACL 2014 ?","660":"in which state does the highest point in usa exist","661":"Which paper should I read about dependent types ?","662":"how many rivers are there in us","663":"acl papers in 2012 in Parsing","664":"what is the largest state that borders the state with the highest population","665":"Liwen Xiong 's papers in 2015 ?","666":"Papers written by sharon goldwater","667":"How many papers has Christopher D. Manning written ?","668":"how many David M. Blei papers are in AISTATS ?","669":"data sets for semantic parsing","670":"monte carlo simulation papers since 2011","671":"How many paper does Christopher D. Manning have ?","672":"What conferences does Daniella Coelho publish in ?","673":"what is the name of the state with the lowest point","674":"In which conferences does Daniella Coelho typically publish ?","675":"TAIL papers in NIPS","676":"what states border states that border states that border states that border texas","677":"what states have rivers running through them","678":"name the 50 capitals in the usa","679":"how many rivers run through the states bordering colorado","680":"At which conferences does Daniella Coelho publish ?","681":"what states does the shortest river run through","682":"what states capital is salem","683":"best paper in TACL 2014 ?","684":"papers for Question Answering","685":"which rivers run through the state with the lowest elevation in the usa","686":"machine networks for one shot learning","687":"papers by sharon goldwater","688":"list papers published by balakrishnan prabhakaran","689":"what is the height of mount mckinley","690":"who published at acl 2016 ?","691":"How many papers did David M. Blei publish at AISTATS ?","692":"List all academic papers on machine networks for one shot learning","693":"What papers have been written by Peter Mertens and Dina Barbian ?","694":"which is the highest peak not in alaska","695":"recent papers written by sanjeev arora","696":"topics used by Luke Zettlemoyer","697":"papers that are coauthored by Peter Mertens and Dina Barbian","698":"brian curless 's paper about convolution","699":"Papers by sharon goldwater","700":"brian curless convolution paper","701":"papers on Parsing appeared at acl last year","702":"how many rivers are in the state with the highest point.","703":"name all the lakes of us","704":"how many cities does texas have","705":"what is the shortest river in the usa","706":"Datasets with semantic parsing information","707":"Has Christopher D. Manning published any papers ?","708":"how many states does the missouri river flow through","709":"which state has the lowest elevation","710":"what is the capital of the state with the highest elevation","711":"list papers published in chi","712":"What papers has sharon goldwater written ?","713":"What papers has Liwen Xiong written in 2015","714":"Question Answering research papers","715":"what are the major lakes in united states","716":"monte carlo simulation papers published after 2011","717":"what is the capital of the state with the highest point","718":"Papers about Question Answering","719":"what is the largest city in a state that borders california","720":"brian curless 's papers on convolution","721":"what is the population of the capital of the largest state through which the mississippi runs","722":"what state has the capital salem","723":"papers coauthored by Peter Mertens and Dina Barbian","724":"What has sharon goldwater published ?","725":"papers written by authors Peter Mertens and Dina Barbian","726":"where is mount whitney","727":"Question Answering experiments","728":"monte carlo simulation papers later than 2011","729":"chi","730":"what is the total population of the states that border texas","731":"datasets for semantic parsing","732":"what are the states that border the state with the greatest population","733":"what states border the state with the smallest area","734":"how many big cities are in texas","735":"what is the lowest point of the state with the largest area","736":"What did Liwen Xiong published in 2015 ?","737":"what is the population density of the state with the smallest population","738":"how many major cities are there in texas","739":"what papers did chi publish ?","740":"Does Peter Mertens ever collaborated with Dina Barbian ?","741":"which EMNLP 2010 papers have the most citations ?","742":"where is the smallest city","743":"how many states have a city named springfield","744":"what states border states that border the state with the largest population","745":"how many major rivers cross ohio","746":"how many states border the largest state","747":"Which paper from EMNLP 2010 was cited most ?","748":"how many states does the missouri river run through","749":"Show me Question Answering papers .","750":"monte carlo simulation later than 2011","751":"how many states border the mississippi river","752":"what states contain at least one major rivers","753":"papers by brian curless in convolution topic","754":"what state has the largest urban population","755":"most cited EMNLP 2010 papers","756":"what papers are published by Liwen Xiong in 2015","757":"conferences that Daniella Coelho has published in","758":"what is the state that contains the highest point","759":"papers about Question Answering","760":"convolution papers by brian curless","761":"what is the average population per square km in pennsylvania","762":"List of authors in acl 2016","763":"what are the papers that have Peter Mertens and Dina Barbian as co-authors","764":"what are the lakes in states bordering texas","765":"what keywords are used by Luke Zettlemoyer","766":"top dependent types papers","767":"List the papers on TAIL that were published in NIPS","768":"How many papers did Mirella Lapata cite ?","769":"List the popular publications on dependent types","770":"who wrote the most papers on syntactic parsing ?","771":"where are mountains","772":"what is the population of the capital of the largest state","773":"what is the elevation of death valley","774":"what is the biggest american city in a state with a river","775":"who has written the most papers on syntactic parsing ?","776":"show me papers by sharon goldwater .","777":"What topic does Luke Zettlemoyer write about ?","778":"keyphrases used by Luke S Zettlemoyer for each year","779":"what is the average population of the us by state","780":"what is the smallest city of the smallest state in the us","781":"how many states border colorado and border new mexico","782":"What papers are authored by sharon goldwater ?","783":"what is the highest point in the smallest state","784":"What conferences did li dong submit to in 2016 ?","785":"how many cities are in texas","786":"what is the largest state traversed by the rio grande river","787":"what state has the shortest river","788":"how many parsing papers appeared in the proceeeding of ACL 2014 ?","789":"How many times was noah a smith cited ?","790":"what rivers flow through states that border the state with the largest population","791":"how many states have major rivers","792":"what author is most cited ?","793":"How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?","794":"what are the collaborations of Peter Mertens and Dina Barbian ?","795":"which states have a major city named austin","796":"How many papers are there ?","797":"which is the shortest river","798":"Papers from Liwen Xiong in 2015","799":"What conference does Daniella Coelho publish in ?","800":"what did sharon goldwater write ?","801":"how many states does the missouri run through","802":"which papers has sharon goldwater written ?","803":"what is the longest river in the state with the highest point","804":"how many papers use ImageNet ?","805":"papers brian curless wrote about convolution","806":"what states border states that border states that border florida","807":"What papers were published at acl in 2012 were about Parsing ?","808":"what is the area of the largest state","809":"how many states have a city called springfield","810":"papers by brian curless about convolution","811":"number of papers written by Christopher D. Manning","812":"how many states have cities or towns named springfield","813":"Papers written by Liwen Xiong in 2015","814":"what is the height of the highest mountain in texas","815":"what is the state with the highest elevation in the united states","816":"Papers on chi","817":"papers published in 2015 by Liwen Xiong","818":"papers at chi","819":"how many cities named austin are there in the usa","820":"How many papers has Christopher D. Manning published ?","821":"how many states in the us does the shortest river run through","822":"What papers has written by sharon goldwater ?","823":"how many papers are based on ImageNet","824":"what states border texas and have a major river","825":"How many papers has Christopher D. Manning ?","826":"What papers have been written by Peter Mertens and Dina Barbian .","827":"Has mirella lapata written any papers in 2016 ?","828":"Find the users who have given tips on Pet Groomers","829":"Authors of papers on sensor fusion","830":"List all the businesses with more than 4.5 stars","831":"parsing papers with most citations","832":"I want the co-authors of papers on Machine Translation Output with Philipp Koehn","833":"what datasets did jitendra malik use ?","834":"who published the most papers in CVPR 2007","835":"What authors wrote papers about Bacterial Wilt in 2016 ?","836":"Find all restaurant reviewed by Patrick in \" Dallas \"","837":"in what journals does linda shapiro publish ?","838":"find the total checkins in Italian Delis in each state on Sunday","839":"How many reviews has Michelle written in March 2014 ?","840":"ACL papers in 2016 with neural attention in the title","841":"List all 5 star Italian restaurant","842":"co-authors of Noah A Smith","843":"authors working on ImageNet","844":"what was the first deep learning paper ?","845":"datasets in semantic parsing papers","846":"What year did Ye Cao publish the most papers","847":"what year had the most NIPS papers ?","848":"Find all Italian restaurant in the Meadowood neighbourhood of Madison","849":"What is the total likes on tips from Niloofar","850":"What is the most recent paper of deep learning ?","851":"What are some recent papers written in deep learning ?","852":"Does ali farhadi have a paper in eccv in 2016 ?","853":"what paper has Richard Ladner published in chi journal ?","854":"How many papers related to deep learning cited the dataset ImageNet ?","855":"who does Noah A Smith author with ?","856":"list all the reviews by Niloofar","857":"papers of ali farhadi in eccv 2016","858":"What is the most cited paper at sigcomm ?","859":"who published the most in semantic parsing after 2005 ?","860":"how many papers in nature communications 2015","861":"latest deep learning papers","862":"Find all businesses in Texas with a rating below 2","863":"find the total checkins in Moroccan restaurant in \" Los Angeles \"","864":"Find all the reviews for all Pet Groomers with more than 100 reviews","865":"How many papers does jamie callan publish each year ?","866":"What were the papers published at pldi 2015 ?","867":"find the number of restaurant rated more than 3.5","868":"eccv 2014 papers using ImageNet","869":"How many tips has Michelle written in April","870":"Find all users who reviewed restaurant \" Mesa Grill \"","871":"List of papers in pldi 2015","872":"Find all Dallas restaurant with a rating above 4.5","873":"What was the topic of best paper in 2012 EMNLP-CoNLL ?","874":"find the number of reviews written for \" Cafe Zinho \" restaurant in Texas","875":"Datasets by jitendra malik","876":"conferences for Trophic Cascade","877":"How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?","878":"what is ohad shamir 's most cited paper ?","879":"popular topics at NIPS 2015","880":"Find all tips about \" Vintner Grill \" that received more than 9 likes","881":"which papers in eccv 2014 use ImageNet ?","882":"question answering 2016 papers","883":"papers that use WebKB","884":"What has Richard Ladner published at chi ?","885":"most cited papers for parsing","886":"how many papers does sigir have ?","887":"which ACL 2014 papers about Parsing used Jeopardy! Questions ?","888":"2014 papers","889":"how many ACL 2012 papers have more than 7 citations ?","890":"How many papers in ACL 2015 ?","891":"Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars","892":"Most recent deep learning conference ?","893":"in what venues does Peter Mertens publish ?","894":"character recognition papers earlier than 2010","895":"Current research on deep learning","896":"Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"","897":"When was benjamin mako hill 's first paper written ?","898":"How many papers are presented in nature communications 2015 ?","899":"List all users who reviewed businesses that are restaurant .","900":"datasets used by semantic parsing papers","901":"journal papers for instance segmentation","902":"List all businesses that are restaurant in Pennsylvania .","903":"List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison","904":"ACL papers with less than 5 citations","905":"Eric C. Kerrigan 's Liquid Automatica paper","906":"What are the best NLP conferences ?","907":"Where does Peter Mertens publish ?","908":"papers in pldi 2015","909":"What journals are Takashi Matsumoto 's articles published in ?","910":"What are the 5 most recent papers of Mirella Lapata ?","911":"datasets mentioned at ACL","912":"topics at ACL 2014","913":"How many people reviewed \" Bistro Di Napoli \" in 2015 ?","914":"Does Richard Ladner publish in chi ?","915":"What is the most cited paper of ohad shamir ?","916":"Who are Noah A Smith 's coauthors","917":"How many escape games exist in Madison","918":"how many papers accepted in nature communications 2015","919":"first deep learning paper","920":"How many publications were added to the Cell journal this year ?","921":"who has the most papers in semantic parsing after 2005 ?","922":"when was the first deep learning paper published ?","923":"papers typically cited by parsing papers","924":"When was benjamin mako hill 's first publication ?","925":"Find all restaurant with Valet Service in Dallas Texas","926":"papers with at least 5 citations","927":"Find all the tips from a user who has written a review in 2012","928":"Find all restaurant that serve Seafood in \" Los Angeles \"","929":"Who published the most papers in 2007 at CVPR ?","930":"what are some syntactic parsing papers that chris dyer did not write ?","931":"papers in semantic parsing for each year","932":"papers before 2010 about character recognition","933":"List all the Seafood restaurant in \" Los Angeles \"","934":"the papers at eccv in 2014 using ImageNet dataset","935":"Who wrote on the topic of Bacterial Wilt in 2016 ?","936":"what keyphrases get most citations ?","937":"how is the most prolific author in chi ?","938":"newest deep learning papers","939":"List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .","940":"Number of ACL papers with more than 2 citations","941":"List the journals related to Temporal Data","942":"What datasets have jitendra malik used","943":"which year had the most NIPS papers ?","944":"citations for Daniel Jurafsky","945":"keyphrases used by dan klein in his emnlp papers","946":"which papers used WebKB ?","947":"Find all states in which there is a Whataburger","948":"In what year did Ye Cao publish the most papers","949":"pldi 2015 conference","950":"What is the total likes on tips about \" Cafe Zinho \"","951":"how many papers jamie callan published each year ?","952":"number of ACL papers by author","953":"semantic parsing datasets","954":"list all the businesses which Niloofar rated 5","955":"List all the restaurant rated more than 3.5","956":"parsing top papers","957":"Find the total number of reviews written in March","958":"Parsing papers from ACL 2014 using Jeopardy! Questions","959":"pldi papers 2015","960":"what paper has Richard Ladner published in chi ?","961":"List all the reviews by Michelle for Italian restaurant","962":"number of papers by year from jamie callan","963":"List all user ids with name Michelle","964":"Which journals did linda shapiro submit papers to ?","965":"datasets used for semantic parsing","966":"jamie callan 's publications by year","967":"Find the number of tips written in each month","968":"List the papers that used WebKB dataset","969":"who publishes in NIPS ?","970":"datasets in papers about semantic parsing","971":"find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday","972":"papers that used WebKB","973":"Papers from pldi 2015 conference","974":"datasets used in papers written by jitendra malik ?","975":"most common topics at NIPS 2015","976":"Give me the papers written by Su-In Lee before 2012 .","977":"What is ohad shamir 's highest cited paper ?","978":"papers published in the last year","979":"How many papers were written on convolutional neural networks in the past year ?","980":"2014 papers using ImageNet","981":"What is the highest cited paper by ohad shamir ?","982":"count of ACL papers by author","983":"what are the parsing papers that have the most citations ?","984":"How many restaurant are there in the Hazelwood district of Dallas ?","985":"authors who collaborated with Noah A Smith","986":"List all the neighbourhoods with Italian restaurant in Madison","987":"List all businesses with rating 3.5","988":"hot topics at NIPS 2015","989":"what is the most cited paper of ohad shamir ?","990":"who published the most at chi","991":"Who is a coauthor with Noah A Smith ?","992":"When does Michael Stonebraker publish the GIS Database paper ?","993":"How many papers did michael i. jordan publish in 2016 ?","994":"Who publishes in sensor fusion ?","995":"Find all users who have written tips for \" Barrio Cafe \" in 2015","996":"Which authors published papers in 2015 ?","997":"Return me the number of businesses that are restaurant .","998":"conferences in 2013","999":"authors with at least 5 papers","1000":"papers with more than 10 citations","1001":"Find the number of users called Michelle","1002":"What is the most popular paper this year in CVPR ?","1003":"coauthors of Noah A Smith","1004":"what datasets did jitendra malik use in his papers ?","1005":"who writes papers with Noah A Smith ?","1006":"How many papers does Samuel Madden publish outside of PVLDB area ?","1007":"what keyphrase does Brian DeRenzi write about that gets most citations ?","1008":"What neighbourhood is restaurant \" Flat Top Grill \" in ?","1009":"what datasets do papers at ACL use most ?","1010":"What are all the breweries in \" Los Angeles \" ?","1011":"top authors working on ImageNet ?","1012":"how many papers on convolutional neural networks have been published in the past year ?","1013":"Return me the number of tips that are written by Michelle in 2010 .","1014":"How many papers was published in nature communications in 2015","1015":"papers about WebKB","1016":"How many papers on nature communications in 2015 ?","1017":"who else was on the paper with Ameet Soni and Ras Bodik ?","1018":"pldi best paper award 2015","1019":"How many reviews does \" Acacia Cafe \" have ?","1020":"What papers were published during the conference pldi 2015 ?","1021":"Paper on parsing with most citations","1022":"List the addresses of all Walmart in \" Los Angeles \"","1023":"number of papers published in ACL 2015","1024":"most popular topics at NIPS 2015","1025":"How many papers were accepted at nature communications 2015 ?","1026":"pldi 2015 list of papers","1027":"How many papers were at nature communications 2015 ?","1028":"How many papers did michael i. jordan publish in 2016","1029":"which journal did Donald E Knuth publish his last paper ?","1030":"In what scholarly journals does Takashi Matsumoto publish ?","1031":"most cited parsing papers","1032":"Which papers were accepted in pldi 2015 ?","1033":"How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?","1034":"how many papers appeared at nature communications last year","1035":"How many papers published in nature communications in 2015 ?","1036":"How many neighbourhoods have a business with rating 5 in Madison ?","1037":"what ACL papers have less than 5 citations ?","1038":"How many Egyptian restaurant are there in Edinburgh ?","1039":"How many citations does Dan Makumbi 's Genetic Identity paper have ?","1040":"What are some papers dealing with Semantic Data in YAGO ?","1041":"Who has written the most papers at chi ?","1042":"What are recent papers on deep learning ?","1043":"what is the average rating given in Michelle reviews","1044":"Which papers cite Daniel Jurafsky ?","1045":"most published author at CVPR 2007","1046":"papers published in eccv 2016 by ali farhadi","1047":"How many Target are there in \" Los Angeles \" ?","1048":"Find users whose average review rating is below 3","1049":"what conferences are related to Trophic Cascade","1050":"people working on sensor fusion","1051":"What papers does Richard Ladner have in chi ?","1052":"what is the number of restaurant in Texas","1053":"Papers on WebKB","1054":"who does Noah A Smith collaborate with ?","1055":"When was deep learning proposed ?","1056":"Return me the number of cities that has \" Panda Express \" .","1057":"How many tips have been written in 2015","1058":"who are all the co-authors of Noah A Smith ?","1059":"find the number of escape games in Madison","1060":"How many papers were written on the convolutional neural networks this year ?","1061":"What is the number of restaurant in Pittsburgh rated 4.5","1062":"Parsing papers from ACL 2014 that used Jeopardy! Questions","1063":"papers citing Daniel Jurafsky","1064":"how many ACL papers by author","1065":"List top papers for parsing","1066":"Find all cities which has a \" Taj Mahal \" .","1067":"What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?","1068":"How many papers used ImageNet datasets in cvpr ?","1069":"How many Starbucks are there in Dallas Texas ?","1070":"main topics of work by Brian DeRenzi","1071":"papers cited by at least 5 papers","1072":"how many papers are in sigir ?","1073":"new deep learning papers","1074":"Find all Bars reviewed by Patrick","1075":"List the journals published in March , 2011","1076":"How many papers were written on convolutional neural networks in 2016 ?","1077":"venue for Trophic Cascade","1078":"how many papers by dan klein are cited by michael i. jordan","1079":"What is the name of Ranjit Jhala 's Liquid Haskell paper ?","1080":"which neighbourhood has the most number of businesses in Madison","1081":"What venues are for Neuroscience ?","1082":"Find all restaurant Seafood in Los Angeles","1083":"who does Noah A Smith work with ?","1084":"Parsing papers using Jeopardy! Questions published at ACL 2014","1085":"Find all Apple Store in \" Los Angeles \"","1086":"what papers are published in pldi 2015","1087":"Which restaurant in Dallas were reviewed by user Patrick ?","1088":"who is the most cited author at CVPR ?","1089":"Find all cities in which there is a restaurant called \" MGM Grand Buffet \"","1090":"Find the total checkins in \" Brighton Heights \" neighbourhood","1091":"number of papers in sigir conference","1092":"Find all Mexican restaurant in Dallas with at least 3.5 stars","1093":"What are the papers from pldi 2015 ?","1094":"Papers from pldi 2015 ?","1095":"Find all Bars reviewed by Patrick with at least 3 stars","1096":"datasets used for evaluating semantic parsing","1097":"how many papers published in nature communications 2015 ?","1098":"conferences that mention ImageNet","1099":"what are syntactic parsing papers not written by chris dyer","1100":"Who writes a lot of papers in Machine Learning ?","1101":"papers about Parsing that used Jeopardy! Questions and were published at ACL 2014","1102":"How many people reviewed restaurant \" Vintner Grill \" in 2010 ?","1103":"who publishes papers about sensor fusion","1104":"list all the businesses which have a review by Niloofar","1105":"Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood","1106":"Find all reviews for businesses rated 2.5","1107":"Find all breweries in Los Angeles","1108":"What is the venue of Fracture of acrylic bone cement ?","1109":"who published papers in CVPR 2007","1110":"who wrote papers in 2015","1111":"find all the restaurant in Pennsylvania","1112":"Find all users who have written tips about businesses in Dallas","1113":"what year had the most number of NIPS papers ?","1114":"what papers were published in Academic radiology in 1995 ?","1115":"when were most NIPS papers published ?","1116":"author who wrote papers with Noah A Smith","1117":"Who cites Daniel A Reed most ?","1118":"How many Bars in Dallas have a rating above 3.5 ?","1119":"How many businesses has Michelle reviewed in 2010 ?","1120":"Find all tips for \" Cafe Zinho \" in Texas .","1121":"What is the number of escape games in \" Madison \" ?","1122":"In 2010 what journal published an article about Trophic Cascade ?","1123":"How many businesses in \" San Diego \" has Christine reviewed in 2010 ?","1124":"most cited papers on parsing","1125":"Show me some recent papers on deep learning ?","1126":"How many papers were published on convolutional neural networks in 2016 ?","1127":"Who are Noah A Smith 's coauthors ?","1128":"who authored papers at NIPS ?","1129":"WebKB papers","1130":"find the total checkins in Moroccan restaurant in \" Los Angeles \" per day","1131":"How many papers were published in nature communications in 2015 ?","1132":"What years did Pedro Domingos publish papers in ?","1133":"What is the average rating of reviews written in year 2014 ?","1134":"Papers that use the WebKB dataset","1135":"Find all reviews by Patrick with a rating above 4","1136":"what topics does oren etzioni write about most ?","1137":"who wrote the most CVPR papers in 2007","1138":"how many of dan klein 's papers cite michael i. jordan","1139":"character recognition papers before 2010","1140":"How many Bars in \" Dallas \" have a rating above 3.5 ?","1141":"Find all breweries in \" Los Angeles \"","1142":"what datasets are used in papers by jitendra malik","1143":"how is the most cited author in CVPR ?","1144":"What are the latest publications on deep learning ?","1145":"Who are Noah A Smith 's co-authors","1146":"What is the paper with the most citation about Artificial Intelligence ?","1147":"Which paper did Richard Ladner present at chi ?","1148":"who wrote the most papers for CVPR 2007","1149":"what papers have fewer than 5 citations by ACL papers","1150":"Find all Mexican restaurant in Dallas with a rating above 3.5","1151":"What was the conference name that approved Trophic Cascade ?","1152":"which venue publishes the most papers about deep learning","1153":"Find all reviews about \" Kabob Palace \" in year 2014","1154":"How many papers were written on question answering in 2011 through 2016 ?","1155":"papers using WebKB","1156":"Who are the prominent researchers in Neutralizing Antibody in 2012 ?","1157":"What papers has Richard Ladner written at chi ?","1158":"which topics were most popular at NIPS 2015","1159":"What articles have been published since 2006 about the effects of juicing for cancer patients ?","1160":"When did Michael Stonebraker publish his GIS Database paper ?","1161":"How many papers were published in nature communications 2015 conference ?","1162":"papers by Richard Ladner published at chi","1163":"what papers do parsing papers typically cite ?","1164":"Fetch me the most cited publications for Artificial Intelligence","1165":"what datasets were used by jitendra malik ?","1166":"What is the most cited paper by ohad shamir ?","1167":"What is the total likes on tips from Niloofar about \" Cafe Zinho \"","1168":"When did Luke S Zettlemoyer publish ?","1169":"How many reviews has Adrienne written ?","1170":"How many papers does michael i. jordan have in 2016 ?","1171":"How many papers has Noah Smith co-authored since 2009 ?","1172":"who has papers at NIPS ?","1173":"What is the paper about parsing of the most citation ?","1174":"are there any syntactic parsing papers not written by chris dyer ?","1175":"Who cites Daniel A Reed the most","1176":"Who has published more papers in chi ?","1177":"In what years did Pedro Domingos publish a paper ?","1178":"papers that were not published in the last year","1179":"List all users who reviewed businesses that are restaurant in 2010 .","1180":"what keywords are used by papers at uist","1181":"how many papers are published in sigir ?","1182":"What are all the publication titles by Donald E Knuth ?","1183":"what year was the first deep learning paper published ?","1184":"recent deep learning papers","1185":"large-scale datasets used in semantic parsing","1186":"find all cities which has a \" Taj Mahal \" restaurant","1187":"How many reviews has Niloofar written in 2015","1188":"Who wrote sensor fusion ?","1189":"What papers were written on question answering this year ?","1190":"character recognition papers from before 2010","1191":"How many authors published at sigcse in 2010 ?","1192":"What is the number of escape games in Madison","1193":"papers from 2014","1194":"ACL papers by author","1195":"papers published at pldi 2015","1196":"What papers cite Daniel Jurafsky ?","1197":"Where did sergey levine publish his last paper ?","1198":"When did ameet soni publish ?","1199":"List today 's journals","1200":"who does oren etzioni cite","1201":"Find journals about Temporal Data .","1202":"What is the number of checkins for \" Cafe Zinho \" on Friday","1203":"Euclidean Distance papers citing NIPS papers","1204":"How many escape games are there in Madison ?","1205":"papers about character recognition from before 2010","1206":"What paper did Michael Armstrong wrote in the 90s ?","1207":"syntactic parsing papers not written by chris dyer","1208":"How many users have reviewed Irish Pub in Dallas ?","1209":"NIPS authors","1210":"Find the cities of businesses rated below 1.5","1211":"When was Michael Stonebraker GIS Database published ?","1212":"topics popular at NIPS 2015","1213":"List all the reviews which rated a business less than 1","1214":"parsing papers that have the most citations","1215":"pldi papers in 2015","1216":"highly cited parsing papers","1217":"who are the authors at NIPS ?","1218":"who has written the most papers on semantic parsing since 2005 ?","1219":"How many tips has Michelle written in 2010","1220":"how many users reviewed \" Sushi Too \" in Pittsburgh","1221":"what papers does oren etzioni cite","1222":"When was the last time Mary Crainie published a paper ?","1223":"How many articles were published in the Cell journal in 2015 ?","1224":"What journals has Takashi Matsumoto published in ?","1225":"What paper by ohad shamir has the most citation ?","1226":"Give me all the Moroccan restaurant in Texas","1227":"which business has the most number of checkins","1228":"What papers were written on question answering in 2016 ?","1229":"where does Peter Mertens publish ?","1230":"the papers on semantic parsing by li dong at acl in 2016","1231":"Return me the number of tips that are written by Michelle .","1232":"How many papers related to deep reinforcement learning in nips ?","1233":"Most cited papers on parsing","1234":"What was the first paper on deep learning written ?","1235":"Who has coauthored with Noah A Smith ?","1236":"papers from pldi 2015","1237":"Find the average number of checkins in restaurant \" Barrio Cafe \" per day","1238":"What is the year of publication of \" A Switching Architecture For ISDN \" ?","1239":"datasets with semantic parsing","1240":"How many citations does luke zettlemoyer have per year","1241":"what papers have fewer than 5 citations by ACL papers ?","1242":"return me the author who has the most number of papers containing keyword \" Relational Database \" .","1243":"Find all Sci-Fi produced in year 2010","1244":"where are some restaurants good for arabic food in mountain view ?","1245":"return me the keywords in PVLDB .","1246":"return me the paper in PVLDB with more than 200 citations .","1247":"return me the keyword, which have been contained by the most number of papers in VLDB conference .","1248":"What is the number of movies produced in 2013 ?","1249":"return me the authors who have the most number of papers in PVLDB .","1250":"return me the references of \" Making database systems usable \" .","1251":"how many denny are there in the bay area ?","1252":"return me the number of the keywords of \" Making database systems usable \" .","1253":"how many chinese restaurants are there in the bay area ?","1254":"What year is the movie \" The Imitation Game \" from ?","1255":"return me the keywords related to \" H. V. Jagadish \" .","1256":"return me the number of papers in PVLDB in \" University of Michigan \" .","1257":"where can we find a restaurant in alameda ?","1258":"what are some good restaurants in alameda ?","1259":"give me a good place in mountain view for arabic food ?","1260":"return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .","1261":"return me the citations of \" Making database systems usable \" .","1262":"How many actors from China have acted in \" Rush Hour 3 \"","1263":"return me the paper after 2000 with the most citations .","1264":"give me some good arabics on buchanan in san francisco ?","1265":"return me the number of authors of \" Making database systems usable \" .","1266":"return me the homepage of the VLDB conference .","1267":"return me the number of citations of \" Making database systems usable \" before 2010 .","1268":"return me the papers on VLDB conference after 2000 .","1269":"List all the directors of movies about nuclear weapons","1270":"what are some good places for arabic on buchanan in san francisco ?","1271":"return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .","1272":"Which actors were born in Tehran","1273":"Where is the birth place of \" Kevin Spacey \"","1274":"return me the paper with the most citations .","1275":"What year was \" Benedict Cumberbatch \" born ?","1276":"return me the number of keywords in the papers of \" University of Michigan \" .","1277":"What was the budget of the movie Juno from 2007 ?","1278":"return me the paper in Databases area with more than 200 citations .","1279":"return me the domain where \" H. V. Jagadish \" is focused .","1280":"return me the authors of \" Making database systems usable \" .","1281":"Find all movies written by \" Matt Damon \"","1282":"return me the papers by \" H. V. Jagadish \" on PVLDB .","1283":"give me some restaurants good for arabic food in mountain view ?","1284":"return me the number of journals which have papers by \" H. V. Jagadish \" .","1285":"return me the number of keywords in PVLDB .","1286":"return me the total citations of all the papers in PVLDB .","1287":"return me the number of papers on VLDB conference .","1288":"How many actors were born in \" Los Angeles \" after 2000 ?","1289":"Which producer has worked with the most number of directors ?","1290":"What movies have the same director as the movie \" Revolutionary Road \" ?","1291":"return me the total citations of papers in PVLDB in 2005 .","1292":"Find the business which has the most number of categories","1293":"what is a good restaurant in alameda ?","1294":"return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .","1295":"Find the name and budget of the latest movie by \" Quentin Tarantino \"","1296":"return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .","1297":"return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .","1298":"Give me the best place in san francisco for french food ?","1299":"How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?","1300":"What is the number of movies directed by \" Woody Allen \" per year ?","1301":"how many chinese places are there in the bay area ?","1302":"return me the number of organizations in Databases area .","1303":"return me the authors who have more than 10 papers in PVLDB .","1304":"give me the best restaurant in bay area for american food ?","1305":"give me a good arabic restaurant in mountain view ?","1306":"where is a good restaurant in the yosemite and mono lake area for french food ?","1307":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .","1308":"give me a restaurant on bethel island rd in bethel island ?","1309":"return me the authors who have more than 10 papers in the VLDB conference .","1310":"return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .","1311":"return me all the organizations .","1312":"return me the year of \" Making database systems usable \"","1313":"return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .","1314":"return me the year of \" Making database systems usable \" .","1315":"give me some good places on buchanan in san francisco for arabic food ?","1316":"return me the papers on PVLDB after 2000 .","1317":"return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .","1318":"give me a good arabic in mountain view ?","1319":"return me the area of PVLDB .","1320":"give me a good restaurant on buchanan in san francisco for arabic food ?","1321":"where is a good arabic in mountain view ?","1322":"where is the best american in the bay area ?","1323":"return me the number of organizations in Databases area located in \" North America \" .","1324":"where is jamerican cuisine in san francisco ?","1325":"return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .","1326":"What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?","1327":"return me the journal, which has the most number of papers containing keyword \" Relational Database \" .","1328":"Who is the director of the movie \" James Bond \" ?","1329":"give me the best american restaurant in the bay area ?","1330":"return me the authors who have cooperated with \" H. V. Jagadish \" .","1331":"give me a restaurant in the bay area ?","1332":"return me the number of keywords in VLDB conference .","1333":"return me the paper after 2000 with more than 200 citations .","1334":"Who acts \" Olivia Pope \" in the series Scandal ?","1335":"Find the actors who played in the latest movie by \" Quentin Tarantino \"","1336":"return me all the organizations in Databases area .","1337":"What is the best french in san francisco ?","1338":"what is the best restaurant in the bay area for american food ?","1339":"Find all movies featuring \" Woody Strode \" and \" Jason Robards \"","1340":"Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"","1341":"what are some good restaurants in the yosemite and mono lake area for french food ?","1342":"return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .","1343":"find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"","1344":"how many places for french food are there in palo alto ?","1345":"what is a good restaurant on bethel island rd in bethel island ?","1346":"return me the number of papers on VLDB conference after 2000 .","1347":"return me the papers by \" H. V. Jagadish \" after 2000 .","1348":"return me the conferences, which have papers by \" H. V. Jagadish \" .","1349":"Find all the female actors from Austin","1350":"where is jamerican cuisine ?","1351":"where can i eat some good arabic food on buchanan in san francisco ?","1352":"return me the paper after 2000 in Databases area with more than 200 citations .","1353":"return me the citations of each paper in the VLDB conference .","1354":"What are the major roles in the movie \" Daddy Long Legs \"","1355":"return me the papers in PVLDB containing keyword \" Keyword search \" .","1356":"return me the paper in VLDB conference with the most citations .","1357":"where can we find some restaurants on bethel island rd in bethel island ?","1358":"return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .","1359":"return me the citations of each paper in PVLDB .","1360":"return me the number of the organizations in \" North America \" .","1361":"Find all movies featuring \" Jason Robards \" and \" Woody Strode \"","1362":"return me the author who has the most number of papers in the VLDB conference .","1363":"return me the paper after 2000 in Databases area with the most citations .","1364":"give me some good arabics in mountain view ?","1365":"return me the number of keywords .","1366":"show me a good arabic restaurant in mountain view ?","1367":"return me the paper after 2000 in PVLDB with more than 200 citations .","1368":"where can i find a jamerican cuisine in san francisco ?","1369":"give me a good place in the yosemite and mono lake area for french food ?","1370":"return me the journal that has the most number of papers containing keyword \" Relational Database \" .","1371":"where is denny in the bay area ?","1372":"How many actors are in the movie \" Saving Private Ryan \" ?","1373":"return me the conference, which has the most number of papers containing keyword \" Relational Database \" .","1374":"Find all movies produced in 2015","1375":"what is the best french restaurant in san francisco ?","1376":"return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .","1377":"return me the keyword, which have been contained by the most number of papers in PVLDB .","1378":"return me the abstract of \" Making database systems usable \" .","1379":"where are some good arabics on buchanan in san francisco ?","1380":"return me the keywords, which have been contained by more than 100 papers in PVLDB .","1381":"Find all movies that star both \" Woody Strode \" and \" Jason Robards \"","1382":"Find all actors from Italy born after 1980","1383":"return me the papers by \" H. V. Jagadish \" on VLDB conference .","1384":"Find all movies directed by \" Steven Spielberg \" after 2006","1385":"where is a good french restaurant in the yosemite and mono lake area ?","1386":"In what year was \" Kevin Spacey \" born ?","1387":"give me some restaurants in alameda ?","1388":"what are some good restaurants in mountain view for arabic food ?","1389":"how many italian restaurants are in the yolo county ?","1390":"return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .","1391":"return me the number of papers in PVLDB containing keyword \" Keyword search \" .","1392":"return me the papers on VLDB conference .","1393":"Give me the name of all the actors from Afghanistan","1394":"List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played","1395":"return me all the researchers in Databases area in \" University of Michigan \" .","1396":"How many movies about Iraq war were produced in 2015 ?","1397":"where can i find a restaurant in the bay area ?","1398":"where can i eat french food in the bay area ?","1399":"return me the number of conferences which have papers by \" H. V. Jagadish \" .","1400":"return me the number of citations of \" Making database systems usable \" .","1401":"Find all actors born in Tehran","1402":"return me the papers by \" H. V. Jagadish \" .","1403":"where is a good place in mountain view for arabic food ?","1404":"In what year was \" Benedict Cumberbatch \" born","1405":"return me the authors who have cited the papers by \" H. V. Jagadish \" .","1406":"return me the paper in VLDB conference with more than 200 citations .","1407":"give me some good places for arabic in mountain view ?","1408":"return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .","1409":"give me a restaurant on buchanan in san francisco that serves good arabic food ?","1410":"What is the genre of the movie \" Jurassic Park \" ?","1411":"How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?","1412":"return me the number of papers in VLDB conference in \" University of Michigan \" .","1413":"who acted the role of \" Mr. Bean \"","1414":"which movie has the most number of actors from China ?","1415":"Find all movies about nuclear weapons","1416":"return me all the researchers in \" University of Michigan \" .","1417":"Find all movies featuring \" Robin Wright \"","1418":"how many places for chinese food are there in the bay area ?","1419":"What is the number of movies that \" Brad Pitt \" acts in per year ?","1420":"return me the paper in Databases area with the most citations .","1421":"return me the number of the organizations .","1422":"When was \" Kevin Spacey \" born ?","1423":"return me the number of authors who have papers in PVLDB .","1424":"Who directed the movie \" James Bond \" ?","1425":"give me a good restaurant in the bay area ?","1426":"return me the number of authors who have papers in the VLDB conference .","1427":"return me the conference that has the most number of papers containing keyword \" Relational Database \" .","1428":"where are some good arabic restaurants in mountain view ?","1429":"return me the papers in VLDB conference containing keyword \" Information Retrieval \" .","1430":"What is the nationality of \" Kevin Spacey \" ?","1431":"return me the number of authors who have cited the papers by \" H. V. Jagadish \" .","1432":"where is a good arabic restaurant in mountain view ?","1433":"Which movie had the character \" Daffy Duck \"","1434":"what are some good places for arabic in mountain view ?","1435":"return me the number of papers after 2000 in \" University of Michigan \" .","1436":"return me the number of papers on PVLDB .","1437":"Find all actors who are from Afghanistan","1438":"what is the best restaurant in bay area for american food ?","1439":"Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?","1440":"What are the movies related to nuclear weapons","1441":"Who is the writer of \" The Truman Show \"","1442":"return me the number of citations of \" Making database systems usable \" in each year .","1443":"return me the keywords in the papers of \" University of Michigan \" .","1444":"return me the total citations of papers in the VLDB conference in 2005 .","1445":"return me the keywords, which have been contained by more than 100 papers in VLDB conference .","1446":"where are some good arabics in mountain view ?","1447":"where is the best restaurant in bay area for american food ?","1448":"return me the paper with more than 200 citations .","1449":"return me the authors who have more than 10 papers containing keyword \" Relational Database \" .","1450":"Who are the actors born in \" Austin \" after 1980 ?","1451":"Find the producers of all movies in which \" Kate Winslet \" is an actor","1452":"return me the number of papers by \" H. V. Jagadish \" .","1453":"Give me the best restaurant in san francisco for french food ?","1454":"return me the number of papers in \" University of Michigan \" .","1455":"give me some restaurants good for french food in the yosemite and mono lake area ?","1456":"return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .","1457":"what are some good places in mountain view for arabic food ?","1458":"List all the Sci-Fi movies which released in 2010","1459":"return me the number of researchers in \" University of Michigan \" .","1460":"return me the organization \" H. V. Jagadish \" is in .","1461":"Find all actors born in \" Tehran \"","1462":"where is a jamerican cuisine in san francisco ?","1463":"give me some restaurants good for arabic food on buchanan in san francisco ?","1464":"Find all movies in which \" Robin Wright \" appears","1465":"Find all actors who acted in the same movie as \" Tom Hanks \"","1466":"return me the number of papers by \" H. V. Jagadish \" on PVLDB .","1467":"where can we find some restaurants in alameda ?","1468":"return me the paper by \" H. V. Jagadish \" with more than 200 citations .","1469":"give me the best american in the bay area ?","1470":"What are all the movies featuring \" Robin Wright \" ?","1471":"what is the best american in the bay area ?","1472":"where can i eat some good arabic food in mountain view ?","1473":"return me the journals, which have papers by \" H. V. Jagadish \" .","1474":"return me the conference, which published \" Making database systems usable \" .","1475":"where is a good restaurant on buchanan in san francisco for arabic food ?","1476":"What is the number of actors in the movie \" Saving Private Ryan \" ?","1477":"return me the journal, which have the most number of papers by \" H. V. Jagadish \" .","1478":"return me the number of papers by \" H. V. Jagadish \" on VLDB conference .","1479":"return me the number of papers published in the VLDB conference in each year .","1480":"give me some good restaurants in the bay area ?","1481":"Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?","1482":"return me the number of authors who have papers containing keyword \" Relational Database \" .","1483":"return me the number of papers which contain the keyword \" Natural Language \" .","1484":"return me the number of papers published in the VLDB conference before 2000 .","1485":"return me all the papers in PVLDB in \" University of Michigan \" .","1486":"give me a restaurant in alameda ?","1487":"how many french restaurants are there in palo alto ?","1488":"Find all actors who were born in 1984","1489":"return me the authors who have papers in VLDB conference before 2002 after 1995 .","1490":"Give me the best french in san francisco ?","1491":"return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .","1492":"return me the authors who have papers in PVLDB 2010 .","1493":"return me all the keywords .","1494":"What are the series in which \" Scott Foley \" is an actor ?","1495":"return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .","1496":"return me all the papers in \" University of Michigan \" .","1497":"Find all the directors who are from Afghanistan","1498":"how many jamerican cuisine are there in santa cruz county ?","1499":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .","1500":"Who is the director of the tv series \" House of Cards \" from 2013 ?","1501":"How many movies did \" Steven Spielberg \" direct ?","1502":"where is the director of \" The Past \" from","1503":"give me a good arabic restaurant on buchanan in san francisco ?","1504":"Find all movies by directors born in \" Los Angeles \"","1505":"Find all actors who were born in \" New York City \" in 1984","1506":"give me some good restaurants in alameda ?","1507":"where is a good restaurant in mountain view for arabic food ?","1508":"Find the business with the most number of reviews in April","1509":"how many buttercup kitchen are there in san francisco ?","1510":"Find the movie which is classified in the most number of genres","1511":"return me the paper by \" H. V. Jagadish \" with the most citations .","1512":"where is a restaurant in alameda ?","1513":"In what city was \" Kevin Spacey \" born ?","1514":"How many movies about Persians were released after 1990 ?","1515":"give me some good places for arabic on buchanan in san francisco ?","1516":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .","1517":"Find the directors of all movies featuring \" Kate Winslet \"","1518":"Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"","1519":"return me all the organizations in \" North America \" .","1520":"what is a good restaurant in the bay area ?","1521":"what are some good restaurants on bethel island rd in bethel island ?","1522":"give me some restaurants in the bay area ?","1523":"return me all the papers, which contain the keyword \" Natural Language \" .","1524":"Find all the female actors in the movie \" Saving Private Ryan \"","1525":"return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .","1526":"where are some restaurants good for french food ?","1527":"Give me the best french restaurant in san francisco ?","1528":"return me the number of papers by \" H. V. Jagadish \" after 2000 .","1529":"return me the number of authors who have cooperated with \" H. V. Jagadish \" .","1530":"How many movies did \" Shahab Hosseini \" act in ?","1531":"return me the homepage of PVLDB .","1532":"return me all the organizations in Databases area located in \" North America \" .","1533":"where is a good place on buchanan in san francisco for arabic food ?","1534":"What is the latest movie by \" Jim Jarmusch \"","1535":"return me the paper after 2000 in VLDB conference with the most citations .","1536":"How many movies did \" Quentin Tarantino \" direct after 2010 ?","1537":"Find all actors from Canada who acted in \" James Bond \" movies","1538":"give me a good restaurant in mountain view for arabic food ?","1539":"return me the paper in PVLDB with the most citations .","1540":"Find all actors born in \" Austin \" after 1980","1541":"give me some good arabic restaurants in mountain view ?","1542":"what are some good places in the yosemite and mono lake area for french food ?","1543":"return me the papers on PVLDB .","1544":"return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .","1545":"return me the area of the VLDB conference .","1546":"return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .","1547":"give me a good restaurant in alameda ?","1548":"Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?","1549":"What are all the tv series created by \" Shonda Rhimes \" ?","1550":"return me the keywords of \" Making database systems usable \" .","1551":"how many places for french are there in palo alto ?","1552":"return me the homepage of \" University of Michigan \" .","1553":"return me the number of papers published on PVLDB before 2000 .","1554":"How many movies did \" Quentin Tarantino \" direct before 2010 ?","1555":"where is the best restaurant in the bay area for american food ?","1556":"return me the papers after 2000 .","1557":"what are some good restaurants in the bay area ?","1558":"return me the number of papers published in PVLDB in each year .","1559":"What is the nationality of the actor \" Christoph Waltz \" ?","1560":"What is the best restaurant in san francisco for french food ?","1561":"return me the homepage of \" H. V. Jagadish \" .","1562":"return me all the papers after 2000 in \" University of Michigan \" .","1563":"return me the number of keywords in Databases area .","1564":"Who was the director of the movie Joy from 2015 ?","1565":"Find all actors from Afghanistan","1566":"Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"","1567":"give me a restaurant in mountain view that serves good arabic food ?","1568":"where can we find some restaurants in the bay area ?","1569":"where is a good arabic on buchanan in san francisco ?","1570":"return me the total citations of papers in PVLDB in each year .","1571":"return me the number of researchers in Databases area in \" University of Michigan \" .","1572":"what are the genres of movies directed by \" Asghar Farhadi \"","1573":"return me all the papers in VLDB conference in \" University of Michigan \" .","1574":"Where is the best restaurant in san francisco for french food ?","1575":"How many movies did \" Shahab Hosseini \" act in","1576":"Where is the best french restaurant in san francisco ?","1577":"where are some restaurants good for arabic food on buchanan in san francisco ?","1578":"return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .","1579":"How much was the budget of \" Finding Nemo \"","1580":"where is a arabic restaurant on buchanan in san francisco ?","1581":"how many places for chinese are there in the bay area ?","1582":"what is the best american restaurant in the bay area ?","1583":"Find all the female actors born in \" New York City \" after 1980","1584":"return me all the papers in PVLDB after 2000 in \" University of Michigan \" .","1585":"What are the series featuring \" Scott Foley \" ?","1586":"give me the best restaurant in the bay area for american food ?","1587":"return me the keywords in VLDB conference .","1588":"give me some restaurants on bethel island rd in bethel island ?","1589":"return me the total citations of papers in the VLDB conference before 2005 .","1590":"Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?","1591":"find the number of actors from Iran who played in \" Jim Jarmusch \" movies","1592":"where are some restaurants good for french food in the yosemite and mono lake area ?","1593":"where can we find a restaurant on bethel island rd in bethel island ?","1594":"where is a good arabic restaurant on buchanan in san francisco ?","1595":"give me a good restaurant on bethel island rd in bethel island ?","1596":"return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .","1597":"where are some good places for arabic in mountain view ?","1598":"Find the latest movie which \" Gabriele Ferzetti \" acted in","1599":"What year was the movie \" The Imitation Game \" produced","1600":"How many female actors were born in \" New York City \" after 1980 ?","1601":"return me the total citations of all the papers in the VLDB conference .","1602":"return me the conference, which have the most number of papers by \" H. V. Jagadish \" .","1603":"return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .","1604":"give me a good arabic on buchanan in san francisco ?","1605":"Find all actors from Austin born after 1980","1606":"What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?","1607":"What is the number of movies in which \" Shahab Hosseini \" acted ?","1608":"What is the nationality of the actress \" Christoph Waltz \" ?","1609":"give me some good restaurants on bethel island rd in bethel island ?","1610":"give me a good place on buchanan in san francisco for arabic food ?","1611":"return me the total citations of the papers in \" University of Michigan \" .","1612":"return me the paper after 2000 in PVLDB with the most citations .","1613":"Find all movies written and produced by \" Woody Allen \"","1614":"return me the number of papers on PVLDB after 2000 .","1615":"return me the authors who have papers containing keyword \" Relational Database \" .","1616":"return me the number of the keywords related to \" H. V. Jagadish \" .","1617":"return me the number of references of \" Making database systems usable \" .","1618":"Which movies did \" Alfred Hitchcock \" direct ?","1619":"return me the number of papers written by \" H. V. Jagadish \" in each year .","1620":"How many movies were produced in the year 2013 ?","1621":"give me a good french restaurant in the yosemite and mono lake area ?","1622":"List \" James Bond \" directors","1623":"where can i eat french food in mountain view ?","1624":"where are some good places for arabic on buchanan in san francisco ?","1625":"return me the total citations of the papers containing keyword \" Natural Language \"","1626":"how many french restaurant are there in palo alto ?","1627":"return me the total citations of papers in PVLDB before 2005 .","1628":"return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .","1629":"return me the number of papers after 2000 .","1630":"where can i eat some good french food in the yosemite and mono lake area ?","1631":"return me the journals, which have more than 10 papers by \" H. V. Jagadish \" .","1632":"give me a good restaurant in the yosemite and mono lake area for french food ?","1633":"return me the authors who have papers in PVLDB .","1634":"return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .","1635":"return me the paper after 2000 in VLDB conference with more than 200 citations .","1636":"where is the best american restaurant in the bay area ?","1637":"return me the authors who have papers in PVLDB after 2010 .","1638":"return me the authors who have papers in VLDB conference in 2002 .","1639":"return me the author in the \" University of Michigan \" whose papers have the most total citations .","1640":"where can i eat arabic food on buchanan in san francisco ?","1641":"where is a restaurant in mountain view that serves good arabic food ?","1642":"What is the number of movies featuring \" Shahab Hosseini \" ?","1643":"Where is the best french in san francisco ?","1644":"Who is the writer of the movie \" The Truman Show \"","1645":"How many movies did \" Humphrey Bogart \" act in before 1942 ?","1646":"return me the authors who have papers in the VLDB conference .","1647":"return me all the keywords in Databases area .","1648":"return me the authors who have papers in VLDB conference before 2002 .","1649":"Find the actors who played in the movie \" Camp X-Ray \"","1650":"What is the best place in san francisco for french food ?","1651":"give me some restaurants good for french food ?","1652":"where is a restaurant on buchanan in san francisco that serves good arabic food ?","1653":"where is a good place in the yosemite and mono lake area for french food ?","1654":"return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .","1655":"give me some good restaurants on buchanan in san francisco for arabic food ?","1656":"return me the total citations of papers in the VLDB conference in each year .","1657":"return me the number of papers in \" University of Michigan \" in Databases area .","1658":"return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 ."},"db_id":{"0":"geo","1":"geo","2":"geo","3":"geo","4":"geo","5":"geo","6":"geo","7":"geo","8":"geo","9":"geo","10":"geo","11":"geo","12":"geo","13":"geo","14":"geo","15":"geo","16":"geo","17":"geo","18":"geo","19":"geo","20":"geo","21":"geo","22":"geo","23":"geo","24":"geo","25":"geo","26":"geo","27":"geo","28":"geo","29":"geo","30":"geo","31":"geo","32":"geo","33":"geo","34":"geo","35":"geo","36":"geo","37":"geo","38":"geo","39":"geo","40":"geo","41":"geo","42":"geo","43":"geo","44":"geo","45":"geo","46":"geo","47":"geo","48":"geo","49":"geo","50":"geo","51":"geo","52":"geo","53":"geo","54":"geo","55":"geo","56":"geo","57":"geo","58":"geo","59":"geo","60":"geo","61":"geo","62":"geo","63":"geo","64":"geo","65":"geo","66":"geo","67":"geo","68":"geo","69":"geo","70":"geo","71":"geo","72":"geo","73":"geo","74":"geo","75":"geo","76":"geo","77":"geo","78":"geo","79":"geo","80":"geo","81":"geo","82":"geo","83":"geo","84":"geo","85":"geo","86":"geo","87":"geo","88":"geo","89":"geo","90":"geo","91":"geo","92":"geo","93":"geo","94":"geo","95":"geo","96":"geo","97":"geo","98":"geo","99":"geo","100":"geo","101":"geo","102":"geo","103":"geo","104":"geo","105":"geo","106":"geo","107":"geo","108":"geo","109":"geo","110":"geo","111":"geo","112":"geo","113":"geo","114":"geo","115":"geo","116":"geo","117":"geo","118":"geo","119":"geo","120":"geo","121":"geo","122":"geo","123":"geo","124":"geo","125":"geo","126":"geo","127":"geo","128":"geo","129":"geo","130":"geo","131":"geo","132":"geo","133":"geo","134":"geo","135":"geo","136":"geo","137":"geo","138":"geo","139":"geo","140":"geo","141":"geo","142":"geo","143":"geo","144":"geo","145":"geo","146":"geo","147":"geo","148":"geo","149":"geo","150":"geo","151":"geo","152":"geo","153":"geo","154":"geo","155":"geo","156":"geo","157":"geo","158":"geo","159":"geo","160":"geo","161":"geo","162":"geo","163":"geo","164":"geo","165":"geo","166":"geo","167":"geo","168":"geo","169":"geo","170":"geo","171":"geo","172":"geo","173":"geo","174":"geo","175":"geo","176":"geo","177":"geo","178":"geo","179":"geo","180":"geo","181":"geo","182":"geo","183":"geo","184":"geo","185":"geo","186":"geo","187":"geo","188":"geo","189":"geo","190":"geo","191":"geo","192":"geo","193":"geo","194":"geo","195":"geo","196":"geo","197":"geo","198":"geo","199":"geo","200":"geo","201":"geo","202":"geo","203":"geo","204":"geo","205":"geo","206":"geo","207":"geo","208":"geo","209":"geo","210":"geo","211":"geo","212":"geo","213":"geo","214":"geo","215":"geo","216":"geo","217":"geo","218":"geo","219":"geo","220":"geo","221":"geo","222":"geo","223":"geo","224":"geo","225":"geo","226":"geo","227":"geo","228":"geo","229":"geo","230":"geo","231":"geo","232":"geo","233":"geo","234":"geo","235":"geo","236":"geo","237":"geo","238":"geo","239":"geo","240":"geo","241":"geo","242":"geo","243":"geo","244":"geo","245":"geo","246":"geo","247":"geo","248":"geo","249":"geo","250":"geo","251":"geo","252":"geo","253":"geo","254":"geo","255":"geo","256":"geo","257":"geo","258":"geo","259":"geo","260":"geo","261":"geo","262":"geo","263":"geo","264":"geo","265":"geo","266":"geo","267":"geo","268":"geo","269":"geo","270":"geo","271":"geo","272":"geo","273":"geo","274":"geo","275":"geo","276":"geo","277":"geo","278":"geo","279":"geo","280":"geo","281":"geo","282":"geo","283":"geo","284":"geo","285":"geo","286":"geo","287":"geo","288":"geo","289":"geo","290":"geo","291":"geo","292":"geo","293":"geo","294":"geo","295":"geo","296":"geo","297":"geo","298":"geo","299":"geo","300":"geo","301":"geo","302":"geo","303":"geo","304":"geo","305":"geo","306":"geo","307":"geo","308":"geo","309":"geo","310":"geo","311":"geo","312":"geo","313":"geo","314":"geo","315":"geo","316":"geo","317":"geo","318":"geo","319":"geo","320":"geo","321":"geo","322":"geo","323":"geo","324":"geo","325":"geo","326":"geo","327":"geo","328":"geo","329":"geo","330":"geo","331":"geo","332":"geo","333":"geo","334":"geo","335":"geo","336":"geo","337":"geo","338":"geo","339":"geo","340":"geo","341":"geo","342":"geo","343":"geo","344":"geo","345":"geo","346":"geo","347":"geo","348":"geo","349":"geo","350":"geo","351":"geo","352":"geo","353":"geo","354":"geo","355":"geo","356":"geo","357":"geo","358":"geo","359":"geo","360":"geo","361":"geo","362":"geo","363":"geo","364":"geo","365":"geo","366":"geo","367":"geo","368":"geo","369":"geo","370":"geo","371":"geo","372":"geo","373":"geo","374":"geo","375":"geo","376":"geo","377":"geo","378":"geo","379":"geo","380":"geo","381":"geo","382":"geo","383":"geo","384":"geo","385":"geo","386":"geo","387":"geo","388":"geo","389":"geo","390":"geo","391":"geo","392":"geo","393":"geo","394":"geo","395":"geo","396":"geo","397":"geo","398":"geo","399":"geo","400":"geo","401":"geo","402":"geo","403":"geo","404":"geo","405":"geo","406":"geo","407":"geo","408":"geo","409":"geo","410":"geo","411":"geo","412":"geo","413":"geo","414":"scholar","415":"scholar","416":"scholar","417":"scholar","418":"geo","419":"geo","420":"geo","421":"scholar","422":"scholar","423":"scholar","424":"scholar","425":"scholar","426":"geo","427":"geo","428":"scholar","429":"scholar","430":"scholar","431":"geo","432":"scholar","433":"scholar","434":"geo","435":"scholar","436":"scholar","437":"scholar","438":"scholar","439":"geo","440":"scholar","441":"scholar","442":"geo","443":"geo","444":"scholar","445":"scholar","446":"scholar","447":"geo","448":"scholar","449":"scholar","450":"scholar","451":"scholar","452":"scholar","453":"scholar","454":"scholar","455":"geo","456":"geo","457":"scholar","458":"scholar","459":"scholar","460":"scholar","461":"scholar","462":"scholar","463":"scholar","464":"geo","465":"geo","466":"scholar","467":"geo","468":"scholar","469":"geo","470":"scholar","471":"scholar","472":"scholar","473":"geo","474":"geo","475":"scholar","476":"geo","477":"geo","478":"geo","479":"scholar","480":"scholar","481":"scholar","482":"scholar","483":"scholar","484":"geo","485":"scholar","486":"scholar","487":"geo","488":"scholar","489":"geo","490":"scholar","491":"geo","492":"scholar","493":"geo","494":"scholar","495":"geo","496":"scholar","497":"geo","498":"scholar","499":"scholar","500":"scholar","501":"geo","502":"scholar","503":"scholar","504":"scholar","505":"scholar","506":"geo","507":"scholar","508":"scholar","509":"scholar","510":"geo","511":"scholar","512":"scholar","513":"scholar","514":"scholar","515":"geo","516":"scholar","517":"scholar","518":"scholar","519":"geo","520":"geo","521":"scholar","522":"scholar","523":"scholar","524":"scholar","525":"scholar","526":"scholar","527":"scholar","528":"geo","529":"scholar","530":"scholar","531":"geo","532":"scholar","533":"scholar","534":"geo","535":"scholar","536":"geo","537":"scholar","538":"scholar","539":"scholar","540":"geo","541":"scholar","542":"scholar","543":"geo","544":"scholar","545":"scholar","546":"scholar","547":"scholar","548":"geo","549":"scholar","550":"geo","551":"scholar","552":"geo","553":"geo","554":"scholar","555":"scholar","556":"scholar","557":"scholar","558":"scholar","559":"scholar","560":"scholar","561":"geo","562":"scholar","563":"geo","564":"scholar","565":"scholar","566":"scholar","567":"geo","568":"scholar","569":"geo","570":"geo","571":"scholar","572":"scholar","573":"scholar","574":"scholar","575":"geo","576":"geo","577":"scholar","578":"geo","579":"scholar","580":"scholar","581":"scholar","582":"scholar","583":"geo","584":"scholar","585":"scholar","586":"scholar","587":"scholar","588":"scholar","589":"scholar","590":"geo","591":"scholar","592":"scholar","593":"scholar","594":"geo","595":"scholar","596":"geo","597":"scholar","598":"geo","599":"scholar","600":"geo","601":"scholar","602":"scholar","603":"scholar","604":"scholar","605":"scholar","606":"scholar","607":"scholar","608":"scholar","609":"scholar","610":"scholar","611":"geo","612":"scholar","613":"geo","614":"scholar","615":"scholar","616":"geo","617":"scholar","618":"scholar","619":"geo","620":"scholar","621":"geo","622":"scholar","623":"scholar","624":"geo","625":"scholar","626":"scholar","627":"scholar","628":"geo","629":"geo","630":"geo","631":"scholar","632":"scholar","633":"scholar","634":"scholar","635":"geo","636":"geo","637":"scholar","638":"scholar","639":"geo","640":"geo","641":"scholar","642":"scholar","643":"scholar","644":"scholar","645":"scholar","646":"geo","647":"geo","648":"scholar","649":"scholar","650":"geo","651":"scholar","652":"scholar","653":"geo","654":"scholar","655":"geo","656":"scholar","657":"geo","658":"geo","659":"scholar","660":"geo","661":"scholar","662":"geo","663":"scholar","664":"geo","665":"scholar","666":"scholar","667":"scholar","668":"scholar","669":"scholar","670":"scholar","671":"scholar","672":"scholar","673":"geo","674":"scholar","675":"scholar","676":"geo","677":"geo","678":"geo","679":"geo","680":"scholar","681":"geo","682":"geo","683":"scholar","684":"scholar","685":"geo","686":"scholar","687":"scholar","688":"scholar","689":"geo","690":"scholar","691":"scholar","692":"scholar","693":"scholar","694":"geo","695":"scholar","696":"scholar","697":"scholar","698":"scholar","699":"scholar","700":"scholar","701":"scholar","702":"geo","703":"geo","704":"geo","705":"geo","706":"scholar","707":"scholar","708":"geo","709":"geo","710":"geo","711":"scholar","712":"scholar","713":"scholar","714":"scholar","715":"geo","716":"scholar","717":"geo","718":"scholar","719":"geo","720":"scholar","721":"geo","722":"geo","723":"scholar","724":"scholar","725":"scholar","726":"geo","727":"scholar","728":"scholar","729":"scholar","730":"geo","731":"scholar","732":"geo","733":"geo","734":"geo","735":"geo","736":"scholar","737":"geo","738":"geo","739":"scholar","740":"scholar","741":"scholar","742":"geo","743":"geo","744":"geo","745":"geo","746":"geo","747":"scholar","748":"geo","749":"scholar","750":"scholar","751":"geo","752":"geo","753":"scholar","754":"geo","755":"scholar","756":"scholar","757":"scholar","758":"geo","759":"scholar","760":"scholar","761":"geo","762":"scholar","763":"scholar","764":"geo","765":"scholar","766":"scholar","767":"scholar","768":"scholar","769":"scholar","770":"scholar","771":"geo","772":"geo","773":"geo","774":"geo","775":"scholar","776":"scholar","777":"scholar","778":"scholar","779":"geo","780":"geo","781":"geo","782":"scholar","783":"geo","784":"scholar","785":"geo","786":"geo","787":"geo","788":"scholar","789":"scholar","790":"geo","791":"geo","792":"scholar","793":"scholar","794":"scholar","795":"geo","796":"scholar","797":"geo","798":"scholar","799":"scholar","800":"scholar","801":"geo","802":"scholar","803":"geo","804":"scholar","805":"scholar","806":"geo","807":"scholar","808":"geo","809":"geo","810":"scholar","811":"scholar","812":"geo","813":"scholar","814":"geo","815":"geo","816":"scholar","817":"scholar","818":"scholar","819":"geo","820":"scholar","821":"geo","822":"scholar","823":"scholar","824":"geo","825":"scholar","826":"scholar","827":"scholar","828":"yelp","829":"scholar","830":"yelp","831":"scholar","832":"scholar","833":"scholar","834":"scholar","835":"scholar","836":"yelp","837":"scholar","838":"yelp","839":"yelp","840":"scholar","841":"yelp","842":"scholar","843":"scholar","844":"scholar","845":"scholar","846":"scholar","847":"scholar","848":"yelp","849":"yelp","850":"scholar","851":"scholar","852":"scholar","853":"scholar","854":"scholar","855":"scholar","856":"yelp","857":"scholar","858":"scholar","859":"scholar","860":"scholar","861":"scholar","862":"yelp","863":"yelp","864":"yelp","865":"scholar","866":"scholar","867":"yelp","868":"scholar","869":"yelp","870":"yelp","871":"scholar","872":"yelp","873":"scholar","874":"yelp","875":"scholar","876":"scholar","877":"yelp","878":"scholar","879":"scholar","880":"yelp","881":"scholar","882":"scholar","883":"scholar","884":"scholar","885":"scholar","886":"scholar","887":"scholar","888":"scholar","889":"scholar","890":"scholar","891":"yelp","892":"scholar","893":"scholar","894":"scholar","895":"scholar","896":"yelp","897":"scholar","898":"scholar","899":"yelp","900":"scholar","901":"scholar","902":"yelp","903":"yelp","904":"scholar","905":"scholar","906":"scholar","907":"scholar","908":"scholar","909":"scholar","910":"scholar","911":"scholar","912":"scholar","913":"yelp","914":"scholar","915":"scholar","916":"scholar","917":"yelp","918":"scholar","919":"scholar","920":"scholar","921":"scholar","922":"scholar","923":"scholar","924":"scholar","925":"yelp","926":"scholar","927":"yelp","928":"yelp","929":"scholar","930":"scholar","931":"scholar","932":"scholar","933":"yelp","934":"scholar","935":"scholar","936":"scholar","937":"scholar","938":"scholar","939":"yelp","940":"scholar","941":"scholar","942":"scholar","943":"scholar","944":"scholar","945":"scholar","946":"scholar","947":"yelp","948":"scholar","949":"scholar","950":"yelp","951":"scholar","952":"scholar","953":"scholar","954":"yelp","955":"yelp","956":"scholar","957":"yelp","958":"scholar","959":"scholar","960":"scholar","961":"yelp","962":"scholar","963":"yelp","964":"scholar","965":"scholar","966":"scholar","967":"yelp","968":"scholar","969":"scholar","970":"scholar","971":"yelp","972":"scholar","973":"scholar","974":"scholar","975":"scholar","976":"scholar","977":"scholar","978":"scholar","979":"scholar","980":"scholar","981":"scholar","982":"scholar","983":"scholar","984":"yelp","985":"scholar","986":"yelp","987":"yelp","988":"scholar","989":"scholar","990":"scholar","991":"scholar","992":"scholar","993":"scholar","994":"scholar","995":"yelp","996":"scholar","997":"yelp","998":"scholar","999":"scholar","1000":"scholar","1001":"yelp","1002":"scholar","1003":"scholar","1004":"scholar","1005":"scholar","1006":"scholar","1007":"scholar","1008":"yelp","1009":"scholar","1010":"yelp","1011":"scholar","1012":"scholar","1013":"yelp","1014":"scholar","1015":"scholar","1016":"scholar","1017":"scholar","1018":"scholar","1019":"yelp","1020":"scholar","1021":"scholar","1022":"yelp","1023":"scholar","1024":"scholar","1025":"scholar","1026":"scholar","1027":"scholar","1028":"scholar","1029":"scholar","1030":"scholar","1031":"scholar","1032":"scholar","1033":"yelp","1034":"scholar","1035":"scholar","1036":"yelp","1037":"scholar","1038":"yelp","1039":"scholar","1040":"scholar","1041":"scholar","1042":"scholar","1043":"yelp","1044":"scholar","1045":"scholar","1046":"scholar","1047":"yelp","1048":"yelp","1049":"scholar","1050":"scholar","1051":"scholar","1052":"yelp","1053":"scholar","1054":"scholar","1055":"scholar","1056":"yelp","1057":"yelp","1058":"scholar","1059":"yelp","1060":"scholar","1061":"yelp","1062":"scholar","1063":"scholar","1064":"scholar","1065":"scholar","1066":"yelp","1067":"scholar","1068":"scholar","1069":"yelp","1070":"scholar","1071":"scholar","1072":"scholar","1073":"scholar","1074":"yelp","1075":"scholar","1076":"scholar","1077":"scholar","1078":"scholar","1079":"scholar","1080":"yelp","1081":"scholar","1082":"yelp","1083":"scholar","1084":"scholar","1085":"yelp","1086":"scholar","1087":"yelp","1088":"scholar","1089":"yelp","1090":"yelp","1091":"scholar","1092":"yelp","1093":"scholar","1094":"scholar","1095":"yelp","1096":"scholar","1097":"scholar","1098":"scholar","1099":"scholar","1100":"scholar","1101":"scholar","1102":"yelp","1103":"scholar","1104":"yelp","1105":"yelp","1106":"yelp","1107":"yelp","1108":"scholar","1109":"scholar","1110":"scholar","1111":"yelp","1112":"yelp","1113":"scholar","1114":"scholar","1115":"scholar","1116":"scholar","1117":"scholar","1118":"yelp","1119":"yelp","1120":"yelp","1121":"yelp","1122":"scholar","1123":"yelp","1124":"scholar","1125":"scholar","1126":"scholar","1127":"scholar","1128":"scholar","1129":"scholar","1130":"yelp","1131":"scholar","1132":"scholar","1133":"yelp","1134":"scholar","1135":"yelp","1136":"scholar","1137":"scholar","1138":"scholar","1139":"scholar","1140":"yelp","1141":"yelp","1142":"scholar","1143":"scholar","1144":"scholar","1145":"scholar","1146":"scholar","1147":"scholar","1148":"scholar","1149":"scholar","1150":"yelp","1151":"scholar","1152":"scholar","1153":"yelp","1154":"scholar","1155":"scholar","1156":"scholar","1157":"scholar","1158":"scholar","1159":"scholar","1160":"scholar","1161":"scholar","1162":"scholar","1163":"scholar","1164":"scholar","1165":"scholar","1166":"scholar","1167":"yelp","1168":"scholar","1169":"yelp","1170":"scholar","1171":"scholar","1172":"scholar","1173":"scholar","1174":"scholar","1175":"scholar","1176":"scholar","1177":"scholar","1178":"scholar","1179":"yelp","1180":"scholar","1181":"scholar","1182":"scholar","1183":"scholar","1184":"scholar","1185":"scholar","1186":"yelp","1187":"yelp","1188":"scholar","1189":"scholar","1190":"scholar","1191":"scholar","1192":"yelp","1193":"scholar","1194":"scholar","1195":"scholar","1196":"scholar","1197":"scholar","1198":"scholar","1199":"scholar","1200":"scholar","1201":"scholar","1202":"yelp","1203":"scholar","1204":"yelp","1205":"scholar","1206":"scholar","1207":"scholar","1208":"yelp","1209":"scholar","1210":"yelp","1211":"scholar","1212":"scholar","1213":"yelp","1214":"scholar","1215":"scholar","1216":"scholar","1217":"scholar","1218":"scholar","1219":"yelp","1220":"yelp","1221":"scholar","1222":"scholar","1223":"scholar","1224":"scholar","1225":"scholar","1226":"yelp","1227":"yelp","1228":"scholar","1229":"scholar","1230":"scholar","1231":"yelp","1232":"scholar","1233":"scholar","1234":"scholar","1235":"scholar","1236":"scholar","1237":"yelp","1238":"scholar","1239":"scholar","1240":"scholar","1241":"scholar","1242":"academic","1243":"imdb","1244":"restaurants","1245":"academic","1246":"academic","1247":"academic","1248":"imdb","1249":"academic","1250":"academic","1251":"restaurants","1252":"academic","1253":"restaurants","1254":"imdb","1255":"academic","1256":"academic","1257":"restaurants","1258":"restaurants","1259":"restaurants","1260":"academic","1261":"academic","1262":"imdb","1263":"academic","1264":"restaurants","1265":"academic","1266":"academic","1267":"academic","1268":"academic","1269":"imdb","1270":"restaurants","1271":"academic","1272":"imdb","1273":"imdb","1274":"academic","1275":"imdb","1276":"academic","1277":"imdb","1278":"academic","1279":"academic","1280":"academic","1281":"imdb","1282":"academic","1283":"restaurants","1284":"academic","1285":"academic","1286":"academic","1287":"academic","1288":"imdb","1289":"imdb","1290":"imdb","1291":"academic","1292":"yelp","1293":"restaurants","1294":"academic","1295":"imdb","1296":"academic","1297":"academic","1298":"restaurants","1299":"imdb","1300":"imdb","1301":"restaurants","1302":"academic","1303":"academic","1304":"restaurants","1305":"restaurants","1306":"restaurants","1307":"academic","1308":"restaurants","1309":"academic","1310":"academic","1311":"academic","1312":"academic","1313":"academic","1314":"academic","1315":"restaurants","1316":"academic","1317":"academic","1318":"restaurants","1319":"academic","1320":"restaurants","1321":"restaurants","1322":"restaurants","1323":"academic","1324":"restaurants","1325":"academic","1326":"imdb","1327":"academic","1328":"imdb","1329":"restaurants","1330":"academic","1331":"restaurants","1332":"academic","1333":"academic","1334":"imdb","1335":"imdb","1336":"academic","1337":"restaurants","1338":"restaurants","1339":"imdb","1340":"imdb","1341":"restaurants","1342":"academic","1343":"imdb","1344":"restaurants","1345":"restaurants","1346":"academic","1347":"academic","1348":"academic","1349":"imdb","1350":"restaurants","1351":"restaurants","1352":"academic","1353":"academic","1354":"imdb","1355":"academic","1356":"academic","1357":"restaurants","1358":"academic","1359":"academic","1360":"academic","1361":"imdb","1362":"academic","1363":"academic","1364":"restaurants","1365":"academic","1366":"restaurants","1367":"academic","1368":"restaurants","1369":"restaurants","1370":"academic","1371":"restaurants","1372":"imdb","1373":"academic","1374":"imdb","1375":"restaurants","1376":"academic","1377":"academic","1378":"academic","1379":"restaurants","1380":"academic","1381":"imdb","1382":"imdb","1383":"academic","1384":"imdb","1385":"restaurants","1386":"imdb","1387":"restaurants","1388":"restaurants","1389":"restaurants","1390":"academic","1391":"academic","1392":"academic","1393":"imdb","1394":"imdb","1395":"academic","1396":"imdb","1397":"restaurants","1398":"restaurants","1399":"academic","1400":"academic","1401":"imdb","1402":"academic","1403":"restaurants","1404":"imdb","1405":"academic","1406":"academic","1407":"restaurants","1408":"academic","1409":"restaurants","1410":"imdb","1411":"imdb","1412":"academic","1413":"imdb","1414":"imdb","1415":"imdb","1416":"academic","1417":"imdb","1418":"restaurants","1419":"imdb","1420":"academic","1421":"academic","1422":"imdb","1423":"academic","1424":"imdb","1425":"restaurants","1426":"academic","1427":"academic","1428":"restaurants","1429":"academic","1430":"imdb","1431":"academic","1432":"restaurants","1433":"imdb","1434":"restaurants","1435":"academic","1436":"academic","1437":"imdb","1438":"restaurants","1439":"imdb","1440":"imdb","1441":"imdb","1442":"academic","1443":"academic","1444":"academic","1445":"academic","1446":"restaurants","1447":"restaurants","1448":"academic","1449":"academic","1450":"imdb","1451":"imdb","1452":"academic","1453":"restaurants","1454":"academic","1455":"restaurants","1456":"academic","1457":"restaurants","1458":"imdb","1459":"academic","1460":"academic","1461":"imdb","1462":"restaurants","1463":"restaurants","1464":"imdb","1465":"imdb","1466":"academic","1467":"restaurants","1468":"academic","1469":"restaurants","1470":"imdb","1471":"restaurants","1472":"restaurants","1473":"academic","1474":"academic","1475":"restaurants","1476":"imdb","1477":"academic","1478":"academic","1479":"academic","1480":"restaurants","1481":"imdb","1482":"academic","1483":"academic","1484":"academic","1485":"academic","1486":"restaurants","1487":"restaurants","1488":"imdb","1489":"academic","1490":"restaurants","1491":"academic","1492":"academic","1493":"academic","1494":"imdb","1495":"academic","1496":"academic","1497":"imdb","1498":"restaurants","1499":"academic","1500":"imdb","1501":"imdb","1502":"imdb","1503":"restaurants","1504":"imdb","1505":"imdb","1506":"restaurants","1507":"restaurants","1508":"yelp","1509":"restaurants","1510":"imdb","1511":"academic","1512":"restaurants","1513":"imdb","1514":"imdb","1515":"restaurants","1516":"academic","1517":"imdb","1518":"imdb","1519":"academic","1520":"restaurants","1521":"restaurants","1522":"restaurants","1523":"academic","1524":"imdb","1525":"academic","1526":"restaurants","1527":"restaurants","1528":"academic","1529":"academic","1530":"imdb","1531":"academic","1532":"academic","1533":"restaurants","1534":"imdb","1535":"academic","1536":"imdb","1537":"imdb","1538":"restaurants","1539":"academic","1540":"imdb","1541":"restaurants","1542":"restaurants","1543":"academic","1544":"academic","1545":"academic","1546":"academic","1547":"restaurants","1548":"imdb","1549":"imdb","1550":"academic","1551":"restaurants","1552":"academic","1553":"academic","1554":"imdb","1555":"restaurants","1556":"academic","1557":"restaurants","1558":"academic","1559":"imdb","1560":"restaurants","1561":"academic","1562":"academic","1563":"academic","1564":"imdb","1565":"imdb","1566":"imdb","1567":"restaurants","1568":"restaurants","1569":"restaurants","1570":"academic","1571":"academic","1572":"imdb","1573":"academic","1574":"restaurants","1575":"imdb","1576":"restaurants","1577":"restaurants","1578":"academic","1579":"imdb","1580":"restaurants","1581":"restaurants","1582":"restaurants","1583":"imdb","1584":"academic","1585":"imdb","1586":"restaurants","1587":"academic","1588":"restaurants","1589":"academic","1590":"imdb","1591":"imdb","1592":"restaurants","1593":"restaurants","1594":"restaurants","1595":"restaurants","1596":"academic","1597":"restaurants","1598":"imdb","1599":"imdb","1600":"imdb","1601":"academic","1602":"academic","1603":"academic","1604":"restaurants","1605":"imdb","1606":"imdb","1607":"imdb","1608":"imdb","1609":"restaurants","1610":"restaurants","1611":"academic","1612":"academic","1613":"imdb","1614":"academic","1615":"academic","1616":"academic","1617":"academic","1618":"imdb","1619":"academic","1620":"imdb","1621":"restaurants","1622":"imdb","1623":"restaurants","1624":"restaurants","1625":"academic","1626":"restaurants","1627":"academic","1628":"academic","1629":"academic","1630":"restaurants","1631":"academic","1632":"restaurants","1633":"academic","1634":"academic","1635":"academic","1636":"restaurants","1637":"academic","1638":"academic","1639":"academic","1640":"restaurants","1641":"restaurants","1642":"imdb","1643":"restaurants","1644":"imdb","1645":"imdb","1646":"academic","1647":"academic","1648":"academic","1649":"imdb","1650":"restaurants","1651":"restaurants","1652":"restaurants","1653":"restaurants","1654":"academic","1655":"restaurants","1656":"academic","1657":"academic","1658":"academic"},"classification":{"0":"EASY","1":"NESTED","2":"EASY","3":"EASY","4":"NESTED","5":"NESTED","6":"EASY","7":"NESTED","8":"EASY","9":"EASY","10":"NON-NESTED","11":"EASY","12":"NON-NESTED","13":"NON-NESTED","14":"NESTED","15":"NON-NESTED","16":"NON-NESTED","17":"EASY","18":"NON-NESTED","19":"EASY","20":"EASY","21":"NON-NESTED","22":"EASY","23":"EASY","24":"NESTED","25":"EASY","26":"NESTED","27":"EASY","28":"NESTED","29":"NESTED","30":"NESTED","31":"EASY","32":"NON-NESTED","33":"NESTED","34":"NESTED","35":"NESTED","36":"NESTED","37":"NON-NESTED","38":"EASY","39":"EASY","40":"NESTED","41":"NON-NESTED","42":"EASY","43":"EASY","44":"EASY","45":"EASY","46":"NON-NESTED","47":"NESTED","48":"NON-NESTED","49":"NESTED","50":"EASY","51":"NON-NESTED","52":"EASY","53":"NESTED","54":"NON-NESTED","55":"EASY","56":"EASY","57":"NESTED","58":"NON-NESTED","59":"NON-NESTED","60":"NESTED","61":"EASY","62":"EASY","63":"NESTED","64":"NESTED","65":"EASY","66":"NON-NESTED","67":"NESTED","68":"NON-NESTED","69":"NON-NESTED","70":"NESTED","71":"NON-NESTED","72":"NESTED","73":"NON-NESTED","74":"NON-NESTED","75":"EASY","76":"EASY","77":"EASY","78":"NESTED","79":"NESTED","80":"EASY","81":"EASY","82":"EASY","83":"NESTED","84":"NON-NESTED","85":"NESTED","86":"EASY","87":"NESTED","88":"NON-NESTED","89":"EASY","90":"NON-NESTED","91":"EASY","92":"EASY","93":"NESTED","94":"NESTED","95":"EASY","96":"EASY","97":"EASY","98":"EASY","99":"NON-NESTED","100":"NESTED","101":"EASY","102":"NON-NESTED","103":"NON-NESTED","104":"NON-NESTED","105":"NESTED","106":"NESTED","107":"NON-NESTED","108":"NESTED","109":"NESTED","110":"NON-NESTED","111":"EASY","112":"NESTED","113":"NESTED","114":"EASY","115":"EASY","116":"NON-NESTED","117":"NON-NESTED","118":"NON-NESTED","119":"NESTED","120":"NESTED","121":"NON-NESTED","122":"NESTED","123":"NESTED","124":"NON-NESTED","125":"NESTED","126":"EASY","127":"NON-NESTED","128":"EASY","129":"EASY","130":"NESTED","131":"NON-NESTED","132":"EASY","133":"NESTED","134":"EASY","135":"NON-NESTED","136":"EASY","137":"EASY","138":"NON-NESTED","139":"NON-NESTED","140":"NESTED","141":"NESTED","142":"EASY","143":"EASY","144":"NESTED","145":"EASY","146":"NON-NESTED","147":"NESTED","148":"NON-NESTED","149":"NON-NESTED","150":"NESTED","151":"NESTED","152":"NON-NESTED","153":"NON-NESTED","154":"NON-NESTED","155":"NESTED","156":"NON-NESTED","157":"NESTED","158":"NESTED","159":"NON-NESTED","160":"NON-NESTED","161":"NESTED","162":"EASY","163":"NESTED","164":"EASY","165":"NESTED","166":"NESTED","167":"EASY","168":"NON-NESTED","169":"EASY","170":"NESTED","171":"EASY","172":"EASY","173":"EASY","174":"NESTED","175":"NESTED","176":"NON-NESTED","177":"NON-NESTED","178":"NESTED","179":"NESTED","180":"EASY","181":"NON-NESTED","182":"NON-NESTED","183":"NON-NESTED","184":"EASY","185":"NESTED","186":"EASY","187":"EASY","188":"NON-NESTED","189":"EASY","190":"NESTED","191":"NESTED","192":"NON-NESTED","193":"EASY","194":"NON-NESTED","195":"EASY","196":"NESTED","197":"NESTED","198":"EASY","199":"EASY","200":"EASY","201":"NON-NESTED","202":"EASY","203":"NESTED","204":"NON-NESTED","205":"EASY","206":"NESTED","207":"NESTED","208":"NESTED","209":"EASY","210":"EASY","211":"EASY","212":"NESTED","213":"NON-NESTED","214":"NESTED","215":"NESTED","216":"NESTED","217":"NESTED","218":"EASY","219":"NESTED","220":"EASY","221":"NON-NESTED","222":"NON-NESTED","223":"EASY","224":"NON-NESTED","225":"EASY","226":"EASY","227":"NON-NESTED","228":"EASY","229":"EASY","230":"NON-NESTED","231":"EASY","232":"NESTED","233":"EASY","234":"NESTED","235":"EASY","236":"EASY","237":"EASY","238":"NON-NESTED","239":"NON-NESTED","240":"EASY","241":"EASY","242":"NON-NESTED","243":"EASY","244":"NON-NESTED","245":"NON-NESTED","246":"EASY","247":"EASY","248":"NESTED","249":"EASY","250":"NESTED","251":"NON-NESTED","252":"NON-NESTED","253":"NESTED","254":"EASY","255":"NON-NESTED","256":"NESTED","257":"NON-NESTED","258":"EASY","259":"EASY","260":"NON-NESTED","261":"NESTED","262":"NON-NESTED","263":"EASY","264":"NON-NESTED","265":"NESTED","266":"EASY","267":"NON-NESTED","268":"NON-NESTED","269":"NON-NESTED","270":"EASY","271":"EASY","272":"EASY","273":"NON-NESTED","274":"NON-NESTED","275":"EASY","276":"NON-NESTED","277":"NESTED","278":"EASY","279":"EASY","280":"NESTED","281":"NON-NESTED","282":"NON-NESTED","283":"NESTED","284":"EASY","285":"EASY","286":"NON-NESTED","287":"EASY","288":"NON-NESTED","289":"NON-NESTED","290":"NON-NESTED","291":"EASY","292":"NON-NESTED","293":"NON-NESTED","294":"NON-NESTED","295":"NON-NESTED","296":"NON-NESTED","297":"NON-NESTED","298":"NESTED","299":"NON-NESTED","300":"EASY","301":"NON-NESTED","302":"NON-NESTED","303":"EASY","304":"EASY","305":"NON-NESTED","306":"NESTED","307":"NON-NESTED","308":"EASY","309":"NESTED","310":"EASY","311":"NESTED","312":"NON-NESTED","313":"EASY","314":"NESTED","315":"EASY","316":"NESTED","317":"NESTED","318":"NON-NESTED","319":"EASY","320":"NON-NESTED","321":"NON-NESTED","322":"NESTED","323":"NON-NESTED","324":"NON-NESTED","325":"NON-NESTED","326":"EASY","327":"EASY","328":"NESTED","329":"NESTED","330":"NESTED","331":"NON-NESTED","332":"EASY","333":"NON-NESTED","334":"EASY","335":"NESTED","336":"NESTED","337":"NON-NESTED","338":"NESTED","339":"EASY","340":"EASY","341":"NESTED","342":"NON-NESTED","343":"EASY","344":"EASY","345":"EASY","346":"NESTED","347":"NESTED","348":"NON-NESTED","349":"EASY","350":"EASY","351":"EASY","352":"NESTED","353":"NON-NESTED","354":"EASY","355":"NON-NESTED","356":"NON-NESTED","357":"NON-NESTED","358":"EASY","359":"EASY","360":"EASY","361":"NESTED","362":"EASY","363":"NON-NESTED","364":"NESTED","365":"NESTED","366":"NON-NESTED","367":"EASY","368":"NON-NESTED","369":"NON-NESTED","370":"EASY","371":"NON-NESTED","372":"NON-NESTED","373":"NON-NESTED","374":"NESTED","375":"EASY","376":"EASY","377":"EASY","378":"EASY","379":"EASY","380":"EASY","381":"NESTED","382":"EASY","383":"NESTED","384":"NON-NESTED","385":"EASY","386":"NON-NESTED","387":"NON-NESTED","388":"NON-NESTED","389":"EASY","390":"NESTED","391":"EASY","392":"EASY","393":"EASY","394":"EASY","395":"EASY","396":"EASY","397":"NON-NESTED","398":"NESTED","399":"NESTED","400":"NESTED","401":"EASY","402":"EASY","403":"NESTED","404":"EASY","405":"NESTED","406":"NON-NESTED","407":"NESTED","408":"EASY","409":"EASY","410":"NESTED","411":"NESTED","412":"NON-NESTED","413":"EASY","414":"NESTED","415":"NON-NESTED","416":"NESTED","417":"NESTED","418":"NESTED","419":"NESTED","420":"NESTED","421":"NON-NESTED","422":"NESTED","423":"NESTED","424":"NON-NESTED","425":"NON-NESTED","426":"NESTED","427":"NESTED","428":"NESTED","429":"NON-NESTED","430":"EASY","431":"NESTED","432":"NESTED","433":"NESTED","434":"NESTED","435":"NESTED","436":"NESTED","437":"NESTED","438":"NESTED","439":"NESTED","440":"NESTED","441":"NESTED","442":"NESTED","443":"EASY","444":"NESTED","445":"NESTED","446":"NESTED","447":"NON-NESTED","448":"NESTED","449":"NESTED","450":"NESTED","451":"NON-NESTED","452":"NON-NESTED","453":"NON-NESTED","454":"NESTED","455":"EASY","456":"NON-NESTED","457":"NON-NESTED","458":"NESTED","459":"NESTED","460":"NON-NESTED","461":"NON-NESTED","462":"NESTED","463":"NESTED","464":"NESTED","465":"NON-NESTED","466":"NESTED","467":"NESTED","468":"NON-NESTED","469":"EASY","470":"NON-NESTED","471":"NESTED","472":"NESTED","473":"EASY","474":"NESTED","475":"NESTED","476":"NESTED","477":"NESTED","478":"NON-NESTED","479":"NESTED","480":"NESTED","481":"NON-NESTED","482":"NESTED","483":"NESTED","484":"NESTED","485":"NESTED","486":"NESTED","487":"NON-NESTED","488":"NESTED","489":"NESTED","490":"NESTED","491":"NESTED","492":"NESTED","493":"EASY","494":"NESTED","495":"EASY","496":"NON-NESTED","497":"NON-NESTED","498":"NESTED","499":"NESTED","500":"NESTED","501":"NESTED","502":"NON-NESTED","503":"NON-NESTED","504":"NESTED","505":"NON-NESTED","506":"NESTED","507":"NON-NESTED","508":"NESTED","509":"NESTED","510":"NESTED","511":"NON-NESTED","512":"NESTED","513":"NESTED","514":"NESTED","515":"NESTED","516":"NESTED","517":"NESTED","518":"NESTED","519":"NESTED","520":"NESTED","521":"NESTED","522":"NESTED","523":"NESTED","524":"NON-NESTED","525":"NESTED","526":"NESTED","527":"NESTED","528":"EASY","529":"NESTED","530":"NESTED","531":"NESTED","532":"NESTED","533":"NESTED","534":"NESTED","535":"NESTED","536":"NON-NESTED","537":"NESTED","538":"NESTED","539":"NESTED","540":"NESTED","541":"NESTED","542":"EASY","543":"NESTED","544":"NESTED","545":"NESTED","546":"NESTED","547":"NESTED","548":"NESTED","549":"EASY","550":"EASY","551":"NESTED","552":"EASY","553":"NESTED","554":"NON-NESTED","555":"NESTED","556":"NESTED","557":"NESTED","558":"NESTED","559":"NON-NESTED","560":"NON-NESTED","561":"NESTED","562":"NESTED","563":"NESTED","564":"NON-NESTED","565":"NON-NESTED","566":"NON-NESTED","567":"EASY","568":"NESTED","569":"NESTED","570":"NESTED","571":"NON-NESTED","572":"NESTED","573":"NESTED","574":"NESTED","575":"NESTED","576":"EASY","577":"NESTED","578":"NESTED","579":"NON-NESTED","580":"NESTED","581":"NESTED","582":"NESTED","583":"EASY","584":"NON-NESTED","585":"NON-NESTED","586":"NESTED","587":"NESTED","588":"NESTED","589":"EASY","590":"NESTED","591":"NESTED","592":"NON-NESTED","593":"NON-NESTED","594":"EASY","595":"NON-NESTED","596":"NESTED","597":"NON-NESTED","598":"EASY","599":"NESTED","600":"NON-NESTED","601":"NESTED","602":"NESTED","603":"NESTED","604":"NESTED","605":"NESTED","606":"NON-NESTED","607":"NESTED","608":"NESTED","609":"NON-NESTED","610":"NESTED","611":"NESTED","612":"NESTED","613":"NESTED","614":"NON-NESTED","615":"NESTED","616":"NESTED","617":"NESTED","618":"NON-NESTED","619":"NESTED","620":"NON-NESTED","621":"NESTED","622":"NON-NESTED","623":"NON-NESTED","624":"NESTED","625":"NESTED","626":"NESTED","627":"NESTED","628":"EASY","629":"NESTED","630":"NESTED","631":"NESTED","632":"NON-NESTED","633":"NESTED","634":"NON-NESTED","635":"NESTED","636":"EASY","637":"NON-NESTED","638":"NON-NESTED","639":"EASY","640":"NON-NESTED","641":"NESTED","642":"NESTED","643":"NESTED","644":"NESTED","645":"NON-NESTED","646":"NESTED","647":"EASY","648":"NESTED","649":"NESTED","650":"NESTED","651":"NESTED","652":"NON-NESTED","653":"NESTED","654":"NESTED","655":"NESTED","656":"NON-NESTED","657":"EASY","658":"NESTED","659":"NON-NESTED","660":"NON-NESTED","661":"NESTED","662":"NESTED","663":"NESTED","664":"NESTED","665":"NESTED","666":"NON-NESTED","667":"NON-NESTED","668":"NESTED","669":"EASY","670":"EASY","671":"NESTED","672":"NON-NESTED","673":"NESTED","674":"NON-NESTED","675":"NON-NESTED","676":"NESTED","677":"NON-NESTED","678":"EASY","679":"NESTED","680":"NON-NESTED","681":"NESTED","682":"EASY","683":"NESTED","684":"NON-NESTED","685":"NESTED","686":"NON-NESTED","687":"NON-NESTED","688":"NON-NESTED","689":"EASY","690":"NON-NESTED","691":"NESTED","692":"NON-NESTED","693":"NESTED","694":"NESTED","695":"NESTED","696":"NESTED","697":"NESTED","698":"NESTED","699":"NON-NESTED","700":"NON-NESTED","701":"NESTED","702":"NESTED","703":"EASY","704":"NON-NESTED","705":"EASY","706":"EASY","707":"NESTED","708":"NESTED","709":"EASY","710":"NESTED","711":"NON-NESTED","712":"NON-NESTED","713":"NESTED","714":"NON-NESTED","715":"EASY","716":"EASY","717":"NESTED","718":"NESTED","719":"NESTED","720":"NESTED","721":"NESTED","722":"EASY","723":"NESTED","724":"NON-NESTED","725":"NON-NESTED","726":"EASY","727":"NON-NESTED","728":"EASY","729":"EASY","730":"NESTED","731":"EASY","732":"NESTED","733":"NESTED","734":"EASY","735":"NESTED","736":"NESTED","737":"NESTED","738":"EASY","739":"NON-NESTED","740":"NESTED","741":"NESTED","742":"NON-NESTED","743":"NESTED","744":"NESTED","745":"NESTED","746":"NESTED","747":"NESTED","748":"NESTED","749":"EASY","750":"EASY","751":"NESTED","752":"NON-NESTED","753":"NESTED","754":"EASY","755":"NESTED","756":"NON-NESTED","757":"NON-NESTED","758":"EASY","759":"NESTED","760":"NON-NESTED","761":"NESTED","762":"NON-NESTED","763":"NESTED","764":"NESTED","765":"NON-NESTED","766":"EASY","767":"NON-NESTED","768":"NESTED","769":"NESTED","770":"NESTED","771":"EASY","772":"NESTED","773":"EASY","774":"NESTED","775":"NESTED","776":"NON-NESTED","777":"NON-NESTED","778":"NESTED","779":"EASY","780":"NESTED","781":"NESTED","782":"NON-NESTED","783":"NESTED","784":"NON-NESTED","785":"NON-NESTED","786":"NESTED","787":"NESTED","788":"NESTED","789":"NESTED","790":"NESTED","791":"NESTED","792":"NESTED","793":"NESTED","794":"NESTED","795":"NON-NESTED","796":"EASY","797":"EASY","798":"NESTED","799":"NON-NESTED","800":"NON-NESTED","801":"NESTED","802":"NON-NESTED","803":"NESTED","804":"NESTED","805":"NESTED","806":"NESTED","807":"NESTED","808":"EASY","809":"NESTED","810":"NESTED","811":"NESTED","812":"NESTED","813":"NON-NESTED","814":"NON-NESTED","815":"EASY","816":"NESTED","817":"NESTED","818":"NON-NESTED","819":"EASY","820":"NESTED","821":"NESTED","822":"NON-NESTED","823":"NESTED","824":"NESTED","825":"NESTED","826":"NESTED","827":"NESTED","828":"NESTED","829":"NESTED","830":"EASY","831":"EASY","832":"NESTED","833":"NESTED","834":"NESTED","835":"NESTED","836":"NESTED","837":"NON-NESTED","838":"NON-NESTED","839":"NESTED","840":"NESTED","841":"NON-NESTED","842":"NESTED","843":"NON-NESTED","844":"NESTED","845":"NON-NESTED","846":"NESTED","847":"NESTED","848":"NON-NESTED","849":"NESTED","850":"NESTED","851":"NESTED","852":"NESTED","853":"NESTED","854":"NESTED","855":"NESTED","856":"NON-NESTED","857":"NESTED","858":"NESTED","859":"NESTED","860":"NESTED","861":"EASY","862":"EASY","863":"NON-NESTED","864":"NON-NESTED","865":"NESTED","866":"NON-NESTED","867":"EASY","868":"NESTED","869":"NESTED","870":"NON-NESTED","871":"NON-NESTED","872":"EASY","873":"NON-NESTED","874":"NESTED","875":"NESTED","876":"NESTED","877":"NESTED","878":"NESTED","879":"NESTED","880":"NON-NESTED","881":"NESTED","882":"EASY","883":"EASY","884":"NON-NESTED","885":"EASY","886":"NESTED","887":"NESTED","888":"EASY","889":"NESTED","890":"NON-NESTED","891":"NON-NESTED","892":"NESTED","893":"NON-NESTED","894":"EASY","895":"NON-NESTED","896":"EASY","897":"NESTED","898":"NESTED","899":"NON-NESTED","900":"NON-NESTED","901":"NESTED","902":"NON-NESTED","903":"NESTED","904":"EASY","905":"NON-NESTED","906":"NON-NESTED","907":"NON-NESTED","908":"NON-NESTED","909":"NESTED","910":"NESTED","911":"NON-NESTED","912":"NESTED","913":"NESTED","914":"NESTED","915":"NESTED","916":"NESTED","917":"EASY","918":"NESTED","919":"EASY","920":"NESTED","921":"NESTED","922":"NON-NESTED","923":"NESTED","924":"NESTED","925":"NON-NESTED","926":"EASY","927":"NESTED","928":"NON-NESTED","929":"NESTED","930":"NESTED","931":"NESTED","932":"NESTED","933":"NON-NESTED","934":"NESTED","935":"NESTED","936":"NESTED","937":"NESTED","938":"NESTED","939":"NON-NESTED","940":"EASY","941":"NESTED","942":"NESTED","943":"NON-NESTED","944":"NESTED","945":"NESTED","946":"NESTED","947":"EASY","948":"NESTED","949":"NESTED","950":"NESTED","951":"NESTED","952":"NON-NESTED","953":"NON-NESTED","954":"NESTED","955":"EASY","956":"NESTED","957":"EASY","958":"NON-NESTED","959":"NON-NESTED","960":"NESTED","961":"NON-NESTED","962":"NESTED","963":"EASY","964":"NON-NESTED","965":"NON-NESTED","966":"NON-NESTED","967":"EASY","968":"NON-NESTED","969":"NESTED","970":"NON-NESTED","971":"NON-NESTED","972":"NESTED","973":"NON-NESTED","974":"NON-NESTED","975":"NESTED","976":"NESTED","977":"NESTED","978":"EASY","979":"NESTED","980":"NESTED","981":"NESTED","982":"NON-NESTED","983":"EASY","984":"EASY","985":"NESTED","986":"NON-NESTED","987":"EASY","988":"NESTED","989":"NESTED","990":"NESTED","991":"NESTED","992":"NESTED","993":"NESTED","994":"NESTED","995":"NON-NESTED","996":"NON-NESTED","997":"NESTED","998":"NON-NESTED","999":"NESTED","1000":"EASY","1001":"EASY","1002":"NESTED","1003":"NESTED","1004":"NON-NESTED","1005":"NESTED","1006":"NESTED","1007":"NESTED","1008":"NON-NESTED","1009":"NESTED","1010":"EASY","1011":"NESTED","1012":"EASY","1013":"NESTED","1014":"NESTED","1015":"NESTED","1016":"NESTED","1017":"NESTED","1018":"EASY","1019":"NESTED","1020":"NON-NESTED","1021":"EASY","1022":"EASY","1023":"NON-NESTED","1024":"NESTED","1025":"NESTED","1026":"NON-NESTED","1027":"NESTED","1028":"NESTED","1029":"NESTED","1030":"NESTED","1031":"EASY","1032":"NON-NESTED","1033":"NESTED","1034":"NESTED","1035":"NESTED","1036":"NESTED","1037":"NON-NESTED","1038":"EASY","1039":"NESTED","1040":"NON-NESTED","1041":"NESTED","1042":"NESTED","1043":"NESTED","1044":"NESTED","1045":"NESTED","1046":"NESTED","1047":"EASY","1048":"NESTED","1049":"NON-NESTED","1050":"NON-NESTED","1051":"NON-NESTED","1052":"EASY","1053":"NON-NESTED","1054":"NESTED","1055":"EASY","1056":"EASY","1057":"EASY","1058":"NESTED","1059":"NON-NESTED","1060":"NESTED","1061":"EASY","1062":"NESTED","1063":"NESTED","1064":"NESTED","1065":"EASY","1066":"EASY","1067":"NON-NESTED","1068":"NESTED","1069":"EASY","1070":"NESTED","1071":"NESTED","1072":"NON-NESTED","1073":"NON-NESTED","1074":"NON-NESTED","1075":"NON-NESTED","1076":"EASY","1077":"NON-NESTED","1078":"NESTED","1079":"NON-NESTED","1080":"NON-NESTED","1081":"NESTED","1082":"NON-NESTED","1083":"NESTED","1084":"NON-NESTED","1085":"NON-NESTED","1086":"NON-NESTED","1087":"NESTED","1088":"NESTED","1089":"EASY","1090":"NON-NESTED","1091":"NESTED","1092":"NON-NESTED","1093":"NON-NESTED","1094":"NON-NESTED","1095":"NON-NESTED","1096":"NON-NESTED","1097":"NESTED","1098":"NESTED","1099":"NESTED","1100":"NESTED","1101":"NESTED","1102":"NESTED","1103":"NESTED","1104":"NESTED","1105":"NESTED","1106":"NON-NESTED","1107":"EASY","1108":"NON-NESTED","1109":"NON-NESTED","1110":"NON-NESTED","1111":"EASY","1112":"NON-NESTED","1113":"NON-NESTED","1114":"NON-NESTED","1115":"NON-NESTED","1116":"NESTED","1117":"NESTED","1118":"NON-NESTED","1119":"NESTED","1120":"NON-NESTED","1121":"NON-NESTED","1122":"NESTED","1123":"NESTED","1124":"NESTED","1125":"NESTED","1126":"EASY","1127":"NESTED","1128":"NON-NESTED","1129":"NON-NESTED","1130":"NON-NESTED","1131":"NESTED","1132":"NESTED","1133":"EASY","1134":"NON-NESTED","1135":"NON-NESTED","1136":"NESTED","1137":"NESTED","1138":"NESTED","1139":"EASY","1140":"NON-NESTED","1141":"EASY","1142":"NESTED","1143":"NESTED","1144":"NESTED","1145":"NESTED","1146":"NESTED","1147":"NON-NESTED","1148":"NESTED","1149":"NESTED","1150":"NON-NESTED","1151":"NESTED","1152":"NESTED","1153":"NON-NESTED","1154":"NESTED","1155":"NON-NESTED","1156":"NESTED","1157":"NON-NESTED","1158":"NESTED","1159":"NESTED","1160":"NON-NESTED","1161":"NESTED","1162":"NESTED","1163":"NESTED","1164":"NON-NESTED","1165":"NON-NESTED","1166":"NESTED","1167":"NON-NESTED","1168":"NESTED","1169":"NESTED","1170":"NESTED","1171":"NESTED","1172":"NON-NESTED","1173":"NESTED","1174":"NESTED","1175":"NESTED","1176":"NESTED","1177":"NON-NESTED","1178":"EASY","1179":"NON-NESTED","1180":"NON-NESTED","1181":"NESTED","1182":"NON-NESTED","1183":"NESTED","1184":"NESTED","1185":"NON-NESTED","1186":"NON-NESTED","1187":"NESTED","1188":"NESTED","1189":"EASY","1190":"EASY","1191":"NESTED","1192":"EASY","1193":"EASY","1194":"NON-NESTED","1195":"NON-NESTED","1196":"NESTED","1197":"NESTED","1198":"NON-NESTED","1199":"EASY","1200":"NESTED","1201":"NON-NESTED","1202":"NON-NESTED","1203":"NESTED","1204":"NESTED","1205":"NON-NESTED","1206":"NESTED","1207":"NESTED","1208":"NESTED","1209":"NESTED","1210":"EASY","1211":"NESTED","1212":"NON-NESTED","1213":"EASY","1214":"EASY","1215":"EASY","1216":"EASY","1217":"NON-NESTED","1218":"NESTED","1219":"NESTED","1220":"NESTED","1221":"NESTED","1222":"NESTED","1223":"NON-NESTED","1224":"NON-NESTED","1225":"NESTED","1226":"NON-NESTED","1227":"NESTED","1228":"NESTED","1229":"NON-NESTED","1230":"NESTED","1231":"NESTED","1232":"NESTED","1233":"NESTED","1234":"NESTED","1235":"NESTED","1236":"NON-NESTED","1237":"NON-NESTED","1238":"EASY","1239":"NON-NESTED","1240":"NESTED","1241":"NESTED","1242":"NESTED","1243":"NON-NESTED","1244":"NON-NESTED","1245":"NESTED","1246":"NESTED","1247":"NESTED","1248":"EASY","1249":"NESTED","1250":"NESTED","1251":"NESTED","1252":"NESTED","1253":"NON-NESTED","1254":"EASY","1255":"NESTED","1256":"NESTED","1257":"NON-NESTED","1258":"NON-NESTED","1259":"NON-NESTED","1260":"NESTED","1261":"NESTED","1262":"NESTED","1263":"NESTED","1264":"NON-NESTED","1265":"NESTED","1266":"EASY","1267":"NESTED","1268":"NON-NESTED","1269":"NON-NESTED","1270":"NON-NESTED","1271":"NESTED","1272":"EASY","1273":"EASY","1274":"NESTED","1275":"EASY","1276":"NESTED","1277":"EASY","1278":"NESTED","1279":"NON-NESTED","1280":"NESTED","1281":"NON-NESTED","1282":"NESTED","1283":"NON-NESTED","1284":"NESTED","1285":"NESTED","1286":"NON-NESTED","1287":"NON-NESTED","1288":"EASY","1289":"NON-NESTED","1290":"NESTED","1291":"NON-NESTED","1292":"NESTED","1293":"NON-NESTED","1294":"NESTED","1295":"NESTED","1296":"NESTED","1297":"NESTED","1298":"NON-NESTED","1299":"NESTED","1300":"NON-NESTED","1301":"NON-NESTED","1302":"EASY","1303":"NESTED","1304":"NESTED","1305":"NON-NESTED","1306":"NON-NESTED","1307":"NON-NESTED","1308":"NON-NESTED","1309":"NESTED","1310":"NESTED","1311":"EASY","1312":"EASY","1313":"NESTED","1314":"EASY","1315":"NON-NESTED","1316":"NON-NESTED","1317":"NESTED","1318":"NON-NESTED","1319":"EASY","1320":"NON-NESTED","1321":"NON-NESTED","1322":"NON-NESTED","1323":"EASY","1324":"NON-NESTED","1325":"NESTED","1326":"NESTED","1327":"NESTED","1328":"NON-NESTED","1329":"NON-NESTED","1330":"NESTED","1331":"NON-NESTED","1332":"NESTED","1333":"EASY","1334":"NON-NESTED","1335":"NESTED","1336":"NON-NESTED","1337":"NON-NESTED","1338":"NON-NESTED","1339":"NESTED","1340":"NON-NESTED","1341":"NON-NESTED","1342":"NESTED","1343":"NON-NESTED","1344":"NON-NESTED","1345":"NON-NESTED","1346":"NESTED","1347":"NESTED","1348":"NESTED","1349":"EASY","1350":"NON-NESTED","1351":"NON-NESTED","1352":"NESTED","1353":"NON-NESTED","1354":"NON-NESTED","1355":"NESTED","1356":"NESTED","1357":"NON-NESTED","1358":"NESTED","1359":"NON-NESTED","1360":"EASY","1361":"NESTED","1362":"NESTED","1363":"NESTED","1364":"NON-NESTED","1365":"EASY","1366":"EASY","1367":"NON-NESTED","1368":"NON-NESTED","1369":"NON-NESTED","1370":"NESTED","1371":"NON-NESTED","1372":"NESTED","1373":"NESTED","1374":"EASY","1375":"NON-NESTED","1376":"NESTED","1377":"NESTED","1378":"EASY","1379":"NON-NESTED","1380":"NESTED","1381":"NESTED","1382":"EASY","1383":"NON-NESTED","1384":"NON-NESTED","1385":"NON-NESTED","1386":"EASY","1387":"NON-NESTED","1388":"NON-NESTED","1389":"NON-NESTED","1390":"NESTED","1391":"NESTED","1392":"NON-NESTED","1393":"EASY","1394":"NESTED","1395":"NON-NESTED","1396":"NESTED","1397":"NON-NESTED","1398":"NON-NESTED","1399":"NESTED","1400":"NESTED","1401":"EASY","1402":"NON-NESTED","1403":"NON-NESTED","1404":"EASY","1405":"NESTED","1406":"NON-NESTED","1407":"NON-NESTED","1408":"NESTED","1409":"NON-NESTED","1410":"NON-NESTED","1411":"NESTED","1412":"NESTED","1413":"NON-NESTED","1414":"NESTED","1415":"NESTED","1416":"EASY","1417":"EASY","1418":"NON-NESTED","1419":"NESTED","1420":"NESTED","1421":"EASY","1422":"EASY","1423":"NESTED","1424":"NON-NESTED","1425":"NON-NESTED","1426":"NON-NESTED","1427":"NESTED","1428":"NON-NESTED","1429":"NESTED","1430":"EASY","1431":"NESTED","1432":"NON-NESTED","1433":"NON-NESTED","1434":"NON-NESTED","1435":"NON-NESTED","1436":"NESTED","1437":"EASY","1438":"NON-NESTED","1439":"NESTED","1440":"NON-NESTED","1441":"NON-NESTED","1442":"NESTED","1443":"NESTED","1444":"NON-NESTED","1445":"NESTED","1446":"NON-NESTED","1447":"NESTED","1448":"EASY","1449":"NESTED","1450":"EASY","1451":"NESTED","1452":"NESTED","1453":"NON-NESTED","1454":"NESTED","1455":"NON-NESTED","1456":"NESTED","1457":"NON-NESTED","1458":"NON-NESTED","1459":"EASY","1460":"EASY","1461":"EASY","1462":"NON-NESTED","1463":"NON-NESTED","1464":"NON-NESTED","1465":"NESTED","1466":"NESTED","1467":"NON-NESTED","1468":"NESTED","1469":"NON-NESTED","1470":"NON-NESTED","1471":"NON-NESTED","1472":"NON-NESTED","1473":"NESTED","1474":"NESTED","1475":"NON-NESTED","1476":"NESTED","1477":"NESTED","1478":"NESTED","1479":"NON-NESTED","1480":"NON-NESTED","1481":"NON-NESTED","1482":"NESTED","1483":"NESTED","1484":"NON-NESTED","1485":"NON-NESTED","1486":"NON-NESTED","1487":"NON-NESTED","1488":"EASY","1489":"NESTED","1490":"NON-NESTED","1491":"NESTED","1492":"NON-NESTED","1493":"EASY","1494":"NON-NESTED","1495":"NESTED","1496":"NESTED","1497":"EASY","1498":"NESTED","1499":"NESTED","1500":"NON-NESTED","1501":"NESTED","1502":"NESTED","1503":"NON-NESTED","1504":"NON-NESTED","1505":"EASY","1506":"EASY","1507":"NON-NESTED","1508":"NON-NESTED","1509":"NON-NESTED","1510":"NESTED","1511":"NESTED","1512":"NON-NESTED","1513":"EASY","1514":"NESTED","1515":"NON-NESTED","1516":"NESTED","1517":"NON-NESTED","1518":"NON-NESTED","1519":"EASY","1520":"NON-NESTED","1521":"NON-NESTED","1522":"NON-NESTED","1523":"NESTED","1524":"NON-NESTED","1525":"NESTED","1526":"EASY","1527":"NON-NESTED","1528":"NESTED","1529":"NESTED","1530":"NESTED","1531":"EASY","1532":"EASY","1533":"NON-NESTED","1534":"NESTED","1535":"NESTED","1536":"NESTED","1537":"NON-NESTED","1538":"NON-NESTED","1539":"NESTED","1540":"EASY","1541":"NON-NESTED","1542":"NON-NESTED","1543":"NON-NESTED","1544":"NESTED","1545":"EASY","1546":"NESTED","1547":"NON-NESTED","1548":"NESTED","1549":"NON-NESTED","1550":"NESTED","1551":"NESTED","1552":"EASY","1553":"EASY","1554":"NESTED","1555":"NON-NESTED","1556":"EASY","1557":"NON-NESTED","1558":"NON-NESTED","1559":"EASY","1560":"NON-NESTED","1561":"EASY","1562":"NON-NESTED","1563":"NESTED","1564":"NON-NESTED","1565":"EASY","1566":"NESTED","1567":"NON-NESTED","1568":"NON-NESTED","1569":"NON-NESTED","1570":"NON-NESTED","1571":"NESTED","1572":"NON-NESTED","1573":"NON-NESTED","1574":"NESTED","1575":"NESTED","1576":"NON-NESTED","1577":"NON-NESTED","1578":"NESTED","1579":"EASY","1580":"NON-NESTED","1581":"NON-NESTED","1582":"NON-NESTED","1583":"EASY","1584":"NON-NESTED","1585":"NON-NESTED","1586":"NON-NESTED","1587":"NESTED","1588":"NON-NESTED","1589":"NESTED","1590":"NON-NESTED","1591":"NESTED","1592":"NON-NESTED","1593":"NON-NESTED","1594":"NON-NESTED","1595":"NON-NESTED","1596":"NESTED","1597":"NON-NESTED","1598":"NESTED","1599":"EASY","1600":"EASY","1601":"NON-NESTED","1602":"NESTED","1603":"NESTED","1604":"NON-NESTED","1605":"EASY","1606":"NON-NESTED","1607":"NESTED","1608":"EASY","1609":"NON-NESTED","1610":"NON-NESTED","1611":"NESTED","1612":"NESTED","1613":"NON-NESTED","1614":"EASY","1615":"NESTED","1616":"NESTED","1617":"EASY","1618":"NESTED","1619":"NESTED","1620":"EASY","1621":"NON-NESTED","1622":"NON-NESTED","1623":"NON-NESTED","1624":"NON-NESTED","1625":"NESTED","1626":"NON-NESTED","1627":"NESTED","1628":"NESTED","1629":"EASY","1630":"NESTED","1631":"NESTED","1632":"NON-NESTED","1633":"NON-NESTED","1634":"NESTED","1635":"NON-NESTED","1636":"NON-NESTED","1637":"NON-NESTED","1638":"NON-NESTED","1639":"NESTED","1640":"NON-NESTED","1641":"NON-NESTED","1642":"NON-NESTED","1643":"NON-NESTED","1644":"NON-NESTED","1645":"NESTED","1646":"NON-NESTED","1647":"NON-NESTED","1648":"NESTED","1649":"NON-NESTED","1650":"NON-NESTED","1651":"EASY","1652":"NON-NESTED","1653":"NON-NESTED","1654":"NESTED","1655":"NON-NESTED","1656":"NON-NESTED","1657":"NESTED","1658":"NESTED"},"schema_links":{"0":"[river.rivername, river.length, river.traverse]","1":"[city.countryname, city.statename, state.countryname = 'USA']","2":"[state.statename]","3":"[city.population, city.cityname, 'Boulder']","4":"[state.statename, river.length, river.traverse = state.statename]","5":"[borderinfo.statename, state.statename, borderinfo.border = state.statename]","6":"[state.statename,state.area]","7":"[city.population, city.statename, state.statename, 'Alaska']","8":"[state.statename,state.population]","9":"[state.statename, state.population]","10":"[highlow.lowestpoint, highlow.statename = state.statename]","11":"[state.area, state.statename]","12":"[river.rivername, river.traverse, state.statename, 'illinois']","13":"[river.rivername, river.traverse, state.statename, 'Illinois']","14":"[state.capital, state.statename, city.statename = state.statename, rhode island]","15":"[city.population, city.statename, state.statename, 'Wisconsin']","16":"[state.population, river.traverse = state.statename]","17":"[state.statename, state.area]","18":"[borderinfo.statename, borderinfo.border, state.statename, 'Kentucky']","19":"[state.population,state.statename,California]","20":"[state.statename, state.population]","21":"[state.statename, river.traverse, river.rivername, 'Ohio River']","22":"[state.statename, state.capital, state.population]","23":"[state.capital, state.population]","24":"[state.statename, state.population, borderinfo.border = state.statename, borderinfo.statename = state.statename]","25":"[state.statename]","26":"[state.capital, river.length, river.traverse = state.statename]","27":"[state.statename,state.population,state.density]","28":"[city.cityname, city.population, state.statename, state.area, city.statename = state.statename]","29":"[river.statename, state.statename, idaho]","30":"[highlow.statename, highlow.highestpoint, highlow.statename = 'Colorado']","31":"[state.statename,state.population]","32":"[borderinfo.border, borderinfo.statename, state.statename, kentucky]","33":"[city.population, city.statename, state.statename = city.statename]","34":"[state.population,state.area]","35":"[river.traverse, state.statename, state.population, river.traverse = state.statename]","36":"[state.statename, state.population, state.area, state.countryname, state.capital, city.statename = state.statename, city.population = state.population]","37":"[city.cityname, city.population, city.statename, state.statename, 'Texas']","38":"[state.statename, state.population]","39":"[mountain.mountainname, mountain.mountainaltitude, mountain.statename]","40":"[state.capital, city.cityname, city.population, city.statename = state.statename]","41":"[state.population, borderinfo.border, state.statename = borderinfo.border]","42":"[city.cityname, city.population]","43":"[highlow.lowestpoint, highlow.statename, 'Iowa']","44":"[state.statename]","45":"[state.statename,state.population,state.density]","46":"[city.population, city.statename, state.statename, 'Washington', 'Seattle']","47":"[river.rivername, river.length, river.traverse = state.statename, borderinfo.border = state.statename, borderinfo.statename = state.statename]","48":"[river.rivername, river.traverse, state.statename, 'Illinois']","49":"[state.statename, state.population, river.traverse = state.statename]","50":"[state.statename, state.population]","51":"[city.cityname, city.population, city.statename = state.statename, state.statename, 'Kansas']","52":"[state.statename, state.density, state.countryname, USA]","53":"[state.statename, state.density]","54":"[state.population, river.traverse = state.statename]","55":"[state.area, state.capital, 'albany']","56":"[state.population,state.density,state.statename = 'Wyoming']","57":"[state.statename, river.length, river.traverse = state.statename]","58":"[city.countryname, city.statename, state.countryname = 'United States']","59":"[highlow.highestpoint, state.statename, state.capital, 'des moines']","60":"[city.cityname, city.population, city.statename, state.statename, wyoming]","61":"[state.area,state.statename,'New Mexico']","62":"[state.statename,state.population,state.density]","63":"[river.rivername, borderinfo.border, borderinfo.statename = state.statename, river.rivername = 'Mississippi']","64":"[river.length, river.traverse, state.statename]","65":"[state.statename,state.population,state.density]","66":"[river.rivername, river.length, river.traverse, state.statename]","67":"[state.statename, borderinfo.border, state.statename = borderinfo.border]","68":"[river.traverse,state.statename]","69":"[state.statename, river.traverse, rivername = 'ohio']","70":"[highlow.statename, highlow.lowestelevation, state.statename, highlow.statename = 'Alabama']","71":"[highlow.lowestpoint, highlow.statename = state.statename, state.countryname = 'us']","72":"[city.cityname, city.population, state.capital, city.statename = state.statename]","73":"[borderinfo.statename, borderinfo.border, state.statename, 'Kentucky']","74":"[highlow.lowestpoint, highlow.statename, state.statename, 'Iowa']","75":"[river.rivername, river.length, river.traverse = state.statename, 'rio grande']","76":"[state.statename,state.population,state.density]","77":"[city.population, city.cityname, state.statename]","78":"[state.statename, state.population, borderinfo.border = state.statename]","79":"[state.capital, state.population]","80":"[state.population]","81":"[river.rivername, river.length, river.traverse = state.statename, 'rio grande']","82":"[state.capital, state.area]","83":"[highlow.statename, highlow.highestpoint, highlow.lowestpoint, 0]","84":"[river.traverse, river.length, state.statename, idaho]","85":"[city.population, city.statename, state.statename]","86":"[city.cityname, city.population, city.statename = 'Wyoming']","87":"[state.statename, river.length, river.traverse = state.statename]","88":"[city.population, city.statename, state.statename, 'Wisconsin']","89":"[state.statename,state.population,state.density]","90":"[city.cityname, city.population, city.countryname, state.statename]","91":"[highlow.highestpoint, highlow.statename]","92":"[state.population, state.statename, 'California']","93":"[state.population, state.statename, city.statename = state.statename, state.statename = 'California']","94":"[state.capital, state.density]","95":"[city.cityname, city.population]","96":"[state.statename,state.population]","97":"[river.length]","98":"[state.population, state.statename, 'California']","99":"[river.rivername, river.length, river.traverse = state.statename, state.statename, Texas]","100":"[borderinfo.border,state.statename,borderinfo.statename = state.statename,kentucky]","101":"[state.statename, state.population]","102":"[river.rivername, river.traverse, state.statename, 'Illinois']","103":"[highlow.lowestpoint, highlow.statename, state.statename, 'Iowa']","104":"[river.rivername, river.traverse, state.statename]","105":"[river.rivername, river.length, city.statename = state.statename]","106":"[city.population, state.statename, river.traverse = state.statename]","107":"[mountain.mountainname, mountain.mountainaltitude, mountain.statename, state.statename, 'United States']","108":"[highlow.lowestpoint, river.traverse, highlow.statename = state.statename]","109":"[highlow.statename, highlow.highestpoint, river.traverse = state.statename]","110":"[river.rivername, river.traverse, state.statename]","111":"[state.statename, state.area]","112":"[state.capital, state.statename, city.statename = state.statename, city.population, 'Texas']","113":"[river.rivername, river.traverse, state.statename]","114":"[highlow.highestpoint, highlow.statename]","115":"[highlow.highestpoint, highlow.statename]","116":"[city.cityname, city.statename, state.statename, 'Kansas']","117":"[city.statename, city.cityname, state.statename, 'springfield']","118":"[state.statename, borderinfo.border, borderinfo.statename, 'ohio']","119":"[river.rivername, river.traverse, state.statename]","120":"[borderinfo.statename, state.statename, borderinfo.border = state.statename, 'Texas']","121":"[city.cityname, state.capital, city.statename = state.statename, Texas]","122":"[state.statename, state.population, state.area, state.density]","123":"[borderinfo.statename, borderinfo.border, state.statename, kentucky]","124":"[state.statename, river.traverse, river.rivername, 'Ohio River']","125":"[city.cityname, city.population, state.countryname = 'USA']","126":"[state.capital, state.population]","127":"[state.population, river.traverse, river.traverse = state.statename]","128":"[state.population,state.countryname,'United States']","129":"[mountain.mountainname, mountain.mountainaltitude, 'guadalupe peak']","130":"[river.length, borderinfo.border, borderinfo.statename = state.statename, river.traverse = state.statename]","131":"[river.rivername, river.traverse, state.statename, 'Illinois']","132":"[state.statename,state.population]","133":"[highlow.highestpoint, highlow.statename = state.statename, state.statename, 'Delaware']","134":"[state.population, state.statename, 'California']","135":"[city.statename,state.cityname,'springfield']","136":"[state.density, state.population, state.area]","137":"[city.population, city.cityname, 'boulder']","138":"[highlow.lowestpoint, highlow.statename = state.statename, state.countryname = 'United States']","139":"[river.rivername, river.traverse, state.statename, 'Illinois']","140":"[river.rivername, river.length, river.traverse = state.statename, state.statename, Texas]","141":"[borderinfo.statename, state.statename, state.population, borderinfo.border = state.statename, 'California']","142":"[river.rivername, river.length, river.traverse]","143":"[state.statename, state.population]","144":"[state.population, borderinfo.statename = state.statename]","145":"[highlow.highestpoint, highlow.statename, 'Delaware']","146":"[borderinfo.border, highlow.highestpoint, borderinfo.statename = highlow.statename]","147":"[state.statename, city.statename, city.population, state.capital]","148":"[city.cityname, city.population, city.statename, state.statename, 'Kansas']","149":"[state.statename, river.rivername, river.traverse = state.statename, ohio]","150":"[borderinfo.border, state.statename, state.population, borderinfo.border = state.statename, Texas]","151":"[state.statename, borderinfo.border = state.statename]","152":"[city.cityname, city.population, state.statename]","153":"[river.rivername, river.traverse, state.statename, 'Illinois']","154":"[borderinfo.border,state.statename,'Kentucky']","155":"[borderinfo.statename, borderinfo.border, state.statename, kentucky]","156":"[city.cityname, city.population, city.statename = state.statename, state.statename, 'Wyoming']","157":"[state.statename, state.area, river.rivername, river.length, river.traverse = state.statename]","158":"[river.rivername, river.length, river.traverse = state.statename, state.statename, Texas]","159":"[highlow.highestpoint, highlow.statename = state.statename, state.statename, 'Delaware']","160":"[state.statename, city.cityname, city.statename = state.statename, 'springfield']","161":"[river.rivername, borderinfo.border, borderinfo.statename = state.statename, state.statename = 'Alabama']","162":"[highlow.highestelevation, highlow.statename, 'Delaware']","163":"[state.density, state.population, state.area]","164":"[state.statename,state.area]","165":"[river.statename, river.length, state.statename]","166":"[highlow.lowestpoint, highlow.statename, river.traverse = highlow.statename, river.rivername = 'Mississippi']","167":"[river.rivername, river.statename, 'Idaho']","168":"[state.statename, river.traverse, river.rivername = 'ohio river']","169":"[river.rivername, river.length, river.traverse, 'colorado']","170":"[state.statename, state.population, state.area]","171":"[city.cityname, city.population, state.countryname = 'USA']","172":"[mountain.mountainname, mountain.mountainaltitude, mountain.countryname, mountain.statename]","173":"[state.statename,state.population]","174":"[river.length, river.traverse, state.statename, texas]","175":"[river.traverse, river.statename, state.statename, 'Colorado']","176":"[state.population, river.traverse]","177":"[river.rivername, river.traverse, state.statename, 'Illinois']","178":"[city.cityname, city.population, city.statename = state.statename, 'Alaska']","179":"[state.capital, state.population]","180":"[highlow.highestpoint, highlow.statename, 'Delaware']","181":"[river.rivername, river.traverse, state.statename, 'Illinois']","182":"[river.rivername, river.traverse, state.statename, 'Illinois']","183":"[river.rivername, river.length, river.traverse = state.statename, state.statename, Texas]","184":"[river.length, river.traverse = state.statename]","185":"[city.cityname, city.population, city.statename = state.statename, state.statename, Wyoming]","186":"[state.statename, state.population]","187":"[river.rivername, river.length]","188":"[city.cityname, city.population, city.statename = state.statename, state.statename, 'Kansas']","189":"[state.area, state.countryname, 'US']","190":"[river.rivername, borderinfo.border, borderinfo.statename = state.statename, state.statename = 'Alabama']","191":"[state.capital, city.cityname, city.population, city.statename = state.statename]","192":"[state.statename, river.traverse, river.rivername, 'Ohio River']","193":"[city.cityname, city.population, city.countryname, city.statename]","194":"[borderinfo.border,state.statename,Kentucky]","195":"[state.statename, state.area]","196":"[state.statename, state.capital, highlow.statename, highlow.highestpoint, highlow.statename = state.statename]","197":"[river.length, river.countryname, river.statename = state.statename, state.statename, 'Texas']","198":"[highlow.highestpoint, highlow.statename]","199":"[river.rivername, river.length]","200":"[city.cityname, city.population, city.statename, 'Wyoming']","201":"[city.countryname, city.statename, state.countryname = 'usa']","202":"[river.rivername, river.length, river.traverse]","203":"[city.population, city.countryname, USA]","204":"[city.statename,state.statename,city.cityname,'springfield']","205":"[state.density, state.statename]","206":"[state.statename, state.population, river.traverse]","207":"[city.cityname, city.population, state.countryname = 'usa']","208":"[state.area, city.population, city.statename = state.statename]","209":"[highlow.highestpoint, highlow.statename]","210":"[city.population, city.cityname, 'boulder city']","211":"[state.statename, state.countryname, 'United States']","212":"[state.statename, state.area, city.cityname, city.population, city.statename = state.statename]","213":"[city.cityname, city.statename, river.traverse = state.statename]","214":"[borderinfo.border, state.statename, state.population, borderinfo.statename = state.statename]","215":"[city.cityname, city.population, state.statename, state.population]","216":"[state.population, state.capital, city.statename = state.statename, statename = 'Texas']","217":"[state.population,state.area,statename]","218":"[city.cityname, city.population]","219":"[highlow.highestpoint, state.statename, state.capital = 'des moines']","220":"[city.cityname, city.population, city.countryname, city.statename]","221":"[city.cityname, city.statename, state.statename, Texas]","222":"[city.cityname, city.population, city.statename = state.statename, state.statename, Wyoming]","223":"[state.statename, state.population]","224":"[river.rivername, river.traverse, state.statename, 'Illinois']","225":"[city.cityname, city.population]","226":"[state.statename, state.countryname, 'usa']","227":"[state.capital, state.statename, city.statename, 'Texas']","228":"[city.cityname, city.population]","229":"[state.statename, state.area]","230":"[city.statename,state.statename,city.cityname,'springfield']","231":"[highlow.highestpoint, highlow.statename, 'Texas']","232":"[state.population, state.density]","233":"[state.capital,state.statename,texas]","234":"[state.area,state.population,state.density]","235":"[lake.lakename, lake.area, lake.countryname, lake.statename, california]","236":"[highlow.lowestpoint, highlow.statename]","237":"[state.population, state.statename, 'California']","238":"[highlow.highestpoint, highlow.statename = state.statename, state.countryname = 'America']","239":"[city.statename,state.statename,city.cityname,'springfield']","240":"[state.statename, state.population, state.area, state.countryname, state.capital, city.statename = state.statename, city.population]","241":"[state.statename, state.area]","242":"[city.cityname, city.statename, state.statename, 'Texas']","243":"[city.population, city.cityname, state.statename]","244":"[state.statename, city.cityname, city.statename = state.statename]","245":"[city.cityname, city.population, city.statename = state.statename, state.statename, 'Kansas']","246":"[state.population, state.statename, 'California']","247":"[mountain.mountainname, mountain.mountainaltitude, 'Guadalupe Peak']","248":"[borderinfo.statename, borderinfo.border, borderinfo.border = state.statename]","249":"[state.statename,state.population,state.density]","250":"[state.statename, borderinfo.border, borderinfo.statename, river.rivername, river.traverse, 'ohio river']","251":"[city.population, city.statename = state.statename, 'Wisconsin']","252":"[highlow.highestpoint, highlow.statename = state.statename, state.countryname = 'usa']","253":"[city.cityname, city.population, state.statename, state.area, river.traverse = state.statename]","254":"[highlow.highestpoint, highlow.statename = state.statename, state.countryname]","255":"[city.population, city.cityname, state.statename]","256":"[river.rivername, river.traverse, state.statename]","257":"[river.rivername, river.traverse, state.statename, 'Illinois']","258":"[state.area,state.statename,'New Mexico']","259":"[state.density,state.statename,'wyoming']","260":"[borderinfo.border, borderinfo.statename, state.statename, 'Kentucky']","261":"[highlow.highestpoint, borderinfo.border, borderinfo.statename = highlow.statename, 'Colorado']","262":"[state.population, river.traverse, river.traverse = state.statename]","263":"[state.statename, state.population]","264":"[borderinfo.border, borderinfo.statename, borderinfo.statename = state.statename, 'Kentucky']","265":"[city.population, city.statename, state.statename, 'Washington', 'Seattle']","266":"[river.rivername, river.length, river.countryname, river.traverse, 'united states']","267":"[city.cityname, city.population, city.statename, state.statename, 'kansas']","268":"[river.rivername, river.traverse, state.statename, idaho]","269":"[city.cityname, city.statename, river.traverse, 'mississippi']","270":"[state.statename,state.population]","271":"[state.statename, state.population, state.countryname, USA]","272":"[city.cityname, city.population]","273":"[state.statename, city.cityname, city.statename = state.statename, 'springfield']","274":"[river.rivername, river.length, river.countryname, river.statename = state.statename, state.statename, Texas]","275":"[city.population, city.cityname, state.statename]","276":"[borderinfo.statename, borderinfo.border, state.statename, 'Kentucky']","277":"[highlow.statename, highlow.highestpoint, highlow.statename = 'Colorado']","278":"[state.statename, state.population]","279":"[river.length, river.rivername, 'rio grande']","280":"[river.traverse, state.statename, idaho]","281":"[city.cityname, city.population, state.countryname, state.statename]","282":"[city.statename,state.statename,city.cityname,'springfield']","283":"[state.population,state.area,statename]","284":"[highlow.lowestpoint, highlow.statename, 'Iowa']","285":"[river.length]","286":"[state.statename, river.traverse, river.rivername, 'Ohio River']","287":"[river.length, river.rivername, 'rio grande']","288":"[borderinfo.statename, borderinfo.border, state.statename, 'Kentucky']","289":"[city.statename, state.statename, city.cityname, 'springfield']","290":"[state.capital, borderinfo.statename, borderinfo.border = state.statename]","291":"[state.statename,state.population]","292":"[state.population, river.traverse = state.statename]","293":"[city.cityname, city.population, city.statename, state.statename, 'Texas']","294":"[borderinfo.border,state.statename,borderinfo.statename = state.statename,Kentucky]","295":"[highlow.highestpoint, highlow.statename, state.statename = highlow.statename, 'Texas']","296":"[city.cityname, city.population, city.statename, state.statename, 'Texas']","297":"[borderinfo.statename, borderinfo.border, state.statename, 'Kentucky']","298":"[city.cityname, city.population, state.density]","299":"[river.traverse,state.statename,river.rivername,'ohio river']","300":"[state.capital, state.population]","301":"[highlow.highestelevation, highlow.statename = state.statename, state.countryname = 'United States']","302":"[city.cityname, city.population, city.statename = state.statename, state.statename, Wyoming]","303":"[state.statename, state.population]","304":"[river.rivername, river.traverse, 'Illinois']","305":"[river.statename, river.length, state.statename, 'Idaho']","306":"[state.statename,borderinfo.border = state.statename]","307":"[river.rivername, river.traverse, state.statename, 'Illinois']","308":"[city.cityname, city.population, city.statename, 'Wyoming']","309":"[state.population, city.population, city.cityname = 'Boulder']","310":"[state.statename,state.population]","311":"[borderinfo.border, highlow.highestpoint, highlow.statename = borderinfo.border]","312":"[highlow.highestpoint, highlow.statename = state.statename, state.countryname = 'United States']","313":"[state.statename,state.population,state.density]","314":"[highlow.highestpoint, state.density, highlow.statename = state.statename]","315":"[state.statename, state.countryname, 'United States']","316":"[state.population,state.density,state.statename]","317":"[state.capital, borderinfo.border, state.statename = borderinfo.border]","318":"[state.statename, river.traverse, river.rivername, 'Ohio River']","319":"[state.statename,state.area]","320":"[city.cityname, city.population, city.statename = state.statename, state.statename = 'Wyoming']","321":"[city.cityname, city.population, city.statename, state.statename]","322":"[river.rivername, river.traverse, state.statename]","323":"[borderinfo.statename, borderinfo.border, state.statename, 'Kentucky']","324":"[mountain.mountainname, mountain.mountainaltitude, highlow.statename = mountain.statename]","325":"[river.rivername, river.traverse, state.statename, 'Illinois']","326":"[state.population, state.statename, 'California']","327":"[state.area]","328":"[state.statename, river.length, river.traverse = state.statename]","329":"[river.rivername, river.length, river.countryname, river.traverse = state.statename, state.statename = 'United States']","330":"[river.rivername, river.traverse, state.statename]","331":"[state.population, river.traverse = state.statename]","332":"[highlow.lowestpoint, highlow.statename, 'Iowa']","333":"[city.cityname, city.population, city.statename = state.statename, state.statename, 'Kansas']","334":"[state.population, state.statename, 'California']","335":"[state.capital, borderinfo.border = state.statename]","336":"[borderinfo.border,state.statename,Kentucky]","337":"[state.statename, river.traverse, river.rivername = 'Ohio']","338":"[city.population, city.statename, state.statename, Alaska]","339":"[state.capital, state.statename, 'Texas']","340":"[city.population]","341":"[state.statename, city.cityname, city.population, city.statename = state.statename]","342":"[river.rivername, river.traverse, state.statename, 'Illinois']","343":"[state.capital, state.population]","344":"[highlow.highestpoint, highlow.statename, 'Texas']","345":"[state.statename]","346":"[state.area, borderinfo.border = state.statename, borderinfo.statename = state.statename, 'Texas']","347":"[state.statename, state.population, city.statename = state.statename, state.countryname = 'Wyoming']","348":"[highlow.highestelevation, highlow.statename = state.statename]","349":"[state.area,state.statename,'New Mexico']","350":"[state.population,state.statename,California]","351":"[state.capital,state.statename,texas]","352":"[city.cityname, city.population, state.statename, state.density]","353":"[river.traverse,state.statename,river.rivername,'ohio']","354":"[state.population, state.statename, 'California']","355":"[highlow.highestpoint, highlow.statename = state.statename, state.statename, 'Texas']","356":"[highlow.lowestelevation, highlow.statename = state.statename, 'pennsylvania']","357":"[city.cityname, city.statename, state.statename, 'Texas']","358":"[river.rivername, river.length, river.countryname]","359":"[state.area,state.countryname,'usa']","360":"[city.cityname, city.population, city.statename = 'Wyoming']","361":"[river.rivername, borderinfo.border, borderinfo.statename, 'Alabama']","362":"[river.rivername, river.length]","363":"[lake.lakename, lake.statename = state.statename, state.statename = 'Michigan']","364":"[borderinfo.border,state.statename,borderinfo.statename = state.statename]","365":"[borderinfo.border, state.statename, state.population, borderinfo.statename = state.statename]","366":"[state.statename, river.traverse, river.rivername = 'ohio']","367":"[city.population, city.cityname, 'Boulder']","368":"[mountain.mountainname, mountain.countryname, mountain.statename = state.statename, state.statename, 'Texas']","369":"[river.rivername, river.length, river.traverse, state.statename, Texas]","370":"[state.area]","371":"[state.population, borderinfo.statename, borderinfo.border = 'Mississippi']","372":"[city.population, city.cityname, state.statename]","373":"[river.rivername, river.traverse, state.statename, 'Illinois']","374":"[state.population, state.area]","375":"[state.area,state.statename,'New Mexico']","376":"[state.statename,state.population,state.density]","377":"[state.statename,state.density]","378":"[city.cityname, city.population]","379":"[river.rivername, river.traverse, 'Illinois']","380":"[state.statename,state.population,state.density]","381":"[city.population, city.statename, state.statename]","382":"[state.statename,state.area]","383":"[borderinfo.border, borderinfo.statename, borderinfo.border = state.statename]","384":"[city.population, city.cityname, state.statename]","385":"[river.rivername, river.statename, 'Idaho']","386":"[city.cityname, city.population, city.statename, state.statename]","387":"[river.rivername, river.traverse, state.statename, 'Illinois']","388":"[city.statename, city.cityname, state.statename, city.cityname = 'Springfield']","389":"[state.density,state.statename,'Wyoming']","390":"[river.rivername, river.length, river.traverse = state.statename, borderinfo.border = state.statename, borderinfo.statename = state.statename, state.statename = 'Tennessee']","391":"[highlow.lowestpoint, highlow.statename, 'iowa']","392":"[state.statename]","393":"[state.statename, state.density]","394":"[river.rivername, river.length, river.traverse = state.statename]","395":"[state.population, state.area]","396":"[state.population,state.statename,California]","397":"[city.cityname, city.statename, state.statename]","398":"[highlow.statename, highlow.highestpoint, highlow.statename = 'Colorado']","399":"[borderinfo.border,state.statename,Kentucky]","400":"[state.capital, city.statename = state.statename, city.cityname]","401":"[state.statename,state.population]","402":"[state.population,state.statename]","403":"[state.statename,state.population,river.traverse]","404":"[city.cityname, city.population, city.statename = state.statename]","405":"[river.rivername, river.length, river.statename, river.traverse, Texas]","406":"[state.statename, city.statename, city.cityname = 'Springfield']","407":"[highlow.statename, highlow.highestpoint, city.cityname, city.statename = highlow.statename]","408":"[state.capital, state.statename, 'Texas']","409":"[state.statename,state.population]","410":"[borderinfo.border, state.population, state.statename = borderinfo.border]","411":"[highlow.highestpoint, borderinfo.border = state.statename, highlow.statename = state.statename]","412":"[river.rivername, river.traverse, state.statename, 'Illinois']","413":"[state.capital, state.population]","414":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","415":"[paper.title, paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'TAIL NIPS']","416":"[paper.title, author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId]","417":"[dataset.datasetId, dataset.datasetName, paperDataset.datasetId = dataset.datasetId, paperDataset.paperId = paper.paperId]","418":"[state.statename, river.traverse, river.traverse = state.statename]","419":"[highlow.statename, highlow.lowestpoint, river.rivername, river.traverse = highlow.statename]","420":"[river.rivername, river.traverse, state.statename, state.capital, 'albany']","421":"[paper.title, paper.numCitedBy, paper.year, paper.venueId = venue.venueId, venue.venueName, 2010, 'EMNLP']","422":"[author.authorId, author.authorName, paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'syntactic parsing']","423":"[paper.paperId, writes.authorId, author.authorId, author.authorName, 'Peter Mertens', 'Dina Barbian']","424":"[paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, paper.year, paper.venueId]","425":"[paper.title, paper.year, writes.authorId, author.authorName, paper.paperId, 2015, 'Liwen Xiong']","426":"[state.statename, state.population, river.traverse = state.statename]","427":"[river.rivername, river.traverse, state.statename, tennessee]","428":"[author.authorId, author.authorName, writes.paperId, cite.citingPaperId, writes.authorId = author.authorId, cite.citedPaperId = writes.paperId]","429":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","430":"[dataset.datasetName]","431":"[state.statename,borderinfo.border,state.statename]","432":"[paper.title, writes.authorId = author.authorId, author.authorName, author.authorName = 'Luke Zettlemoyer']","433":"[paper.title, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","434":"[state.statename, river.traverse = state.statename]","435":"[author.authorName, writes.paperId, cite.citedPaperId, writes.authorId = author.authorId]","436":"[venue.venueId, paper.title, paper.year, paper.numCiting, paper.numCitedBy, paper.venueId = venue.venueId, 2014, TACL]","437":"[keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName = 'Luke Zettlemoyer']","438":"[paperKeyphrase.paperId, keyphrase.keyphraseId, paper.paperId, writes.paperId, writes.authorId, author.authorId, keyphrase.keyphraseName = 'syntactic parsing']","439":"[state.capital, borderinfo.border = state.statename, borderinfo.statename = state.statename]","440":"[keyphrase.keyphraseName, writes.paperId = paper.paperId, writes.authorId = author.authorId, paper.year, author.authorName, 'Christof Dallermassl', 2000]","441":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, journal.journalId = paper.journalId, journal.journalName, 2016, CVPR, Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset]","442":"[state.statename, state.area, river.length, river.traverse = state.statename]","443":"[river.rivername, river.length, river.traverse, state.countryname = 'United States']","444":"[paper.title, paper.year, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, venue.venueName, keyphrase.keyphraseName, 2012, acl, Parsing]","445":"[writes.authorId, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'syntactic parsing']","446":"[paper.paperId, paper.title, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 2015, Liwen Xiong]","447":"[mountain.statename, mountain.mountainname, state.statename, 'Mount Whitney']","448":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'oren etzioni']","449":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, 'Sharon Goldwater']","450":"[paper.paperId, paper.year, keyphrase.keyphraseName, journal.journalName, paperKeyphrase.paperId = paper.paperId, paper.journalId = journal.journalId, keyphrase.keyphraseName = 'Multiuser Receiver', journal.journalName = 'Decision Feedback', paper.year = currentyear]","451":"[paper.paperId, writes.paperId, writes.authorId = author.authorId, author.authorName, 'sharon goldwater']","452":"[author.authorId, paper.title, paper.venueId = venue.venueId, venue.venueId, paper.year, 2016]","453":"[paper.title, paper.year, paper.venueId, paper.journalId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName]","454":"[paper.paperId, paperDataset.paperId = paper.paperId, paperDataset.datasetId = dataset.datasetId, dataset.datasetName, 'ImageNet']","455":"[highlow.statename, highlow.lowestpoint]","456":"[city.cityname, city.population, city.countryname, city.statename, state.countryname = 'USA']","457":"[dataset.datasetName, paperDataset.datasetId = dataset.datasetId, paperDataset.paperId = paper.paperId]","458":"[paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = paperKeyphrase.paperId, keyphrase.keyphraseName, 'deep learning']","459":"[author.authorName, writes.paperId, paper.paperId, paper.venueId, venue.venueId, writes.authorId = author.authorId, venue.venueName, AISTATS, author.authorName, David M. Blei]","460":"[keyphrase.keyphraseName, paper.paperId = paperKeyphrase.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'Luke Zettlemoyer']","461":"[paper.paperId, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'Question Answering']","462":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, Oren Etzioni]","463":"[paper.paperId, paperKeyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'deep learning']","464":"[state.statename, state.capital, borderinfo.border = state.statename, borderinfo.statename = state.statename, river.traverse = state.statename]","465":"[state.statename, state.capital, city.statename = state.statename, 'salem']","466":"[paper.year, paper.title, writes.authorId = author.authorId, author.authorName, paper.paperId = writes.paperId, 2015, Liwen Xiong]","467":"[state.capital, state.population, state.statename]","468":"[venue.venueId, paper.venueId, paper.paperId, writes.paperId, writes.authorId, author.authorId]","469":"[highlow.statename, highlow.highestelevation]","470":"[paper.title, paper.venueId = venue.venueId, venue.venueName, 'chi']","471":"[author.authorId, author.authorName, writes.paperId = paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","472":"[keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'Luke Zettlemoyer']","473":"[highlow.statename, highlow.highestelevation]","474":"[highlow.statename, highlow.lowestpoint, borderinfo.border = state.statename, borderinfo.statename = state.statename, state.statename = 'Idaho']","475":"[paper.title, paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'chi']","476":"[state.statename, state.area, river.rivername, river.traverse = state.statename]","477":"[river.rivername, river.traverse, state.statename, tennessee]","478":"[mountain.mountainname,mountain.statename,state.statename,alaska]","479":"[paper.title, paper.paperId = writes.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, keyphrase.keyphraseName = 'syntactic parsing']","480":"[paperKeyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorId = author.authorId]","481":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'sanjeev arora']","482":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 2015, 'Liwen Xiong']","483":"[paper.title, paper.year, writes.authorId = author.authorId, author.authorName, 'oren etzioni']","484":"[state.statename, state.area, city.cityname, city.statename = state.statename]","485":"[author.authorId, author.authorName, writes.paperId, writes.authorId, paper.paperId, paper.title, 'sharon goldwater']","486":"[author.authorId,writes.paperId,cite.citingPaperId = paper.paperId]","487":"[state.statename, state.population, state.area, state.countryname, state.capital, city.statename = state.statename, city.cityname]","488":"[writes.paperId, writes.authorId, author.authorId, author.authorName, 'Peter Mertens', 'Dina Barbian']","489":"[state.statename, state.population, borderinfo.border, borderinfo.statename, borderinfo.border = state.statename]","490":"[author.authorId, paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId]","491":"[highlow.statename, highlow.highestpoint, state.statename]","492":"[author.authorName, paper.title, paper.venueId = venue.venueId, writes.paperId = paper.paperId, venue.venueName, paper.year, 2012, Parsing, acl]","493":"[mountain.mountainname, mountain.countryname, mountain.statename]","494":"[paper.title, paper.year, paper.venueId = venue.venueId, paper.journalId = journal.journalId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, journal.journalName, venue.venueName, 'TAIL', 'NIPS']","495":"[highlow.statename, highlow.highestelevation]","496":"[paper.paperId, paper.title, paper.venueId = venue.venueId, venue.venueName, 'NIPS']","497":"[mountain.statename, mountain.mountainname, state.statename, 'Mount Whitney']","498":"[author.authorId, writes.paperId, paper.year, paperKeyphrase.keyphraseId, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.paperId = paperKeyphrase.paperId]","499":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, paper.paperId = writes.paperId, 'ras bodik']","500":"[author.authorId, author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.paperId]","501":"[state.capital, city.cityname, city.population, city.statename = state.statename]","502":"[author.authorName, writes.paperId, paper.year, paper.venueId, venue.venueName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.year = 2016, author.authorName = 'li dong']","503":"[author.authorId, writes.paperId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId = author.authorId, paperKeyphrase.paperId = writes.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","504":"[paper.paperId, paper.title, venue.venueId = paper.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, venue.venueName, keyphrase.keyphraseName, 'NIPS', 'TAIL']","505":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paper.venueId, paper.journalId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'Question Answering']","506":"[river.rivername, river.traverse, state.statename, 'usa']","507":"[paper.title, paper.journalId = journal.journalId, journal.journalName, NIPS]","508":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.title]","509":"[author.authorId, author.authorName, writes.paperId, cite.citingPaperId, writes.authorId = author.authorId, writes.paperId = paper.paperId, cite.citingPaperId = paper.paperId, 'Mirella Lapata']","510":"[highlow.highestpoint, state.population, state.statename]","511":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName]","512":"[author.authorId, writes.paperId, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, 'Liwen Xiong', 2015]","513":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'Question Answering']","514":"[author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId]","515":"[highlow.statename, highlow.highestpoint, state.statename]","516":"[paper.title, paper.year, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 2012, Parsing]","517":"[author.authorName, writes.authorId, writes.paperId, paper.paperId, paper.title]","518":"[author.authorId, author.authorName, paper.paperId, paper.title, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, 'Ed Desmond', 'Semantic Parsing']","519":"[state.statename, state.capital, city.cityname, city.statename, salem]","520":"[highlow.statename, highlow.lowestpoint, borderinfo.border = state.statename, borderinfo.statename, state.population]","521":"[paper.title, paper.year, writes.authorId = author.authorId, author.authorName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","522":"[author.authorId, author.authorName, paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId]","523":"[paper.year, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId, venue.venueName, 2016, 'acl']","524":"[author.authorName, writes.paperId, paper.venueId, venue.venueName, writes.authorId = author.authorId]","525":"[paper.title, paperKeyphrase.keyphraseId, writes.authorId, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, keyphrase.keyphraseName = 'keyphrase0', author.authorName = 'brian curless']","526":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, author.authorName, keyphrase.keyphraseName, 'brian curless', 'convolution']","527":"[paper.paperId, writes.authorId, author.authorId, author.authorName, writes.paperId, author.authorName = 'Peter Mertens', author.authorName = 'Dina Barbian']","528":"[lake.lakename, lake.area, lake.countryname, lake.statename]","529":"[author.authorId, author.authorName, writes.paperId, writes.authorId, paper.paperId, paper.title, paperKeyphrase.paperId, keyphrase.keyphraseId, keyphrase.keyphraseName, 'Ed Desmond', 'Semantic Parsing']","530":"[paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'chi']","531":"[state.statename, state.population]","532":"[author.authorName, writes.paperId, paper.numCiting, writes.authorId = author.authorId]","533":"[writes.paperId,writes.authorId,author.authorId,Christopher D. Manning]","534":"[river.length, state.statename, river.traverse = state.statename]","535":"[author.authorName, writes.paperId, paper.venueId, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, 'David M. Blei', 'AISTATS']","536":"[river.rivername, river.length, river.traverse = state.statename, state.statename, Texas]","537":"[author.authorId, author.authorName, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId]","538":"[author.authorName, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, writes.authorId = author.authorId, 'David M. Blei', 'AISTATS']","539":"[author.authorId, author.authorName, writes.paperId = paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","540":"[state.capital, city.population, city.statename = state.statename]","541":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'Question Answering']","542":"[author.authorName]","543":"[borderinfo.statename, borderinfo.border, river.traverse = state.statename]","544":"[author.authorId, author.authorName, writes.paperId, paper.year, paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId]","545":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, oren etzioni]","546":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","547":"[author.authorId, paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, writes.paperId = paper.paperId]","548":"[river.rivername, river.traverse, state.statename = river.traverse, city.cityname, city.statename = state.statename]","549":"[paper.title, paper.paperId]","550":"[river.rivername, river.length]","551":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2012, 'ACL']","552":"[highlow.statename, highlow.highestpoint]","553":"[state.statename, state.population, borderinfo.border = state.statename]","554":"[paper.paperId, paper.title, paper.year, paper.numCiting, paper.numCitedBy, venue.venueId = paper.venueId, journal.journalId = paper.journalId, writes.paperId = paper.paperId, writes.authorId = author.authorId]","555":"[paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = paperKeyphrase.paperId, keyphrase.keyphraseName, 'deep learning']","556":"[paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'Peter Mertens', 'Dina Barbian']","557":"[writes.paperId, writes.authorId, paperKeyphrase.paperId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, author.authorId, author.authorName, paper.paperId, paper.title, paper.year, paper.numCiting, paper.numCitedBy]","558":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId]","559":"[writes.paperId,writes.authorId,author.authorId,Christopher D. Manning]","560":"[author.authorId, writes.paperId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId]","561":"[state.statename, state.capital, borderinfo.statename, borderinfo.border = state.statename, boston]","562":"[author.authorName, writes.paperId, paper.paperId, paper.year, paper.venueId = venue.venueId, venue.venueName]","563":"[state.population, borderinfo.statename, borderinfo.border = state.statename]","564":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueId = 'acl', paper.year = 2012]","565":"[author.authorName, writes.paperId, paper.paperId = writes.paperId]","566":"[paper.title, paper.year, paper.journalId, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'mohammad rastegari']","567":"[state.area,state.population]","568":"[paper.title, paper.year, paper.venueId = venue.venueId, paper.journalId = journal.journalId, journal.journalName, venue.venueName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'Parsing', 'acl', 2012]","569":"[state.area, highlow.highestpoint, state.statename = highlow.statename]","570":"[state.statename, state.area, river.rivername, river.length, river.traverse = state.statename]","571":"[paper.title, paper.year, paper.venueId = venue.venueId, 'Parsing', 2012, 'acl 2012']","572":"[paper.title, paper.year, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, venue.venueName, keyphrase.keyphraseName, 2012, acl 2012, Parsing]","573":"[author.authorId, writes.paperId, paper.venueId, paper.year, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, paper.year = 2016]","574":"[author.authorName, writes.paperId, paper.year, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.year = 2000, author.authorName = 'Christof Dallermassl']","575":"[state.statename, state.capital, highlow.highestpoint, highlow.statename = state.statename]","576":"[state.area]","577":"[paper.title,paper.year,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,keyphrase.keyphraseName,'Parsing',2012]","578":"[borderinfo.statename, city.cityname, city.population, city.statename, borderinfo.border, California]","579":"[author.authorId, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId, paper.title, 'syntactic parsing']","580":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId, 'Peter Mertens', 'Dina Barbian']","581":"[author.authorId, author.authorName, venue.venueId, venue.venueName, paper.paperId, writes.paperId, writes.authorId, venue.venueName = 'AISTATS', author.authorName = 'David M. Blei']","582":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year]","583":"[state.capital, state.population]","584":"[author.authorName, paper.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId]","585":"[paper.year, paper.venueId, venue.venueName, paper.venueId = venue.venueId]","586":"[paper.title, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 2015]","587":"[paper.title, paper.venueId = venue.venueId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = paperKeyphrase.paperId, venue.venueName, keyphrase.keyphraseName, NIPS, TAIL]","588":"[author.authorId, writes.paperId, paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year = lastyear]","589":"[paper.title, paper.year, paper.paperId, 2011]","590":"[city.cityname,state.statename]","591":"[author.authorId, writes.paperId, writes.authorId = author.authorId]","592":"[author.authorId, author.authorName, paper.year, paper.title, paper.venueId = venue.venueId, venue.venueName, paper.journalId = journal.journalId, journal.journalName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","593":"[paper.title, paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName]","594":"[river.length, river.traverse]","595":"[paper.year, paper.venueId, venue.venueName, paper.venueId = venue.venueId, 2014, ACL]","596":"[borderinfo.statename, borderinfo.border, river.traverse]","597":"[author.authorId, author.authorName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, paper.year, venue.venueName, 2016, 'ACL']","598":"[city.cityname, city.statename, city.population, city.statename = 'Texas']","599":"[author.authorId, author.authorName, writes.paperId, writes.authorId, cite.citedPaperId, cite.citingPaperId, paper.paperId, 'Noah Smith']","600":"[state.statename, river.traverse = state.statename]","601":"[paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'deep learning']","602":"[author.authorName, writes.authorId, writes.paperId, paper.paperId, paper.title]","603":"[author.authorName, paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year, 2016, author.authorName = 'li dong']","604":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'Question Answering']","605":"[author.authorName, writes.paperId, paper.year, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, 2000, Christof Dallermassl]","606":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'Question Answering']","607":"[author.authorName, writes.paperId, cite.citingPaperId = paper.paperId]","608":"[author.authorName, writes.paperId, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.title]","609":"[paper.paperId, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'Question Answering']","610":"[paper.title, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'oren etzioni']","611":"[state.statename, state.population, river.rivername, river.traverse = state.statename]","612":"[author.authorId, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId, paper.title]","613":"[state.statename, state.population, river.rivername, river.traverse = state.statename, rio grande]","614":"[author.authorId, paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId]","615":"[author.authorId, writes.paperId, cite.citingPaperId, writes.authorId = author.authorId, cite.citingPaperId = paper.paperId]","616":"[state.statename, state.capital, borderinfo.border = state.statename, borderinfo.statename, river.rivername, river.traverse = state.statename]","617":"[writes.paperId, writes.authorId, author.authorId, author.authorName, Christopher D. Manning]","618":"[paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'subhasis chaudhuri']","619":"[borderinfo.border, state.statename, state.population, borderinfo.statename = state.statename, 'Wyoming']","620":"[paper.title, paper.venueId, paper.year, venue.venueId, 'CVPR ''16', 2016]","621":"[state.density, river.length, river.traverse = state.statename]","622":"[paper.paperId, paper.title, paper.venueId = venue.venueId, venue.venueName]","623":"[paper.paperId, keyphrase.keyphraseName, venue.venueName, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, 'TAIL', 'NIPS']","624":"[state.statename, state.area, borderinfo.statename, borderinfo.border = state.statename]","625":"[paper.title, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'Question Answering']","626":"[author.authorId, author.authorName, paper.paperId, paper.journalId, journal.journalId, journal.journalName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","627":"[author.authorName, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, 'David M. Blei', 'AISTATS']","628":"[state.area, state.statename]","629":"[state.statename, state.area, city.cityname, city.statename = state.statename]","630":"[mountain.mountainname, mountain.mountainaltitude, mountain.countryname, mountain.statename, highlow.statename = mountain.statename]","631":"[keyphrase.keyphraseName, writes.paperId = paper.paperId, author.authorId = writes.authorId, author.authorName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, Luke Zettlemoyer]","632":"[paper.paperId, paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'sharon goldwater']","633":"[author.authorName, writes.paperId, cite.citedPaperId, writes.authorId = author.authorId, cite.citedPaperId = paper.paperId, author.authorName = 'noah a smith']","634":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 2015, 'Liwen Xiong']","635":"[city.cityname, city.statename, borderinfo.border, borderinfo.statename, 'Nebraska']","636":"[state.density,state.capital,'austin']","637":"[author.authorName, writes.paperId, paper.venueId, venue.venueName, writes.authorId = author.authorId]","638":"[keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorId = author.authorId, author.authorName = 'Luke Zettlemoyer']","639":"[river.rivername, river.length, river.traverse]","640":"[river.length, river.traverse, state.statename, 'texas', 'colorado']","641":"[paper.title, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId, author.authorName, keyphrase.keyphraseName, author.authorName = 'brian curless', keyphrase.keyphraseName = 'convolution']","642":"[paper.paperId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName = 'Question Answering']","643":"[keyphrase.keyphraseId, keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, 'syntactic parsing']","644":"[author.authorId, author.authorName, writes.authorId, writes.paperId]","645":"[paper.paperId, writes.authorId, writes.paperId = paper.paperId, author.authorId, author.authorName, 'sharon goldwater']","646":"[state.statename, borderinfo.border, borderinfo.statename = state.statename, borderinfo.border != 'Texas']","647":"[river.rivername, river.length, river.countryname, river.traverse]","648":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.year]","649":"[author.authorId, author.authorName, writes.authorId = author.authorId, paper.paperId = writes.paperId, cite.citedPaperId = paper.paperId]","650":"[state.capital, highlow.lowestpoint, highlow.statename = state.statename]","651":"[author.authorId,writes.paperId,writes.authorId]","652":"[paper.paperId, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'Question Answering']","653":"[state.statename, state.population, state.capital, city.population, city.statename = state.statename]","654":"[paper.paperId, writes.authorId, author.authorId = writes.authorId, author.authorName, paper.title]","655":"[state.statename, state.area, highlow.highestpoint, highlow.statename = state.statename]","656":"[paper.paperId, writes.authorId, author.authorName, writes.paperId = paper.paperId, author.authorName = 'sharon goldwater']","657":"[highlow.statename, highlow.highestpoint]","658":"[city.statename, city.population, state.statename]","659":"[paper.year, paper.venueId, venue.venueName, paper.title = venue.venueId, 2014, ACL]","660":"[highlow.statename, highlow.highestpoint, state.statename]","661":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName]","662":"[river.traverse, river.countryname, state.countryname, 'us']","663":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paper.year = 2012, venue.venueName = 'Parsing']","664":"[state.statename, state.population, state.area, borderinfo.border = state.statename, borderinfo.statename = state.statename]","665":"[writes.paperId, paper.year, writes.authorId, paper.paperId = writes.paperId, 2015]","666":"[writes.paperId, writes.authorId, author.authorId, author.authorName, sharon goldwater]","667":"[writes.paperId,writes.authorId,author.authorId,Christopher D. Manning]","668":"[author.authorId, writes.paperId, paper.paperId = writes.paperId, paper.venueId, venue.venueId, venue.venueName = 'AISTATS', author.authorName = 'David M. Blei']","669":"[dataset.datasetId, dataset.datasetName]","670":"[paper.title, paper.year, paper.venueId = venue.venueId, paper.journalId = journal.journalId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, 2011]","671":"[author.authorName, writes.authorId = author.authorId, writes.paperId]","672":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId]","673":"[state.statename, highlow.lowestpoint, highlow.statename = state.statename]","674":"[author.authorId, author.authorName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.venueId = venue.venueId, venue.venueName]","675":"[paper.title, paper.venueId = venue.venueId, venue.venueName, venue.venueName = 'NIPS']","676":"[borderinfo.statename, borderinfo.border, borderinfo.border = borderinfo.statename, borderinfo.statename = borderinfo.border]","677":"[state.statename, river.traverse]","678":"[state.statename, state.capital, state.countryname, 'USA']","679":"[borderinfo.border, borderinfo.statename, river.traverse, borderinfo.statename = state.statename]","680":"[author.authorName, writes.paperId, paper.venueId, venue.venueName, writes.authorId = author.authorId]","681":"[river.statename, river.length, state.statename = river.statename]","682":"[state.capital, 'Salem']","683":"[paper.year, paper.paperId, journal.journalId, journal.journalName, 2014, TACL]","684":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","685":"[highlow.statename, highlow.lowestelevation, river.rivername, river.traverse = highlow.statename]","686":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paper.venueId, paper.journalId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName]","687":"[author.authorId, paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId]","688":"[author.authorId, writes.paperId, paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, 'balakrishnan prabhakaran']","689":"[mountain.mountainaltitude, mountain.countryname, mountain.statename, 'Mount McKinley']","690":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2016, acl]","691":"[author.authorName, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, 'David M. Blei', 'AISTATS']","692":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","693":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId]","694":"[mountain.mountainname, mountain.mountainaltitude, mountain.statename = state.statename, state.statename, 'Alaska']","695":"[author.authorId, writes.paperId, paper.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId]","696":"[keyphrase.keyphraseName, paper.paperId = paperKeyphrase.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId]","697":"[author.authorId, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","698":"[author.authorId, writes.paperId, paper.title, paperKeyphrase.paperId, keyphrase.keyphraseId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName = 'convolution', author.authorName = 'brian curless']","699":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName]","700":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName]","701":"[paper.title, paper.year, paper.journalId, journal.journalId, journal.journalName = 'acl']","702":"[highlow.statename, highlow.highestpoint, river.traverse = highlow.statename]","703":"[lake.lakename, lake.countryname = 'us']","704":"[city.statename,state.statename,city.population]","705":"[river.rivername, river.length, river.traverse]","706":"[dataset.datasetId, dataset.datasetName]","707":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId]","708":"[river.traverse, state.statename, river.rivername = 'Missouri River']","709":"[highlow.statename, highlow.lowestelevation]","710":"[state.capital, highlow.highestelevation, highlow.statename = state.statename]","711":"[paper.title, venue.venueName, venue.venueId = paper.venueId, 'chi']","712":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'sharon goldwater']","713":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 2015, 'Liwen Xiong']","714":"[paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","715":"[lake.lakename, lake.area, lake.countryname, lake.statename, 'united states']","716":"[paper.title, paper.year, 'monte carlo simulation', 2011]","717":"[state.capital, highlow.highestpoint, highlow.statename = state.statename]","718":"[paper.title, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName = 'Question Answering']","719":"[city.cityname, city.population, city.statename, borderinfo.statename, borderinfo.border = state.statename]","720":"[author.authorId, writes.paperId, paper.paperId, paper.title, paperKeyphrase.paperId, keyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName = 'convolution', author.authorName = 'brian curless']","721":"[state.population, state.capital, state.statename = river.traverse]","722":"[state.statename,state.capital,'salem']","723":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId]","724":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, author.authorName = 'sharon goldwater']","725":"[writes.paperId,writes.authorId,author.authorName,Peter Mertens,Dina Barbian]","726":"[mountain.mountainname, mountain.statename, mountain.countryname]","727":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paper.venueId = venue.venueId, paper.journalId = journal.journalId]","728":"[paper.title, paper.year, paper.venueId, paper.journalId, 2011]","729":"[paper.title]","730":"[state.population, borderinfo.statename, borderinfo.border = state.statename]","731":"[dataset.datasetId, dataset.datasetName]","732":"[state.statename, state.population, borderinfo.border, borderinfo.statename = state.statename]","733":"[state.statename, state.area, borderinfo.border = state.statename]","734":"[city.cityname, city.population, city.statename, Texas]","735":"[state.area, highlow.lowestpoint, highlow.statename = state.statename]","736":"[paper.title, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 2015, Liwen Xiong]","737":"[state.density, state.population]","738":"[city.statename,state.population,statename,Texas]","739":"[paper.title, writes.authorId = author.authorId, author.authorName, writes.paperId = paper.paperId]","740":"[author.authorId, author.authorName, writes.paperId, writes.authorId, paper.paperId]","741":"[paper.year, paper.numCiting, paper.venueId = venue.venueId, venue.venueName]","742":"[city.population,state.statename]","743":"[city.cityname,state.statename,'springfield']","744":"[state.statename, state.population, borderinfo.statename, borderinfo.border, borderinfo.border = state.statename, borderinfo.statename = state.statename]","745":"[river.rivername, river.traverse, state.statename, 'Ohio']","746":"[state.statename, state.area, borderinfo.border, borderinfo.statename, borderinfo.border = state.statename]","747":"[paper.paperId, paper.year, paper.venueId, venue.venueName, cite.citingPaperId = paper.paperId]","748":"[river.rivername, state.statename, river.traverse = state.statename]","749":"[paper.title]","750":"[paper.title,paper.year,2011]","751":"[borderinfo.border,state.statename,river.rivername = 'mississippi']","752":"[state.statename, river.traverse]","753":"[paper.title, writes.authorId = author.authorId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = writes.paperId, paper.paperId = paperKeyphrase.paperId, author.authorName, keyphrase.keyphraseName, 'brian curless', 'convolution']","754":"[state.statename, state.population]","755":"[paper.year,paper.numCitedBy,paper.venueId = venue.venueId,paper.journalId = journal.journalId,venue.venueId,journal.journalId,'2010','EMNLP']","756":"[paper.title, paper.year, writes.authorId, author.authorName, 2015, 'Liwen Xiong']","757":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId]","758":"[highlow.statename, highlow.highestpoint]","759":"[paper.title, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","760":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName]","761":"[state.population, state.area, state.statename = 'Pennsylvania']","762":"[author.authorId, author.authorName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, paper.year, venue.venueName, 2016, acl]","763":"[author.authorId, author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.paperId]","764":"[lake.lakename, borderinfo.border, borderinfo.statename = state.statename, 'Texas']","765":"[author.authorName, paper.paperId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","766":"[paper.paperId, paper.title, paper.year, paper.numCiting, paper.numCitedBy]","767":"[paper.title, journal.journalName, paper.journalId = journal.journalId, TAIL, NIPS]","768":"[author.authorId, author.authorName, writes.paperId, cite.citingPaperId, writes.authorId = author.authorId, cite.citingPaperId = paper.paperId, 'Mirella Lapata']","769":"[paper.title, paper.numCiting, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","770":"[paperKeyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, writes.paperId = paper.paperId, keyphrase.keyphraseName, 'syntactic parsing']","771":"[mountain.mountainname, mountain.countryname, mountain.statename]","772":"[state.population, state.capital, city.population, city.statename = state.statename]","773":"[highlow.statename, highlow.highestelevation, highlow.lowestelevation, 'Death Valley']","774":"[city.cityname, city.population, city.statename, river.traverse]","775":"[paper.title, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'syntactic parsing']","776":"[paper.paperId, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'Sharon Goldwater']","777":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId]","778":"[keyphrase.keyphraseName, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.authorId = author.authorId, author.authorName, author.authorName = 'Luke S Zettlemoyer']","779":"[state.population, state.statename]","780":"[state.statename, state.area, city.cityname, city.population, city.statename = state.statename]","781":"[borderinfo.border, borderinfo.statename, borderinfo.border = state.statename, Colorado, New Mexico]","782":"[paper.paperId, paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'Sharon Goldwater']","783":"[highlow.highestpoint, state.area, highlow.statename = state.statename]","784":"[author.authorName,writes.paperId,paper.year,paper.venueId = venue.venueId,'li dong',2016]","785":"[city.statename, city.population, state.statename = 'Texas']","786":"[state.statename, river.traverse, river.rivername, rio grande]","787":"[state.statename, river.length, river.traverse = state.statename]","788":"[paper.year, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","789":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, cite.citedPaperId = paper.paperId]","790":"[state.statename, state.population, borderinfo.border = state.statename, borderinfo.statename = state.statename, river.traverse = state.statename]","791":"[state.statename, river.traverse, state.statename = river.traverse]","792":"[writes.authorId, cite.citedPaperId, writes.paperId = paper.paperId, cite.citedPaperId = paper.paperId]","793":"[author.authorName, writes.authorId, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId, keyphrase.keyphraseName, Ed Desmond, Semantic Parsing]","794":"[author.authorId, author.authorName, writes.paperId, writes.authorId, paper.paperId, paper.title, author.authorName = 'Peter Mertens', author.authorName = 'Dina Barbian']","795":"[state.statename, city.cityname, city.statename = state.statename, 'Austin']","796":"[paper.paperId]","797":"[river.rivername, river.length]","798":"[paper.year, paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 2015, 'Liwen Xiong']","799":"[author.authorId, author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId]","800":"[writes.paperId, writes.authorId, author.authorId, author.authorName, paper.title]","801":"[river.traverse, state.statename, river.traverse = state.statename]","802":"[paper.paperId, paper.title, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'sharon goldwater']","803":"[highlow.statename, river.rivername, river.length, highlow.highestpoint]","804":"[paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'ImageNet']","805":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, author.authorName, keyphrase.keyphraseName, 'brian curless', 'convolution']","806":"[borderinfo.statename, borderinfo.border, borderinfo.border = state.statename]","807":"[paper.title, paper.year, venue.venueName, keyphrase.keyphraseName, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, venue.venueName = 'acl', paper.year = 2012, keyphrase.keyphraseName = 'Parsing']","808":"[state.area]","809":"[city.cityname, city.statename, state.statename]","810":"[paper.title, paper.year, writes.authorId = author.authorId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, author.authorName, keyphrase.keyphraseName, 'brian curless', 'convolution']","811":"[writes.authorId, author.authorName, writes.paperId, author.authorName = 'Christopher D. Manning']","812":"[city.cityname, city.statename, state.statename]","813":"[paper.title, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 2015, 'Liwen Xiong']","814":"[mountain.highestpoint, mountain.statename, state.statename, 'Texas']","815":"[highlow.statename, highlow.highestelevation]","816":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName]","817":"[paper.year, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 2015, 'Liwen Xiong']","818":"[paper.title, paper.venueId = venue.venueId, venue.venueName, 'chi']","819":"[city.cityname, city.population, city.countryname, city.statename, 'austin']","820":"[author.authorName, writes.paperId, writes.authorId = author.authorId]","821":"[river.statename, river.length, state.statename]","822":"[author.authorName, writes.paperId, writes.authorId = author.authorId]","823":"[paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, ImageNet]","824":"[borderinfo.statename, borderinfo.border, river.traverse, borderinfo.border = 'Texas']","825":"[writes.paperId,writes.authorId,author.authorId,Christopher D. Manning]","826":"[author.authorName, writes.paperId, writes.authorId = author.authorId]","827":"[author.authorId, writes.paperId, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, 'Mirella Lapata', 2016]","828":"[user.uid, tip.userid, tip.businessid = business.businessid, business.businessid = category.businessid, category.categoryname, 'Pet Groomers']","829":"[author.authorId, author.authorName, paper.paperId, paper.title, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId]","830":"[business.businessid, business.name, business.rating, business.reviewcount, 4.5]","831":"[paper.paperId, paper.numCiting]","832":"[paper.title, writes.authorId, author.authorName, writes.paperId = paper.paperId, author.authorName = 'Philipp Koehn', paper.title LIKE '%Machine Translation Output%']","833":"[author.authorName, writes.paperId, paperDataset.datasetId, writes.authorId = author.authorId, paperDataset.paperId = paper.paperId]","834":"[paper.year, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId = author.authorId, venue.venueName, paper.year = 2007, venue.venueName = 'CVPR']","835":"[paper.year, paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, writes.authorId = author.authorId, keyphrase.keyphraseName, 2016, 'Bacterial Wilt']","836":"[user.userid, review.userid, review.businessid, business.businessid, business.city, Dallas]","837":"[journal.journalName, writes.paperId = paper.paperId, author.authorId = writes.authorId, author.authorName, paper.journalId = journal.journalId]","838":"[category.businessid, category.categoryname, business.businessid, business.state, checkin.businessid, checkin.count, category.categoryname = 'Italian Deli', checkin.day = 'Sunday']","839":"[user.userid, review.userid, review.year, review.month, March, 2014]","840":"[paper.title, paper.year, paper.venueId, paper.journalId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, 'neural attention', 2016]","841":"[business.name, business.rating, category.categoryname, business.businessid = category.businessid, business.rating = 5, category.categoryname = 'Italian']","842":"[author.authorId, author.authorName, writes.paperId, writes.authorId, writes.authorId = author.authorId]","843":"[writes.authorId, paper.paperId, writes.paperId = paper.paperId, \"ImageNet\"]","844":"[paper.title, paper.year, paper.paperId, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","845":"[dataset.datasetName, paper.title, paperDataset.paperId = paper.paperId, paperDataset.datasetId = dataset.datasetId]","846":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year]","847":"[paper.year, paper.venueId = venue.venueId, venue.venueName, 'NIPS']","848":"[business.businessid, business.name, neighbourhood.businessid = business.businessid, neighbourhood.neighbourhoodname, category.businessid = business.businessid, category.categoryname, 'Italian', 'Meadowood', 'Madison']","849":"[tip.likes, tip.userid = user.userid, user.name, Niloofar]","850":"[paper.title, paper.year, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'deep learning']","851":"[paper.title, paper.year, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, deep learning]","852":"[author.authorName, writes.paperId, paper.paperId, paper.year, venue.venueName, paper.venueId = venue.venueId, writes.authorId = author.authorId, 'ali farhadi', 'eccv', 2016]","853":"[paper.title, paper.year, paper.journalId = journal.journalId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, journal.journalName = 'chi', author.authorName = 'Richard Ladner']","854":"[paper.paperId, paperDataset.datasetId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, paperDataset.datasetId = dataset.datasetId, dataset.datasetName, 'ImageNet', 'deep learning']","855":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId]","856":"[review.*, user.name, review.userid = user.userid, user.name = 'Niloofar']","857":"[author.authorId, author.authorName, writes.paperId, writes.authorId, paper.paperId, paper.title, paper.year, paper.venueId, venue.venueId, venue.venueName, 'ali farhadi', 'eccv', 2016]","858":"[paper.paperId, paper.numCitedBy, paper.venueId = venue.venueId, venue.venueName, sigcomm]","859":"[paper.year, paper.paperId = writes.paperId, writes.authorId = author.authorId, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 2005, semantic parsing]","860":"[paper.year, paper.title, journal.journalName, paper.journalId = journal.journalId, 'Nature Communications', 2015]","861":"[]","862":"[business.state, business.rating, Texas, 2]","863":"[business.businessid, checkin.businessid, business.city, business.name, 'Los Angeles', 'Moroccan']","864":"[review.businessid, review.rating, review.text, review.year, review.month, business.businessid = review.businessid, business.reviewcount, category.businessid = business.businessid, category.categoryname, 100, 'Pet Groomers']","865":"[author.authorName, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId]","866":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, pldi]","867":"[business.rating, business.businessid, 3.5]","868":"[paper.year, paper.venueId, venue.venueName, paperDataset.paperId, dataset.datasetId, dataset.datasetName, paper.venueId = venue.venueId, paperDataset.paperId = paper.paperId, dataset.datasetId = paperDataset.datasetId, 2014, 'eccv', 'ImageNet']","869":"[tip.tipid, tip.month, user.userid, tip.userid = user.userid, April]","870":"[user.uid, user.userid, user.name, review.userid = user.userid, review.businessid = business.businessid, business.name, business.businessid = review.businessid, 'Mesa Grill']","871":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, pldi]","872":"[business.city,business.rating,business.businessid,Dallas,4.5]","873":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2012, 'EMNLP-CoNLL']","874":"[business.businessid, review.businessid, business.name, business.state, 'Cafe Zinho', 'Texas']","875":"[author.authorId, paper.paperId, paperDataset.datasetId, writes.authorId = author.authorId, writes.paperId = paper.paperId, paperDataset.paperId = paper.paperId]","876":"[venue.venueId, venue.venueName, keyphrase.keyphraseId, keyphrase.keyphraseName, paper.paperId, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, paper.venueId = venue.venueId, 'Trophic Cascade']","877":"[business.businessid, neighbourhood.businessid, neighbourhood.neighbourhoodname, business.city, 'Stone Meadows', 'Madison']","878":"[author.authorName, writes.paperId, paper.numCitedBy, writes.authorId = author.authorId]","879":"[paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 2015]","880":"[tip.text, tip.likes, tip.businessid = business.businessid, business.name,'Vintner Grill',9]","881":"[paper.year, paper.venueId, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 2014, eccv, ImageNet]","882":"[paper.year, paper.title]","883":"[paper.title]","884":"[author.authorId, writes.paperId, paper.title, paper.venueId, venue.venueId, venue.venueName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.venueId = venue.venueId]","885":"[paper.paperId, paper.title, paper.numCitedBy]","886":"[paper.paperId, paper.venueId, venue.venueId, venue.venueName, 'sigir']","887":"[paper.year, paper.title, paperDataset.paperId = paper.paperId, paperDataset.datasetId = dataset.datasetId, dataset.datasetName, 2014, Parsing, Jeopardy! Questions]","888":"[paper.year, paper.paperId]","889":"[paper.year, paper.numCitedBy, paper.venueId = venue.venueId, venue.venueName, 2012, 7]","890":"[paper.paperId, paper.year, paper.venueId = venue.venueId, venue.venueId, 2015]","891":"[business.name, business.reviewcount, business.rating, business.city, category.categoryname, 30, 3, Los Angeles]","892":"[paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","893":"[author.authorName, author.authorId = writes.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId]","894":"[paper.title, paper.year, paper.venueId, paper.journalId, 2010]","895":"[paper.title, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","896":"[business.city, business.name, business.state, 'Texas', 'MGM Grand Buffet']","897":"[author.authorName, writes.authorId, writes.paperId = paper.paperId, paper.year]","898":"[venue.venueName, paper.year, paper.venueId = venue.venueId, 'nature communications', 2015]","899":"[user.uid, review.userid, review.businessid = business.businessid, category.businessid = business.businessid, category.categoryname, 'restaurant']","900":"[paper.title, paperDataset.datasetId, paper.paperId = paperDataset.paperId]","901":"[paper.title, journal.journalName, paper.journalId = journal.journalId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","902":"[business.businessid, business.name, business.state, category.categoryname, business.state = 'Pennsylvania', category.categoryname = 'restaurant']","903":"[neighbourhood.neighbourhoodname, business.businessid = neighbourhood.businessid, business.businessid = category.businessid, business.rating, business.city, category.categoryname, 2.5, 'Italian', 'Madison']","904":"[paper.title, paper.numCiting, paper.year, paper.journalId, journal.journalName, paper.venueId, venue.venueId, paper.numCiting < 5]","905":"[paper.title, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","906":"[venue.venueId, venue.venueName, paper.venueId = venue.venueId]","907":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId]","908":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paper.year = 2015, venue.venueName = 'pldi']","909":"[author.authorId, writes.paperId, paper.journalId, journal.journalName, writes.authorId = author.authorId, paper.journalId = journal.journalId, writes.paperId = paper.paperId, 'Takashi Matsumoto']","910":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year, \"Mirella Lapata\"]","911":"[dataset.datasetId, dataset.datasetName, paper.venueId = venue.venueId, venue.venueName, paper.journalId = journal.journalId, journal.journalName]","912":"[paper.year, paper.venueId, keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, venue.venueId = paper.venueId, 2014, \"ACL\"]","913":"[business.businessid, review.businessid, review.year, business.name, 'Bistro Di Napoli', 2015]","914":"[author.authorName, venue.venueName, paper.venueId = venue.venueId, writes.paperId = paper.paperId]","915":"[author.authorId, writes.paperId, paper.paperId, paper.numCitedBy, writes.authorId = author.authorId, writes.paperId = paper.paperId, cite.citedPaperId = paper.paperId]","916":"[author.authorId, author.authorName, writes.paperId, writes.authorId, writes.authorId = author.authorId, author.authorName = 'Noah A Smith']","917":"[business.name, business.city, 'Madison', 'escape']","918":"[paper.year, paper.venueId = venue.venueId, venue.venueName, paper.journalId = journal.journalId, journal.journalName, 2015, 'Nature Communications']","919":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy]","920":"[paper.year, paper.paperId, journal.journalId, journal.journalName, paper.journalId = journal.journalId]","921":"[paper.title,writes.authorId,author.authorName,paper.year,semantic parsing,2005]","922":"[paper.year, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'deep learning']","923":"[paper.paperId, cite.citedPaperId, cite.citingPaperId]","924":"[author.authorName, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId]","925":"[business.businessid, business.name, business.city, business.state, category.categoryname, 'Valet Service', 'Dallas', 'Texas']","926":"[paper.paperId, paper.numCitedBy, 5]","927":"[tip.text, tip.userid, review.userid = user.userid, review.year, 2012]","928":"[business.businessid, business.name, business.city, category.businessid, category.categoryname = 'Seafood', business.city = 'Los Angeles']","929":"[writes.authorId, paper.year, paper.venueId, journal.journalId, venue.venueId, journal.journalName, paper.paperId, 2007, CVPR]","930":"[paper.title, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, keyphrase.keyphraseName, 'syntactic parsing', 'Chris Dyer']","931":"[paper.year, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, keyphrase.keyphraseName = 'semantic parsing']","932":"[paper.title, paper.year, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = paperKeyphrase.paperId, keyphrase.keyphraseName, 2010]","933":"[business.name, business.fulladdress, business.city, category.categoryname, category.businessid = business.businessid, business.city = 'Los Angeles', category.categoryname = 'Seafood']","934":"[paper.title, paper.year, paper.venueId = venue.venueId, paperDataset.paperId = paper.paperId, paperDataset.datasetId = dataset.datasetId, venue.venueName, dataset.datasetName, 'eccv', 2014, 'ImageNet']","935":"[paper.year, paper.paperId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, writes.paperId = paper.paperId, writes.authorId, 'Bacterial Wilt', 2016]","936":"[keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, cite.citedPaperId = paper.paperId]","937":"[author.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId, venue.venueName, chi]","938":"[paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, \"deep learning\"]","939":"[tip.text, tip.year, business.businessid, business.name, business.state, tip.businessid = business.businessid, 'Cafe Zinho', 'Pennsylvania', 2010]","940":"[paper.numCitedBy, 2]","941":"[journal.journalName, paper.journalId = journal.journalId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'Temporal Data']","942":"[author.authorId, writes.authorId = author.authorId, paper.paperId = writes.paperId, paperDataset.paperId = paper.paperId, paperDataset.datasetId]","943":"[paper.year, paper.venueId, venue.venueName]","944":"[author.authorId, writes.paperId, cite.citingPaperId = writes.paperId, cite.citedPaperId]","945":"[keyphrase.keyphraseName, author.authorName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, venue.venueName, 'emnlp', 'dan klein']","946":"[paper.paperId, paperDataset.datasetId, paperDataset.paperId = paper.paperId, dataset.datasetName = 'WebKB']","947":"[business.name, business.state, 'Whataburger']","948":"[author.authorName, writes.paperId, paper.year, writes.authorId = author.authorId]","949":"[venue.venueId, venue.venueName, paper.year, paper.venueId = venue.venueId, 2015, 'pldi']","950":"[tip.likes, business.name, tip.businessid = business.businessid, 'Cafe Zinho']","951":"[paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'jamie callan']","952":"[paper.venueId, paper.journalId, writes.paperId = paper.paperId, writes.authorId = author.authorId]","953":"[dataset.datasetName, paperDataset.datasetId = dataset.datasetId, paperDataset.paperId = paper.paperId]","954":"[business.businessid, review.businessid, review.userid, user.userid, review.rating, user.name, 5, Niloofar]","955":"[business.name, business.rating, business.isopen, 3.5]","956":"[paper.paperId, paper.title, paper.numCiting, venue.venueName, paper.venueId = venue.venueId]","957":"[review.year, review.month, review.businessid, March]","958":"[paper.year, paper.venueId = venue.venueId, venue.venueName, 2014]","959":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, 'pldi']","960":"[author.authorName, writes.paperId, paper.title, paper.venueId, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, 'Richard Ladner', 'chi']","961":"[user.userid, user.name, review.businessid, review.userid = user.userid, review.rating, review.text, business.businessid = review.businessid, business.name, business.categoryname = 'Italian']","962":"[paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'jamie callan']","963":"[user.uid, user.name, Michelle]","964":"[author.authorName, writes.paperId, paper.journalId, journal.journalName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.journalId = journal.journalId]","965":"[dataset.datasetId, dataset.datasetName, paperDataset.datasetId = dataset.datasetId, paperDataset.paperId = paper.paperId]","966":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.year]","967":"[tip.year, tip.month, tip.tipid]","968":"[paper.paperId, paper.title, paperDataset.datasetId, dataset.datasetName, paperDataset.paperId = paper.paperId, dataset.datasetName = 'WebKB']","969":"[author.authorId, author.authorName, paper.journalId, journal.journalName, paper.paperId = writes.paperId, writes.authorId = author.authorId, paper.venueId = venue.venueId, venue.venueId = 'NIPS']","970":"[paper.title, paperDataset.datasetId, paper.paperId = paperDataset.paperId]","971":"[business.businessid, checkin.businessid, business.city, checkin.day, 'Los Angeles', 'Moroccan restaurant', 'Friday']","972":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","973":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, 'pldi']","974":"[author.authorName, author.authorId = writes.authorId, writes.paperId = paperDataset.paperId, paperDataset.datasetId]","975":"[paper.year, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 2015]","976":"[writes.paperId, writes.authorId, paper.paperId = writes.paperId, paper.year, author.authorId = writes.authorId, author.authorName, 2012, Su-In Lee]","977":"[paper.paperId, paper.numCitedBy, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, ohad shamir]","978":"[paper.year, paper.paperId]","979":"[paper.title, paper.year, 'convolutional neural networks', lastyear]","980":"[paper.title, paper.year, paper.paperId = paperDataset.paperId, paperDataset.datasetId = dataset.datasetId, dataset.datasetName, 2014, ImageNet]","981":"[author.authorName, writes.paperId, paper.numCitedBy, writes.authorId = author.authorId, writes.paperId = paper.paperId, \"ohad shamir\"]","982":"[paper.title, paper.venueId, venue.venueId, paper.journalId, journal.journalId, writes.paperId, writes.authorId, author.authorId]","983":"[paper.title, paper.numCiting]","984":"[business.businessid, business.city, business.fulladdress, 'Hazelwood', 'Dallas']","985":"[author.authorId, author.authorName, writes.paperId, writes.authorId, author.authorName = 'Noah A Smith']","986":"[business.businessid, business.city, neighbourhood.neighbourhoodname, category.categoryname, business.name, 'Italian', 'Madison']","987":"[business.rating, business.businessid, 3.5]","988":"[venue.venueId, venue.venueName, paper.paperId, paper.year, paperKeyphrase.paperId, keyphrase.keyphraseId, keyphrase.keyphraseName, paper.year = 2015, venue.venueName = 'NIPS']","989":"[paper.paperId, paper.numCitedBy, writes.authorId = author.authorId, writes.paperId = paper.paperId, author.authorName, 'ohad shamir']","990":"[paper.venueId, venue.venueName, writes.paperId = paper.paperId, venue.venueName, chi]","991":"[author.authorId, author.authorName, writes.paperId, writes.authorId, writes.authorId = author.authorId]","992":"[paper.title, paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName]","993":"[author.authorId, author.authorName, writes.paperId, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.year, 2016]","994":"[paper.title, journal.journalName, paper.journalId = journal.journalId, keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, paper.venueId = venue.venueId]","995":"[user.uid, tip.userid, tip.year, tip.businessid = business.businessid, business.name, 2015, 'Barrio Cafe']","996":"[writes.authorId, writes.paperId, paper.year, 2015]","997":"[business.businessid, category.categoryname, category.businessid = business.businessid, 'restaurant']","998":"[paper.year, venue.venueId = paper.venueId, paper.journalId = journal.journalId, 2013]","999":"[author.authorId, writes.paperId, writes.authorId = author.authorId]","1000":"[paper.paperId, paper.numCitedBy, 10]","1001":"[user.name, user.uid, 'Michelle']","1002":"[paper.title, paper.numCiting, paper.year, venue.venueId, paper.venueId = venue.venueId, venue.venueName = 'CVPR', paper.year = this year]","1003":"[author.authorId, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId]","1004":"[dataset.datasetId, dataset.datasetName, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorId = author.authorId]","1005":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId]","1006":"[author.authorId, author.authorName, writes.paperId, paper.paperId, paper.venueId, venue.venueId, venue.venueName, writes.paperId = paper.paperId, paper.venueId = venue.venueId, 'Samuel Madden', 'PVLDB']","1007":"[author.authorName, writes.paperId, paper.paperId, paperKeyphrase.keyphraseId, paper.numCitedBy, author.authorName = 'Brian DeRenzi']","1008":"[business.businessid, business.name, neighbourhood.businessid = business.businessid]","1009":"[paper.paperId, paperDataset.datasetId, paperDataset.paperId = paper.paperId]","1010":"[business.name, business.fulladdress, business.city, business.businessid, 'Los Angeles']","1011":"[author.authorId, author.authorName, writes.paperId = paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, dataset.datasetId = paperDataset.datasetId, dataset.datasetName]","1012":"[paper.paperId, paper.title, paper.year, 'convolutional neural networks', 2022]","1013":"[tip.userid, tip.year, tip.month, user.name, 2010, Michelle]","1014":"[paper.year, paper.title, journal.journalName, paper.journalId = journal.journalId, 2015, 'nature communications']","1015":"[paper.title, paper.year, paper.numCiting, paper.numCitedBy, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, keyphrase.keyphraseName = 'WebKB']","1016":"[paper.year, paper.journalId, journal.journalName, paper.venueId, '2015', 'nature communications']","1017":"[writes.paperId, writes.authorId, author.authorId, author.authorName]","1018":"[paper.title, paper.year, 2015]","1019":"[business.businessid, review.businessid, business.name, 'Acacia Cafe']","1020":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paper.journalId = journal.journalId, journal.journalName, 'pldi', 2015]","1021":"[paper.title, paper.numCitedBy, paper.paperId, paper.year, paper.venueId, paper.journalId]","1022":"[business.fulladdress, business.city, business.name, business.isopen, Los Angeles, Walmart]","1023":"[paper.year, paper.venueId = venue.venueId, venue.venueName, 2015]","1024":"[paper.year,paper.paperId,paper.title,paperKeyphrase.paperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,keyphrase.keyphraseName,2015]","1025":"[venue.venueName, paper.year, paper.venueId = venue.venueId, 'nature communications', 2015]","1026":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, \"pldi\"]","1027":"[paper.year, venue.venueName, paper.venueId = venue.venueId, 2015, Nature Communications]","1028":"[paper.year, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 2016, 'michael i. jordan']","1029":"[author.authorId, writes.paperId, paper.paperId = writes.paperId, paper.journalId, journal.journalId = paper.journalId]","1030":"[journal.journalName, paper.journalId = journal.journalId, writes.paperId = paper.paperId, author.authorId = writes.authorId, author.authorName, 'Takashi Matsumoto']","1031":"[paper.paperId, paper.numCitedBy]","1032":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paper.year = 2015, venue.venueName = 'pldi']","1033":"[business.businessid, review.businessid, business.name, business.city, business.state, 'Texas de Brazil', 'Dallas', 'Texas']","1034":"[paper.year, paper.journalId, journal.journalId, venue.venueId, journal.journalName, 'Nature Communications', lastyear]","1035":"[paper.year,paper.journalId,journal.journalName,2015,Nature Communications]","1036":"[business.rating, business.city, neighbourhood.businessid = business.businessid, 5, Madison]","1037":"[paper.title, paper.numCitedBy, paper.venueId, venue.venueId, paper.journalId, journal.journalId, 5]","1038":"[business.name, business.city, 'Egyptian', 'Edinburgh']","1039":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, cite.citedPaperId = paper.paperId, author.authorName, \"Dan Makumbi\", \"Genetic Identity\"]","1040":"[paper.title, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'Semantic Data']","1041":"[author.authorId, author.authorName, writes.paperId, paper.paperId, paper.venueId = venue.venueId, venue.venueName, chi]","1042":"[paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1043":"[review.rating, user.userid, user.name, review.userid = user.userid]","1044":"[paper.paperId, writes.paperId, writes.authorId = author.authorId, author.authorName, cite.citingPaperId = paper.paperId]","1045":"[author.authorId, paper.paperId, paper.year, paper.venueId, venue.venueId, venue.venueName, writes.paperId = paper.paperId, writes.authorId = author.authorId, venue.venueName = 'CVPR', paper.year = 2007]","1046":"[paper.title, paper.year, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId = author.authorId, venue.venueName, author.authorName, 2016, 'ECCV', 'Ali Farhadi']","1047":"[business.name, business.city, 'Target', 'Los Angeles']","1048":"[user.uid, review.userid, review.rating]","1049":"[keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, paper.venueId = venue.venueId, paper.title, paper.year]","1050":"[author.authorId, author.authorName, paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1051":"[author.authorId, writes.paperId, paper.paperId = writes.paperId, paper.venueId = venue.venueId, venue.venueName, \"chi\", author.authorName, \"Richard Ladner\"]","1052":"[business.state, business.businessid, business.name, Texas]","1053":"[paper.title, paper.datasetId, dataset.datasetName, dataset.datasetId = paperDataset.datasetId, paper.paperId = paperDataset.paperId]","1054":"[author.authorId, author.authorName, writes.paperId, writes.authorId, writes.authorId = author.authorId]","1055":"[paper.year, paper.title]","1056":"[business.city, business.name, 'Panda Express']","1057":"[tip.year, tip.tipid, 2015]","1058":"[author.authorId, author.authorName, writes.paperId, writes.authorId, author.authorName = 'Noah A Smith']","1059":"[business.businessid, business.city, category.categoryname, category.businessid = business.businessid, 'Madison', 'escape games']","1060":"[paper.paperId, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, \"convolutional neural networks\", currentyear]","1061":"[business.rating, business.city, business.isopen, 4.5, Pittsburgh]","1062":"[paper.year, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 2014, 'Jeopardy! Questions']","1063":"[author.authorId, writes.paperId, paper.paperId, cite.citingPaperId, writes.authorId = author.authorId, writes.paperId = paper.paperId, cite.citedPaperId = paper.paperId]","1064":"[paper.paperId, writes.authorId, paper.journalId, journal.journalId, author.authorId, 'ACL']","1065":"[paper.paperId, paper.title, paper.numCiting, paper.numCitedBy]","1066":"[business.city, business.name, 'Taj Mahal']","1067":"[paper.title, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId, 'Eric C. Kerrigan', 'Liquid Automatica']","1068":"[paper.paperId, paper.venueId = venue.venueId, paperDataset.paperId = paper.paperId, paperDataset.datasetId = dataset.datasetId, dataset.datasetName, venue.venueName, ImageNet, cvpr]","1069":"[business.name, business.city, business.state, 'Starbucks', 'Dallas', 'Texas']","1070":"[author.authorName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId]","1071":"[paper.paperId, cite.citedPaperId, 5]","1072":"[paper.paperId, paper.journalId, journal.journalName, 'sigir']","1073":"[paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1074":"[user.userid, review.businessid, category.businessid, business.businessid, category.categoryname = 'Bars', review.userid = user.userid, user.name = 'Patrick']","1075":"[journal.journalName, paper.year, paper.title, paper.journalId = journal.journalId, 2011, March]","1076":"[paper.title, paper.year, 'convolutional neural networks', 2016]","1077":"[venue.venueName, paper.title, paper.venueId = venue.venueId]","1078":"[author.authorId, author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, cite.citedPaperId = paper.paperId, cite.citingPaperId = paper.paperId]","1079":"[paper.title, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","1080":"[neighbourhood.neighbourhoodname, business.city, neighbourhood.businessid = business.businessid, business.isopen]","1081":"[venue.venueId, venue.venueName, paper.venueId = venue.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, keyphrase.keyphraseName = 'Neuroscience']","1082":"[business.businessid, business.name, business.city, category.categoryname, business.isopen, category.businessid = business.businessid, business.city = 'Los Angeles', category.categoryname = 'Seafood']","1083":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId]","1084":"[paper.title, paper.year, paper.journalId = journal.journalId, journal.journalName, paper.venueId = venue.venueId, venue.venueName]","1085":"[business.name,business.city,business.businessid,category.categoryname,'Los Angeles']","1086":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, 'pldi']","1087":"[business.name, business.city, review.userid, review.businessid, user.name, user.uid, 'Patrick', 'Dallas']","1088":"[venue.venueId, venue.venueName, paper.paperId, paper.numCitedBy, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorId, author.authorName]","1089":"[business.city, business.name, 'MGM Grand Buffet']","1090":"[checkin.count, neighbourhood.neighbourhoodname, checkin.businessid = business.businessid, neighbourhood.businessid = business.businessid, 'Brighton Heights']","1091":"[venue.venueId, venue.venueName, paper.venueId = venue.venueId]","1092":"[business.name, business.city, business.rating, category.categoryname, category.businessid = business.businessid, business.isopen = 1, business.rating >= 3.5, category.categoryname = 'Mexican', business.city = 'Dallas']","1093":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paper.year = 2015, venue.venueName = 'pldi']","1094":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, paper.year = 2015]","1095":"[user.userid, review.businessid, review.rating, business.businessid, category.businessid, category.categoryname, review.rating >= 3, category.categoryname = 'Bars', user.name = 'Patrick']","1096":"[dataset.datasetId, dataset.datasetName, paperDataset.datasetId = dataset.datasetId, paperDataset.paperId = paper.paperId]","1097":"[paper.year, paper.journalId, journal.journalName, paper.paperId, '2015', 'Nature Communications']","1098":"[venue.venueId, venue.venueName, paper.paperId, paper.title, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, keyphrase.keyphraseName = 'ImageNet']","1099":"[paper.title, paper.year, paper.venueId, paper.journalId, writes.authorId, author.authorName, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, author.authorName, 'chris dyer', 'syntactic parsing']","1100":"[writes.authorId, paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1101":"[paper.title, paper.year, paper.venueId = venue.venueId, paper.journalId = journal.journalId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, venue.venueId, journal.journalId, keyphrase.keyphraseName, 'Parsing', 'Jeopardy! Questions', 'ACL', 2014]","1102":"[business.businessid, review.businessid, review.year, business.name = 'Vintner Grill', 2010]","1103":"[paper.title, keyphrase.keyphraseName, writes.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, keyphrase.keyphraseName = 'sensor fusion']","1104":"[business.businessid, business.name, review.businessid = business.businessid, review.userid = user.userid, user.name]","1105":"[review.businessid, neighbourhood.businessid, neighbourhood.neighbourhoodname, 'South Summerlin']","1106":"[review.businessid, review.rating, business.businessid, 2.5]","1107":"[business.businessid, business.name, business.city, 'Los Angeles']","1108":"[paper.title, paper.venueId, venue.venueName, paper.title = 'Fracture of acrylic bone cement']","1109":"[author.authorId, paper.title, paper.year, paper.venueId = venue.venueId, paper.journalId = journal.journalId, writes.paperId = paper.paperId, venue.venueId = venue.venueId, venue.venueName = 'CVPR', paper.year = 2007]","1110":"[writes.authorId, writes.paperId, paper.year, 2015]","1111":"[business.state, business.name, business.fulladdress, Pennsylvania]","1112":"[user.uid, tip.userid, tip.businessid = business.businessid, business.city,Dallas]","1113":"[paper.year, paper.venueId = venue.venueId, venue.venueName]","1114":"[paper.year, paper.journalId = journal.journalId, journal.journalName, 1995, Academic radiology]","1115":"[paper.year, paper.venueId = venue.venueId, venue.venueName, journal.journalId = paper.journalId]","1116":"[author.authorId, author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId]","1117":"[author.authorId, author.authorName, writes.paperId, writes.authorId, cite.citingPaperId, cite.citedPaperId]","1118":"[business.businessid, business.name, business.city, business.rating, category.categoryname, 3.5, Dallas]","1119":"[user.uid, review.businessid, review.year, review.userid = user.userid, 2010]","1120":"[business.businessid, business.name, business.state, tip.businessid = business.businessid, 'Cafe Zinho', 'Texas']","1121":"[business.businessid, business.name, business.city, category.businessid = business.businessid, category.categoryname, 'escape games', 'Madison']","1122":"[journal.journalId, journal.journalName, paper.year, paper.journalId, keyphrase.keyphraseId, keyphrase.keyphraseName, paperKeyphrase.paperId, paperKeyphrase.keyphraseId, paper.year = 2010, keyphrase.keyphraseName = 'Trophic Cascade']","1123":"[business.businessid, review.businessid, review.userid, user.userid, review.year, review.month, user.name, 2010, San Diego, Christine]","1124":"[paper.paperId, paper.title, paper.numCitedBy, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1125":"[paper.paperId, paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1126":"[paper.title, paper.year, 'convolutional neural networks', 2016]","1127":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.paperId = paperKeyphrase.paperId]","1128":"[author.authorId, paper.paperId, paper.venueId = venue.venueId, venue.venueName, NIPS]","1129":"[paper.paperId, paper.title, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1130":"[checkin.businessid, checkin.count, checkin.day, business.businessid, business.name, business.city = 'Los Angeles', 'Moroccan']","1131":"[paper.year,paper.journalId,journal.journalId,venue.venueId,journal.journalName,'nature communications',2015]","1132":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year]","1133":"[review.rating, review.year, 2014]","1134":"[paper.paperId, paperDataset.datasetId, paperDataset.paperId = paper.paperId]","1135":"[review.rating, review.text, review.userid, user.name, review.businessid, user.userid, 4, Patrick]","1136":"[author.authorName, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = writes.paperId]","1137":"[writes.authorId, paper.year, paper.venueId, venue.venueId, venue.venueName, 2007, CVPR]","1138":"[author.authorId, writes.paperId, cite.citingPaperId, cite.citedPaperId, writes.authorId = author.authorId]","1139":"[paper.title, paper.year, paper.venueId, paper.journalId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, paperKeyphrase.paperId = paper.paperId, paper.year < 2010]","1140":"[business.city,business.rating,business.businessid,category.businessid,Dallas,3.5]","1141":"[business.name,business.fulladdress,business.city,business.businessid,'Los Angeles']","1142":"[paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperDataset.paperId = paper.paperId, paperDataset.datasetId = dataset.datasetId, author.authorId, author.authorName, 'jitendra malik']","1143":"[author.authorId, author.authorName, paper.numCitedBy, paper.paperId, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId = author.authorId, venue.venueName = 'CVPR']","1144":"[paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1145":"[author.authorId, author.authorName, writes.paperId, writes.authorId, writes.authorId = author.authorId]","1146":"[paper.paperId, paper.numCiting, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1147":"[paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, paper.venueId = venue.venueId, author.authorName, venue.venueName, \"chi\", \"Richard Ladner\"]","1148":"[paper.title, paper.year, paper.venueId, writes.paperId, writes.authorId, author.authorName, venue.venueName, CVPR, 2007]","1149":"[paper.paperId, paper.numCiting, venue.venueName, paper.venueId = venue.venueId, 5]","1150":"[business.name, business.city, business.rating, category.categoryname, business.isopen, 3.5, 'Mexican', 'Dallas']","1151":"[venue.venueName, paper.title, paper.venueId = venue.venueId, 'Trophic Cascade']","1152":"[venue.venueId, paper.venueId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, paper.title, paper.numCiting, 'deep learning']","1153":"[review.businessid, review.year, business.businessid, business.name, 2014, 'Kabob Palace']","1154":"[paper.year, paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 2011, 2016, 'question answering']","1155":"[paper.title, paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName, 'WebKB']","1156":"[author.authorName, paper.year, paper.title, paper.paperId = paperKeyphrase.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, writes.authorId = author.authorId, keyphrase.keyphraseName, 2012, 'Neutralizing Antibody']","1157":"[paper.title, writes.paperId, writes.authorId = author.authorId, paper.venueId = venue.venueId, author.authorName, venue.venueName]","1158":"[paper.year, paper.venueId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, venue.venueId = paper.venueId, venue.venueName, keyphrase.keyphraseName, 2015, NIPS]","1159":"[paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1160":"[paper.year, paper.title, writes.authorId = author.authorId, author.authorName, paper.paperId = writes.paperId]","1161":"[paper.year, paper.venueId = venue.venueId, venue.venueName, journal.journalId = paper.journalId, journal.journalName, 2015, 'nature communications']","1162":"[paper.title, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, venue.venueName, 'Richard Ladner', 'chi']","1163":"[paper.paperId, cite.citedPaperId, paper.title, paper.venueId, paper.journalId]","1164":"[paper.title, paper.numCitedBy, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = paperKeyphrase.paperId, keyphrase.keyphraseName, 'Artificial Intelligence']","1165":"[author.authorId, writes.authorId = author.authorId, paper.paperId = writes.paperId, paperDataset.datasetId, paperDataset.paperId = paper.paperId]","1166":"[author.authorName, writes.paperId, paper.paperId = writes.paperId, cite.citedPaperId = paper.paperId, paper.numCitedBy]","1167":"[user.uid, business.businessid, tip.likes, tip.userid = user.userid, tip.businessid = business.businessid, 'Niloofar', 'Cafe Zinho']","1168":"[paper.year, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","1169":"[user.userid, user.name, review.userid = user.userid]","1170":"[author.authorId, writes.paperId, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.year = 2016]","1171":"[author.authorId,writes.authorId = author.authorId,writes.paperId = paper.paperId,paper.year,2009]","1172":"[venue.venueName, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId, author.authorName]","1173":"[paper.title, paper.numCiting, cite.citingPaperId = paper.paperId]","1174":"[paper.title, paper.paperId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'chris dyer', 'syntactic parsing']","1175":"[author.authorId, writes.paperId, writes.authorId = author.authorId, cite.citingPaperId = paper.paperId]","1176":"[author.authorId, author.authorName, writes.paperId = paper.paperId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1177":"[author.authorName, writes.paperId, writes.authorId = author.authorId, paper.year]","1178":"[paper.year, 2022]","1179":"[user.uid, review.userid, review.year, review.businessid, category.businessid, category.categoryname, business.businessid, 2010, 'restaurant']","1180":"[keyphrase.keyphraseName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, paper.venueId = venue.venueId, venue.venueName, 'uist']","1181":"[paper.paperId, venue.venueId, venue.venueName, paper.venueId = venue.venueId, 'sigir']","1182":"[author.authorName, writes.paperId, paper.title, writes.authorId = author.authorId]","1183":"[paper.year, paper.title, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, 'deep learning']","1184":"[paper.title, paper.year, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1185":"[dataset.datasetId, dataset.datasetName, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","1186":"[business.city, business.name, business.businessid = category.businessid, category.categoryname, 'Taj Mahal']","1187":"[review.year, review.userid, user.name, user.uid, 2015, Niloofar]","1188":"[paper.title, paper.paperId = writes.paperId, writes.authorId = author.authorId, keyphrase.keyphraseId = paperKeyphrase.keyphraseId, paperKeyphrase.paperId = paper.paperId, keyphrase.keyphraseName,'sensor fusion']","1189":"[paper.title, paper.year, this year]","1190":"[paper.title, paper.year, paper.venueId, paper.journalId, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, writes.authorId, author.authorName, paper.year < 2010]","1191":"[author.authorId, paper.year, paper.venueId = venue.venueId, venue.venueName, 2010, sigcse]","1192":"[business.businessid, business.name, business.city, 'Madison']","1193":"[paper.year, paper.paperId]","1194":"[paper.paperId, paper.title, author.authorId, author.authorName, writes.paperId = paper.paperId, writes.authorId = author.authorId]","1195":"[paper.title,paper.year,paper.venueId = venue.venueId,venue.venueName,'pldi',2015]","1196":"[paper.paperId, cite.citingPaperId, writes.paperId, writes.authorId, author.authorId, author.authorName, Daniel Jurafsky]","1197":"[author.authorName, writes.paperId, paper.venueId, paper.year, venue.venueName, writes.authorId = author.authorId]","1198":"[author.authorName, writes.paperId, paper.year, writes.authorId = author.authorId]","1199":"[journal.journalName]","1200":"[author.authorName, writes.paperId, cite.citingPaperId = paper.paperId, cite.citedPaperId = paper.paperId]","1201":"[journal.journalId, journal.journalName, paper.title, paper.journalId = journal.journalId]","1202":"[checkin.count,business.businessid,checkin.businessid = business.businessid,business.name,'Cafe Zinho',checkin.day,'Friday']","1203":"[paper.paperId, cite.citingPaperId = paper.paperId]","1204":"[business.businessid, business.city, category.categoryname = 'escape game']","1205":"[paper.title, paper.year, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.paperId = paperKeyphrase.paperId, keyphrase.keyphraseName, 2010]","1206":"[paper.title, paper.year, writes.authorId = author.authorId, author.authorName, 90]","1207":"[paper.paperId, writes.paperId, writes.authorId = author.authorId, author.authorName, 'chris dyer']","1208":"[business.name, business.city, business.businessid, review.userid, review.businessid = business.businessid, 'Irish Pub', 'Dallas']","1209":"[venue.venueId, paper.paperId, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, paper.venueId = venue.venueId, 'NIPS']","1210":"[business.city,business.rating,1.5]","1211":"[paper.year, paper.title, writes.paperId = paper.paperId, writes.authorId = author.authorId, author.authorName, 'Michael Stonebraker']","1212":"[paper.title, paper.year, paperKeyphrase.keyphraseId, keyphrase.keyphraseName, paper.year = 2015, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId]","1213":"[review.rating, review.businessid, review.userid, 1]","1214":"[paper.numCitedBy, paper.paperId]","1215":"[paper.year, 2015]","1216":"[paper.paperId, paper.title, paper.numCiting, paper.numCitedBy]","1217":"[author.authorId, author.authorName, paper.journalId = journal.journalId, journal.journalName, NIPS]","1218":"[paper.title, paper.year, writes.authorId = author.authorId, author.authorName, 'semantic parsing', 2005]","1219":"[tip.userid, tip.year, tip.month, user.name, 2010, Michelle]","1220":"[review.userid, review.businessid, business.businessid, business.name, business.city, 'Sushi Too', 'Pittsburgh']","1221":"[author.authorName, writes.paperId, cite.citingPaperId, cite.citedPaperId, paper.paperId, paper.title]","1222":"[author.authorId, writes.paperId, paper.year, writes.authorId = author.authorId, writes.paperId = paper.paperId, 'Mary Crainie']","1223":"[paper.year, paper.journalId = journal.journalId, journal.journalName, 2015, 'Cell']","1224":"[author.authorId, writes.paperId, paper.journalId, journal.journalName, writes.authorId = author.authorId, paper.paperId = writes.paperId, paper.journalId = journal.journalId]","1225":"[author.authorId, author.authorName, writes.paperId, paper.paperId, paper.numCiting, writes.authorId = author.authorId, paper.paperId = writes.paperId]","1226":"[business.name, business.state, business.city, category.categoryname, business.businessid = category.businessid, 'Texas', 'Moroccan']","1227":"[business.businessid, checkin.businessid, checkin.count]","1228":"[paper.title,paper.year,paper.paperId,paperKeyphrase.keyphraseId,keyphrase.keyphraseName,'question answering',2016]","1229":"[author.authorName, writes.authorId = author.authorId, writes.paperId = paper.paperId, paper.venueId = venue.venueId]","1230":"[paper.title, paper.year, paper.venueId = venue.venueId, writes.paperId = paper.paperId, writes.authorId = author.authorId, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName, author.authorName, venue.venueName, 2016, 'li dong', 'acl', 'semantic parsing']","1231":"[tip.userid, tip.businessid, user.userid, user.name, Michelle]","1232":"[paper.paperId, paperKeyphrase.paperId, keyphrase.keyphraseName, venue.venueId, venue.venueName, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, paper.venueId = venue.venueId]","1233":"[paper.paperId, paper.title, paper.numCitedBy, paperKeyphrase.paperId = paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, keyphrase.keyphraseName]","1234":"[paper.title, paper.year, paper.paperId, paperKeyphrase.keyphraseId = keyphrase.keyphraseId, writes.paperId = paper.paperId, keyphrase.keyphraseName, 'deep learning']","1235":"[author.authorId, author.authorName, writes.paperId, writes.authorId, writes.paperId = paper.paperId]","1236":"[paper.title, paper.year, paper.venueId = venue.venueId, venue.venueName, 2015, 'pldi']","1237":"[business.businessid, checkin.businessid, checkin.count, business.name, Barrio Cafe]","1238":"[paper.year,paper.title,'A Switching Architecture For ISDN']","1239":"[dataset.datasetId, dataset.datasetName, paperDataset.datasetId = dataset.datasetId, paperDataset.paperId = paper.paperId]","1240":"[author.authorId, author.authorName, writes.authorId = author.authorId, paper.paperId = writes.paperId, cite.citedPaperId = paper.paperId, cite.citingPaperId = paper.paperId, paper.year]","1241":"[paper.paperId, paper.numCitedBy, cite.citedPaperId = paper.paperId, cite.citingPaperId, paper.venueId = venue.venueId]","1242":"[author.aid, publication.pid, publicationkeyword.kid, keyword.keyword, writes.aid = author.aid, publicationkeyword.pid = publication.pid, domainkeyword.kid = keyword.kid, domainkeyword.did = domain.did, domainauthor.did = domain.did]","1243":"[movie.mid, movie.title, movie.releaseyear, classification.msid = copyright.msid, classification.gid = genre.gid, genre.genre, 2010, Sci-Fi]","1244":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'arabic', 'mountain view']","1245":"[keyword.keyword, publicationkeyword.kid = keyword.kid, publicationkeyword.pid = publication.pid, publication.jid = journal.jid, journal.name = 'PVLDB']","1246":"[publication.title, publication.citationnum, publication.jid, journal.homepage, journal.name, journal.jid, 'PVLDB', 200]","1247":"[conference.cid, publication.cid, publication.pid = publicationkeyword.pid, publicationkeyword.kid = keyword.kid, keyword.keyword]","1248":"[movie.releaseyear, movie.mid, 2013]","1249":"[author.aid, writes.aid, writes.pid, publication.jid, journal.name, journal.name = 'PVLDB']","1250":"[publication.title, cite.cited, cite.citing, publication.pid = cite.citing]","1251":"[RESTAURANT.NAME, GEOGRAPHIC.REGION, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1252":"[publication.title, publication.pid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, 'Making database systems usable']","1253":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1254":"[movie.releaseyear, movie.title, \"The Imitation Game\"]","1255":"[keyword.keyword, publicationkeyword.kid = keyword.kid, writes.aid = author.aid, writes.pid = publication.pid, author.name, \"H. V. Jagadish\"]","1256":"[publication.pid, conference.cid, publication.cid = conference.cid, domainpublication.pid = publication.pid, domainpublication.did = domain.did, organization.oid = domain.oid, organization.name = 'University of Michigan', conference.name = 'PVLDB']","1257":"[RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME, 'alameda']","1258":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'alameda']","1259":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1260":"[author.name,writes.aid,writes.pid,publication.year,publication.jid,journal.name,'H. V. Jagadish','Yunyao Li','PVLDB',2005]","1261":"[publication.title, cite.citing, publication.title = 'Making database systems usable']","1262":"[actor.aid, actor.nationality, cast.msid, cast.aid, copyright.msid, movie.title, 'China', 'Rush Hour 3']","1263":"[publication.year, publication.citationnum, publication.pid, 2000]","1264":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'Buchanan', 'San Francisco']","1265":"[publication.title, publication.pid, writes.aid, writes.pid = publication.pid, 'Making database systems usable']","1266":"[conference.homepage, conference.name, 'VLDB']","1267":"[publication.title, publication.year, cite.citing, cite.citing = publication.pid, 'Making database systems usable', 2010]","1268":"[publication.cid, publication.year, conference.cid, conference.name, 2000, VLDB]","1269":"[movie.mid, movie.title, directedby.msid = movie.mid, directedby.did = director.did, director.name, keyword.id = tags.kid]","1270":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, LOCATION.STREETNAME, LOCATION.RESTAURANTID = RESTAURANT.ID, 'arabic', 'san francisco', 'buchanan']","1271":"[conference.cid, publication.cid = conference.cid, publication.pid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, keyword.keyword,'Information Retrieval']","1272":"[actor.name, actor.birthcity, Tehran]","1273":"[actor.birthcity, actor.name, 'Kevin Spacey']","1274":"[publication.pid, cite.cited = publication.pid]","1275":"[actor.name, actor.birthyear, 'Benedict Cumberbatch']","1276":"[publication.pid, publicationkeyword.kid, publicationkeyword.pid = publication.pid, domainauthor.aid = author.aid, domainauthor.did = domain.did, organization.name, 'University of Michigan']","1277":"[movie.title, movie.budget, movie.releaseyear, Juno, 2007]","1278":"[publication.pid, publication.citationnum, publication.title, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, keyword.keyword, 200]","1279":"[author.name, domainauthor.aid, domainauthor.did, domain.did, domain.name, 'H. V. Jagadish']","1280":"[author.aid, writes.aid = author.aid, writes.pid = publication.pid, publication.title, publication.title = \"Making database systems usable\"]","1281":"[movie.mid, movie.title, writtenby.msid = copyright.msid, writtenby.wid = writer.wid, writer.name, 'Matt Damon']","1282":"[author.name, publication.jid, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, journal.name, journal.name = 'PVLDB', author.name = 'H. V. Jagadish']","1283":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1284":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, 'H. V. Jagadish']","1285":"[conference.cid, publication.cid = conference.cid, publication.pid = publicationkeyword.pid, publicationkeyword.kid = keyword.kid]","1286":"[publication.citationnum, conference.name, publication.cid = conference.cid]","1287":"[publication.cid, conference.cid, conference.name, VLDB]","1288":"[actor.birthcity, actor.birthyear, 'Los Angeles', 2000]","1289":"[producer.pid, directedby.did, madeby.msid = directedby.msid]","1290":"[movie.title, directedby.msid, directedby.did, movie.mid = directedby.msid]","1291":"[publication.citationnum, publication.year, conference.name, publication.cid = conference.cid, 2005, PVLDB]","1292":"[business.businessid, category.businessid]","1293":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, 'alameda']","1294":"[conference.cid, publication.cid = conference.cid, publicationkeyword.kid = keyword.kid, publication.pid = publicationkeyword.pid, domainkeyword.kid = keyword.kid, domainkeyword.did = domain.did, domainpublication.did = domain.did, domainpublication.pid = publication.pid, keyword.keyword,'Relational Database']","1295":"[movie.title, movie.budget, madeby.msid = copyright.msid, madeby.pid = producer.pid, producer.name, 'Quentin Tarantino']","1296":"[author.aid, publication.pid, publication.jid, publication.citationnum, journal.jid, writes.aid = author.aid, publication.jid = journal.jid, publication.citationnum > 200, author.name = 'H. V. Jagadish', journal.name = 'PVLDB']","1297":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid]","1298":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'san francisco', 'french']","1299":"[movie.mid, director.name, actor.name, directedby.msid = copyright.msid, cast.msid = copyright.msid, directedby.did = director.did, cast.aid = actor.aid, 'Asghar Farhadi', 'Taraneh Alidoosti']","1300":"[movie.releaseyear, directedby.msid = movie.mid, directedby.did = director.did, director.name, 'Woody Allen']","1301":"[RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, 'Bay Area', 'Chinese']","1302":"[organization.oid, organization.continent, 'Databases']","1303":"[author.aid, author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, journal.name, PVLDB, 10]","1304":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.FOODTYPE = 'American', GEOGRAPHIC.CITYNAME = 'Bay Area']","1305":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1306":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'yosemite', 'mono lake', 'french']","1307":"[publication.pid, writes.aid, author.aid, author.name, 'H. V. Jagadish', 'Divesh Srivastava']","1308":"[RESTAURANT.NAME, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, 'bethel island rd', 'bethel island']","1309":"[author.aid, publication.pid, conference.cid, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.name = 'VLDB']","1310":"[author.name, writes.aid = author.aid, writes.pid]","1311":"[organization.continent, organization.homepage, organization.name, organization.oid]","1312":"[publication.year, publication.title, 'Making database systems usable']","1313":"[author.aid, author.name, writes.aid = author.aid, publication.pid]","1314":"[publication.year, publication.title, \"Making database systems usable\"]","1315":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, RESTAURANT.FOODTYPE = 'Arabic', LOCATION.STREETNAME = 'Buchanan', GEOGRAPHIC.CITYNAME = 'San Francisco']","1316":"[publication.title, publication.year, publication.jid = journal.jid, journal.name, publication.year, 2000, PVLDB]","1317":"[author.name, author.aid = writes.aid, publication.pid = writes.pid, publicationkeyword.kid = keyword.kid, keyword.keyword, domainpublication.did = domain.did]","1318":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, 'Mountain View', 'good', 'arabic']","1319":"[conference.name, conference.homepage]","1320":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = LOCATION.CITYNAME, GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'buchanan', 'san francisco', 'arabic']","1321":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID = RESTAURANT.ID, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1322":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, GEOGRAPHIC.CITYNAME, 'Bay Area', 'American']","1323":"[organization.continent, 'North America']","1324":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'jamerican cuisine', 'san francisco']","1325":"[author.name, author.aid = writes.aid, writes.pid = publication.pid, publication.citationnum, domainpublication.pid = publication.pid, domainpublication.did = domain.did, domainkeyword.did = domain.did, domainkeyword.kid = keyword.kid, keyword.keyword = 'Databases', author.homepage = 'University of Michigan']","1326":"[actor.name, actor.aid = cast.aid, cast.msid = copyright.msid, copyright.msid = movie.mid, movie.releaseyear, 'Jennifer Aniston', 2010]","1327":"[journal.jid, journal.name, publicationkeyword.kid = keyword.kid, publicationkeyword.pid = publication.pid, publication.jid = journal.jid, keyword.keyword,'Relational Database']","1328":"[movie.title, copyright.msid, directedby.msid = copyright.msid, directedby.did, director.did]","1329":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.FOODTYPE = 'American', GEOGRAPHIC.REGION = 'Bay Area']","1330":"[author.aid, author.name, writes.aid, writes.pid, publication.pid, author.name = 'H. V. Jagadish']","1331":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, GEOGRAPHIC.CITYNAME]","1332":"[conference.cid, conference.name, domainconference.cid = conference.cid, domainkeyword.did = domain.did, 'VLDB']","1333":"[publication.year, publication.citationnum, publication.pid, 2000, 200]","1334":"[actor.name, cast.role, cast.aid = actor.aid, cast.msid = copyright.msid, tvseries.title, 'Olivia Pope', 'Scandal']","1335":"[movie.mid, movie.title, movie.releaseyear, cast.msid = copyright.msid, cast.aid = actor.aid, directedby.msid = copyright.msid, directedby.did = director.did]","1336":"[organization.name, domain.name, domain.did = domainkeyword.did, domainkeyword.kid = keyword.kid, keyword.keyword = 'Databases']","1337":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME = 'san francisco', RESTAURANT.FOODTYPE = 'french']","1338":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, GEOGRAPHIC.CITYNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, 'American']","1339":"[actor.aid, actor.name, cast.msid, cast.aid = actor.aid, cast.msid = copyright.msid, copyright.id]","1340":"[actor.name, movie.title, cast.aid = actor.aid, cast.msid = copyright.msid, movie.mid = copyright.msid]","1341":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME, 'yosemite', 'mono lake', 'french']","1342":"[author.aid, conference.cid, publication.pid, publication.year, writes.aid = author.aid, publication.cid = conference.cid, 'H. V. Jagadish', 'VLDB', 2000]","1343":"[actor.name, cast.msid, cast.aid, cast.role, copyright.msid, cast.aid = actor.aid, cast.msid = copyright.msid, 'Rowan Atkinson', 'Mr. Bean']","1344":"[RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'french', 'palo alto']","1345":"[RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, GEOGRAPHIC.CITYNAME, 'bethel island', 'bethel island rd']","1346":"[conference.cid, publication.cid, publication.year, conference.name, VLDB, 2000]","1347":"[publication.title, publication.year, writes.aid = author.aid, author.name,'H. V. Jagadish',2000]","1348":"[conference.cid, publication.cid = conference.cid, writes.pid = publication.pid, writes.aid = author.aid, author.name, 'H. V. Jagadish']","1349":"[actor.aid, actor.gender, actor.birthcity, actor.name, 'female', 'Austin']","1350":"[RESTAURANT.NAME, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID = RESTAURANT.ID]","1351":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, LOCATION.STREETNAME, RESTAURANT.FOODTYPE = 'Arabic', LOCATION.STREETNAME = 'Buchanan', RESTAURANT.CITYNAME = 'San Francisco']","1352":"[publication.year, publication.citationnum, domainpublication.pid = publication.pid, domainpublication.did = domain.did, publication.citationnum > 200, publication.year > 2000]","1353":"[conference.cid, publication.cid = conference.cid, publication.pid, cite.citing = publication.pid, conference.name = 'VLDB']","1354":"[movie.title, cast.role, cast.msid = copyright.msid, copyright.msid = movie.mid, 'Daddy Long Legs']","1355":"[publication.title, publication.jid = journal.jid, publication.cid = conference.cid, publicationkeyword.kid = keyword.kid, domainpublication.pid = publication.pid, domainkeyword.kid = keyword.kid, journal.name = 'PVLDB', keyword.keyword = 'Keyword search']","1356":"[publication.citationnum, publication.cid, conference.name = 'VLDB']","1357":"[RESTAURANT.CITYNAME, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, 'bethel island rd', 'bethel island']","1358":"[journal.jid, journal.homepage, journal.name, publicationkeyword.kid, publicationkeyword.pid, publication.title, publication.year, keyword.kid, keyword.keyword, keyword = 'Relational Database', publication.cid = conference.cid, publication.jid = journal.jid]","1359":"[publication.pid, publication.jid, cite.citing = publication.pid, cite.cited = publication.pid]","1360":"[organization.continent, organization.homepage, North America]","1361":"[actor.name, cast.aid, cast.msid = copyright.msid, copyright.msid = movie.mid]","1362":"[author.aid, publication.pid, publication.cid = conference.cid, conference.name, VLDB]","1363":"[publication.year, publication.citationnum, domainpublication.pid = publication.pid, domainpublication.did = domain.did, domain.name, 2000, 'Databases']","1364":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1365":"[keyword.kid]","1366":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, RESTAURANT.RATING, 'arabic', 'mountain view']","1367":"[publication.year, publication.citationnum, publication.jid, journal.homepage, journal.name, publication.pid = domainpublication.pid, domainpublication.did = domain.did, journal.jid = domainjournal.jid, domainjournal.did = domain.did, publication.year > 2000, publication.citationnum > 200, journal.name = 'PVLDB']","1368":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'san francisco', 'jamerican']","1369":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'yosemite', 'mono lake', 'french']","1370":"[journal.name, publication.pid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, keyword.keyword = 'Relational Database']","1371":"[RESTAURANT.NAME, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.RATING, LOCATION.RESTAURANTID = RESTAURANT.ID, GEOGRAPHIC.CITYNAME = LOCATION.CITYNAME, 'denny', 'bay area']","1372":"[movie.title, cast.msid = copyright.msid, cast.aid]","1373":"[conference.cid, publication.cid = conference.cid, publicationkeyword.kid = keyword.kid, keyword.keyword, publication.pid = publicationkeyword.pid, publicationkeyword.kid = keyword.kid, keyword.keyword = 'Relational Database']","1374":"[movie.releaseyear, 2015]","1375":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'San Francisco', 'French']","1376":"[author.name,writes.aid,writes.pid,publication.title,writes.aid = author.aid,writes.pid = publication.pid]","1377":"[keyword.keyword, publication.jid, publicationkeyword.kid = keyword.kid, publication.jid = journal.jid, journal.name = 'PVLDB']","1378":"[publication.abstract, publication.title, \"Making database systems usable\"]","1379":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, GEOGRAPHIC.CITYNAME, 'san francisco', 'buchanan', 'arabic']","1380":"[keyword.kid, publicationkeyword.kid = keyword.kid, publicationkeyword.pid = publication.pid, publication.cid = conference.cid, conference.name, PVLDB]","1381":"[actor.aid, cast.msid, cast.aid, copyright.msid, actor.name, 'Woody Strode', actor.name, 'Jason Robards']","1382":"[actor.name, actor.birthyear, actor.nationality, actor.birthcity, 1980, Italy]","1383":"[author.name, author.aid = writes.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.name, conference.name = 'VLDB', author.name = 'H. V. Jagadish']","1384":"[movie.mid, movie.title, movie.releaseyear, directedby.msid, directedby.did, director.name, director.did, 'Steven Spielberg', 2006]","1385":"[RESTAURANT.NAME, RESTAURANT.RATING, GEOGRAPHIC.CITYNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1386":"[actor.birthyear, actor.name, 'Kevin Spacey']","1387":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, RESTAURANT.RATING, GEOGRAPHIC.CITYNAME, 'alameda']","1388":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1389":"[RESTAURANT.FOODTYPE, GEOGRAPHIC.COUNTY, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1390":"[author.name, publication.pid, publicationkeyword.kid, keyword.keyword, writes.aid = author.aid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, author.name = 'H. V. Jagadish', keyword.keyword = 'User Study']","1391":"[publication.pid, publicationkeyword.kid, keyword.kid, keyword.keyword, publication.cid = conference.cid, conference.name = 'PVLDB', publicationkeyword.pid = publication.pid]","1392":"[publication.cid, conference.cid, conference.name, VLDB]","1393":"[actor.name, actor.nationality, Afghanistan]","1394":"[movie.title, movie.mid = copyright.msid, cast.msid = copyright.msid, cast.aid = actor.aid, actor.name, directedby.msid = copyright.msid, directedby.did = director.did, director.name, actor.name,'Asghar Farhadi','Taraneh Alidoosti']","1395":"[author.aid, author.name, domain.did, domain.name, domainauthor.aid = author.aid, domainauthor.did = domain.did]","1396":"[movie.releaseyear, tags.kid, copyright.msid = tags.msid, movie.mid = copyright.msid]","1397":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, GEOGRAPHIC.CITYNAME = RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME = LOCATION.CITYNAME]","1398":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.FOODTYPE = 'French', GEOGRAPHIC.REGION = 'Bay Area']","1399":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid]","1400":"[publication.title, publication.pid, cite.citing = publication.pid, 'Making database systems usable']","1401":"[actor.birthcity, actor.name, Tehran]","1402":"[author.name, author.aid = writes.aid, writes.pid = publication.pid]","1403":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1404":"[actor.birthyear, actor.name, 'Benedict Cumberbatch']","1405":"[author.aid, author.name, writes.pid, cite.citing, writes.aid = author.aid, cite.cited = publication.pid]","1406":"[publication.title, publication.citationnum, publication.cid = conference.cid, conference.name, 200, VLDB]","1407":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1408":"[keyword.keyword, publicationkeyword.kid = keyword.kid, writes.aid = author.aid, writes.pid = publication.pid, author.name,'H. V. Jagadish']","1409":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'buchanan', 'san francisco', 'arabic']","1410":"[movie.title, copyright.msid, classification.msid = copyright.msid, genre.gid = classification.gid, movie.title = \"Jurassic Park\"]","1411":"[director.name, director.did = directedby.did, directedby.msid = copyright.msid, copyright.msid = movie.mid, movie.releaseyear, 2002, 2010]","1412":"[conference.cid, publication.cid, conference.name, 'VLDB']","1413":"[cast.role, cast.aid = actor.aid, 'Mr. Bean']","1414":"[movie.title, cast.msid, cast.aid, actor.aid, actor.nationality, 'China']","1415":"[movie.mid, movie.title, tags.kid = keyword.id, keyword.keyword]","1416":"[author.aid, author.homepage, author.name]","1417":"[]","1418":"[RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'Chinese', 'Bay Area']","1419":"[actor.name, cast.aid, cast.msid = copyright.msid, copyright.msid = movie.mid, movie.releaseyear]","1420":"[publication.pid, publication.citationnum, domainpublication.did = domain.did, domainpublication.pid = publication.pid, domain.name = 'Databases']","1421":"[organization.oid]","1422":"[actor.birthyear, actor.name, 'Kevin Spacey']","1423":"[author.aid, publication.pid, journal.jid, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, journal.name = 'PVLDB']","1424":"[movie.title, copyright.msid, directedby.msid = copyright.msid, directedby.did = director.did, director.name, movie.title = 'James Bond']","1425":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'bay area']","1426":"[author.aid, publication.pid, conference.cid, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.name = 'VLDB']","1427":"[conference.cid, publication.cid = conference.cid, publicationkeyword.kid = keyword.kid, keyword.keyword, publication.pid = publicationkeyword.pid, publicationkeyword.kid = keyword.kid, keyword.keyword = 'Relational Database']","1428":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1429":"[publication.cid, conference.name, publicationkeyword.kid, keyword.keyword, domainpublication.pid = publication.pid, domainconference.cid = conference.cid, publicationkeyword.pid = publication.pid, domainkeyword.kid = keyword.kid, conference.name = 'VLDB', keyword.keyword = 'Information Retrieval']","1430":"[actor.nationality, actor.name, 'Kevin Spacey']","1431":"[author.name, author.aid = writes.aid, writes.pid = publication.pid, cite.cited = publication.pid, cite.citing]","1432":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1433":"[movie.title, cast.msid = copyright.msid, cast.aid = actor.aid, actor.name, 'Daffy Duck']","1434":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME = 'Mountain View', RESTAURANT.FOODTYPE = 'Arabic']","1435":"[publication.year, domainpublication.pid = publication.pid, domainpublication.did = domain.did, organization.name = 'University of Michigan', publication.year > 2000]","1436":"[publication.pid, publication.jid = journal.jid, journal.name]","1437":"[actor.name, actor.nationality, Afghanistan]","1438":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'bay area', 'american']","1439":"[actor.name, movie.title, cast.aid = actor.aid, cast.msid = copyright.msid, copyright.msid = movie.mid, movie.title = 'The Imitation Game', actor.name = 'Alan Turing']","1440":"[movie.title, tags.kid, keyword.id, copyright.msid = movie.mid, tags.msid = copyright.msid]","1441":"[movie.title, writtenby.msid = movie.msid, writtenby.wid = writer.wid, writer.name]","1442":"[publication.title, publication.year, cite.citing = publication.pid, 'Making database systems usable']","1443":"[organization.oid, publication.pid, publicationkeyword.pid, keyword.kid, domainauthor.aid = author.aid, domainauthor.did = domain.did, domainpublication.did = domain.did, domainpublication.pid = publication.pid]","1444":"[conference.cid, publication.pid, publication.citationnum, publication.year, conference.name, 'VLDB', 2005]","1445":"[keyword.keyword, publication.pid, conference.cid, publication.cid = conference.cid, publication.pid = publicationkeyword.pid, publicationkeyword.kid = keyword.kid]","1446":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1447":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'bay area', 'american']","1448":"[publication.citationnum, publication.pid, citationnum, 200]","1449":"[author.aid, publication.pid, keyword.kid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, writes.aid = author.aid, keyword.keyword = 'Relational Database']","1450":"[actor.name, actor.birthcity, actor.birthyear, actor.birthcity = 'Austin', actor.birthyear > 1980]","1451":"[actor.name, actor.aid = cast.aid, cast.msid = copyright.msid, madeby.msid = copyright.msid, madeby.pid = producer.pid]","1452":"[author.name, writes.aid = author.aid, writes.pid = publication.pid]","1453":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'san francisco', 'french']","1454":"[organization.name, domain.did, domainpublication.did = domain.did, domainpublication.pid = publication.pid, publication.pid]","1455":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'french', 'yosemite', 'mono lake']","1456":"[author.aid, author.name, conference.cid, conference.name, publication.pid, publication.year, publication.cid = conference.cid, writes.aid = author.aid]","1457":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1458":"[movie.mid, movie.title, movie.releaseyear, classification.gid, classification.msid, genre.gid, genre.genre, 2010, Sci-Fi]","1459":"[author.aid, author.homepage, 'University of Michigan']","1460":"[organization.name, 'H. V. Jagadish']","1461":"[actor.birthcity, actor.name, Tehran]","1462":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'san francisco', 'jamerican cuisine']","1463":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'arabic', 'buchanan', 'san francisco']","1464":"[movie.mid, cast.msid, cast.aid = actor.aid, actor.name, \"Robin Wright\"]","1465":"[actor.aid, actor.name, cast.msid, cast.aid, cast.aid = actor.aid, cast.msid = copyright.msid, actor.name = 'Tom Hanks']","1466":"[author.name, writes.aid, writes.pid, publication.pid, publication.jid, journal.homepage, 'PVLDB']","1467":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'alameda']","1468":"[publication.pid, publication.citationnum, writes.aid = author.aid, author.name, 'H. V. Jagadish', 200]","1469":"[RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, 'American', 'Bay Area']","1470":"[movie.mid, movie.title, cast.msid = copyright.msid, cast.aid = actor.aid, actor.name, 'Robin Wright']","1471":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, 'Bay Area', 'American']","1472":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, RESTAURANT.FOODTYPE = 'arabic', GEOGRAPHIC.CITYNAME = 'mountain view']","1473":"[journal.homepage,journal.jid,writes.aid = author.aid,publication.jid = journal.jid,writes.pid = publication.pid,author.name,'H. V. Jagadish']","1474":"[conference.cid, publication.title, publication.cid = conference.cid, publication.title = 'Making database systems usable']","1475":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, GEOGRAPHIC.CITYNAME, 'san francisco', 'arabic', 'buchanan']","1476":"[movie.title, cast.msid, cast.aid, actor.aid]","1477":"[journal.jid, journal.name, publication.jid = journal.jid, writes.pid = publication.pid, writes.aid = author.aid, author.name = 'H. V. Jagadish']","1478":"[author.name, publication.cid, conference.name, writes.aid = author.aid, publication.pid = writes.pid, publication.cid = conference.cid, 'H. V. Jagadish', 'VLDB']","1479":"[conference.cid, conference.name, publication.cid, publication.year]","1480":"[RESTAURANT.NAME, RESTAURANT.RATING, GEOGRAPHIC.REGION, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1481":"[actor.name, movie.title, cast.aid = actor.aid, cast.msid = copyright.msid, copyright.msid = classification.msid, classification.gid = genre.gid, movie.mid = cast.msid, movie.title = 'The Imitation Game', actor.name = 'Alan Turing']","1482":"[author.aid, publication.pid, keyword.keyword, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, writes.aid = author.aid, writes.pid = publication.pid, keyword.keyword = 'Relational Database']","1483":"[publicationkeyword.kid, keyword.keyword, publicationkeyword.pid = publication.pid, keyword.keyword = 'Natural Language']","1484":"[publication.year, publication.cid, conference.cid, conference.name, 2000, VLDB]","1485":"[publication.pid, publication.title, publication.abstract, publication.year, publication.citationnum, publication.referencenum, publication.cid = conference.cid, conference.name]","1486":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, RESTAURANT.RATING, GEOGRAPHIC.CITYNAME, 'alameda']","1487":"[RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'French', 'Palo Alto']","1488":"[actor.birthyear, actor.aid, 1984]","1489":"[author.aid, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.name, conference.cid = domainconference.cid, domainconference.did = domain.did, domainpublication.did = domain.did, domainpublication.pid = publication.pid, publication.year, 1995, 2002, VLDB]","1490":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'San Francisco', 'French']","1491":"[author.name, conference.name, publication.year, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid]","1492":"[author.aid, author.name, publication.pid, publication.year, journal.jid, journal.name, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, journal.name = 'PVLDB', publication.year = 2010]","1493":"[keyword.keyword]","1494":"[actor.name, cast.aid, cast.msid = copyright.msid, tvseries.sid = copyright.msid]","1495":"[author.aid, author.name, conference.cid, conference.name, publication.pid, publication.cid, publication.citationnum, writes.aid = author.aid, publication.cid = conference.cid, publication.citationnum > 200, author.name = 'H. V. Jagadish', conference.name = 'VLDB']","1496":"[publication.pid, publication.title, domainpublication.did = domain.did, domain.did = organization.oid, organization.name, organization.name = 'University of Michigan']","1497":"[director.name,director.nationality,Afghanistan]","1498":"[RESTAURANT.FOODTYPE, GEOGRAPHIC.COUNTY, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, 'santa cruz county', 'jamerican cuisine']","1499":"[author.name, publication.pid, publication.year, writes.aid = author.aid, writes.pid = publication.pid, 2000]","1500":"[tvseries.title, tvseries.releaseyear, directedby.msid = tvseries.sid, directedby.did = director.did, director.name, 'House of Cards', 2013]","1501":"[movie.mid, directedby.msid = movie.mid, directedby.did = director.did, director.name, 'Steven Spielberg']","1502":"[movie.title, movie.mid = directedby.msid, directedby.did = director.did, director.nationality, director.birthcity]","1503":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, GEOGRAPHIC.CITYNAME, 'san francisco', 'buchanan', 'arabic']","1504":"[movie.mid, director.birthcity, directedby.msid = copyright.msid, directedby.did = director.did, director.birthcity, 'Los Angeles']","1505":"[actor.name, actor.birthcity, actor.birthyear, 'New York City', 1984]","1506":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = 'alameda']","1507":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1508":"[review.businessid, review.rating, review.year, review.month, business.businessid]","1509":"[RESTAURANT.NAME, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'buttercup kitchen', 'san francisco']","1510":"[movie.mid, copyright.msid, classification.msid = copyright.msid, classification.gid]","1511":"[author.aid, author.name, writes.pid, writes.aid, publication.pid, publication.citationnum, author.name = 'H. V. Jagadish']","1512":"[RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, RESTAURANT.ID, GEOGRAPHIC.CITYNAME = 'alameda']","1513":"[actor.birthcity, actor.name, 'Kevin Spacey']","1514":"[movie.releaseyear, copyright.msid = movie.msid, tags.msid = copyright.msid, tags.kid = keyword.id]","1515":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, LOCATION.STREETNAME, LOCATION.CITYNAME, RESTAURANT.CITYNAME = LOCATION.CITYNAME]","1516":"[author.name, writes.aid, writes.pid, publication.pid, publication.citationnum, cite.cited, writes.aid = author.aid, writes.pid = publication.pid, cite.cited = publication.pid]","1517":"[actor.name, cast.msid = copyright.msid, cast.aid = actor.aid, directedby.msid = copyright.msid, directedby.did = director.did, director.name]","1518":"[movie.mid, movie.title, directedby.msid = movie.mid, directedby.did = director.did, cast.msid = movie.mid, cast.aid = actor.aid, actor.name, 'Asghar Farhadi', 'Taraneh Alidoosti']","1519":"[organization.continent, organization.homepage, organization.name, North America]","1520":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, bay area]","1521":"[RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, LOCATION.STREETNAME = 'bethel island rd', GEOGRAPHIC.CITYNAME = 'bethel island']","1522":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, GEOGRAPHIC.CITYNAME = 'Bay Area']","1523":"[publication.pid, publicationkeyword.kid, keyword.keyword, publicationkeyword.pid = publication.pid, domainkeyword.kid = keyword.kid]","1524":"[actor.gender, actor.name, movie.title, cast.aid, cast.msid = copyright.msid, cast.aid = actor.aid, movie.title = 'Saving Private Ryan', actor.gender = 'female']","1525":"[author.name, publication.citationnum, writes.aid = author.aid, writes.pid = publication.pid, author.name = 'University of Michigan', publication.citationnum > 5000]","1526":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, 'french']","1527":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, RESTAURANT.FOODTYPE = 'French', LOCATION.CITYNAME = 'San Francisco']","1528":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.year, 2000]","1529":"[author.aid, author.name, writes.aid, writes.pid, publication.pid, author.name = 'H. V. Jagadish']","1530":"[actor.name, cast.aid = actor.aid, cast.msid = copyright.msid, copyright.msid = movie.mid]","1531":"[journal.homepage, journal.name, 'PVLDB']","1532":"[organization.name, organization.continent, domain.name]","1533":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'san francisco', 'buchanan', 'arabic']","1534":"[movie.title, movie.releaseyear, directedby.msid = copyright.msid, directedby.did = director.did, director.name, Jim Jarmusch]","1535":"[publication.pid, publication.year, publication.citationnum, conference.cid, conference.name = 'VLDB', publication.year > 2000]","1536":"[movie.releaseyear, directedby.msid, directedby.did, director.name, director.did = directedby.did, movie.mid = directedby.msid, Quentin Tarantino, 2010]","1537":"[actor.name, actor.nationality, cast.aid = actor.aid, cast.msid = copyright.msid, copyright.msid = movie.mid, movie.title, 'James Bond', 'Canada']","1538":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'Mountain View', 'Arabic']","1539":"[publication.pid, publication.citationnum, publication.jid = journal.jid, journal.name]","1540":"[actor.birthcity, actor.birthyear, 'Austin', 1980]","1541":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'Arabic', 'Mountain View']","1542":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION, 'yosemite', 'mono lake', 'french']","1543":"[publication.*, journal.name, publication.jid = journal.jid, 'PVLDB']","1544":"[author.name, writes.aid, writes.pid, publication.pid, publication.citationnum, 200]","1545":"[conference.homepage, conference.name, 'VLDB']","1546":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.year, 2000]","1547":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, 'alameda']","1548":"[actor.name, cast.aid, cast.msid, movie.title, 'Alan Turing', 'The Imitation Game']","1549":"[tvseries.title, tvseries.releaseyear, writtenby.msid = tvseries.sid, writtenby.wid = writer.wid, writer.name = 'Shonda Rhimes']","1550":"[publication.title, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, keyword.keyword, 'Making database systems usable']","1551":"[RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'french', 'palo alto']","1552":"[organization.homepage, organization.name = 'University of Michigan']","1553":"[publication.title, publication.year, publication.year < 2000]","1554":"[director.name, director.did, directedby.msid, movie.releaseyear, movie.mid, directedby.did = director.did, movie.releaseyear < 2010, director.name = 'Quentin Tarantino']","1555":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.FOODTYPE = 'American', GEOGRAPHIC.REGION = 'Bay Area']","1556":"[publication.year, publication.pid, 2000]","1557":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1558":"[publication.year, publication.jid = journal.jid, journal.name]","1559":"[actor.nationality, actor.name, 'Christoph Waltz']","1560":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'san francisco', 'french']","1561":"[author.homepage, author.name, 'H. V. Jagadish']","1562":"[publication.year, domainpublication.pid = publication.pid, domain.did = organization.oid, organization.name, 2000, 'University of Michigan']","1563":"[keyword.kid, domainkeyword.kid, domainkeyword.did = domain.did, domain.name]","1564":"[movie.title, movie.releaseyear, directedby.msid = copyright.msid, directedby.did = director.did, copyright.msid = cast.msid, movie.mid = cast.msid, movie.title = 'Joy', movie.releaseyear = 2015]","1565":"[actor.aid, actor.gender, actor.name, actor.nationality, actor.birthcity, actor.birthyear, Afghanistan]","1566":"[actor.aid, actor.name, cast.msid, cast.aid, copyright.msid, movie.mid, movie.title, actor.name = 'Woody Strode', actor.name = 'Jason Robards']","1567":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, RESTAURANT.RATING, 'Mountain View', 'Arabic']","1568":"[RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, GEOGRAPHIC.CITYNAME = RESTAURANT.CITYNAME]","1569":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'san francisco', 'buchanan', 'arabic']","1570":"[publication.citationnum, publication.year, publication.cid = conference.cid, conference.name = 'PVLDB']","1571":"[author.aid, domain.name, organization.name, domainauthor.aid = author.aid]","1572":"[director.name, directedby.msid, classification.gid, genre.genre, directedby.did = director.did, classification.msid = copyright.msid, classification.gid = genre.gid]","1573":"[publication.*, conference.name, publication.cid = conference.cid, 'VLDB']","1574":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, 'san francisco', 'french']","1575":"[actor.aid, actor.name, cast.aid = actor.aid, cast.msid, 'Shahab Hosseini']","1576":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'San Francisco', 'French']","1577":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'arabic', 'buchanan', 'san francisco']","1578":"[author.name, writes.aid = author.aid]","1579":"[movie.title, movie.budget, 'Finding Nemo']","1580":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, GEOGRAPHIC.CITYNAME, 'arabic', 'buchanan', 'san francisco']","1581":"[RESTAURANT.FOODTYPE, GEOGRAPHIC.REGION, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, 'Chinese', 'Bay Area']","1582":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, GEOGRAPHIC.CITYNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME]","1583":"[actor.gender, actor.birthcity, actor.birthyear, 'female', 'New York City', 1980]","1584":"[publication.pid, publication.title, publication.year, publication.cid = conference.cid, conference.name, organization.name, 'PVLDB', 2000]","1585":"[actor.name, cast.aid = actor.aid, cast.msid = copyright.msid, copyright.msid = tvseries.sid, 'Scott Foley']","1586":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.REGION, RESTAURANT.FOODTYPE = 'American', GEOGRAPHIC.REGION = 'Bay Area']","1587":"[conference.name, conference.cid = publication.cid, publication.pid = publicationkeyword.pid, publicationkeyword.kid = keyword.kid]","1588":"[RESTAURANT.NAME, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, LOCATION.STREETNAME = 'bethel island rd', LOCATION.CITYNAME = 'bethel island']","1589":"[conference.cid, publication.citationnum, publication.year, publication.cid = conference.cid, 2005]","1590":"[actor.name, cast.aid = actor.aid, cast.msid = copyright.msid, movie.title, movie.mid = cast.msid, 'Alan Turing', 'The Imitation Game']","1591":"[actor.nationality, actor.aid, director.name, cast.aid = actor.aid, cast.msid = copyright.msid, directedby.msid = copyright.msid, directedby.did = director.did, director.name = 'Jim Jarmusch', actor.nationality = 'Iran']","1592":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, GEOGRAPHIC.REGION, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'french', 'yosemite', 'mono lake']","1593":"[RESTAURANT.NAME, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'bethel island', 'bethel island rd']","1594":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'arabic', 'buchanan', 'san francisco']","1595":"[RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, 'bethel island rd', 'bethel island']","1596":"[author.name, publication.year, publication.jid, publication.pid, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, journal.name,'PVLDB',2000]","1597":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME = 'Mountain View', RESTAURANT.FOODTYPE = 'Arabic']","1598":"[actor.name, cast.aid, cast.msid, copyright.msid, movie.releaseyear]","1599":"[movie.title, movie.releaseyear, 'The Imitation Game']","1600":"[actor.gender, actor.birthcity, actor.birthyear, 'New York City', 1980]","1601":"[conference.cid, publication.citationnum, publication.cid = conference.cid, 'VLDB']","1602":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid]","1603":"[publication.pid, publication.year, publication.jid, journal.jid, journal.name, domainpublication.pid = publication.pid, domainpublication.did = domain.did, domain.jid = domainjournal.jid, organization.name = 'University of Michigan', publication.year > 2000]","1604":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = LOCATION.CITYNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME = 'san francisco', LOCATION.STREETNAME = 'buchanan', RESTAURANT.FOODTYPE = 'arabic']","1605":"[actor.birthcity, actor.birthyear, actor.gender, actor.name, actor.nationality, actor.aid, 1980, Austin]","1606":"[movie.title, movie.mid, cast.msid = movie.msid, cast.aid = actor.aid, actor.name = 'Taraneh Alidoosti', directedby.msid = copyright.msid, directedby.did = director.did, director.name = 'Asghar Farhadi']","1607":"[actor.name, actor.aid, cast.msid, cast.aid = actor.aid, cast.msid = copyright.msid, 'Shahab Hosseini']","1608":"[actor.nationality, actor.name]","1609":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.CITYNAME, LOCATION.RESTAURANTID, 'bethel island rd', 'bethel island']","1610":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Buchanan', 'San Francisco', 'Arabic']","1611":"[organization.name, domainpublication.pid, publication.citationnum, domainpublication.did = domain.did, domain.did = organization.oid]","1612":"[publication.year, publication.pid, publication.citationnum, journal.name, publication.jid = journal.jid, 2000, PVLDB]","1613":"[movie.title, writtenby.wid = writer.wid, writtenby.msid = movie.mid, writer.name, madeby.pid = producer.pid, madeby.msid = movie.mid, producer.name, \"Woody Allen\"]","1614":"[publication.title, publication.year, 2000]","1615":"[author.aid, author.name, publication.pid, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, keyword.keyword, 'Relational Database']","1616":"[author.name,writes.aid,publication.pid,publicationkeyword.kid,keyword.kid,writes.aid = author.aid,publication.pid = writes.pid,publicationkeyword.pid = publication.pid,publicationkeyword.kid = keyword.kid]","1617":"[publication.citationnum, publication.title]","1618":"[movie.title, directedby.msid, directedby.did, director.name, director.name = 'Alfred Hitchcock']","1619":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.year]","1620":"[movie.releaseyear, 2013]","1621":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, GEOGRAPHIC.CITYNAME, GEOGRAPHIC.REGION]","1622":"[movie.title,directedby.msid = copyright.msid,directedby.did = director.did,directedby.msid = movie.mid,movie.title = 'James Bond']","1623":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, RESTAURANT.FOODTYPE = 'French', GEOGRAPHIC.CITYNAME = 'Mountain View']","1624":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'arabic', 'buchanan', 'san francisco']","1625":"[publication.citationnum, publicationkeyword.pid = publication.pid, publicationkeyword.kid = keyword.kid, keyword.keyword]","1626":"[RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'French', 'Palo Alto']","1627":"[publication.citationnum, publication.year, conference.name, publication.cid = conference.cid, 'PVLDB', 2005]","1628":"[author.name, author.homepage, publication.citationnum, writes.aid = author.aid, writes.pid = publication.pid, 'University of Michigan', 5000]","1629":"[publication.year, publication.pid, 2000]","1630":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, RESTAURANT.FOODTYPE = 'French', GEOGRAPHIC.CITYNAME IN ('Yosemite', 'Mono Lake']","1631":"[author.name, writes.aid, writes.pid, publication.jid, publication.pid, journal.jid, 'H. V. Jagadish']","1632":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, GEOGRAPHIC.CITYNAME, 'yosemite', 'mono lake', 'french']","1633":"[author.aid, author.name, publication.pid, journal.jid, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, journal.name = 'PVLDB']","1634":"[publication.title, publication.year, writes.aid, author.name, 'H. V. Jagadish', 'Yunyao Li', 2005]","1635":"[publication.year, publication.citationnum, publication.cid = conference.cid, conference.name, 2000, 200]","1636":"[RESTAURANT.NAME, RESTAURANT.RATING, RESTAURANT.FOODTYPE, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, 'American', 'bay area']","1637":"[author.aid, publication.pid, publication.year, journal.jid, journal.name, writes.aid = author.aid, writes.pid = publication.pid, publication.jid = journal.jid, publication.year > 2010, journal.name = 'PVLDB']","1638":"[author.aid, author.name, publication.pid, publication.cid = conference.cid, publication.year, conference.name, 'VLDB', 2002]","1639":"[author.name, author.aid = writes.aid, writes.pid = publication.pid, cite.cited = publication.pid, publication.citationnum]","1640":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'arabic', 'buchanan', 'san francisco']","1641":"[RESTAURANT.CITYNAME, RESTAURANT.FOODTYPE, GEOGRAPHIC.CITYNAME, RESTAURANT.RATING, 'mountain view', 'arabic']","1642":"[actor.name, cast.aid = actor.aid, cast.msid = copyright.msid, movie.mid = copyright.msid, 'Shahab Hosseini']","1643":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = LOCATION.CITYNAME, LOCATION.RESTAURANTID = RESTAURANT.ID, GEOGRAPHIC.CITYNAME = 'san francisco', RESTAURANT.FOODTYPE = 'french']","1644":"[movie.title, writtenby.wid, writer.name, writtenby.msid = copyright.msid, copyright.msid = movie.mid, movie.title = 'The Truman Show']","1645":"[actor.name, cast.aid, cast.msid = copyright.msid, movie.mid = copyright.msid, movie.releaseyear, 1942]","1646":"[author.aid, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.name = 'VLDB']","1647":"[keyword.keyword, domainkeyword.kid = keyword.kid, domainkeyword.did = domain.did, domain.name = 'Databases']","1648":"[author.aid, author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.name, publication.year, 2002]","1649":"[movie.title, cast.msid = copyright.msid, cast.aid = actor.aid, movie.title = 'Camp X-Ray']","1650":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'san francisco', 'french']","1651":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, 'french']","1652":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'Buchanan', 'San Francisco', 'Arabic', 'Good']","1653":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, RESTAURANT.CITYNAME, LOCATION.RESTAURANTID, GEOGRAPHIC.CITYNAME, 'yosemite', 'mono lake', 'french']","1654":"[author.name, writes.aid = author.aid, writes.pid = publication.pid, publication.cid = conference.cid, conference.cid]","1655":"[RESTAURANT.NAME, RESTAURANT.FOODTYPE, RESTAURANT.RATING, LOCATION.HOUSENUMBER, LOCATION.STREETNAME, RESTAURANT.CITYNAME = GEOGRAPHIC.CITYNAME, LOCATION.CITYNAME = GEOGRAPHIC.CITYNAME, 'buchanan', 'san francisco', 'arabic']","1656":"[publication.citationnum, publication.year, publication.cid = conference.cid, conference.name = 'VLDB']","1657":"[publication.pid, domain.name, domainpublication.pid = publication.pid, organization.name]","1658":"[author.aid, author.name, writes.aid, writes.pid, publication.pid, publication.year, publication.year > 2000, author.name = 'H. V. Jagadish']"},"fields":{"0":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","1":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","2":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","3":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","4":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","5":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","6":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","7":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","8":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","9":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","10":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","11":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","12":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","13":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","14":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","15":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","16":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","17":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","18":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","19":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","20":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","21":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","22":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","23":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","24":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","25":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","26":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","27":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","28":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","29":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","30":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","31":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","32":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","33":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","34":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","35":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","36":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","37":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","38":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","39":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","40":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","41":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","42":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","43":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","44":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","45":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","46":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","47":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","48":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","49":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","50":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","51":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","52":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","53":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","54":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","55":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","56":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","57":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","58":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","59":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","60":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","61":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","62":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","63":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","64":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","65":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","66":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","67":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","68":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","69":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","70":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","71":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","72":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","73":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","74":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","75":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","76":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","77":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","78":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","79":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","80":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","81":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","82":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","83":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","84":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","85":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","86":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","87":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","88":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","89":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","90":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","91":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","92":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","93":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","94":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","95":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","96":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","97":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","98":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","99":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","100":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","101":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","102":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","103":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","104":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","105":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","106":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","107":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","108":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","109":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","110":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","111":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","112":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","113":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","114":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","115":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","116":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","117":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","118":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","119":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","120":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","121":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","122":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","123":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","124":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","125":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","126":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","127":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","128":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","129":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","130":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","131":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","132":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","133":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","134":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","135":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","136":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","137":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","138":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","139":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","140":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","141":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","142":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","143":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","144":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","145":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","146":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","147":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","148":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","149":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","150":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","151":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","152":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","153":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","154":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","155":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","156":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","157":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","158":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","159":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","160":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","161":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","162":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","163":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","164":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","165":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","166":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","167":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","168":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","169":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","170":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","171":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","172":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","173":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","174":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","175":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","176":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","177":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","178":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","179":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","180":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","181":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","182":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","183":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","184":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","185":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","186":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","187":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","188":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","189":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","190":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","191":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","192":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","193":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","194":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","195":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","196":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","197":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","198":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","199":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","200":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","201":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","202":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","203":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","204":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","205":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","206":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","207":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","208":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","209":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","210":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","211":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","212":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","213":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","214":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","215":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","216":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","217":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","218":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","219":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","220":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","221":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","222":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","223":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","224":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","225":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","226":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","227":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","228":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","229":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","230":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","231":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","232":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","233":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","234":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","235":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","236":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","237":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","238":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","239":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","240":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","241":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","242":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","243":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","244":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","245":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","246":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","247":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","248":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","249":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","250":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","251":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","252":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","253":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","254":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","255":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","256":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","257":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","258":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","259":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","260":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","261":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","262":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","263":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","264":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","265":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","266":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","267":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","268":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","269":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","270":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","271":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","272":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","273":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","274":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","275":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","276":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","277":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","278":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","279":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","280":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","281":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","282":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","283":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","284":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","285":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","286":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","287":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","288":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","289":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","290":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","291":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","292":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","293":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","294":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","295":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","296":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","297":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","298":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","299":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","300":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","301":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","302":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","303":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","304":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","305":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","306":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","307":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","308":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","309":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","310":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","311":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","312":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","313":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","314":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","315":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","316":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","317":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","318":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","319":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","320":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","321":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","322":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","323":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","324":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","325":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","326":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","327":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","328":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","329":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","330":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","331":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","332":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","333":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","334":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","335":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","336":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","337":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","338":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","339":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","340":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","341":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","342":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","343":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","344":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","345":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","346":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","347":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","348":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","349":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","350":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","351":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","352":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","353":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","354":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","355":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","356":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","357":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","358":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","359":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","360":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","361":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","362":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","363":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","364":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","365":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","366":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","367":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","368":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","369":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","370":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","371":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","372":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","373":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","374":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","375":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","376":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","377":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","378":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","379":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","380":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","381":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","382":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","383":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","384":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","385":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","386":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","387":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","388":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","389":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","390":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","391":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","392":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","393":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","394":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","395":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","396":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","397":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","398":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","399":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","400":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","401":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","402":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","403":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","404":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","405":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","406":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","407":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","408":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","409":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","410":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","411":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","412":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","413":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","414":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","415":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","416":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","417":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","418":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","419":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","420":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","421":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","422":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","423":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","424":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","425":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","426":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","427":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","428":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","429":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","430":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","431":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","432":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","433":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","434":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","435":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","436":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","437":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","438":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","439":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","440":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","441":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","442":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","443":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","444":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","445":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","446":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","447":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","448":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","449":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","450":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","451":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","452":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","453":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","454":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","455":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","456":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","457":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","458":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","459":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","460":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","461":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","462":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","463":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","464":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","465":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","466":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","467":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","468":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","469":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","470":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","471":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","472":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","473":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","474":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","475":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","476":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","477":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","478":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","479":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","480":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","481":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","482":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","483":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","484":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","485":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","486":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","487":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","488":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","489":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","490":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","491":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","492":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","493":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","494":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","495":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","496":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","497":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","498":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","499":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","500":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","501":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","502":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","503":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","504":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","505":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","506":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","507":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","508":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","509":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","510":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","511":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","512":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","513":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","514":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","515":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","516":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","517":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","518":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","519":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","520":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","521":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","522":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","523":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","524":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","525":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","526":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","527":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","528":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","529":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","530":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","531":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","532":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","533":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","534":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","535":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","536":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","537":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","538":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","539":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","540":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","541":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","542":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","543":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","544":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","545":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","546":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","547":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","548":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","549":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","550":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","551":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","552":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","553":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","554":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","555":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","556":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","557":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","558":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","559":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","560":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","561":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","562":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","563":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","564":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","565":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","566":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","567":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","568":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","569":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","570":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","571":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","572":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","573":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","574":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","575":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","576":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","577":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","578":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","579":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","580":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","581":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","582":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","583":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","584":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","585":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","586":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","587":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","588":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","589":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","590":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","591":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","592":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","593":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","594":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","595":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","596":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","597":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","598":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","599":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","600":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","601":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","602":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","603":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","604":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","605":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","606":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","607":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","608":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","609":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","610":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","611":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","612":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","613":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","614":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","615":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","616":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","617":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","618":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","619":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","620":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","621":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","622":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","623":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","624":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","625":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","626":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","627":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","628":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","629":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","630":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","631":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","632":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","633":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","634":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","635":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","636":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","637":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","638":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","639":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","640":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","641":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","642":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","643":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","644":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","645":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","646":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","647":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","648":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","649":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","650":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","651":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","652":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","653":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","654":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","655":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","656":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","657":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","658":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","659":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","660":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","661":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","662":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","663":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","664":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","665":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","666":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","667":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","668":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","669":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","670":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","671":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","672":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","673":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","674":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","675":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","676":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","677":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","678":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","679":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","680":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","681":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","682":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","683":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","684":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","685":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","686":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","687":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","688":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","689":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","690":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","691":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","692":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","693":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","694":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","695":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","696":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","697":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","698":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","699":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","700":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","701":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","702":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","703":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","704":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","705":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","706":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","707":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","708":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","709":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","710":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","711":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","712":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","713":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","714":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","715":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","716":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","717":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","718":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","719":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","720":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","721":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","722":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","723":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","724":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","725":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","726":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","727":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","728":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","729":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","730":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","731":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","732":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","733":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","734":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","735":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","736":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","737":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","738":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","739":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","740":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","741":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","742":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","743":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","744":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","745":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","746":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","747":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","748":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","749":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","750":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","751":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","752":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","753":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","754":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","755":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","756":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","757":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","758":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","759":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","760":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","761":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","762":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","763":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","764":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","765":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","766":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","767":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","768":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","769":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","770":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","771":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","772":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","773":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","774":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","775":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","776":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","777":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","778":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","779":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","780":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","781":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","782":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","783":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","784":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","785":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","786":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","787":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","788":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","789":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","790":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","791":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","792":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","793":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","794":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","795":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","796":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","797":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","798":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","799":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","800":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","801":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","802":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","803":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","804":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","805":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","806":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","807":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","808":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","809":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","810":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","811":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","812":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","813":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","814":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","815":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","816":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","817":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","818":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","819":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","820":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","821":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","822":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","823":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","824":"Table border_info, columns = [*,state_name,border]\nTable city, columns = [*,city_name,population,country_name,state_name]\nTable highlow, columns = [*,state_name,highest_elevation,lowest_point,highest_point,lowest_elevation]\nTable lake, columns = [*,lake_name,area,country_name,state_name]\nTable mountain, columns = [*,mountain_name,mountain_altitude,country_name,state_name]\nTable river, columns = [*,river_name,length,country_name,traverse]\nTable state, columns = [*,state_name,population,area,country_name,capital,density]\n","825":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","826":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","827":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","828":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","829":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","830":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","831":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","832":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","833":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","834":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","835":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","836":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","837":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","838":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","839":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","840":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","841":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","842":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","843":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","844":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","845":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","846":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","847":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","848":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","849":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","850":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","851":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","852":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","853":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","854":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","855":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","856":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","857":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","858":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","859":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","860":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","861":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","862":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","863":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","864":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","865":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","866":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","867":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","868":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","869":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","870":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","871":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","872":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","873":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","874":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","875":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","876":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","877":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","878":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","879":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","880":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","881":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","882":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","883":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","884":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","885":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","886":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","887":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","888":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","889":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","890":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","891":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","892":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","893":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","894":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","895":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","896":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","897":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","898":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","899":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","900":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","901":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","902":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","903":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","904":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","905":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","906":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","907":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","908":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","909":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","910":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","911":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","912":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","913":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","914":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","915":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","916":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","917":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","918":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","919":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","920":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","921":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","922":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","923":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","924":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","925":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","926":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","927":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","928":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","929":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","930":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","931":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","932":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","933":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","934":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","935":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","936":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","937":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","938":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","939":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","940":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","941":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","942":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","943":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","944":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","945":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","946":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","947":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","948":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","949":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","950":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","951":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","952":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","953":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","954":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","955":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","956":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","957":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","958":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","959":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","960":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","961":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","962":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","963":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","964":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","965":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","966":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","967":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","968":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","969":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","970":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","971":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","972":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","973":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","974":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","975":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","976":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","977":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","978":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","979":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","980":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","981":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","982":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","983":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","984":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","985":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","986":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","987":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","988":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","989":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","990":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","991":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","992":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","993":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","994":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","995":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","996":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","997":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","998":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","999":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1000":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1001":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1002":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1003":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1004":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1005":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1006":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1007":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1008":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1009":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1010":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1011":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1012":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1013":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1014":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1015":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1016":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1017":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1018":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1019":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1020":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1021":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1022":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1023":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1024":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1025":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1026":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1027":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1028":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1029":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1030":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1031":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1032":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1033":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1034":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1035":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1036":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1037":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1038":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1039":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1040":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1041":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1042":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1043":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1044":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1045":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1046":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1047":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1048":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1049":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1050":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1051":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1052":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1053":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1054":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1055":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1056":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1057":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1058":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1059":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1060":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1061":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1062":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1063":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1064":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1065":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1066":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1067":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1068":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1069":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1070":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1071":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1072":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1073":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1074":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1075":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1076":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1077":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1078":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1079":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1080":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1081":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1082":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1083":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1084":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1085":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1086":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1087":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1088":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1089":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1090":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1091":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1092":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1093":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1094":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1095":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1096":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1097":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1098":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1099":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1100":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1101":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1102":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1103":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1104":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1105":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1106":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1107":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1108":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1109":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1110":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1111":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1112":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1113":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1114":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1115":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1116":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1117":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1118":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1119":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1120":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1121":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1122":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1123":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1124":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1125":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1126":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1127":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1128":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1129":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1130":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1131":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1132":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1133":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1134":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1135":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1136":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1137":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1138":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1139":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1140":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1141":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1142":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1143":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1144":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1145":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1146":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1147":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1148":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1149":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1150":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1151":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1152":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1153":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1154":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1155":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1156":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1157":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1158":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1159":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1160":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1161":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1162":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1163":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1164":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1165":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1166":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1167":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1168":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1169":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1170":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1171":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1172":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1173":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1174":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1175":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1176":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1177":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1178":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1179":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1180":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1181":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1182":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1183":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1184":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1185":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1186":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1187":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1188":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1189":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1190":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1191":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1192":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1193":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1194":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1195":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1196":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1197":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1198":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1199":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1200":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1201":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1202":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1203":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1204":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1205":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1206":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1207":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1208":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1209":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1210":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1211":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1212":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1213":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1214":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1215":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1216":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1217":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1218":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1219":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1220":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1221":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1222":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1223":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1224":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1225":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1226":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1227":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1228":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1229":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1230":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1231":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1232":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1233":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1234":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1235":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1236":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1237":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1238":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1239":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1240":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1241":"Table author, columns = [*,authorId,authorName]\nTable cite, columns = [*,citingPaperId,citedPaperId]\nTable dataset, columns = [*,datasetId,datasetName]\nTable journal, columns = [*,journalId,journalName]\nTable keyphrase, columns = [*,keyphraseId,keyphraseName]\nTable paper, columns = [*,paperId,title,venueId,year,numCiting,numCitedBy,journalId]\nTable paperDataset, columns = [*,paperId,datasetId]\nTable paperKeyphrase, columns = [*,paperId,keyphraseId]\nTable venue, columns = [*,venueId,venueName]\nTable writes, columns = [*,paperId,authorId]\n","1242":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1243":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1244":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1245":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1246":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1247":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1248":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1249":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1250":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1251":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1252":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1253":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1254":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1255":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1256":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1257":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1258":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1259":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1260":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1261":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1262":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1263":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1264":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1265":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1266":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1267":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1268":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1269":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1270":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1271":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1272":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1273":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1274":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1275":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1276":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1277":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1278":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1279":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1280":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1281":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1282":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1283":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1284":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1285":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1286":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1287":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1288":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1289":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1290":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1291":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1292":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1293":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1294":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1295":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1296":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1297":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1298":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1299":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1300":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1301":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1302":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1303":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1304":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1305":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1306":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1307":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1308":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1309":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1310":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1311":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1312":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1313":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1314":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1315":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1316":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1317":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1318":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1319":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1320":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1321":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1322":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1323":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1324":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1325":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1326":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1327":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1328":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1329":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1330":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1331":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1332":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1333":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1334":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1335":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1336":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1337":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1338":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1339":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1340":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1341":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1342":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1343":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1344":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1345":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1346":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1347":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1348":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1349":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1350":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1351":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1352":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1353":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1354":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1355":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1356":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1357":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1358":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1359":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1360":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1361":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1362":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1363":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1364":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1365":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1366":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1367":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1368":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1369":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1370":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1371":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1372":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1373":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1374":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1375":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1376":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1377":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1378":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1379":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1380":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1381":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1382":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1383":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1384":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1385":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1386":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1387":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1388":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1389":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1390":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1391":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1392":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1393":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1394":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1395":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1396":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1397":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1398":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1399":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1400":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1401":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1402":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1403":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1404":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1405":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1406":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1407":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1408":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1409":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1410":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1411":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1412":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1413":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1414":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1415":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1416":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1417":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1418":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1419":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1420":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1421":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1422":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1423":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1424":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1425":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1426":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1427":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1428":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1429":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1430":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1431":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1432":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1433":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1434":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1435":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1436":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1437":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1438":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1439":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1440":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1441":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1442":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1443":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1444":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1445":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1446":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1447":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1448":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1449":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1450":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1451":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1452":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1453":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1454":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1455":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1456":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1457":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1458":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1459":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1460":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1461":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1462":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1463":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1464":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1465":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1466":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1467":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1468":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1469":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1470":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1471":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1472":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1473":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1474":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1475":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1476":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1477":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1478":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1479":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1480":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1481":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1482":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1483":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1484":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1485":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1486":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1487":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1488":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1489":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1490":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1491":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1492":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1493":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1494":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1495":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1496":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1497":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1498":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1499":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1500":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1501":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1502":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1503":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1504":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1505":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1506":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1507":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1508":"Table business, columns = [*,bid,business_id,name,full_address,city,latitude,longitude,review_count,is_open,rating,state]\nTable category, columns = [*,id,business_id,category_name]\nTable checkin, columns = [*,cid,business_id,count,day]\nTable neighbourhood, columns = [*,id,business_id,neighbourhood_name]\nTable review, columns = [*,rid,business_id,user_id,rating,text,year,month]\nTable tip, columns = [*,tip_id,business_id,text,user_id,likes,year,month]\nTable user, columns = [*,uid,user_id,name]\n","1509":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1510":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1511":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1512":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1513":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1514":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1515":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1516":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1517":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1518":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1519":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1520":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1521":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1522":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1523":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1524":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1525":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1526":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1527":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1528":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1529":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1530":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1531":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1532":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1533":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1534":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1535":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1536":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1537":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1538":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1539":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1540":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1541":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1542":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1543":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1544":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1545":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1546":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1547":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1548":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1549":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1550":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1551":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1552":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1553":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1554":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1555":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1556":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1557":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1558":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1559":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1560":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1561":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1562":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1563":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1564":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1565":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1566":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1567":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1568":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1569":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1570":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1571":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1572":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1573":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1574":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1575":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1576":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1577":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1578":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1579":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1580":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1581":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1582":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1583":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1584":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1585":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1586":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1587":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1588":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1589":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1590":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1591":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1592":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1593":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1594":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1595":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1596":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1597":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1598":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1599":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1600":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1601":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1602":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1603":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1604":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1605":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1606":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1607":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1608":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1609":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1610":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1611":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1612":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1613":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1614":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1615":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1616":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1617":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1618":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1619":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1620":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1621":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1622":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1623":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1624":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1625":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1626":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1627":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1628":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1629":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1630":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1631":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1632":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1633":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1634":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1635":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1636":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1637":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1638":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1639":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1640":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1641":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1642":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1643":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1644":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1645":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1646":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1647":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1648":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1649":"Table actor, columns = [*,aid,gender,name,nationality,birth_city,birth_year]\nTable cast, columns = [*,id,msid,aid,role]\nTable classification, columns = [*,id,msid,gid]\nTable company, columns = [*,id,name,country_code]\nTable copyright, columns = [*,id,msid,cid]\nTable directed_by, columns = [*,id,msid,did]\nTable director, columns = [*,did,gender,name,nationality,birth_city,birth_year]\nTable genre, columns = [*,gid,genre]\nTable keyword, columns = [*,id,keyword]\nTable made_by, columns = [*,id,msid,pid]\nTable movie, columns = [*,mid,title,release_year,title_aka,budget]\nTable producer, columns = [*,pid,gender,name,nationality,birth_city,birth_year]\nTable tags, columns = [*,id,msid,kid]\nTable tv_series, columns = [*,sid,title,release_year,num_of_seasons,num_of_episodes,title_aka,budget]\nTable writer, columns = [*,wid,gender,name,nationality,num_of_episodes,birth_city,birth_year]\nTable written_by, columns = [*,id,msid,wid]\n","1650":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1651":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1652":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1653":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1654":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1655":"Table GEOGRAPHIC, columns = [*,CITY_NAME,COUNTY,REGION]\nTable LOCATION, columns = [*,RESTAURANT_ID,HOUSE_NUMBER,STREET_NAME,CITY_NAME]\nTable RESTAURANT, columns = [*,ID,NAME,FOOD_TYPE,CITY_NAME,RATING]\n","1656":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1657":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n","1658":"Table author, columns = [*,aid,homepage,name,oid]\nTable cite, columns = [*,cited,citing]\nTable conference, columns = [*,cid,homepage,name]\nTable domain, columns = [*,did,name]\nTable domain_author, columns = [*,aid,did]\nTable domain_conference, columns = [*,cid,did]\nTable domain_journal, columns = [*,did,jid]\nTable domain_keyword, columns = [*,did,kid]\nTable domain_publication, columns = [*,did,pid]\nTable journal, columns = [*,homepage,jid,name]\nTable keyword, columns = [*,keyword,kid]\nTable organization, columns = [*,continent,homepage,name,oid]\nTable publication, columns = [*,abstract,cid,citation_num,jid,pid,reference_num,title,year]\nTable publication_keyword, columns = [*,pid,kid]\nTable writes, columns = [*,aid,pid]\n"},"foriegn keys":{"0":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","1":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","2":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","3":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","4":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","5":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","6":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","7":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","8":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","9":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","10":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","11":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","12":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","13":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","14":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","15":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","16":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","17":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","18":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","19":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","20":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","21":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","22":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","23":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","24":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","25":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","26":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","27":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","28":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","29":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","30":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","31":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","32":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","33":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","34":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","35":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","36":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","37":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","38":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","39":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","40":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","41":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","42":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","43":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","44":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","45":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","46":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","47":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","48":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","49":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","50":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","51":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","52":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","53":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","54":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","55":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","56":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","57":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","58":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","59":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","60":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","61":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","62":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","63":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","64":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","65":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","66":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","67":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","68":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","69":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","70":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","71":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","72":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","73":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","74":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","75":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","76":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","77":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","78":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","79":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","80":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","81":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","82":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","83":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","84":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","85":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","86":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","87":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","88":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","89":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","90":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","91":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","92":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","93":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","94":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","95":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","96":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","97":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","98":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","99":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","100":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","101":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","102":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","103":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","104":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","105":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","106":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","107":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","108":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","109":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","110":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","111":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","112":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","113":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","114":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","115":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","116":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","117":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","118":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","119":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","120":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","121":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","122":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","123":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","124":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","125":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","126":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","127":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","128":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","129":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","130":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","131":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","132":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","133":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","134":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","135":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","136":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","137":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","138":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","139":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","140":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","141":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","142":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","143":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","144":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","145":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","146":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","147":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","148":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","149":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","150":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","151":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","152":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","153":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","154":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","155":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","156":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","157":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","158":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","159":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","160":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","161":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","162":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","163":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","164":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","165":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","166":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","167":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","168":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","169":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","170":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","171":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","172":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","173":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","174":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","175":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","176":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","177":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","178":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","179":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","180":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","181":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","182":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","183":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","184":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","185":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","186":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","187":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","188":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","189":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","190":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","191":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","192":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","193":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","194":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","195":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","196":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","197":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","198":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","199":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","200":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","201":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","202":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","203":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","204":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","205":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","206":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","207":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","208":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","209":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","210":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","211":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","212":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","213":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","214":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","215":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","216":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","217":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","218":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","219":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","220":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","221":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","222":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","223":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","224":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","225":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","226":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","227":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","228":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","229":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","230":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","231":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","232":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","233":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","234":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","235":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","236":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","237":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","238":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","239":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","240":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","241":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","242":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","243":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","244":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","245":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","246":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","247":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","248":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","249":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","250":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","251":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","252":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","253":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","254":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","255":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","256":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","257":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","258":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","259":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","260":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","261":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","262":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","263":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","264":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","265":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","266":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","267":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","268":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","269":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","270":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","271":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","272":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","273":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","274":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","275":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","276":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","277":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","278":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","279":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","280":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","281":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","282":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","283":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","284":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","285":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","286":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","287":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","288":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","289":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","290":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","291":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","292":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","293":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","294":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","295":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","296":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","297":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","298":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","299":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","300":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","301":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","302":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","303":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","304":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","305":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","306":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","307":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","308":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","309":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","310":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","311":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","312":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","313":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","314":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","315":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","316":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","317":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","318":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","319":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","320":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","321":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","322":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","323":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","324":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","325":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","326":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","327":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","328":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","329":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","330":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","331":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","332":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","333":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","334":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","335":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","336":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","337":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","338":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","339":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","340":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","341":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","342":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","343":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","344":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","345":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","346":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","347":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","348":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","349":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","350":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","351":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","352":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","353":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","354":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","355":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","356":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","357":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","358":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","359":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","360":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","361":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","362":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","363":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","364":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","365":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","366":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","367":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","368":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","369":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","370":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","371":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","372":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","373":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","374":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","375":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","376":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","377":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","378":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","379":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","380":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","381":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","382":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","383":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","384":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","385":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","386":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","387":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","388":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","389":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","390":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","391":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","392":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","393":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","394":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","395":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","396":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","397":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","398":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","399":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","400":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","401":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","402":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","403":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","404":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","405":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","406":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","407":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","408":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","409":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","410":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","411":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","412":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","413":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","414":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","415":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","416":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","417":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","418":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","419":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","420":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","421":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","422":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","423":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","424":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","425":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","426":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","427":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","428":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","429":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","430":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","431":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","432":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","433":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","434":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","435":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","436":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","437":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","438":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","439":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","440":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","441":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","442":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","443":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","444":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","445":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","446":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","447":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","448":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","449":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","450":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","451":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","452":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","453":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","454":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","455":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","456":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","457":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","458":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","459":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","460":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","461":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","462":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","463":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","464":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","465":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","466":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","467":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","468":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","469":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","470":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","471":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","472":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","473":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","474":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","475":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","476":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","477":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","478":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","479":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","480":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","481":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","482":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","483":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","484":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","485":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","486":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","487":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","488":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","489":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","490":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","491":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","492":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","493":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","494":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","495":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","496":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","497":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","498":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","499":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","500":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","501":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","502":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","503":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","504":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","505":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","506":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","507":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","508":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","509":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","510":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","511":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","512":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","513":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","514":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","515":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","516":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","517":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","518":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","519":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","520":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","521":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","522":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","523":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","524":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","525":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","526":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","527":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","528":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","529":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","530":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","531":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","532":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","533":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","534":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","535":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","536":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","537":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","538":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","539":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","540":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","541":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","542":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","543":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","544":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","545":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","546":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","547":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","548":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","549":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","550":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","551":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","552":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","553":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","554":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","555":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","556":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","557":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","558":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","559":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","560":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","561":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","562":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","563":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","564":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","565":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","566":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","567":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","568":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","569":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","570":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","571":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","572":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","573":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","574":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","575":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","576":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","577":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","578":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","579":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","580":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","581":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","582":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","583":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","584":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","585":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","586":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","587":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","588":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","589":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","590":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","591":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","592":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","593":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","594":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","595":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","596":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","597":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","598":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","599":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","600":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","601":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","602":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","603":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","604":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","605":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","606":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","607":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","608":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","609":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","610":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","611":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","612":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","613":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","614":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","615":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","616":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","617":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","618":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","619":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","620":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","621":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","622":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","623":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","624":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","625":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","626":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","627":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","628":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","629":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","630":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","631":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","632":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","633":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","634":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","635":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","636":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","637":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","638":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","639":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","640":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","641":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","642":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","643":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","644":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","645":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","646":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","647":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","648":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","649":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","650":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","651":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","652":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","653":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","654":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","655":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","656":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","657":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","658":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","659":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","660":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","661":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","662":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","663":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","664":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","665":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","666":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","667":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","668":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","669":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","670":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","671":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","672":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","673":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","674":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","675":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","676":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","677":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","678":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","679":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","680":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","681":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","682":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","683":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","684":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","685":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","686":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","687":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","688":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","689":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","690":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","691":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","692":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","693":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","694":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","695":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","696":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","697":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","698":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","699":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","700":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","701":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","702":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","703":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","704":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","705":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","706":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","707":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","708":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","709":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","710":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","711":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","712":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","713":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","714":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","715":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","716":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","717":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","718":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","719":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","720":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","721":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","722":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","723":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","724":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","725":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","726":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","727":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","728":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","729":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","730":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","731":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","732":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","733":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","734":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","735":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","736":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","737":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","738":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","739":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","740":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","741":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","742":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","743":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","744":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","745":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","746":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","747":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","748":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","749":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","750":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","751":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","752":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","753":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","754":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","755":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","756":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","757":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","758":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","759":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","760":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","761":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","762":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","763":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","764":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","765":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","766":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","767":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","768":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","769":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","770":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","771":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","772":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","773":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","774":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","775":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","776":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","777":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","778":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","779":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","780":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","781":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","782":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","783":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","784":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","785":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","786":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","787":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","788":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","789":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","790":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","791":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","792":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","793":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","794":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","795":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","796":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","797":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","798":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","799":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","800":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","801":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","802":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","803":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","804":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","805":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","806":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","807":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","808":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","809":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","810":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","811":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","812":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","813":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","814":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","815":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","816":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","817":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","818":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","819":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","820":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","821":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","822":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","823":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","824":"Foreign_keys = [city.state_name = state.state_name,border_info.border = state.state_name,border_info.state_name = state.state_name,highlow.state_name = state.state_name,mountain.state_name = state.state_name,river.traverse = state.state_name]\n","825":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","826":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","827":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","828":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","829":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","830":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","831":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","832":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","833":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","834":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","835":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","836":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","837":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","838":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","839":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","840":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","841":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","842":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","843":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","844":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","845":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","846":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","847":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","848":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","849":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","850":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","851":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","852":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","853":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","854":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","855":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","856":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","857":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","858":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","859":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","860":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","861":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","862":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","863":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","864":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","865":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","866":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","867":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","868":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","869":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","870":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","871":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","872":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","873":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","874":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","875":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","876":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","877":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","878":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","879":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","880":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","881":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","882":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","883":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","884":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","885":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","886":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","887":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","888":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","889":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","890":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","891":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","892":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","893":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","894":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","895":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","896":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","897":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","898":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","899":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","900":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","901":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","902":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","903":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","904":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","905":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","906":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","907":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","908":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","909":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","910":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","911":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","912":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","913":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","914":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","915":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","916":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","917":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","918":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","919":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","920":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","921":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","922":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","923":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","924":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","925":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","926":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","927":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","928":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","929":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","930":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","931":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","932":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","933":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","934":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","935":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","936":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","937":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","938":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","939":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","940":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","941":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","942":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","943":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","944":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","945":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","946":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","947":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","948":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","949":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","950":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","951":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","952":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","953":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","954":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","955":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","956":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","957":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","958":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","959":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","960":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","961":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","962":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","963":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","964":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","965":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","966":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","967":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","968":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","969":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","970":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","971":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","972":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","973":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","974":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","975":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","976":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","977":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","978":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","979":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","980":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","981":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","982":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","983":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","984":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","985":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","986":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","987":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","988":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","989":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","990":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","991":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","992":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","993":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","994":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","995":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","996":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","997":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","998":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","999":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1000":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1001":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1002":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1003":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1004":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1005":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1006":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1007":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1008":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1009":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1010":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1011":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1012":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1013":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1014":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1015":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1016":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1017":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1018":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1019":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1020":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1021":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1022":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1023":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1024":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1025":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1026":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1027":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1028":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1029":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1030":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1031":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1032":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1033":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1034":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1035":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1036":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1037":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1038":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1039":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1040":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1041":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1042":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1043":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1044":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1045":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1046":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1047":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1048":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1049":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1050":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1051":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1052":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1053":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1054":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1055":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1056":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1057":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1058":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1059":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1060":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1061":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1062":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1063":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1064":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1065":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1066":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1067":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1068":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1069":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1070":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1071":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1072":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1073":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1074":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1075":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1076":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1077":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1078":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1079":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1080":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1081":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1082":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1083":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1084":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1085":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1086":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1087":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1088":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1089":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1090":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1091":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1092":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1093":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1094":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1095":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1096":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1097":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1098":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1099":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1100":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1101":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1102":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1103":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1104":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1105":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1106":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1107":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1108":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1109":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1110":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1111":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1112":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1113":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1114":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1115":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1116":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1117":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1118":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1119":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1120":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1121":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1122":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1123":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1124":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1125":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1126":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1127":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1128":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1129":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1130":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1131":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1132":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1133":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1134":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1135":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1136":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1137":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1138":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1139":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1140":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1141":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1142":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1143":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1144":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1145":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1146":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1147":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1148":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1149":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1150":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1151":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1152":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1153":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1154":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1155":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1156":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1157":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1158":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1159":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1160":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1161":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1162":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1163":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1164":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1165":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1166":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1167":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1168":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1169":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1170":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1171":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1172":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1173":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1174":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1175":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1176":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1177":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1178":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1179":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1180":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1181":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1182":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1183":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1184":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1185":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1186":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1187":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1188":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1189":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1190":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1191":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1192":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1193":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1194":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1195":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1196":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1197":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1198":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1199":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1200":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1201":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1202":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1203":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1204":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1205":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1206":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1207":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1208":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1209":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1210":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1211":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1212":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1213":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1214":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1215":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1216":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1217":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1218":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1219":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1220":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1221":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1222":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1223":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1224":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1225":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1226":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1227":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1228":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1229":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1230":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1231":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1232":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1233":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1234":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1235":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1236":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1237":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1238":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1239":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1240":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1241":"Foreign_keys = [paper.venueId = venue.venueId,paper.journalId = journal.journalId,cite.citingPaperId = paper.paperId,cite.citedPaperId = paper.paperId,paperKeyphrase.keyphraseId = keyphrase.keyphraseId,paperKeyphrase.paperId = paper.paperId,writes.authorId = author.authorId,writes.paperId = paper.paperId]\n","1242":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1243":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1244":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1245":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1246":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1247":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1248":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1249":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1250":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1251":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1252":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1253":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1254":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1255":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1256":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1257":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1258":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1259":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1260":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1261":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1262":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1263":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1264":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1265":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1266":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1267":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1268":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1269":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1270":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1271":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1272":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1273":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1274":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1275":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1276":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1277":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1278":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1279":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1280":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1281":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1282":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1283":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1284":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1285":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1286":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1287":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1288":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1289":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1290":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1291":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1292":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1293":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1294":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1295":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1296":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1297":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1298":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1299":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1300":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1301":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1302":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1303":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1304":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1305":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1306":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1307":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1308":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1309":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1310":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1311":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1312":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1313":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1314":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1315":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1316":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1317":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1318":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1319":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1320":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1321":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1322":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1323":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1324":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1325":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1326":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1327":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1328":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1329":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1330":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1331":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1332":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1333":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1334":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1335":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1336":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1337":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1338":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1339":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1340":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1341":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1342":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1343":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1344":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1345":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1346":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1347":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1348":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1349":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1350":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1351":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1352":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1353":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1354":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1355":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1356":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1357":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1358":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1359":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1360":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1361":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1362":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1363":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1364":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1365":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1366":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1367":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1368":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1369":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1370":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1371":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1372":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1373":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1374":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1375":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1376":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1377":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1378":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1379":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1380":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1381":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1382":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1383":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1384":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1385":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1386":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1387":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1388":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1389":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1390":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1391":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1392":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1393":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1394":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1395":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1396":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1397":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1398":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1399":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1400":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1401":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1402":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1403":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1404":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1405":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1406":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1407":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1408":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1409":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1410":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1411":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1412":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1413":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1414":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1415":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1416":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1417":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1418":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1419":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1420":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1421":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1422":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1423":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1424":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1425":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1426":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1427":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1428":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1429":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1430":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1431":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1432":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1433":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1434":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1435":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1436":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1437":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1438":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1439":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1440":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1441":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1442":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1443":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1444":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1445":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1446":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1447":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1448":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1449":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1450":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1451":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1452":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1453":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1454":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1455":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1456":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1457":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1458":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1459":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1460":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1461":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1462":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1463":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1464":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1465":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1466":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1467":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1468":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1469":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1470":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1471":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1472":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1473":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1474":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1475":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1476":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1477":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1478":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1479":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1480":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1481":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1482":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1483":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1484":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1485":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1486":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1487":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1488":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1489":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1490":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1491":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1492":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1493":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1494":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1495":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1496":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1497":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1498":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1499":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1500":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1501":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1502":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1503":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1504":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1505":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1506":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1507":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1508":"Foreign_keys = [category.business_id = business.business_id,checkin.business_id = business.business_id,neighbourhood.business_id = business.business_id,review.user_id = user.user_id,review.business_id = business.business_id,tip.user_id = user.user_id,tip.business_id = business.business_id]\n","1509":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1510":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1511":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1512":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1513":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1514":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1515":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1516":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1517":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1518":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1519":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1520":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1521":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1522":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1523":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1524":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1525":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1526":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1527":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1528":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1529":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1530":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1531":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1532":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1533":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1534":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1535":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1536":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1537":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1538":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1539":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1540":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1541":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1542":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1543":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1544":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1545":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1546":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1547":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1548":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1549":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1550":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1551":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1552":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1553":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1554":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1555":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1556":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1557":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1558":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1559":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1560":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1561":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1562":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1563":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1564":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1565":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1566":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1567":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1568":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1569":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1570":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1571":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1572":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1573":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1574":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1575":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1576":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1577":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1578":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1579":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1580":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1581":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1582":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1583":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1584":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1585":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1586":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1587":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1588":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1589":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1590":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1591":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1592":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1593":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1594":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1595":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1596":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1597":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1598":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1599":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1600":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1601":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1602":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1603":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1604":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1605":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1606":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1607":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1608":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1609":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1610":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1611":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1612":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1613":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1614":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1615":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1616":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1617":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1618":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1619":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1620":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1621":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1622":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1623":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1624":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1625":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1626":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1627":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1628":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1629":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1630":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1631":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1632":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1633":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1634":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1635":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1636":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1637":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1638":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1639":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1640":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1641":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1642":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1643":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1644":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1645":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1646":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1647":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1648":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1649":"Foreign_keys = [cast.msid = copyright.msid,cast.aid = actor.aid,classification.msid = copyright.msid,classification.gid = genre.gid,directed_by.did = director.did,directed_by.msid = copyright.msid,made_by.pid = producer.pid,made_by.msid = copyright.msid,tags.msid = copyright.msid,written_by.wid = writer.wid,written_by.msid = copyright.msid]\n","1650":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1651":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1652":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1653":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1654":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1655":"Foreign_keys = [RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME,LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME]\n","1656":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1657":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n","1658":"Foreign_keys = [domain_author.did = domain.did,domain_author.aid = author.aid,domain_conference.did = domain.did,domain_conference.cid = conference.cid,domain_journal.did = domain.did,domain_journal.jid = journal.jid,domain_keyword.did = domain.did,domain_keyword.kid = keyword.kid,publication.cid = conference.cid,publication.jid = journal.jid,domain_publication.did = domain.did,domain_publication.pid = publication.pid,publication_keyword.kid = keyword.kid,publication_keyword.pid = publication.pid,writes.aid = author.aid,writes.pid = publication.pid,cite.citing = publication.pid,cite.cited = publication.pid]\n"},"predicted_sql":{"0":"SELECT river.river_name FROM river ORDER BY river.length DESC LIMIT 1;","1":"SELECT COUNT(*) FROM city WHERE country_name = 'USA';","2":"SELECT state.state_name FROM state;","3":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","4":"SELECT state.state_name, river.length FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","5":"SELECT state.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name = 'California' ORDER BY state.area DESC LIMIT 1;","6":"SELECT state.state_name FROM state ORDER BY state.area ASC LIMIT 1;","7":"SELECT city_name, population\nFROM city\nWHERE state_name = 'Alaska'\nORDER BY population DESC\nLIMIT 1;","8":"SELECT state.state_name FROM state ORDER BY state.population ASC LIMIT 1;","9":"SELECT state.state_name FROM state WHERE state.area = (SELECT MAX(state.area) FROM state);","10":"SELECT lowest_point FROM highlow WHERE state_name = 'USA';","11":"SELECT state.state_name, state.area FROM state ORDER BY state.area ASC LIMIT 1;","12":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.state_name = 'Illinois';","13":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","14":"SELECT COUNT(capital) FROM state WHERE state_name = 'Rhode Island';","15":"SELECT city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Wisconsin';","16":"SELECT state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi';","17":"SELECT state.state_name FROM state WHERE state.area = (SELECT MAX(state.area) FROM state);","18":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","19":"SELECT state.population FROM state WHERE state.state_name = 'California';","20":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","21":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio River';","22":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","23":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","24":"SELECT state.state_name, state.population FROM state JOIN border_info ON border_info.border = state.state_name WHERE border_info.state_name = 'California' ORDER BY state.population DESC LIMIT 1;","25":"SELECT COUNT(*) AS total_states FROM state;","26":"SELECT state.capital FROM state JOIN river ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","27":"SELECT state.state_name FROM state ORDER BY state.density DESC LIMIT 1;","28":"SELECT city.city_name, MAX(city.population) FROM city JOIN state ON city.state_name = state.state_name WHERE state.area = (SELECT MIN(area) FROM state) GROUP BY city.state_name;","29":"SELECT COUNT(*) FROM river WHERE traverse = 'Idaho';","30":"SELECT state_name FROM highlow WHERE highest_point > (SELECT highest_point FROM highlow WHERE state_name = 'Colorado');","31":"SELECT state.state_name FROM state ORDER BY state.area ASC LIMIT 1;","32":"SELECT border_info.border FROM border_info WHERE border_info.state_name = 'Kentucky';","33":"SELECT state.state_name, MAX(city.population) AS largest_city_population FROM city JOIN state ON state.state_name = city.state_name GROUP BY state.state_name ORDER BY largest_city_population DESC LIMIT 1;","34":"SELECT population FROM state WHERE area = (SELECT MIN(area) FROM state);","35":"SELECT state.state_name, state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi' ORDER BY state.population DESC LIMIT 1;","36":"SELECT population, area FROM state WHERE state_name = 'New Mexico';","37":"SELECT city.city_name, city.population FROM city WHERE city.state_name = 'Texas';","38":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","39":"SELECT mountain.mountain_name FROM mountain WHERE mountain.mountain_altitude = (SELECT MAX(mountain.mountain_altitude) FROM mountain);","40":"SELECT city.city_name, city.population FROM state JOIN city ON state.capital = city.city_name WHERE city.population = (SELECT MAX(population) FROM city WHERE city.state_name = state.state_name);","41":"SELECT state.population FROM state JOIN border_info ON state.state_name = border_info.border WHERE border_info.state_name = 'Texas';","42":"SELECT city.city_name FROM city ORDER BY city.population ASC LIMIT 1;","43":"SELECT highlow.lowest_point FROM highlow WHERE highlow.state_name = 'Iowa';","44":"SELECT state.state_name FROM state;","45":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","46":"SELECT city.population FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Seattle' AND state.state_name = 'Washington';","47":"SELECT river.river_name, river.length FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Tennessee' ORDER BY river.length DESC LIMIT 1;","48":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","49":"SELECT state.state_name FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi' ORDER BY state.area ASC LIMIT 1;","50":"SELECT state.state_name FROM state ORDER BY state.area DESC LIMIT 1;","51":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas' ORDER BY city.population DESC;","52":"SELECT state.state_name FROM state WHERE state.country_name = 'USA' ORDER BY state.density DESC LIMIT 1;","53":"SELECT state_name, density FROM state ORDER BY density DESC LIMIT 1;","54":"SELECT state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi';","55":"SELECT state.area FROM state WHERE state.capital = 'albany';","56":"SELECT state.density FROM state WHERE state.state_name = 'Wyoming';","57":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","58":"SELECT COUNT(*) FROM city WHERE city.country_name = 'United States';","59":"SELECT highlow.highest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.capital = 'Des Moines';","60":"SELECT city_name, population FROM city WHERE state_name = 'Wyoming' ORDER BY population DESC LIMIT 1;","61":"SELECT state.area FROM state WHERE state.state_name = 'New Mexico';","62":"SELECT state.state_name FROM state ORDER BY state.density DESC LIMIT 1;","63":"SELECT DISTINCT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi';","64":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","65":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","66":"SELECT river.river_name, COUNT(DISTINCT state.state_name) AS state_count FROM river JOIN state ON river.traverse = state.state_name GROUP BY river.river_name ORDER BY state_count DESC LIMIT 1;","67":"SELECT state.state_name FROM state LEFT JOIN border_info ON state.state_name = border_info.border WHERE border_info.border IS NULL;","68":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Ohio';","69":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio';","70":"SELECT COUNT(*) FROM highlow WHERE lowest_elevation < (SELECT lowest_elevation FROM highlow WHERE state_name = 'Alabama');","71":"SELECT highlow.lowest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.country_name = 'us';","72":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.capital = city.city_name AND state.country_name = 'USA' ORDER BY city.population DESC LIMIT 1;","73":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","74":"SELECT highlow.lowest_point FROM highlow WHERE highlow.state_name = 'Iowa';","75":"SELECT river.length FROM river WHERE river.river_name = 'Rio Grande';","76":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","77":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","78":"SELECT state.state_name, state.population FROM state JOIN border_info ON border_info.border = state.state_name WHERE border_info.state_name = 'Oklahoma' ORDER BY state.population DESC LIMIT 1;","79":"SELECT capital FROM state ORDER BY population DESC LIMIT 1;","80":"SELECT SUM(state.population) AS total_population FROM state;","81":"SELECT river.length FROM river WHERE river.river_name = 'Rio Grande';","82":"SELECT state.capital FROM state WHERE state.area = (SELECT MIN(state.area) FROM state);","83":"SELECT state_name, highest_point FROM highlow WHERE lowest_point = 0;","84":"SELECT COUNT(*) FROM river WHERE river.traverse = 'Idaho';","85":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.population = (SELECT MAX(population) FROM city);","86":"SELECT city.city_name FROM city WHERE city.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","87":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","88":"SELECT city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Wisconsin';","89":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","90":"SELECT city.city_name, city.population FROM city WHERE city.country_name = 'USA' ORDER BY city.population DESC;","91":"SELECT MAX(highest_elevation) AS highest_point\nFROM highlow;","92":"SELECT state.population FROM state WHERE state.state_name = 'California';","93":"SELECT population FROM state WHERE state_name = 'California';","94":"SELECT capital FROM state ORDER BY density DESC LIMIT 1;","95":"SELECT city.city_name FROM city ORDER BY city.population DESC LIMIT 1;","96":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","97":"SELECT MAX(length) \nFROM river \nWHERE country_name = 'USA';","98":"SELECT state.population FROM state WHERE state.state_name = 'California';","99":"SELECT river.river_name, river.length FROM river WHERE river.traverse = 'Texas' ORDER BY river.length DESC LIMIT 1;","100":"SELECT COUNT(*) FROM border_info WHERE state_name = 'Kentucky';","101":"SELECT state.state_name FROM state ORDER BY state.area DESC LIMIT 1;","102":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","103":"SELECT highlow.lowest_point FROM highlow WHERE highlow.state_name = 'Iowa';","104":"SELECT river.river_name, COUNT(DISTINCT state.state_name) AS state_count FROM river JOIN state ON river.traverse = state.state_name GROUP BY river.river_name ORDER BY state_count DESC LIMIT 1;","105":"SELECT river.river_name, river.length FROM river JOIN city ON river.traverse = city.state_name GROUP BY river.traverse HAVING COUNT(city.city_name) = (SELECT MAX(city_count) FROM (SELECT COUNT(city.city_name) AS city_count FROM city GROUP BY city.state_name) AS city_counts);","106":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.state_name = (SELECT state_name FROM city ORDER BY population DESC LIMIT 1);","107":"SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain WHERE mountain.state_name = 'United States' ORDER BY mountain.mountain_altitude DESC LIMIT 1;","108":"SELECT highlow.lowest_point FROM highlow JOIN river ON highlow.state_name = river.traverse WHERE river.river_name = 'Mississippi';","109":"SELECT highlow.state_name FROM highlow JOIN river ON highlow.state_name = river.traverse WHERE river.river_name = 'Colorado' AND highlow.highest_point = (SELECT MAX(highest_point) FROM highlow WHERE state_name IN (SELECT traverse FROM river WHERE river_name = 'Colorado'));","110":"SELECT river.river_name, state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Ohio River';","111":"SELECT state.state_name FROM state WHERE state.area = (SELECT MIN(state.area) FROM state);","112":"SELECT city.population FROM state JOIN city ON city.state_name = state.state_name WHERE state.state_name = 'Texas' AND state.capital = city.city_name;","113":"SELECT river_name FROM river GROUP BY river_name ORDER BY COUNT(traverse) DESC LIMIT 1;","114":"SELECT highlow.highest_point FROM highlow WHERE highlow.state_name = 'US';","115":"SELECT highlow.highest_point, highlow.state_name FROM highlow;","116":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas';","117":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","118":"SELECT state.state_name FROM state JOIN border_info ON state.state_name = border_info.state_name WHERE border_info.border = 'Ohio';","119":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name GROUP BY river.river_name ORDER BY COUNT(state.state_name) DESC LIMIT 1;","120":"SELECT state.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name = 'Texas' ORDER BY state.area ASC LIMIT 1;","121":"SELECT state.capital FROM state JOIN city ON city.state_name = state.state_name WHERE state.state_name = 'Texas';","122":"SELECT state_name, density FROM state ORDER BY density ASC LIMIT 1;","123":"SELECT COUNT(border) FROM border_info WHERE state_name = 'Kentucky';","124":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio River';","125":"SELECT city_name, population FROM city WHERE country_name = 'USA' ORDER BY population ASC LIMIT 1;","126":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","127":"SELECT state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.traverse = 'Mississippi';","128":"SELECT SUM(state.population) AS total_population FROM state WHERE state.country_name = 'United States';","129":"SELECT mountain.mountain_altitude FROM mountain WHERE mountain.mountain_name = 'Guadalupe Peak';","130":"SELECT river_name, length FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Tennessee' ORDER BY length DESC LIMIT 1;","131":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","132":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","133":"SELECT highest_point FROM highlow WHERE state_name = 'Delaware';","134":"SELECT state.population FROM state WHERE state.state_name = 'California';","135":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'springfield';","136":"SELECT state.state_name, state.density FROM state;","137":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","138":"SELECT highlow.lowest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.country_name = 'United States';","139":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","140":"SELECT river_name, length FROM river WHERE traverse = 'Texas' ORDER BY length DESC LIMIT 1;","141":"SELECT state.state_name, state.population FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name = 'California' ORDER BY state.population DESC LIMIT 1;","142":"SELECT river.length FROM river WHERE river.river_name = 'Rio Grande';","143":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","144":"SELECT COUNT(*) FROM border_info WHERE state_name = (SELECT state_name FROM state ORDER BY population DESC LIMIT 1);","145":"SELECT highlow.highest_point FROM highlow WHERE highlow.state_name = 'Delaware';","146":"SELECT highlow.highest_point FROM border_info JOIN highlow ON border_info.state_name = highlow.state_name WHERE border_info.border = 'Mississippi';","147":"SELECT state.state_name FROM state JOIN city ON state.capital = city.city_name WHERE city.population = (SELECT MAX(population) FROM city WHERE city.city_name = state.capital);","148":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas';","149":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Ohio';","150":"SELECT state.state_name, state.population FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name = 'Texas' ORDER BY state.population ASC LIMIT 1;","151":"SELECT state_name FROM state WHERE state_name NOT IN (SELECT border FROM border_info);","152":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name ORDER BY city.population DESC LIMIT 1;","153":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","154":"SELECT border_info.border FROM border_info WHERE border_info.state_name = 'Kentucky';","155":"SELECT COUNT(state_name) FROM border_info WHERE border = 'Kentucky';","156":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","157":"SELECT river.river_name, river.length FROM river JOIN state ON river.traverse = state.state_name WHERE state.area = (SELECT MAX(area) FROM state) ORDER BY river.length DESC LIMIT 1;","158":"SELECT river_name, length FROM river WHERE traverse = 'Texas' ORDER BY length DESC LIMIT 1;","159":"SELECT highest_point FROM highlow WHERE state_name = 'Delaware';","160":"SELECT DISTINCT state.state_name FROM state JOIN city ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","161":"SELECT river.river_name FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Alabama';","162":"SELECT highlow.highest_elevation FROM highlow WHERE highlow.state_name = 'Delaware';","163":"SELECT density FROM state WHERE area = (SELECT MIN(area) FROM state);","164":"SELECT state.state_name FROM state ORDER BY state.area ASC LIMIT 1;","165":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","166":"SELECT highlow.lowest_point FROM highlow JOIN river ON highlow.state_name = river.traverse WHERE river.river_name = 'Mississippi';","167":"SELECT COUNT(*) AS river_count FROM river WHERE river.traverse = 'Idaho';","168":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio River';","169":"SELECT COUNT(*) AS river_count FROM river WHERE river.river_name = 'colorado';","170":"SELECT state_name, population \/ area AS population_density FROM state ORDER BY population_density ASC LIMIT 1;","171":"SELECT city.city_name FROM city WHERE city.country_name = 'USA' ORDER BY city.population DESC LIMIT 1;","172":"SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain WHERE mountain.country_name = 'America' ORDER BY mountain.mountain_altitude DESC LIMIT 1;","173":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","174":"SELECT river_name, length\nFROM river\nWHERE traverse = 'texas' \nAND length = (SELECT MAX(length) FROM river WHERE traverse = 'texas');","175":"SELECT COUNT(*) FROM river WHERE traverse = 'Colorado';","176":"SELECT state.population FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'mississippi';","177":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","178":"SELECT city_name, population FROM city WHERE state_name = 'Alaska' ORDER BY population ASC LIMIT 1;","179":"SELECT capital FROM state ORDER BY population DESC LIMIT 1;","180":"SELECT highlow.highest_point FROM highlow WHERE highlow.state_name = 'Delaware';","181":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","182":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.state_name = 'Illinois';","183":"SELECT river.river_name, river.length FROM river WHERE river.traverse = 'Texas' ORDER BY river.length DESC LIMIT 1;","184":"SELECT SUM(river.length) AS total_length FROM river;","185":"SELECT city_name, population FROM city WHERE state_name = 'Wyoming' ORDER BY population DESC LIMIT 1;","186":"SELECT state.state_name FROM state WHERE state.area = (SELECT MAX(state.area) FROM state);","187":"SELECT river.river_name FROM river ORDER BY river.length DESC LIMIT 1;","188":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas';","189":"SELECT SUM(state.area) AS total_area FROM state WHERE state.country_name = 'US';","190":"SELECT river.river_name FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Alabama';","191":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.country_name = 'USA' ORDER BY city.population DESC LIMIT 1;","192":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio River';","193":"SELECT COUNT(*) AS total_cities FROM city WHERE city.country_name = 'US';","194":"SELECT border_info.border FROM border_info WHERE border_info.state_name = 'Kentucky';","195":"SELECT state.state_name FROM state WHERE state.area = (SELECT MAX(state.area) FROM state);","196":"SELECT COUNT(*) FROM state JOIN highlow ON state.state_name = highlow.state_name WHERE highlow.highest_point > (SELECT highlow.highest_point FROM state JOIN highlow ON state.state_name = highlow.state_name ORDER BY state.population DESC LIMIT 1);","197":"SELECT length\nFROM river\nWHERE traverse = 'Texas' \nAND length = (SELECT MAX(length) FROM river WHERE traverse = 'Texas');","198":"SELECT highlow.highest_point FROM highlow ORDER BY highlow.highest_point DESC LIMIT 1;","199":"SELECT river.river_name FROM river ORDER BY river.length DESC LIMIT 1;","200":"SELECT city.city_name FROM city WHERE city.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","201":"SELECT COUNT(*) FROM city WHERE city.country_name = 'USA';","202":"SELECT river.length FROM river WHERE river.river_name = 'Rio Grande';","203":"SELECT city_name, population\nFROM city\nWHERE country_name = 'USA'\nORDER BY population DESC\nLIMIT 1;","204":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","205":"SELECT state.state_name, state.density FROM state ORDER BY state.density DESC LIMIT 1;","206":"SELECT state.state_name, state.population FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Mississippi' ORDER BY state.population DESC LIMIT 1;","207":"SELECT city_name, population FROM city WHERE country_name = 'usa' ORDER BY population DESC LIMIT 1;","208":"SELECT city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.area = (SELECT MAX(area) FROM state);","209":"SELECT highlow.highest_point FROM highlow WHERE highlow.state_name = 'USA';","210":"SELECT city.population FROM city WHERE city.city_name = 'Boulder City';","211":"SELECT COUNT(*) AS total_states FROM state WHERE state.country_name = 'United States';","212":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.area = (SELECT MAX(area) FROM state) ORDER BY city.population ASC LIMIT 1;","213":"SELECT city.city_name FROM city JOIN river ON city.state_name = river.traverse WHERE river.river_name = 'Mississippi';","214":"SELECT state.state_name, state.population FROM border_info JOIN state ON border_info.state_name = state.state_name WHERE border_info.border = 'Oklahoma' ORDER BY state.population DESC LIMIT 1;","215":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.population = (SELECT MIN(population) FROM state) ORDER BY city.population DESC LIMIT 1;","216":"SELECT city.population FROM state JOIN city ON city.state_name = state.state_name WHERE state.state_name = 'Texas' AND state.capital = city.city_name;","217":"SELECT population \/ area AS population_density FROM state WHERE area = (SELECT MAX(area) FROM state);","218":"SELECT city.city_name FROM city ORDER BY city.population DESC LIMIT 1;","219":"SELECT highest_point FROM highlow WHERE state_name = (SELECT state_name FROM state WHERE capital = 'Des Moines');","220":"SELECT COUNT(*) AS total_cities FROM city WHERE city.country_name = 'US';","221":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Texas';","222":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","223":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","224":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.state_name = 'Illinois';","225":"SELECT city.city_name FROM city ORDER BY city.population DESC LIMIT 1;","226":"SELECT COUNT(*) AS number_of_states FROM state WHERE state.country_name = 'usa';","227":"SELECT state.capital FROM state WHERE state.state_name = 'Texas';","228":"SELECT city.city_name FROM city ORDER BY city.population ASC LIMIT 1;","229":"SELECT state.state_name FROM state ORDER BY state.area ASC LIMIT 1;","230":"SELECT DISTINCT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","231":"SELECT highlow.highest_point FROM highlow WHERE highlow.state_name = 'Texas';","232":"SELECT population FROM state WHERE density = (SELECT MAX(density) FROM state);","233":"SELECT state.capital FROM state WHERE state.state_name = 'Texas';","234":"SELECT area FROM state WHERE density = (SELECT MIN(density) FROM state);","235":"SELECT lake.lake_name, lake.area FROM lake WHERE lake.state_name = 'California';","236":"SELECT highlow.lowest_point, highlow.state_name FROM highlow;","237":"SELECT state.population FROM state WHERE state.state_name = 'California';","238":"SELECT MAX(highlow.highest_elevation) AS highest_point\nFROM highlow\nINNER JOIN state ON highlow.state_name = state.state_name\nWHERE state.country_name = 'America';","239":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","240":"SELECT state.area, state.population FROM state WHERE state.state_name = 'New Mexico';","241":"SELECT state.state_name FROM state WHERE state.area = (SELECT MAX(state.area) FROM state);","242":"SELECT city.city_name FROM city WHERE city.state_name = 'Texas';","243":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","244":"SELECT DISTINCT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","245":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas';","246":"SELECT state.population FROM state WHERE state.state_name = 'California';","247":"SELECT mountain.mountain_altitude FROM mountain WHERE mountain.mountain_name = 'Guadalupe Peak';","248":"SELECT DISTINCT b2.state_name FROM border_info b1 JOIN border_info b2 ON b1.border = b2.state_name WHERE b1.state_name = 'Colorado';","249":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","250":"SELECT border_info.state_name FROM border_info JOIN river ON border_info.border = river.river_name WHERE river.river_name = 'Ohio River';","251":"SELECT city.population FROM city WHERE city.state_name = 'Wisconsin';","252":"SELECT highlow.highest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.country_name = 'USA';","253":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = (SELECT state_name FROM state ORDER BY area ASC LIMIT 1) AND state.state_name IN (SELECT traverse FROM river WHERE river_name = 'Mississippi') ORDER BY city.population DESC LIMIT 1;","254":"SELECT MAX(highest_elevation) AS highest_point_elevation\nFROM highlow;","255":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","256":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name GROUP BY river.river_name ORDER BY COUNT(state.state_name) DESC LIMIT 1;","257":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","258":"SELECT state.area FROM state WHERE state.state_name = 'New Mexico';","259":"SELECT state.density FROM state WHERE state.state_name = 'Wyoming';","260":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","261":"SELECT highlow.highest_point FROM highlow JOIN border_info ON highlow.state_name = border_info.state_name WHERE border_info.border = 'Colorado';","262":"SELECT state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi';","263":"SELECT state.state_name FROM state WHERE state.population = (SELECT MAX(state.population) FROM state);","264":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","265":"SELECT population FROM city WHERE city_name = 'Seattle' AND state_name = 'Washington';","266":"SELECT river.river_name FROM river WHERE river.country_name = 'United States' ORDER BY river.length DESC LIMIT 1;","267":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas';","268":"SELECT COUNT(river.river_name) FROM river WHERE river.traverse = 'Idaho';","269":"SELECT city.city_name FROM city JOIN river ON city.state_name = river.traverse WHERE river.traverse = 'mississippi';","270":"SELECT state.state_name FROM state ORDER BY state.population ASC LIMIT 1;","271":"SELECT COUNT(*) AS number_of_states FROM state WHERE state.country_name = 'USA';","272":"SELECT city.city_name FROM city ORDER BY city.population DESC LIMIT 1;","273":"SELECT DISTINCT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","274":"SELECT river.river_name, river.length FROM river JOIN state ON river.traverse = state.state_name WHERE state.state_name = 'Texas' ORDER BY river.length DESC LIMIT 1;","275":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","276":"SELECT state.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name = 'Kentucky';","277":"SELECT state_name, highest_point FROM highlow WHERE highest_point > (SELECT highest_point FROM highlow WHERE state_name = 'Colorado');","278":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","279":"SELECT river.length FROM river WHERE river.river_name = 'rio grande';","280":"SELECT COUNT(*) FROM river WHERE traverse = 'Idaho';","281":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.country_name = 'United States';","282":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","283":"SELECT population \/ area AS population_density FROM state WHERE area = (SELECT MIN(area) FROM state);","284":"SELECT highlow.lowest_point FROM highlow WHERE highlow.state_name = 'Iowa';","285":"SELECT MAX(length) AS longest_river_length\nFROM river\nWHERE country_name = 'USA';","286":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio River';","287":"SELECT river.length FROM river WHERE river.river_name = 'rio grande';","288":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","289":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","290":"SELECT state.capital FROM state JOIN border_info ON state.state_name = border_info.state_name WHERE border_info.border = 'Texas';","291":"SELECT state.state_name FROM state ORDER BY state.population ASC LIMIT 1;","292":"SELECT state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi';","293":"SELECT city.city_name, city.population FROM city WHERE city.state_name = 'Texas';","294":"SELECT border_info.state_name FROM border_info JOIN state ON border_info.state_name = state.state_name WHERE border_info.border = 'Kentucky';","295":"SELECT highest_point FROM highlow WHERE state_name = 'Texas';","296":"SELECT city.city_name, city.population FROM city WHERE city.state_name = 'Texas';","297":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","298":"SELECT city.city_name, state.density FROM city JOIN state ON city.state_name = state.state_name ORDER BY state.density DESC LIMIT 1;","299":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Ohio River';","300":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","301":"SELECT MAX(highest_elevation) AS highest_elevation\nFROM highlow;","302":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Wyoming' ORDER BY city.population DESC;","303":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","304":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","305":"SELECT COUNT(*) FROM river WHERE river.traverse = 'Idaho';","306":"SELECT state_name FROM state WHERE state_name NOT IN (SELECT border FROM border_info);","307":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","308":"SELECT city.city_name FROM city WHERE city.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","309":"SELECT population FROM city WHERE city_name = 'Boulder';","310":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","311":"SELECT highlow.highest_point FROM border_info JOIN highlow ON border_info.border = highlow.state_name WHERE border_info.state_name = 'Mississippi';","312":"SELECT highlow.highest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.country_name = 'United States';","313":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","314":"SELECT highlow.highest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.density = (SELECT MIN(density) FROM state);","315":"SELECT COUNT(*) FROM state WHERE state.country_name = 'United States';","316":"SELECT population FROM state ORDER BY density DESC LIMIT 1;","317":"SELECT state.capital FROM state JOIN border_info ON state.state_name = border_info.state_name WHERE border_info.border = 'Texas';","318":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio River';","319":"SELECT state.state_name FROM state WHERE state.area = (SELECT MAX(state.area) FROM state);","320":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","321":"SELECT city.city_name, city.population FROM city WHERE city.city_name = 'Boulder';","322":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name GROUP BY river.river_name ORDER BY COUNT(DISTINCT state.state_name) DESC LIMIT 1;","323":"SELECT border_info.state_name FROM border_info WHERE border_info.border = 'Kentucky';","324":"SELECT mountain.mountain_name, mountain.mountain_altitude FROM mountain JOIN highlow ON highlow.state_name = mountain.state_name ORDER BY mountain.mountain_altitude DESC LIMIT 1;","325":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","326":"SELECT state.population FROM state WHERE state.state_name = 'California';","327":"SELECT SUM(state.area) AS total_area FROM state;","328":"SELECT state.state_name FROM state JOIN river ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","329":"SELECT river_name, length FROM river WHERE traverse = 'United States' ORDER BY length DESC LIMIT 1;","330":"SELECT river_name FROM river GROUP BY river_name ORDER BY COUNT(traverse) DESC LIMIT 1;","331":"SELECT state.population FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Mississippi';","332":"SELECT highlow.lowest_point FROM highlow WHERE highlow.state_name = 'Iowa';","333":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Kansas';","334":"SELECT state.population FROM state WHERE state.state_name = 'California';","335":"SELECT state.capital FROM border_info JOIN state ON border_info.state_name = state.state_name WHERE border_info.border = 'Texas';","336":"SELECT COUNT(*) FROM border_info WHERE state_name = 'Kentucky';","337":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio';","338":"SELECT population FROM city WHERE state_name = 'Alaska' AND population = (SELECT MAX(population) FROM city WHERE state_name = 'Alaska');","339":"SELECT state.capital FROM state WHERE state.state_name = 'Texas';","340":"SELECT COUNT(*) AS major_city_count FROM city WHERE city.population > 100000;","341":"SELECT state.state_name, city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.population = (SELECT MAX(population) FROM city);","342":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","343":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","344":"SELECT highlow.highest_point FROM highlow WHERE highlow.state_name = 'Texas';","345":"SELECT COUNT(*) AS total_states FROM state;","346":"SELECT state.state_name, state.area FROM state JOIN border_info ON border_info.state_name = state.state_name WHERE border_info.border = 'Texas' ORDER BY state.area ASC LIMIT 1;","347":"SELECT city.city_name, city.population FROM state JOIN city ON city.state_name = state.state_name WHERE state.country_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","348":"SELECT highest_elevation\nFROM highlow\nWHERE highest_point = 'Guadalupe Peak';","349":"SELECT state.area FROM state WHERE state.state_name = 'New Mexico';","350":"SELECT state.population FROM state WHERE state.state_name = 'California';","351":"SELECT state.capital FROM state WHERE state.state_name = 'Texas';","352":"SELECT city.city_name, state.density FROM city JOIN state ON city.state_name = state.state_name ORDER BY state.density DESC LIMIT 1;","353":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'ohio';","354":"SELECT state.population FROM state WHERE state.state_name = 'California';","355":"SELECT highest_point FROM highlow WHERE state_name = 'Texas';","356":"SELECT lowest_elevation FROM highlow WHERE state_name = 'Pennsylvania';","357":"SELECT city.city_name FROM city WHERE city.state_name = 'Texas';","358":"SELECT river.river_name FROM river WHERE river.country_name = 'USA' ORDER BY river.length DESC LIMIT 1;","359":"SELECT SUM(state.area) AS total_area FROM state WHERE state.country_name = 'usa';","360":"SELECT city.city_name, city.population FROM city WHERE city.state_name = 'Wyoming' ORDER BY city.population DESC LIMIT 1;","361":"SELECT river.river_name FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Alabama';","362":"SELECT river.river_name FROM river ORDER BY river.length DESC LIMIT 1;","363":"SELECT lake.lake_name FROM lake JOIN state ON lake.state_name = state.state_name WHERE state.state_name = 'Michigan';","364":"SELECT state.capital FROM state JOIN border_info ON border_info.state_name = state.state_name WHERE border_info.border = 'Texas';","365":"SELECT state.state_name, state.population FROM border_info JOIN state ON border_info.state_name = state.state_name WHERE border_info.border = 'Oklahoma' ORDER BY state.population DESC LIMIT 1;","366":"SELECT state.state_name FROM state JOIN river ON state.state_name = river.traverse WHERE river.river_name = 'Ohio';","367":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","368":"SELECT mountain.mountain_name FROM mountain WHERE mountain.state_name = 'Texas' ORDER BY mountain.mountain_altitude DESC LIMIT 1;","369":"SELECT river.river_name, river.length FROM river WHERE river.traverse = 'Texas' ORDER BY river.length DESC;","370":"SELECT SUM(state.area) AS total_area FROM state;","371":"SELECT state.population FROM state JOIN border_info ON state.state_name = border_info.state_name WHERE border_info.border = 'Mississippi';","372":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","373":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","374":"SELECT population FROM state WHERE area = (SELECT MAX(area) FROM state);","375":"SELECT state.area FROM state WHERE state.state_name = 'New Mexico';","376":"SELECT state.state_name FROM state ORDER BY state.density DESC LIMIT 1;","377":"SELECT state.state_name, state.density FROM state ORDER BY state.density DESC LIMIT 1;","378":"SELECT city.city_name FROM city ORDER BY city.population ASC LIMIT 1;","379":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","380":"SELECT state.state_name FROM state ORDER BY state.density DESC LIMIT 1;","381":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.population = (SELECT MAX(population) FROM city);","382":"SELECT state.state_name FROM state ORDER BY state.area DESC LIMIT 1;","383":"SELECT border FROM border_info WHERE state_name = 'Kentucky';","384":"SELECT city.population FROM city WHERE city.city_name = 'Boulder';","385":"SELECT COUNT(*) AS river_count FROM river WHERE river.traverse = 'Idaho';","386":"SELECT city.city_name, city.population FROM city WHERE city.city_name = 'Boulder';","387":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","388":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","389":"SELECT state.density FROM state WHERE state.state_name = 'Wyoming';","390":"SELECT river.river_name, river.length FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Tennessee' ORDER BY river.length DESC LIMIT 1;","391":"SELECT highlow.lowest_point FROM highlow WHERE highlow.state_name = 'Iowa';","392":"SELECT state.state_name FROM state;","393":"SELECT state.state_name FROM state ORDER BY state.density ASC LIMIT 1;","394":"SELECT river.river_name FROM river WHERE river.traverse = 'US' ORDER BY river.length DESC LIMIT 1;","395":"SELECT state.state_name, (state.population \/ state.area) AS population_density FROM state ORDER BY population_density DESC LIMIT 1;","396":"SELECT state.population FROM state WHERE state.state_name = 'California';","397":"SELECT city.city_name, state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","398":"SELECT state_name FROM highlow WHERE highest_point > (SELECT highest_point FROM highlow WHERE state_name = 'Colorado');","399":"SELECT COUNT(state_name) FROM border_info WHERE border = 'Kentucky';","400":"SELECT state.capital FROM state JOIN city ON city.state_name = state.state_name WHERE city.city_name = 'Durham';","401":"SELECT state.state_name FROM state ORDER BY state.population ASC LIMIT 1;","402":"SELECT state.population FROM state ORDER BY state.population DESC LIMIT 1;","403":"SELECT COUNT(*) FROM state WHERE state_name NOT IN (SELECT traverse FROM river);","404":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name;","405":"SELECT traverse FROM river WHERE river_name = (SELECT river_name FROM river WHERE traverse = 'Texas' ORDER BY length DESC LIMIT 1);","406":"SELECT DISTINCT state.state_name FROM state JOIN city ON state.state_name = city.state_name WHERE city.city_name = 'Springfield';","407":"SELECT city.city_name FROM city JOIN highlow ON city.state_name = highlow.state_name WHERE highlow.highest_point = (SELECT MAX(highest_point) FROM highlow);","408":"SELECT state.capital FROM state WHERE state.state_name = 'Texas';","409":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","410":"SELECT state.state_name, state.population FROM border_info JOIN state ON state.state_name = border_info.border WHERE border_info.state_name = 'Oklahoma' ORDER BY state.population DESC LIMIT 1;","411":"SELECT highlow.highest_point FROM highlow JOIN border_info ON highlow.state_name = border_info.state_name WHERE border_info.border = 'Colorado';","412":"SELECT river.river_name FROM river WHERE river.traverse = 'Illinois';","413":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","414":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","415":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'TAIL NIPS';","416":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'mohammad rastegari';","417":"SELECT COUNT(paperDataset.paperId) AS num_papers FROM paperDataset JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName = 'ImageNet';","418":"SELECT COUNT(*) FROM state JOIN river ON river.traverse = state.state_name;","419":"SELECT river_name FROM river WHERE traverse = (SELECT state_name FROM highlow ORDER BY lowest_point ASC LIMIT 1);","420":"SELECT COUNT(*) FROM river JOIN state ON river.traverse = state.state_name WHERE state.capital <> 'Albany';","421":"SELECT paper.title, paper.numCitedBy FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2010 AND venue.venueName = 'EMNLP' ORDER BY paper.numCitedBy DESC;","422":"SELECT author.authorName, COUNT(paper.paperId) AS numPapers FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY author.authorId ORDER BY numPapers DESC;","423":"SELECT paper.* FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorName) = 2;","424":"SELECT paper.title, author.authorName FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.title LIKE '%convolution%' AND author.authorName = 'Brian Curless';","425":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Liwen Xiong' AND paper.year = 2015;","426":"SELECT COUNT(*) FROM river JOIN state ON river.traverse = state.state_name WHERE state.population = (SELECT MAX(population) FROM state);","427":"SELECT river_name FROM river WHERE traverse <> 'Tennessee';","428":"SELECT COUNT(cite.citedPaperId) AS citation_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN cite ON writes.paperId = cite.citingPaperId WHERE author.authorName = 'Noah A Smith';","429":"SELECT DISTINCT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","430":"SELECT dataset.datasetName FROM dataset;","431":"SELECT COUNT(DISTINCT border) AS num_states FROM border_info;","432":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Luke Zettlemoyer';","433":"SELECT paper.title, author.authorName FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.title LIKE '%convolution%' AND author.authorName = 'brian curless';","434":"SELECT state.state_name FROM state LEFT JOIN river ON river.traverse = state.state_name WHERE river.traverse IS NULL;","435":"SELECT COUNT(cite.citedPaperId) AS citation_count FROM cite JOIN writes ON cite.citingPaperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Noah A. Smith';","436":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2014 AND venue.venueName = 'TACL' ORDER BY paper.numCiting DESC LIMIT 1;","437":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN writes ON paperKeyphrase.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Luke Zettlemoyer';","438":"SELECT author.authorName, COUNT(paper.paperId) AS paper_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY author.authorName ORDER BY paper_count DESC LIMIT 1;","439":"SELECT state.capital FROM state JOIN border_info ON state.state_name = border_info.state_name WHERE border_info.border IN (SELECT border FROM border_info WHERE state_name = 'Texas');","440":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christof Dallermassl' AND paper.year = 2000;","441":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2016 AND venue.venueName = 'CVPR' AND keyphrase.keyphraseName = 'Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset';","442":"SELECT state.state_name, state.area FROM state JOIN river ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river) ORDER BY state.area ASC LIMIT 1;","443":"SELECT river.river_name FROM river WHERE river.country_name = 'United States' ORDER BY river.length ASC LIMIT 1;","444":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2012 AND venue.venueName = 'acl' AND keyphrase.keyphraseName = 'Parsing';","445":"SELECT writes.authorId, COUNT(paper.paperId) AS numPapers FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY writes.authorId HAVING COUNT(paper.paperId) = (SELECT MAX(numPapers) FROM (SELECT COUNT(paper.paperId) AS numPapers FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY writes.authorId) AS subquery);","446":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Liwen Xiong' AND paper.year = 2015;","447":"SELECT state.state_name FROM mountain JOIN state ON mountain.state_name = state.state_name WHERE mountain.mountain_name = 'Mount Whitney';","448":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'oren etzioni' ORDER BY paper.year DESC LIMIT 1;","449":"SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Sharon Goldwater');","450":"SELECT COUNT(DISTINCT paper.paperId)\nFROM paper\nINNER JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nINNER JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE keyphrase.keyphraseName = 'Multiuser Receiver in the Decision Feedback'\nAND paper.year = EXTRACT(YEAR FROM CURRENT_DATE);","451":"SELECT paper.paperId FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","452":"SELECT DISTINCT author.authorId, paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE venue.venueName = 'ACL' AND paper.year = 2016;","453":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","454":"SELECT COUNT(*) FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName = 'ImageNet';","455":"SELECT highlow.state_name FROM highlow ORDER BY highlow.lowest_point ASC LIMIT 1;","456":"SELECT city.city_name, city.population FROM city JOIN state ON city.state_name = state.state_name WHERE state.country_name = 'USA';","457":"SELECT dataset.datasetName FROM paperDataset JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName LIKE '%semantic parsing%';","458":"SELECT COUNT(*) AS num_papers FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","459":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'David M. Blei') AND venue.venueName = 'AISTATS';","460":"SELECT DISTINCT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Luke Zettlemoyer';","461":"SELECT paper.paperId, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","462":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Oren Etzioni' ORDER BY paper.year DESC;","463":"SELECT COUNT(*) FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","464":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name JOIN border_info ON border_info.state_name = state.state_name WHERE state.capital = 'Atlanta';","465":"SELECT state.state_name FROM state WHERE state.capital = 'salem';","466":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","467":"SELECT capital FROM state WHERE population = (SELECT MAX(population) FROM state);","468":"SELECT DISTINCT author.authorName FROM venue JOIN paper ON venue.venueId = paper.venueId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE venue.venueName = 'ACL' AND paper.year = 2016;","469":"SELECT highlow.state_name, highlow.highest_elevation FROM highlow ORDER BY highlow.highest_elevation DESC LIMIT 1;","470":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName LIKE '%chi%';","471":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Brian Curless' AND keyphrase.keyphraseName = 'convolution';","472":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN writes ON paperKeyphrase.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Luke Zettlemoyer';","473":"SELECT highlow.state_name, highlow.highest_elevation FROM highlow ORDER BY highlow.highest_elevation DESC LIMIT 1;","474":"SELECT highlow.state_name, highlow.lowest_point FROM highlow JOIN border_info ON highlow.state_name = border_info.state_name WHERE border_info.border = 'Idaho';","475":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName LIKE '%chi%';","476":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.area = (SELECT MAX(area) FROM state);","477":"SELECT river_name FROM river WHERE traverse != 'Tennessee';","478":"SELECT mountain.mountain_name FROM mountain WHERE mountain.state_name = 'Alaska';","479":"SELECT author.authorName, COUNT(DISTINCT paper.paperId) AS paper_count\nFROM writes\nJOIN author ON writes.authorId = author.authorId\nJOIN paper ON writes.paperId = paper.paperId\nJOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE keyphrase.keyphraseName = 'syntactic parsing'\nGROUP BY author.authorId, author.authorName\nORDER BY paper_count DESC\nLIMIT 1;","480":"SELECT DISTINCT keyphrase.keyphraseName\nFROM paperKeyphrase\nJOIN paper ON paperKeyphrase.paperId = paper.paperId\nJOIN writes ON paper.paperId = writes.paperId\nJOIN author ON writes.authorId = author.authorId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE author.authorName = 'Luke Zettlemoyer';","481":"SELECT paper.title, paper.year FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'sanjeev arora' ORDER BY paper.year DESC;","482":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","483":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'oren etzioni' ORDER BY paper.year DESC LIMIT 1;","484":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.area = (SELECT MAX(area) FROM state);","485":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","486":"SELECT COUNT(cite.citingPaperId) AS citation_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId LEFT JOIN cite ON paper.paperId = cite.citedPaperId WHERE author.authorName = 'Noah A. Smith';","487":"SELECT state.state_name, state.population, state.area, state.country_name, state.capital FROM state WHERE state.state_name = 'Massachusetts';","488":"SELECT w1.paperId FROM writes w1 JOIN author a1 ON w1.authorId = a1.authorId JOIN writes w2 ON w1.paperId = w2.paperId JOIN author a2 ON w2.authorId = a2.authorId WHERE a1.authorName = 'Peter Mertens' AND a2.authorName = 'Dina Barbian';","489":"SELECT border_info.state_name FROM state JOIN border_info ON border_info.border = state.state_name WHERE state.population = (SELECT MAX(population) FROM state);","490":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","491":"SELECT state_name, highest_point FROM highlow WHERE highest_point = (SELECT MAX(highest_point) FROM highlow);","492":"SELECT author.authorName, paper.title\nFROM paper\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nINNER JOIN venue ON paper.venueId = venue.venueId\nINNER JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nINNER JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE keyphrase.keyphraseName = 'Parsing'\nAND paper.year = 2012\nAND venue.venueName = 'acl';","493":"SELECT mountain.mountain_name, mountain.country_name, mountain.state_name FROM mountain WHERE mountain.mountain_name = 'Mount Whitney';","494":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN venue ON paper.venueId = venue.venueId WHERE keyphrase.keyphraseName = 'TAIL' AND venue.venueName = 'NIPS';","495":"SELECT highlow.state_name, highlow.highest_elevation FROM highlow ORDER BY highlow.highest_elevation DESC LIMIT 1;","496":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS';","497":"SELECT state.state_name FROM mountain JOIN state ON mountain.state_name = state.state_name WHERE mountain.mountain_name = 'Mount Whitney';","498":"SELECT DISTINCT keyphrase.keyphraseName\nFROM keyphrase\nINNER JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId\nINNER JOIN paper ON paperKeyphrase.paperId = paper.paperId\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nWHERE paper.year = 2022\nAND author.authorName = 'Christof Dallermassl';","499":"SELECT COUNT(paperId) AS num_papers FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'ras bodik';","500":"SELECT COUNT(*) AS publication_count FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","501":"SELECT state.capital FROM state JOIN city ON city.state_name = state.state_name WHERE city.population < 100000; -- Assuming 100,000 is the threshold for a major city","502":"SELECT DISTINCT venue.venueName\nFROM author\nJOIN writes ON author.authorId = writes.authorId\nJOIN paper ON writes.paperId = paper.paperId\nJOIN venue ON paper.venueId = venue.venueId\nWHERE author.authorName = 'li dong' AND paper.year = 2016;","503":"SELECT DISTINCT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paperKeyphrase ON writes.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Luke Zettlemoyer';","504":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN venue ON venue.venueId = paper.venueId WHERE venue.venueName = 'NIPS' AND paperKeyphrase.keyphraseId = (SELECT keyphraseId FROM keyphrase WHERE keyphraseName = 'TAIL');","505":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","506":"SELECT river_name FROM river WHERE traverse <> 'USA';","507":"SELECT paper.title FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE journal.journalName = 'NIPS';","508":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorId) = 2;","509":"SELECT COUNT(*) AS num_cited_papers FROM cite JOIN writes ON cite.citingPaperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Mirella Lapata';","510":"SELECT highest_point FROM highlow WHERE state_name = (SELECT state_name FROM state ORDER BY population ASC LIMIT 1);","511":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","512":"SELECT paper.* FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Liwen Xiong' AND paper.year = 2015;","513":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","514":"SELECT COUNT(paperId) AS num_papers FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Christopher D. Manning');","515":"SELECT state_name, highest_point FROM highlow WHERE highest_point = (SELECT MAX(highest_point) FROM highlow);","516":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2012 AND keyphrase.keyphraseName = 'Parsing';","517":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorId) = 2;","518":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'Ed Desmond') AND keyphrase.keyphraseName = 'Semantic Parsing';","519":"SELECT state_name FROM state WHERE capital = 'Salem';","520":"SELECT state.state_name, state.population FROM state JOIN border_info ON border_info.border = state.state_name WHERE border_info.state_name = (SELECT state_name FROM highlow ORDER BY lowest_point ASC LIMIT 1) ORDER BY state.population DESC LIMIT 1;","521":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'brian curless' AND keyphrase.keyphraseName = 'convolution';","522":"SELECT author.authorName, COUNT(paper.paperId) AS paper_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.title LIKE '%syntactic parsing%' GROUP BY author.authorId ORDER BY paper_count DESC LIMIT 1;","523":"SELECT author.authorId, author.authorName\nFROM paper\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nINNER JOIN venue ON paper.venueId = venue.venueId\nWHERE paper.year = 2016\nAND venue.venueName = 'acl';","524":"SELECT DISTINCT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho';","525":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paperKeyphrase.keyphraseId = (SELECT keyphraseId FROM keyphrase WHERE keyphraseName = 'keyphrase0') AND author.authorName = 'brian curless';","526":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'brian curless' AND keyphrase.keyphraseName = 'convolution';","527":"SELECT paper.paperId FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian');","528":"SELECT lake.lake_name, lake.area FROM lake WHERE lake.country_name = 'US';","529":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ed Desmond' AND keyphrase.keyphraseName = 'Semantic Parsing';","530":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'chi';","531":"SELECT state_name, AVG(population) AS average_population FROM state GROUP BY state_name ORDER BY average_population ASC LIMIT 1;","532":"SELECT paper.title, paper.numCiting\nFROM paper\nJOIN writes ON paper.paperId = writes.paperId\nJOIN author ON writes.authorId = author.authorId\nWHERE LOWER(author.authorName) = 'zachary tatlock';","533":"SELECT COUNT(*) AS paper_count FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","534":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","535":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'David M. Blei') AND venue.venueName = 'AISTATS';","536":"SELECT river.river_name, river.length FROM river WHERE river.traverse = 'Texas' ORDER BY river.length ASC LIMIT 1;","537":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Luke Zettlemoyer';","538":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'David M. Blei' AND venue.venueName = 'AISTATS';","539":"SELECT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Sanjeev Arora';","540":"SELECT state.capital FROM state JOIN city ON city.state_name = state.state_name ORDER BY city.population ASC LIMIT 1;","541":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","542":"SELECT author.authorName FROM author WHERE author.authorName = 'subhasis chaudhuri';","543":"SELECT border_info.state_name FROM border_info JOIN river ON border_info.border = river.traverse WHERE river.river_name = 'Mississippi';","544":"SELECT paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'Liwen Xiong' AND paper.year = YEAR(CURDATE()) - 1;","545":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'oren etzioni' ORDER BY paper.year DESC;","546":"SELECT paper.paperId, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","547":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY author.authorId ORDER BY COUNT(paper.paperId) DESC LIMIT 1;","548":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name JOIN river ON state.state_name = river.traverse WHERE river.river_name = (SELECT river_name FROM river WHERE traverse = 'Virginia' AND length = (SELECT MAX(length) FROM river WHERE traverse = 'Virginia'));","549":"SELECT COUNT(*) AS num_papers FROM paper WHERE paper.title LIKE '%ImageNet%';","550":"SELECT river.river_name FROM river ORDER BY river.length ASC LIMIT 1;","551":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2012 AND venue.venueName = 'ACL';","552":"SELECT highlow.highest_point FROM highlow;","553":"SELECT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE state.population = (SELECT MIN(population) FROM state);","554":"SELECT paper.title, paper.year FROM paper WHERE paper.title LIKE '%Question Answering%';","555":"SELECT COUNT(*) AS num_papers FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","556":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian');","557":"SELECT COUNT(*) AS num_papers FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ed Desmond' AND keyphrase.keyphraseName = 'Semantic Parsing';","558":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian');","559":"SELECT COUNT(writes.paperId) FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","560":"SELECT DISTINCT keyphrase.keyphraseName FROM author JOIN writes ON writes.authorId = author.authorId JOIN paperKeyphrase ON paperKeyphrase.paperId = writes.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Luke Zettlemoyer';","561":"SELECT COUNT(border_info.state_name) FROM state JOIN border_info ON border_info.border = state.state_name WHERE state.capital = 'Boston';","562":"SELECT paper.year FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Michael Stonebraker' AND venue.venueName = 'VLDB' ORDER BY paper.year ASC LIMIT 1;","563":"SELECT state.population FROM state JOIN border_info ON state.state_name = border_info.border WHERE border_info.state_name = 'Texas' ORDER BY state.population DESC LIMIT 1;","564":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2012 AND venue.venueName = 'acl';","565":"SELECT DISTINCT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Subhasis Chaudhuri';","566":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'mohammad rastegari';","567":"SELECT state_name, area\nFROM state\nWHERE area = (SELECT MIN(area) FROM state);","568":"SELECT paper.title, paper.year, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2012 AND venue.venueName = 'acl' AND paper.title LIKE '%Parsing%';","569":"SELECT highlow.highest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.area = (SELECT MAX(area) FROM state);","570":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.area = (SELECT MIN(area) FROM state) ORDER BY river.length DESC LIMIT 1;","571":"SELECT COUNT(*)\nFROM paper\nJOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nJOIN venue ON paper.venueId = venue.venueId\nWHERE keyphrase.keyphraseName = 'Parsing'\nAND paper.year = 2012\nAND venue.venueName = 'acl';","572":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2012 AND venue.venueName = 'acl 2012' AND keyphrase.keyphraseName = 'Parsing';","573":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Li Dong' AND paper.year = 2016;","574":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christof Dallermassl' AND paper.year = 2000;","575":"SELECT state.state_name FROM state JOIN highlow ON state.state_name = highlow.state_name WHERE state.capital = highlow.highest_point;","576":"SELECT state.area FROM state;","577":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2012 AND keyphrase.keyphraseName = 'Parsing';","578":"SELECT city.city_name, MAX(city.population) AS largest_population FROM city JOIN border_info ON city.state_name = border_info.state_name WHERE border_info.border = 'California' GROUP BY city.city_name, city.state_name;","579":"SELECT DISTINCT author.authorName, paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.title LIKE '%syntactic parsing%';","580":"SELECT paper.* FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorId) = 2;","581":"SELECT COUNT(paper.paperId) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'David M. Blei') AND venue.venueName = 'AISTATS';","582":"SELECT paper.year FROM writes AS w1 JOIN author AS a1 ON w1.authorId = a1.authorId JOIN writes AS w2 ON w1.paperId = w2.paperId JOIN author AS a2 ON w2.authorId = a2.authorId JOIN paper ON w1.paperId = paper.paperId WHERE a1.authorName = 'Peter Mertens' AND a2.authorName = 'Dina Barbian';","583":"SELECT state.capital FROM state ORDER BY state.population DESC LIMIT 1;","584":"SELECT paper.paperId FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorName) = 2;","585":"SELECT paper.year, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2012 AND venue.venueName = 'acl';","586":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","587":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE venue.venueName = 'NIPS' AND keyphrase.keyphraseName = 'TAIL';","588":"SELECT DISTINCT p.title\nFROM paper p\nINNER JOIN writes w ON p.paperId = w.paperId\nINNER JOIN author a ON w.authorId = a.authorId\nWHERE a.authorName = 'Liwen Xiong'\nAND p.year = YEAR(CURDATE()) - 1;","589":"SELECT paper.title FROM paper WHERE paper.year >= 2011 AND paper.title LIKE '%Monte Carlo simulation%';","590":"SELECT COUNT(DISTINCT state.state_name) AS state_count FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","591":"SELECT COUNT(writes.paperId) AS num_papers FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","592":"SELECT author.authorName, paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2016 AND venue.venueName = 'ACL';","593":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName LIKE '%Question Answering%';","594":"SELECT MIN(length)\nFROM river\nWHERE country_name = 'USA';","595":"SELECT COUNT(paper.paperId) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2014 AND venue.venueName = 'ACL';","596":"SELECT border_info.state_name FROM border_info JOIN river ON border_info.border = river.traverse WHERE river.river_name = 'Mississippi';","597":"SELECT DISTINCT author.authorName, venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2016 AND venue.venueName = 'ACL';","598":"SELECT COUNT(*) AS major_city_count FROM city WHERE city.state_name = 'Texas';","599":"SELECT COUNT(cite.citedPaperId) AS citation_count FROM cite JOIN paper ON cite.citedPaperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Noah Smith';","600":"SELECT DISTINCT state.state_name FROM state JOIN river ON river.traverse = state.state_name;","601":"SELECT COUNT(*) AS num_papers FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","602":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorName) = 2;","603":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2016 AND author.authorName = 'li dong';","604":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","605":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paper.paperId = paperKeyphrase.paperId JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christof Dallermassl' AND paper.year = 2000;","606":"SELECT paper.paperId, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","607":"SELECT COUNT(cite.citingPaperId) AS citation_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN cite ON writes.paperId = cite.citedPaperId WHERE author.authorName = 'noah a smith';","608":"SELECT DISTINCT paper.title\nFROM paper\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nINNER JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nINNER JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE author.authorName = 'brian curless' \nAND keyphrase.keyphraseName = 'convolution';","609":"SELECT paper.paperId, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","610":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'oren etzioni' ORDER BY paper.year DESC LIMIT 1;","611":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name WHERE state.population = (SELECT MAX(population) FROM state);","612":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.title LIKE '%syntactic parsing%' GROUP BY author.authorId, author.authorName ORDER BY COUNT(paper.paperId) DESC LIMIT 1;","613":"SELECT state.state_name, state.area FROM state JOIN river ON river.traverse = state.state_name WHERE river.river_name = 'Rio Grande' ORDER BY state.area DESC LIMIT 1;","614":"SELECT paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'Subhasis Chaudhuri';","615":"SELECT COUNT(*) AS num_cited FROM cite JOIN writes ON cite.citingPaperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Mirella Lapata';","616":"SELECT river.river_name FROM river JOIN state ON river.traverse = state.state_name JOIN border_info ON border_info.state_name = state.state_name WHERE state.capital = 'Atlanta';","617":"SELECT COUNT(*) AS num_papers FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","618":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'subhasis chaudhuri';","619":"SELECT state.population FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name = 'Wyoming' ORDER BY state.area ASC LIMIT 1;","620":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'CVPR ''16' AND paper.year = 2016;","621":"SELECT state.density FROM state JOIN river ON river.traverse = state.state_name WHERE river.length = (SELECT MAX(length) FROM river);","622":"SELECT paper.title, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.title LIKE '%chi%';","623":"SELECT paper.paperId, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'TAIL' AND venue.venueName = 'NIPS';","624":"SELECT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE state.area = (SELECT MIN(area) FROM state);","625":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","626":"SELECT COUNT(paper.paperId) FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId JOIN journal ON paper.journalId = journal.journalId WHERE author.authorName = 'David M. Blei' AND journal.journalName = 'AISTATS';","627":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'David M. Blei') AND venue.venueName = 'AISTATS';","628":"SELECT MAX(state.area) AS largest_state_area FROM state;","629":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.area = (SELECT MIN(area) FROM state);","630":"SELECT mountain_name, mountain_altitude FROM mountain JOIN highlow ON mountain.state_name = highlow.state_name WHERE mountain.country_name = 'United States' ORDER BY mountain_altitude DESC LIMIT 1;","631":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paper.paperId = paperKeyphrase.paperId JOIN writes ON writes.paperId = paper.paperId JOIN author ON author.authorId = writes.authorId WHERE author.authorName = 'Luke Zettlemoyer';","632":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","633":"SELECT COUNT(cite.citedPaperId) AS citation_count FROM writes JOIN cite ON writes.paperId = cite.citedPaperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'noah a smith';","634":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Liwen Xiong' AND paper.year = 2015;","635":"SELECT COUNT(city.city_name) FROM city JOIN border_info ON city.state_name = border_info.state_name WHERE border_info.border = 'Nebraska';","636":"SELECT state.density FROM state WHERE state.capital = 'Austin';","637":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho';","638":"SELECT DISTINCT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Luke Zettlemoyer';","639":"SELECT river.river_name FROM river ORDER BY river.length ASC LIMIT 1;","640":"SELECT river.length FROM river WHERE river.traverse = 'texas' AND river.river_name = 'colorado';","641":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'brian curless' AND keyphrase.keyphraseName = 'convolution';","642":"SELECT paper.paperId FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","643":"SELECT author.authorId, author.authorName, COUNT(paper.paperId) AS publication_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY author.authorId, author.authorName ORDER BY publication_count DESC LIMIT 1;","644":"SELECT paperId FROM writes WHERE authorId IN (SELECT authorId FROM author WHERE authorName IN ('Peter Mertens', 'Dina Barbian')) GROUP BY paperId HAVING COUNT(DISTINCT authorId) = 2;","645":"SELECT paper.paperId, paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","646":"SELECT state.state_name FROM state JOIN border_info ON border_info.state_name = state.state_name WHERE border_info.border != 'Texas';","647":"SELECT river.river_name, river.length FROM river WHERE river.country_name = 'US';","648":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Oren Etzioni' AND paper.year = (SELECT MAX(year) FROM paper JOIN writes ON paper.paperId = writes.paperId WHERE writes.authorId = author.authorId);","649":"SELECT COUNT(cite.citedPaperId) AS number_of_citations FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN cite ON cite.citedPaperId = paper.paperId WHERE author.authorName = 'Noah A. Smith';","650":"SELECT state.capital FROM state JOIN highlow ON state.state_name = highlow.state_name WHERE highlow.lowest_point = (SELECT MIN(lowest_point) FROM highlow);","651":"SELECT COUNT(DISTINCT w2.authorId) AS co_author_count FROM writes w1 JOIN writes w2 ON w1.paperId = w2.paperId WHERE w1.authorId = (SELECT authorId FROM author WHERE authorName = 'Mark Steedman') AND w2.authorId != w1.authorId;","652":"SELECT paper.paperId, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","653":"SELECT city.population FROM state JOIN city ON state.capital = city.city_name WHERE state.area = (SELECT MIN(area) FROM state);","654":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian');","655":"SELECT highlow.highest_point FROM state JOIN highlow ON highlow.state_name = state.state_name WHERE state.area = (SELECT MAX(area) FROM state);","656":"SELECT paper.paperId, paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","657":"SELECT highlow.state_name, highlow.highest_point FROM highlow ORDER BY highlow.highest_point DESC LIMIT 1;","658":"SELECT city.city_name, state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Montana' ORDER BY city.population DESC LIMIT 1;","659":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2014 AND venue.venueName = 'ACL';","660":"SELECT highlow.state_name FROM highlow ORDER BY highlow.highest_point DESC LIMIT 1;","661":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'dependent types';","662":"SELECT COUNT(*) AS river_count FROM river WHERE country_name = 'US';","663":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2012 AND venue.venueName = 'Parsing';","664":"SELECT state.state_name, state.area FROM state JOIN border_info ON border_info.border = state.state_name WHERE border_info.state_name = (SELECT state_name FROM state ORDER BY population DESC LIMIT 1) ORDER BY state.area DESC LIMIT 1;","665":"SELECT paper.* FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","666":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","667":"SELECT COUNT(writes.paperId) FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","668":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'David M. Blei' AND venue.venueName = 'AISTATS';","669":"SELECT dataset.datasetName FROM dataset WHERE dataset.datasetName LIKE '%semantic parsing%';","670":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId WHERE paperKeyphrase.keyphraseId IN (SELECT keyphraseId FROM keyphrase WHERE keyphraseName LIKE '%monte carlo simulation%') AND paper.year >= 2011;","671":"SELECT COUNT(*) AS paper_count FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Christopher D. Manning';","672":"SELECT DISTINCT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho';","673":"SELECT state.state_name FROM highlow JOIN state ON highlow.state_name = state.state_name ORDER BY highlow.lowest_point ASC LIMIT 1;","674":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho' GROUP BY venue.venueName;","675":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS';","676":"SELECT DISTINCT b4.state_name FROM border_info b1 JOIN border_info b2 ON b1.border = b2.state_name JOIN border_info b3 ON b2.border = b3.state_name JOIN border_info b4 ON b3.border = b4.state_name WHERE b1.state_name = 'Texas';","677":"SELECT DISTINCT state.state_name FROM state JOIN river ON state.state_name = river.traverse;","678":"SELECT state.capital FROM state WHERE state.country_name = 'USA';","679":"SELECT COUNT(*) FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = 'Colorado';","680":"SELECT DISTINCT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho';","681":"SELECT state.state_name FROM river JOIN state ON state.state_name = river.traverse WHERE river.length = (SELECT MIN(length) FROM river);","682":"SELECT state.state_name FROM state WHERE state.capital = 'Salem';","683":"SELECT paperId FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2014 AND journal.journalName = 'TACL' ORDER BY numCiting DESC LIMIT 1;","684":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","685":"SELECT river.river_name FROM river JOIN highlow ON river.traverse = highlow.state_name WHERE highlow.lowest_elevation = (SELECT MIN(lowest_elevation) FROM highlow);","686":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'machine networks for one shot learning';","687":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","688":"SELECT paper.title FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'balakrishnan prabhakaran';","689":"SELECT mountain.mountain_altitude FROM mountain WHERE mountain.mountain_name = 'Mount McKinley';","690":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2016 AND venue.venueName = 'acl';","691":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'David M. Blei') AND venue.venueName = 'AISTATS';","692":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName IN ('machine networks', 'one shot learning');","693":"SELECT paper.title FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian');","694":"SELECT mountain_name, mountain_altitude FROM mountain WHERE state_name != 'Alaska' ORDER BY mountain_altitude DESC LIMIT 1;","695":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sanjeev Arora' AND paper.year >= 2021; -- Assuming recent means FROM 2021 onwards","696":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN writes ON paperKeyphrase.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Luke Zettlemoyer';","697":"SELECT paper.* FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorId) = 2;","698":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'brian curless') AND keyphrase.keyphraseName = 'convolution';","699":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","700":"SELECT paper.title, author.authorName FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'brian curless';","701":"SELECT p.title\nFROM paper p\nINNER JOIN venue v ON p.venueId = v.venueId\nINNER JOIN paperKeyphrase pk ON p.paperId = pk.paperId\nINNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE v.venueName = 'acl'\nAND p.year = YEAR(CURDATE()) - 1\nAND k.keyphraseName = 'Parsing';","702":"SELECT COUNT(*) FROM river WHERE traverse = (SELECT state_name FROM highlow ORDER BY highest_point DESC LIMIT 1);","703":"SELECT lake.lake_name FROM lake WHERE lake.country_name = 'us';","704":"SELECT COUNT(city.city_name) FROM city WHERE city.state_name = 'Texas';","705":"SELECT river.river_name FROM river ORDER BY river.length ASC LIMIT 1;","706":"SELECT dataset.datasetId, dataset.datasetName FROM dataset;","707":"SELECT COUNT(DISTINCT w.paperId) \nFROM writes w \nJOIN author a ON w.authorId = a.authorId \nWHERE a.authorName = 'Christopher D. Manning';","708":"SELECT COUNT(DISTINCT state.state_name) FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Missouri River';","709":"SELECT highlow.state_name FROM highlow ORDER BY highlow.lowest_elevation ASC LIMIT 1;","710":"SELECT state.capital FROM state JOIN highlow ON state.state_name = highlow.state_name WHERE highlow.highest_elevation = (SELECT MAX(highest_elevation) FROM highlow);","711":"SELECT paper.title, venue.venueName FROM paper JOIN venue ON venue.venueId = paper.venueId WHERE venue.venueName LIKE '%chi%';","712":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","713":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","714":"SELECT DISTINCT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","715":"SELECT lake.lake_name, lake.area FROM lake WHERE lake.country_name = 'united states';","716":"SELECT paper.title FROM paper WHERE paper.title LIKE '%monte carlo simulation%' AND paper.year > 2011;","717":"SELECT state.capital FROM state JOIN highlow ON state.state_name = highlow.state_name WHERE highlow.highest_point = (SELECT MAX(highest_point) FROM highlow);","718":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","719":"SELECT city.city_name, MAX(city.population) AS largest_population FROM city JOIN border_info ON city.state_name = border_info.state_name WHERE border_info.border = 'California' GROUP BY city.state_name;","720":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'brian curless') AND keyphrase.keyphraseName = 'convolution';","721":"SELECT state.population FROM state JOIN river ON state.state_name = river.traverse WHERE state.area = (SELECT MAX(area) FROM state WHERE state_name IN (SELECT state_name FROM river WHERE river_name = 'Mississippi'));","722":"SELECT state.state_name FROM state WHERE state.capital = 'Salem';","723":"SELECT writes.paperId FROM writes JOIN author AS a1 ON writes.authorId = a1.authorId JOIN author AS a2 ON writes.authorId = a2.authorId WHERE a1.authorName = 'Peter Mertens' OR a2.authorName = 'Dina Barbian' GROUP BY writes.paperId HAVING COUNT(DISTINCT writes.authorId) = 2;","724":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","725":"SELECT DISTINCT writes.paperId FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Peter Mertens' OR author.authorName = 'Dina Barbian';","726":"SELECT mountain.mountain_name, mountain.state_name, mountain.country_name FROM mountain WHERE mountain.mountain_name = 'Mount Whitney';","727":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN journal ON paper.journalId = journal.journalId;","728":"SELECT paper.title FROM paper WHERE paper.year > 2011 AND paper.title LIKE '%monte carlo simulation%';","729":"SELECT paper.title FROM paper WHERE paper.title LIKE '%chi%';","730":"SELECT SUM(state.population) AS total_population FROM state JOIN border_info ON state.state_name = border_info.border WHERE border_info.state_name = 'Texas';","731":"SELECT dataset.datasetName FROM dataset WHERE dataset.datasetName LIKE '%semantic parsing%';","732":"SELECT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE state.state_name = (SELECT state_name FROM state ORDER BY population DESC LIMIT 1);","733":"SELECT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE state.area = (SELECT MIN(area) FROM state);","734":"SELECT COUNT(*) AS big_city_count FROM city WHERE city.state_name = 'Texas' AND city.population > 100000;","735":"SELECT highlow.lowest_point FROM state JOIN highlow ON state.state_name = highlow.state_name WHERE state.area = (SELECT MAX(area) FROM state);","736":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","737":"SELECT density FROM state WHERE population = (SELECT MIN(population) FROM state);","738":"SELECT COUNT(*) AS major_city_count FROM city WHERE city.state_name = 'Texas';","739":"SELECT paper.title FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'chi';","740":"SELECT DISTINCT a1.authorName, a2.authorName FROM author a1 JOIN writes w1 ON a1.authorId = w1.authorId JOIN writes w2 ON w1.paperId = w2.paperId JOIN author a2 ON w2.authorId = a2.authorId WHERE a1.authorName = 'Peter Mertens' AND a2.authorName = 'Dina Barbian';","741":"SELECT paper.title, paper.numCiting FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2010 AND venue.venueName = 'EMNLP' ORDER BY paper.numCiting DESC;","742":"SELECT city.city_name, city.population, state.state_name FROM city JOIN state ON city.state_name = state.state_name ORDER BY city.population ASC LIMIT 1;","743":"SELECT COUNT(DISTINCT state.state_name) FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","744":"SELECT DISTINCT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE border_info.state_name IN ( SELECT border_info.state_name FROM border_info JOIN state ON border_info.border = state.state_name WHERE state.population = (SELECT MAX(population) FROM state) );","745":"SELECT COUNT(*) FROM river WHERE traverse = 'Ohio';","746":"SELECT COUNT(*) FROM border_info WHERE border = (SELECT state_name FROM state ORDER BY area DESC LIMIT 1);","747":"SELECT paper.paperId FROM paper JOIN cite ON cite.citedPaperId = paper.paperId WHERE paper.year = 2010 AND paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'EMNLP') GROUP BY paper.paperId ORDER BY COUNT(cite.citingPaperId) DESC LIMIT 1;","748":"SELECT COUNT(DISTINCT state.state_name) FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Missouri River';","749":"SELECT paper.title FROM paper WHERE paper.title LIKE '%Question Answering%';","750":"SELECT paper.title FROM paper WHERE paper.year > 2011 AND paper.title LIKE '%monte carlo simulation%';","751":"SELECT COUNT(*) FROM border_info WHERE border = 'Mississippi River';","752":"SELECT DISTINCT state.state_name FROM state JOIN river ON state.state_name = river.traverse;","753":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'brian curless' AND keyphrase.keyphraseName = 'convolution';","754":"SELECT state.state_name FROM state ORDER BY state.population DESC LIMIT 1;","755":"SELECT paper.title, paper.numCitedBy FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = '2010' AND venue.venueName = 'EMNLP' ORDER BY paper.numCitedBy DESC;","756":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","757":"SELECT DISTINCT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho';","758":"SELECT highlow.state_name FROM highlow ORDER BY highlow.highest_point DESC LIMIT 1;","759":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Question Answering';","760":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Brian Curless' AND paper.title LIKE '%convolution%';","761":"SELECT population \/ area AS population_density\nFROM state\nWHERE state_name = 'Pennsylvania';","762":"SELECT DISTINCT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2016 AND venue.venueName = 'acl';","763":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY paper.paperId HAVING COUNT(DISTINCT author.authorId) = 2;","764":"SELECT lake.lake_name FROM lake JOIN border_info ON lake.state_name = border_info.state_name WHERE border_info.border = 'Texas';","765":"SELECT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Luke Zettlemoyer';","766":"SELECT paper.title, paper.numCiting FROM paper ORDER BY paper.numCiting DESC LIMIT 10;","767":"SELECT paper.title FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE journal.journalName = 'NIPS' AND paper.title LIKE '%TAIL%';","768":"SELECT COUNT(*) FROM cite JOIN writes ON cite.citingPaperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Mirella Lapata';","769":"SELECT paper.title, paper.numCiting FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'dependent types' ORDER BY paper.numCiting DESC;","770":"SELECT author.authorName, COUNT(paper.paperId) AS paper_count\nFROM writes\nJOIN paper ON writes.paperId = paper.paperId\nJOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nJOIN author ON writes.authorId = author.authorId\nWHERE keyphrase.keyphraseName = 'syntactic parsing'\nGROUP BY author.authorId, author.authorName\nORDER BY COUNT(paper.paperId) DESC\nLIMIT 1;","771":"SELECT mountain.mountain_name, mountain.country_name, mountain.state_name FROM mountain;","772":"SELECT city.population FROM state JOIN city ON state.capital = city.city_name WHERE state.area = (SELECT MAX(area) FROM state);","773":"SELECT highlow.highest_elevation, highlow.lowest_elevation FROM highlow WHERE highlow.state_name = 'Death Valley';","774":"SELECT city.city_name, city.population FROM city JOIN river ON city.state_name = river.traverse ORDER BY city.population DESC LIMIT 1;","775":"SELECT author.authorName, COUNT(paper.paperId) AS numPapers FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' GROUP BY author.authorName ORDER BY numPapers DESC LIMIT 1;","776":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","777":"SELECT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Luke Zettlemoyer';","778":"SELECT DISTINCT k.keyphraseName, p.year\nFROM author a\nINNER JOIN writes w ON a.authorId = w.authorId\nINNER JOIN paper p ON w.paperId = p.paperId\nINNER JOIN paperKeyphrase pk ON p.paperId = pk.paperId\nINNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE a.authorName = 'Luke S Zettlemoyer'\nORDER BY p.year, k.keyphraseName;","779":"SELECT AVG(population) AS avg_population\nFROM state;","780":"SELECT city.city_name FROM city JOIN state ON city.state_name = state.state_name WHERE state.area = (SELECT MIN(area) FROM state) ORDER BY city.population ASC LIMIT 1;","781":"SELECT COUNT(*) FROM border_info WHERE border = 'Colorado' OR border = 'New Mexico';","782":"SELECT paper.paperId, paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","783":"SELECT highlow.highest_point FROM highlow JOIN state ON highlow.state_name = state.state_name WHERE state.area = (SELECT MIN(area) FROM state);","784":"SELECT venue.venueName FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'li dong') AND paper.year = 2016;","785":"SELECT COUNT(city.city_name) FROM city JOIN state ON city.state_name = state.state_name WHERE state.state_name = 'Texas';","786":"SELECT state.state_name FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Rio Grande' ORDER BY state.area DESC LIMIT 1;","787":"SELECT state.state_name, river.length FROM river JOIN state ON river.traverse = state.state_name ORDER BY river.length ASC LIMIT 1;","788":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2014 AND venue.venueName = 'ACL';","789":"SELECT COUNT(*) AS citation_count FROM cite WHERE citedPaperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'noah smith'));","790":"SELECT river.river_name FROM river JOIN border_info ON river.traverse = border_info.state_name WHERE border_info.border = (SELECT state_name FROM state ORDER BY population DESC LIMIT 1);","791":"SELECT COUNT(DISTINCT state.state_name) FROM state JOIN river ON state.state_name = river.traverse;","792":"SELECT writes.authorId, COUNT(cite.citedPaperId) AS citation_count FROM writes JOIN cite ON writes.paperId = cite.citedPaperId GROUP BY writes.authorId ORDER BY citation_count DESC LIMIT 1;","793":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'Ed Desmond') AND keyphrase.keyphraseName = 'Semantic Parsing';","794":"SELECT paper.title FROM writes JOIN author AS a1 ON writes.authorId = a1.authorId JOIN author AS a2 ON writes.authorId = a2.authorId JOIN paper ON writes.paperId = paper.paperId WHERE a1.authorName = 'Peter Mertens' AND a2.authorName = 'Dina Barbian';","795":"SELECT state.state_name FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Austin';","796":"SELECT COUNT(*) AS total_papers FROM paper;","797":"SELECT river.river_name FROM river ORDER BY river.length ASC LIMIT 1;","798":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","799":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Daniella Coelho';","800":"SELECT paper.title FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'Sharon Goldwater';","801":"SELECT COUNT(DISTINCT state.state_name) FROM river JOIN state ON river.traverse = state.state_name WHERE river.river_name = 'Missouri';","802":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'sharon goldwater';","803":"SELECT river_name, length FROM river WHERE traverse = (SELECT state_name FROM highlow WHERE highest_point = (SELECT MAX(highest_point) FROM highlow));","804":"SELECT COUNT(*) FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'ImageNet';","805":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'brian curless') AND keyphrase.keyphraseName = 'convolution';","806":"SELECT DISTINCT b2.state_name FROM border_info b1 JOIN border_info b2 ON b1.border = b2.state_name WHERE b1.state_name = 'Florida';","807":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE venue.venueName = 'acl' AND paper.year = 2012 AND keyphrase.keyphraseName = 'Parsing';","808":"SELECT MAX(state.area) AS largest_state_area FROM state;","809":"SELECT COUNT(DISTINCT state.state_name) FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","810":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN author ON writes.authorId = author.authorId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'brian curless' AND keyphrase.keyphraseName = 'convolution';","811":"SELECT COUNT(paperId) AS number_of_papers FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Christopher D. Manning');","812":"SELECT COUNT(DISTINCT state.state_name) FROM city JOIN state ON city.state_name = state.state_name WHERE city.city_name = 'Springfield';","813":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","814":"SELECT MAX(highest_elevation) \nFROM highlow \nWHERE state_name = 'Texas';","815":"SELECT highlow.state_name FROM highlow ORDER BY highlow.highest_elevation DESC LIMIT 1;","816":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'chi';","817":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2015 AND author.authorName = 'Liwen Xiong';","818":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'chi';","819":"SELECT COUNT(*) AS city_count FROM city WHERE city.city_name = 'Austin';","820":"SELECT COUNT(paperId) FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Christopher D. Manning');","821":"SELECT COUNT(DISTINCT state.state_name) FROM river JOIN state ON river.traverse = state.state_name WHERE river.length = (SELECT MIN(length) FROM river);","822":"SELECT writes.paperId FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Sharon Goldwater';","823":"SELECT COUNT(*) FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'ImageNet';","824":"SELECT border_info.state_name FROM border_info JOIN river ON border_info.state_name = river.traverse WHERE border_info.border = 'Texas';","825":"SELECT COUNT(*) FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Christopher D. Manning');","826":"SELECT writes.paperId FROM writes JOIN author ON writes.authorId = author.authorId WHERE author.authorName IN ('Peter Mertens', 'Dina Barbian') GROUP BY writes.paperId HAVING COUNT(DISTINCT author.authorId) = 2;","827":"SELECT paper.paperId FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Mirella Lapata' AND paper.year = 2016;","828":"SELECT user.uid FROM user JOIN tip ON user.uid = tip.user_id JOIN business ON tip.business_id = business.business_id JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Pet Groomers';","829":"SELECT DISTINCT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'sensor fusion';","830":"SELECT business.business_id, business.name FROM business WHERE business.rating > 4.5;","831":"SELECT paper.paperId, paper.numCiting FROM paper ORDER BY paper.numCiting DESC;","832":"SELECT DISTINCT coauthor.authorName FROM author AS coauthor JOIN writes AS w ON coauthor.authorId = w.authorId JOIN paper AS p ON w.paperId = p.paperId WHERE p.title LIKE '%Machine Translation Output%' AND coauthor.authorName != 'Philipp Koehn';","833":"SELECT paperDataset.datasetId FROM paperDataset JOIN writes ON paperDataset.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Jitendra Malik';","834":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2007 AND venue.venueName = 'CVPR' GROUP BY author.authorId ORDER BY COUNT(paper.paperId) DESC LIMIT 1;","835":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2016 AND keyphrase.keyphraseName = 'Bacterial Wilt';","836":"SELECT business.* FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.user_id WHERE business.city = 'Dallas' AND user.name = 'Patrick';","837":"SELECT journal.journalName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN journal ON paper.journalId = journal.journalId WHERE author.authorName = 'Linda Shapiro';","838":"SELECT business.state, SUM(checkin.COUNT) AS total_checkins FROM category JOIN business ON category.business_id = business.business_id JOIN checkin ON checkin.business_id = business.business_id WHERE category.category_name = 'Italian Deli' AND checkin.day = 'Sunday' GROUP BY business.state;","839":"SELECT COUNT(*) FROM review JOIN user ON review.user_id = user.user_id WHERE user.name = 'Michelle' AND review.year = 2014 AND review.month = 3;","840":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2016 AND paper.title LIKE '%neural attention%';","841":"SELECT business.name, business.rating FROM business JOIN category ON business.business_id = category.business_id WHERE business.rating = 5 AND category.category_name = 'Italian';","842":"SELECT DISTINCT a.authorName FROM author a JOIN writes w ON a.authorId = w.authorId WHERE w.paperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Noah A Smith'));","843":"SELECT DISTINCT author.authorName\nFROM author\nJOIN writes ON author.authorId = writes.authorId\nJOIN paper ON writes.paperId = paper.paperId\nJOIN paperDataset ON paper.paperId = paperDataset.paperId\nJOIN dataset ON paperDataset.datasetId = dataset.datasetId\nWHERE dataset.datasetName = 'ImageNet';","844":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year ASC LIMIT 1;","845":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId JOIN paper ON paperDataset.paperId = paper.paperId WHERE paper.title LIKE '%semantic parsing%';","846":"SELECT paper.year, COUNT(*) AS num_papers FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ye Cao' GROUP BY paper.year ORDER BY num_papers DESC LIMIT 1;","847":"SELECT paper.year, COUNT(*) AS num_papers FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS' GROUP BY paper.year ORDER BY num_papers DESC LIMIT 1;","848":"SELECT business.name FROM business JOIN neighbourhood ON neighbourhood.business_id = business.business_id JOIN category ON category.business_id = business.business_id WHERE category.category_name = 'Italian' AND neighbourhood.neighbourhood_name = 'Meadowood' AND business.city = 'Madison';","849":"SELECT SUM(tip.likes) AS total_likes FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Niloofar';","850":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year DESC LIMIT 1;","851":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","852":"SELECT paper.paperId FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'ali farhadi' AND venue.venueName = 'eccv' AND paper.year = 2016;","853":"SELECT DISTINCT paper.title, paper.year\nFROM paper\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nINNER JOIN journal ON paper.journalId = journal.journalId\nWHERE author.authorName = 'Richard Ladner' AND journal.journalName = 'chi';","854":"SELECT COUNT(*) FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE dataset.datasetName = 'ImageNet' AND keyphrase.keyphraseName = 'deep learning';","855":"SELECT DISTINCT a2.authorName FROM author a1 JOIN writes w ON a1.authorId = w.authorId JOIN writes w2 ON w.paperId = w2.paperId JOIN author a2 ON w2.authorId = a2.authorId WHERE a1.authorName = 'Noah A Smith' AND a2.authorName <> 'Noah A Smith';","856":"SELECT review.* FROM review JOIN user ON review.user_id = user.user_id WHERE user.name = 'Niloofar';","857":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Ali Farhadi' AND paper.year = 2016 AND venue.venueName = 'eccv';","858":"SELECT paper.paperId FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'sigcomm' ORDER BY paper.numCitedBy DESC LIMIT 1;","859":"SELECT author.authorName, COUNT(paper.paperId) AS publication_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year > 2005 AND keyphrase.keyphraseName = 'semantic parsing' GROUP BY author.authorName ORDER BY publication_count DESC LIMIT 1;","860":"SELECT COUNT(*) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE journal.journalName = 'Nature Communications' AND paper.year = 2015;","861":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId WHERE paperKeyphrase.keyphraseId IN (SELECT keyphraseId FROM keyphrase WHERE keyphraseName LIKE '%deep learning%') ORDER BY paper.year DESC;","862":"SELECT * FROM business WHERE business.state = 'Texas' AND business.rating < 2;","863":"SELECT SUM(checkin.COUNT) FROM business JOIN checkin ON business.business_id = checkin.business_id WHERE business.city = 'Los Angeles' AND business.name LIKE '%Moroccan%';","864":"SELECT review.rating, review.text, review.year, review.month FROM review JOIN business ON business.business_id = review.business_id JOIN category ON category.business_id = business.business_id WHERE category.category_name = 'Pet Groomers' AND business.review_count > 100;","865":"SELECT paper.year, COUNT(*) AS num_papers FROM writes JOIN paper ON writes.paperId = paper.paperId WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Jamie Callan') GROUP BY paper.year;","866":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","867":"SELECT COUNT(*) AS restaurant_count FROM business WHERE business.rating > 3.5;","868":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE paper.year = 2014 AND venue.venueName = 'eccv' AND dataset.datasetName = 'ImageNet';","869":"SELECT COUNT(tip.tip_id) AS tips_count FROM tip JOIN user ON tip.user_id = user.user_id WHERE tip.month = 'April' AND user.name = 'Michelle';","870":"SELECT user.uid, user.user_id, user.name FROM user JOIN review ON user.user_id = review.user_id JOIN business ON review.business_id = business.business_id WHERE business.name = 'Mesa Grill';","871":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'pldi' AND paper.year = 2015;","872":"SELECT * FROM business WHERE business.city = 'Dallas' AND business.rating > 4.5;","873":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2012 AND venue.venueName = 'EMNLP-CoNLL' ORDER BY paper.numCiting DESC LIMIT 1;","874":"SELECT COUNT(review.rid) AS review_count FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Cafe Zinho' AND business.state = 'Texas';","875":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId JOIN paper ON paperDataset.paperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'jitendra malik';","876":"SELECT DISTINCT venue.venueName FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN venue ON paper.venueId = venue.venueId WHERE keyphrase.keyphraseName = 'Trophic Cascade';","877":"SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'Stone Meadows' AND business.city = 'Madison';","878":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ohad Shamir' ORDER BY paper.numCitedBy DESC LIMIT 1;","879":"SELECT keyphrase.keyphraseName, COUNT(*) AS frequency FROM paperKeyphrase JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2015 AND paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'NIPS') GROUP BY keyphrase.keyphraseName ORDER BY frequency DESC;","880":"SELECT tip.text FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Vintner Grill' AND tip.likes > 9;","881":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2014 AND paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'eccv') AND keyphrase.keyphraseName = 'ImageNet';","882":"SELECT paper.title FROM paper WHERE paper.year = 2016;","883":"SELECT paper.title FROM paper WHERE paper.title LIKE '%WebKB%';","884":"SELECT paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Richard Ladner' AND venue.venueName = 'chi';","885":"SELECT paper.title, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'parsing' ORDER BY paper.numCitedBy DESC;","886":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'sigir';","887":"SELECT paper.title FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE paper.year = 2014 AND paper.title LIKE '%Parsing%' AND dataset.datasetName = 'Jeopardy! Questions';","888":"SELECT paper.paperId FROM paper WHERE paper.year = 2014;","889":"SELECT COUNT(paper.paperId)\nFROM paper\nJOIN venue ON paper.venueId = venue.venueId\nJOIN cite ON cite.citedPaperId = paper.paperId\nWHERE paper.year = 2012 AND venue.venueName = 'ACL'\nGROUP BY paper.paperId\nHAVING COUNT(cite.citingPaperId) > 7;","890":"SELECT COUNT(paper.paperId) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'ACL';","891":"SELECT business.name, business.review_count, business.rating FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Los Angeles' AND business.review_count >= 30 AND business.rating > 3 AND category.category_name = 'Bars';","892":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year DESC LIMIT 1;","893":"SELECT DISTINCT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Peter Mertens';","894":"SELECT paper.title FROM paper WHERE paper.year < 2010;","895":"SELECT paper.title, keyphrase.keyphraseName FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","896":"SELECT business.city FROM business WHERE business.state = 'Texas' AND business.name = 'MGM Grand Buffet';","897":"SELECT MIN(p.year)\nFROM paper p\nINNER JOIN writes w ON p.paperId = w.paperId\nINNER JOIN author a ON w.authorId = a.authorId\nWHERE a.authorName = 'benjamin mako hill';","898":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'nature communications' AND paper.year = 2015;","899":"SELECT DISTINCT user.uid, user.name FROM user JOIN review ON user.uid = review.user_id JOIN business ON review.business_id = business.business_id JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'restaurant';","900":"SELECT paper.title, paperDataset.datasetId FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId WHERE paper.title LIKE '%semantic parsing%';","901":"SELECT paper.title, journal.journalName FROM paper JOIN journal ON paper.journalId = journal.journalId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'instance segmentation';","902":"SELECT business.business_id, business.name FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'Pennsylvania' AND category.category_name = 'restaurant';","903":"SELECT neighbourhood.neighbourhood_name FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id JOIN category ON business.business_id = category.business_id WHERE business.city = 'Madison' AND business.rating < 2.5 AND category.category_name = 'Italian';","904":"SELECT paper.title FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.numCiting < 5 AND journal.journalName = 'ACL';","905":"SELECT paper.title, author.authorName FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Eric C. Kerrigan' AND paper.title = 'Liquid Automatica';","906":"SELECT DISTINCT venue.venueName FROM venue JOIN paper ON venue.venueId = paper.venueId WHERE venue.venueName LIKE '%NLP%';","907":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Peter Mertens';","908":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","909":"SELECT DISTINCT journal.journalName FROM journal JOIN paper ON journal.journalId = paper.journalId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Takashi Matsumoto';","910":"SELECT paper.* FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Mirella Lapata' ORDER BY paper.year DESC LIMIT 5;","911":"SELECT DISTINCT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId JOIN paper ON paperDataset.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'ACL';","912":"SELECT keyphrase.keyphraseName FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2014 AND venue.venueName = 'ACL';","913":"SELECT COUNT(*) FROM review JOIN business ON review.business_id = business.business_id WHERE review.year = 2015 AND business.name = 'Bistro Di Napoli';","914":"SELECT author.authorName, venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Richard Ladner' AND venue.venueName = 'chi';","915":"SELECT paper.title, paper.numCitedBy FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ohad Shamir' ORDER BY paper.numCitedBy DESC LIMIT 1;","916":"SELECT DISTINCT coauthors.authorName FROM writes JOIN author AS coauthors ON writes.authorId = coauthors.authorId WHERE writes.paperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Noah A Smith')) AND coauthors.authorName != 'Noah A Smith';","917":"SELECT COUNT(*) AS escape_game_count FROM business WHERE business.city = 'Madison' AND business.name LIKE '%escape%';","918":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'Nature Communications';","919":"SELECT paper.title FROM paper WHERE paper.title LIKE '%deep learning%' ORDER BY paper.year ASC LIMIT 1;","920":"SELECT COUNT(paper.paperId)\nFROM paper\nINNER JOIN journal ON paper.journalId = journal.journalId\nWHERE journal.journalName = 'Cell'\nAND paper.year = strftime('%Y', 'now');","921":"SELECT author.authorName, COUNT(paper.paperId) AS paper_count FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.title LIKE '%semantic parsing%' AND paper.year > 2005 GROUP BY author.authorId ORDER BY paper_count DESC LIMIT 1;","922":"SELECT paper.year, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year ASC LIMIT 1;","923":"SELECT citedPaperId FROM cite;","924":"SELECT MIN(p.year) AS first_publication_year\nFROM paper p\nINNER JOIN writes w ON p.paperId = w.paperId\nINNER JOIN author a ON w.authorId = a.authorId\nWHERE a.authorName = 'benjamin mako hill';","925":"SELECT business.name, business.city, business.state FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Valet Service' AND business.city = 'Dallas' AND business.state = 'Texas';","926":"SELECT paper.paperId FROM paper WHERE paper.numCitedBy >= 5;","927":"SELECT tip.text FROM tip JOIN review ON tip.user_id = review.user_id WHERE review.year = 2012;","928":"SELECT business.business_id, business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Seafood' AND business.city = 'Los Angeles';","929":"SELECT writes.authorId, COUNT(paper.paperId) AS numPapers FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2007 AND venue.venueName = 'CVPR' GROUP BY writes.authorId ORDER BY numPapers DESC LIMIT 1;","930":"SELECT DISTINCT p.title\nFROM paper p\nJOIN paperKeyphrase pk ON p.paperId = pk.paperId\nJOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nLEFT JOIN writes w ON p.paperId = w.paperId\nLEFT JOIN author a ON w.authorId = a.authorId\nWHERE k.keyphraseName = 'syntactic parsing'\nAND p.paperId NOT IN (\n    SELECT p2.paperId\n    FROM paper p2\n    JOIN writes w2 ON p2.paperId = w2.paperId\n    JOIN author a2 ON w2.authorId = a2.authorId\n    WHERE a2.authorName = 'Chris Dyer'\n);","931":"SELECT paper.year, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'semantic parsing' GROUP BY paper.year, paper.title;","932":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year < 2010 AND keyphrase.keyphraseName LIKE '%character recognition%';","933":"SELECT business.name, business.full_address FROM business JOIN category ON category.business_id = business.business_id WHERE business.city = 'Los Angeles' AND category.category_name = 'Seafood';","934":"SELECT paper.title, paper.year, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperDataset ON paperDataset.paperId = paper.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE paper.year = 2014 AND venue.venueName = 'eccv' AND dataset.datasetName = 'ImageNet';","935":"SELECT DISTINCT author.authorName\nFROM writes\nJOIN paper ON writes.paperId = paper.paperId\nJOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nJOIN author ON writes.authorId = author.authorId\nWHERE paper.year = 2016\nAND keyphrase.keyphraseName = 'Bacterial Wilt';","936":"SELECT keyphrase.keyphraseName, COUNT(cite.citedPaperId) AS citationCount FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN cite ON paperKeyphrase.paperId = cite.citedPaperId GROUP BY keyphrase.keyphraseId ORDER BY citationCount DESC;","937":"SELECT author.authorId, COUNT(paper.paperId) AS numPapers FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'chi') GROUP BY author.authorId ORDER BY numPapers DESC LIMIT 1;","938":"SELECT paper.year, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year DESC;","939":"SELECT tip.text FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Cafe Zinho' AND business.state = 'Pennsylvania' AND tip.year = 2010;","940":"SELECT COUNT(DISTINCT p.paperId) \nFROM paper p\nJOIN cite c ON p.paperId = c.citedPaperId\nJOIN venue v ON p.venueId = v.venueId\nWHERE v.venueName = 'ACL'\nGROUP BY p.paperId\nHAVING COUNT(c.citingPaperId) > 2;","941":"SELECT DISTINCT journal.journalName FROM journal JOIN paper ON paper.journalId = journal.journalId JOIN paperKeyphrase ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Temporal Data';","942":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId JOIN paper ON paperDataset.paperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'jitendra malik';","943":"SELECT paper.year, COUNT(*) AS num_papers FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS' GROUP BY paper.year ORDER BY num_papers DESC LIMIT 1;","944":"SELECT cite.citingPaperId FROM writes JOIN cite ON writes.paperId = cite.citingPaperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Daniel Jurafsky';","945":"SELECT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'emnlp') AND author.authorName = 'dan klein';","946":"SELECT paper.paperId FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName = 'WebKB';","947":"SELECT business.state FROM business WHERE business.name = 'Whataburger';","948":"SELECT paper.year, COUNT(*) AS num_papers FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ye Cao' GROUP BY paper.year ORDER BY num_papers DESC LIMIT 1;","949":"SELECT venue.venueName FROM venue JOIN paper ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","950":"SELECT SUM(tip.likes) AS total_likes FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Cafe Zinho';","951":"SELECT paper.year, COUNT(paper.paperId) AS num_papers FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'jamie callan' GROUP BY paper.year;","952":"SELECT author.authorId, author.authorName, COUNT(paper.paperId) AS num_ACL_papers\nFROM paper\nJOIN writes ON paper.paperId = writes.paperId\nJOIN author ON writes.authorId = author.authorId\nJOIN venue ON paper.venueId = venue.venueId\nWHERE venue.venueName = 'ACL'\nGROUP BY author.authorId, author.authorName;","953":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId;","954":"SELECT business.* FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.user_id WHERE review.rating = 5 AND user.name = 'Niloofar';","955":"SELECT business.name, business.rating FROM business WHERE business.rating > 3.5;","956":"SELECT paper.paperId, paper.title, paper.numCiting, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId ORDER BY paper.numCiting DESC;","957":"SELECT COUNT(*) AS total_reviews FROM review WHERE review.month = 'March';","958":"SELECT paper.title, venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2014 AND venue.venueName = 'ACL';","959":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","960":"SELECT paper.title FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'Richard Ladner') AND venue.venueName = 'chi';","961":"SELECT business.name, review.rating, review.text\nFROM review\nJOIN user ON review.user_id = user.user_id\nJOIN business ON review.business_id = business.business_id\nJOIN category ON business.business_id = category.business_id\nWHERE user.name = 'Michelle' AND category.category_name = 'Italian';","962":"SELECT paper.year, COUNT(*) AS number_of_papers FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'jamie callan' GROUP BY paper.year;","963":"SELECT user.uid FROM user WHERE user.name = 'Michelle';","964":"SELECT DISTINCT journal.journalName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN journal ON paper.journalId = journal.journalId WHERE author.authorName = 'Linda Shapiro';","965":"SELECT DISTINCT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId;","966":"SELECT paper.year, paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'jamie callan' ORDER BY paper.year;","967":"SELECT tip.year, tip.month, COUNT(*) AS tip_count FROM tip GROUP BY tip.year, tip.month;","968":"SELECT paper.paperId, paper.title FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName = 'WebKB';","969":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'NIPS');","970":"SELECT paper.title, paperDataset.datasetId FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId WHERE paper.title LIKE '%semantic parsing%';","971":"SELECT SUM(checkin.count)\nFROM business\nJOIN checkin ON business.business_id = checkin.business_id\nJOIN category ON business.business_id = category.business_id\nWHERE business.city = 'Los Angeles'\nAND checkin.day = 'Friday'\nAND category.category_name = 'Moroccan'\nAND EXISTS (\n    SELECT 1\n    FROM category c2\n    WHERE c2.business_id = business.business_id\n    AND c2.category_name = 'restaurant'\n);","972":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'WebKB';","973":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","974":"SELECT paperDataset.datasetId FROM author JOIN writes ON author.authorId = writes.authorId JOIN paperDataset ON writes.paperId = paperDataset.paperId WHERE author.authorName = 'Jitendra Malik';","975":"SELECT keyphrase.keyphraseName, COUNT(*) AS frequency FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2015 AND paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'NIPS') GROUP BY keyphrase.keyphraseName ORDER BY frequency DESC;","976":"SELECT paper.* FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Su-In Lee' AND paper.year < 2012;","977":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'ohad shamir' ORDER BY paper.numCitedBy DESC LIMIT 1;","978":"SELECT paper.paperId FROM paper WHERE paper.year = 2023;","979":"SELECT COUNT(DISTINCT paper.paperId)\nFROM paper\nJOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE paper.year = EXTRACT(YEAR FROM CURRENT_DATE) - 1\nAND keyphrase.keyphraseName = 'convolutional neural networks';","980":"SELECT paper.title, paper.year FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE paper.year = 2014 AND dataset.datasetName = 'ImageNet';","981":"SELECT paper.paperId FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'ohad shamir' ORDER BY paper.numCitedBy DESC LIMIT 1;","982":"SELECT author.authorId, COUNT(paper.paperId) AS paper_count\nFROM paper\nJOIN venue ON paper.venueId = venue.venueId\nJOIN writes ON paper.paperId = writes.paperId\nJOIN author ON writes.authorId = author.authorId\nWHERE venue.venueName = 'ACL'\nGROUP BY author.authorId;","983":"SELECT paper.title FROM paper ORDER BY paper.numCiting DESC LIMIT 1;","984":"SELECT COUNT(*) AS restaurant_count FROM business WHERE business.full_address LIKE '%Hazelwood%' AND business.city = 'Dallas';","985":"SELECT DISTINCT a2.authorName FROM author a1 JOIN writes w ON a1.authorId = w.authorId JOIN writes w2 ON w.paperId = w2.paperId JOIN author a2 ON w2.authorId = a2.authorId WHERE a1.authorName = 'Noah A Smith' AND a2.authorName != 'Noah A Smith';","986":"SELECT DISTINCT neighbourhood.neighbourhood_name, business.name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id JOIN category ON business.business_id = category.business_id WHERE business.city = 'Madison' AND category.category_name = 'Italian';","987":"SELECT * FROM business WHERE business.rating = 3.5;","988":"SELECT k.keyphraseName, COUNT(*) AS frequency\nFROM paper p\nINNER JOIN paperKeyphrase pk ON p.paperId = pk.paperId\nINNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nINNER JOIN venue v ON p.venueId = v.venueId\nWHERE p.year = 2015 AND v.venueName = 'NIPS'\nGROUP BY k.keyphraseName\nORDER BY frequency DESC;","989":"SELECT paper.paperId, paper.numCitedBy FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'ohad shamir' ORDER BY paper.numCitedBy DESC LIMIT 1;","990":"SELECT author.authorName, COUNT(DISTINCT paper.paperId) AS paper_count\nFROM writes\nJOIN paper ON writes.paperId = paper.paperId\nJOIN venue ON paper.venueId = venue.venueId\nJOIN author ON writes.authorId = author.authorId\nWHERE venue.venueName = 'chi'\nGROUP BY author.authorId\nORDER BY paper_count DESC\nLIMIT 1;","991":"SELECT DISTINCT a2.authorName FROM author a1 JOIN writes w1 ON a1.authorId = w1.authorId JOIN writes w2 ON w1.paperId = w2.paperId JOIN author a2 ON w2.authorId = a2.authorId WHERE a1.authorName = 'Noah A Smith' AND a2.authorName <> 'Noah A Smith';","992":"SELECT paper.title, paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Michael Stonebraker' AND paper.title = 'GIS Database';","993":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Michael I. Jordan' AND paper.year = 2016;","994":"SELECT journal.journalName, paper.title FROM paper JOIN journal ON paper.journalId = journal.journalId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'sensor fusion';","995":"SELECT DISTINCT user.name FROM user JOIN tip ON user.uid = tip.user_id JOIN business ON tip.business_id = business.business_id WHERE tip.year = 2015 AND business.name = 'Barrio Cafe';","996":"SELECT DISTINCT author.authorName\nFROM author\nJOIN writes ON author.authorId = writes.authorId\nJOIN paper ON writes.paperId = paper.paperId\nWHERE paper.year = 2015;","997":"SELECT COUNT(*) FROM business JOIN category ON category.business_id = business.business_id WHERE category.category_name = 'restaurant';","998":"SELECT DISTINCT venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2013;","999":"SELECT author.authorId, author.authorName FROM author JOIN writes ON author.authorId = writes.authorId GROUP BY author.authorId, author.authorName HAVING COUNT(writes.paperId) >= 5;","1000":"SELECT paper.paperId FROM paper WHERE paper.numCitedBy > 10;","1001":"SELECT COUNT(*) AS number_of_users FROM user WHERE user.name = 'Michelle';","1002":"SELECT p.title, COUNT(c.citedPaperId) AS numCiting\nFROM paper p\nINNER JOIN venue v ON p.venueId = v.venueId\nLEFT JOIN cite c ON p.paperId = c.citedPaperId\nWHERE v.venueName = 'CVPR' AND p.year = YEAR(CURRENT_DATE)\nGROUP BY p.title\nORDER BY numCiting DESC\nLIMIT 1;","1003":"SELECT DISTINCT a.authorName FROM author a JOIN writes w ON a.authorId = w.authorId JOIN paper p ON w.paperId = p.paperId WHERE p.paperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Noah A Smith')) AND a.authorName != 'Noah A Smith';","1004":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId JOIN paper ON paperDataset.paperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Jitendra Malik';","1005":"SELECT DISTINCT a.authorName FROM author a JOIN writes w ON a.authorId = w.authorId WHERE w.paperId IN (SELECT w2.paperId FROM writes w2 JOIN author a2 ON w2.authorId = a2.authorId WHERE a2.authorName = 'Noah A Smith');","1006":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'Samuel Madden') AND venue.venueName <> 'PVLDB';","1007":"SELECT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Brian DeRenzi' GROUP BY keyphrase.keyphraseName ORDER BY SUM(paper.numCitedBy) DESC LIMIT 1;","1008":"SELECT neighbourhood.neighbourhood_name FROM business JOIN neighbourhood ON neighbourhood.business_id = business.business_id WHERE business.name = 'Flat Top Grill';","1009":"SELECT paperDataset.datasetId, COUNT(*) AS usage_count FROM paperDataset JOIN paper ON paperDataset.paperId = paper.paperId GROUP BY paperDataset.datasetId ORDER BY usage_count DESC;","1010":"SELECT business.name, business.full_address FROM business WHERE business.city = 'Los Angeles';","1011":"SELECT author.authorName, COUNT(paper.paperId) AS paperCount FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE keyphrase.keyphraseName = 'ImageNet' GROUP BY author.authorId, author.authorName ORDER BY paperCount DESC;","1012":"SELECT COUNT(*) FROM paper WHERE paper.title LIKE '%convolutional neural networks%' AND paper.year = 2022;","1013":"SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.user_id WHERE user.name = 'Michelle' AND tip.year = 2010;","1014":"SELECT COUNT(*) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2015 AND journal.journalName = 'nature communications';","1015":"SELECT paper.title, paper.year, paper.numCiting, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'WebKB';","1016":"SELECT COUNT(*) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2015 AND journal.journalName = 'Nature Communications';","1017":"SELECT DISTINCT a.authorName FROM writes w JOIN author a ON w.authorId = a.authorId WHERE w.paperId IN ( SELECT w1.paperId FROM writes w1 WHERE w1.authorId IN ( SELECT authorId FROM author WHERE authorName IN ('Ameet Soni', 'Ras Bodik') ) ) AND a.authorName NOT IN ('Ameet Soni', 'Ras Bodik');","1018":"SELECT paper.title FROM paper WHERE paper.year = 2015 AND paper.title LIKE '%PLDI Best Paper Award%';","1019":"SELECT review_count\nFROM business\nWHERE LOWER(TRIM(name)) = LOWER(TRIM('Acacia Cafe'));","1020":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'pldi' AND paper.year = 2015;","1021":"SELECT paper.title, paper.numCitedBy, paper.year, paper.venueId FROM paper WHERE paper.title LIKE '%parsing%' ORDER BY paper.numCitedBy DESC LIMIT 1;","1022":"SELECT business.full_address FROM business WHERE business.city = 'Los Angeles' AND business.name = 'Walmart';","1023":"SELECT COUNT(paper.paperId) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'ACL';","1024":"SELECT keyphrase.keyphraseName, COUNT(*) AS popularity FROM paperKeyphrase JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2015 AND paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'NIPS') GROUP BY keyphrase.keyphraseName ORDER BY popularity DESC;","1025":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'nature communications' AND paper.year = 2015;","1026":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1027":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'Nature Communications';","1028":"SELECT COUNT(*) FROM writes JOIN paper ON writes.paperId = paper.paperId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'michael i. jordan') AND paper.year = 2016;","1029":"SELECT journal.journalName FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN journal ON paper.journalId = journal.journalId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'Donald E Knuth') ORDER BY paper.year DESC LIMIT 1;","1030":"SELECT DISTINCT journal.journalName FROM journal JOIN paper ON paper.journalId = journal.journalId JOIN writes ON writes.paperId = paper.paperId JOIN author ON author.authorId = writes.authorId WHERE author.authorName = 'Takashi Matsumoto';","1031":"SELECT paper.paperId, paper.numCitedBy FROM paper WHERE paper.title LIKE '%parsing%' ORDER BY paper.numCitedBy DESC LIMIT 10;","1032":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1033":"SELECT COUNT(*) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Texas de Brazil' AND business.city = 'Dallas' AND business.state = 'Texas';","1034":"SELECT COUNT(*)\nFROM paper\nJOIN venue ON paper.venueId = venue.venueId\nWHERE venue.venueName = 'Nature Communications' \nAND paper.year = EXTRACT(YEAR FROM CURRENT_DATE) - 1;","1035":"SELECT COUNT(*) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2015 AND journal.journalName = 'Nature Communications';","1036":"SELECT COUNT(DISTINCT neighbourhood.id) FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id WHERE business.rating = 5 AND business.city = 'Madison';","1037":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.numCitedBy < 5 AND venue.venueName LIKE '%ACL%';","1038":"SELECT COUNT(*) AS egyptian_restaurant_count FROM business WHERE business.name LIKE '%Egyptian%' AND business.city = 'Edinburgh';","1039":"SELECT COUNT(cite.citedPaperId) AS citation_count FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId LEFT JOIN cite ON cite.citedPaperId = paper.paperId WHERE paper.title = 'Genetic Identity' AND author.authorName = 'Dan Makumbi';","1040":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Semantic Data';","1041":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'chi' GROUP BY author.authorId, author.authorName ORDER BY COUNT(paper.paperId) DESC LIMIT 1;","1042":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' AND paper.year >= 2021;","1043":"SELECT AVG(review.rating) AS average_rating FROM review JOIN user ON review.user_id = user.user_id WHERE user.name = 'Michelle';","1044":"SELECT cite.citingPaperId FROM cite JOIN paper ON cite.citedPaperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Daniel Jurafsky';","1045":"SELECT author.authorName, COUNT(paper.paperId) AS numPapers FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'CVPR') AND paper.year = 2007 GROUP BY author.authorId ORDER BY numPapers DESC LIMIT 1;","1046":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2016 AND venue.venueName = 'ECCV' AND author.authorName = 'Ali Farhadi';","1047":"SELECT COUNT(*) AS target_count FROM business WHERE business.name = 'Target' AND business.city = 'Los Angeles';","1048":"SELECT user.uid FROM user JOIN review ON user.user_id = review.user_id GROUP BY user.uid HAVING AVG(review.rating) < 3;","1049":"SELECT DISTINCT venue.venueName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE keyphrase.keyphraseName = 'Trophic Cascade';","1050":"SELECT DISTINCT author.authorName, paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'sensor fusion';","1051":"SELECT paper.title FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Richard Ladner' AND venue.venueName = 'chi';","1052":"SELECT COUNT(*) AS number_of_restaurants FROM business WHERE business.state = 'Texas';","1053":"SELECT paper.title FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName = 'WebKB';","1054":"SELECT a2.authorName FROM author a1 JOIN writes w ON a1.authorId = w.authorId JOIN writes w2 ON w.paperId = w2.paperId JOIN author a2 ON w2.authorId = a2.authorId WHERE a1.authorName = 'Noah A Smith' AND a2.authorName != 'Noah A Smith';","1055":"SELECT paper.year, paper.title FROM paper WHERE paper.title LIKE '%deep learning%';","1056":"SELECT COUNT(DISTINCT business.city) AS city_count FROM business WHERE business.name = 'Panda Express';","1057":"SELECT COUNT(*) AS total_tips FROM tip WHERE tip.year = 2015;","1058":"SELECT DISTINCT a.authorName FROM author a JOIN writes w ON a.authorId = w.authorId WHERE w.paperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Noah A Smith')) AND a.authorName != 'Noah A Smith';","1059":"SELECT COUNT(*) FROM business JOIN category ON category.business_id = business.business_id WHERE business.city = 'Madison' AND category.category_name = 'escape games';","1060":"SELECT COUNT(DISTINCT p.paperId)\nFROM paper p\nINNER JOIN paperKeyphrase pk ON p.paperId = pk.paperId\nINNER JOIN keyphrase k ON pk.keyphraseId = k.keyphraseId\nWHERE k.keyphraseName = 'convolutional neural networks'\nAND p.year = YEAR(CURDATE());","1061":"SELECT COUNT(*) AS number_of_restaurants FROM business WHERE business.rating = 4.5 AND business.city = 'Pittsburgh';","1062":"SELECT paper.paperId, paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2014 AND keyphrase.keyphraseName = 'Jeopardy! Questions';","1063":"SELECT paper.paperId FROM cite JOIN paper ON cite.citedPaperId = paper.paperId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Daniel Jurafsky';","1064":"SELECT writes.authorId, COUNT(paper.paperId) AS acl_paper_count FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN journal ON paper.journalId = journal.journalId WHERE journal.journalName = 'ACL' GROUP BY writes.authorId;","1065":"SELECT paper.paperId, paper.title, paper.numCiting, paper.numCitedBy FROM paper ORDER BY paper.numCiting DESC, paper.numCitedBy DESC;","1066":"SELECT business.city FROM business WHERE business.name = 'Taj Mahal';","1067":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Eric C. Kerrigan';","1068":"SELECT COUNT(*) FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId JOIN venue ON paper.venueId = venue.venueId WHERE dataset.datasetName = 'ImageNet' AND venue.venueName = 'cvpr';","1069":"SELECT COUNT(*) AS starbucks_count FROM business WHERE business.name = 'Starbucks' AND business.city = 'Dallas' AND business.state = 'Texas';","1070":"SELECT keyphrase.keyphraseName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Brian DeRenzi';","1071":"SELECT citedPaperId FROM cite GROUP BY citedPaperId HAVING COUNT(citingPaperId) >= 5;","1072":"SELECT COUNT(paper.paperId) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE journal.journalName = 'sigir';","1073":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","1074":"SELECT business.* FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.user_id JOIN category ON business.business_id = category.business_id WHERE user.name = 'Patrick' AND category.category_name = 'Bars';","1075":"SELECT DISTINCT journal.journalName FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2011;","1076":"SELECT COUNT(*) FROM paper WHERE paper.title LIKE '%convolutional neural networks%' AND paper.year = 2016;","1077":"SELECT venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.title = 'Trophic Cascade';","1078":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN cite ON paper.paperId = cite.citedPaperId JOIN author AS a1 ON writes.authorId = a1.authorId JOIN author AS a2 ON cite.citingPaperId = a2.authorId WHERE a1.authorName = 'Dan Klein' AND a2.authorName = 'Michael I. Jordan';","1079":"SELECT paper.title FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ranjit Jhala';","1080":"SELECT neighbourhood.neighbourhood_name, COUNT(business.business_id) AS business_count FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id WHERE business.city = 'Madison' AND business.is_open = true GROUP BY neighbourhood.neighbourhood_name ORDER BY business_count DESC LIMIT 1;","1081":"SELECT DISTINCT venue.venueName FROM venue JOIN paper ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Neuroscience';","1082":"SELECT business.name, business.is_open FROM business JOIN category ON category.business_id = business.business_id WHERE business.city = 'Los Angeles' AND category.category_name = 'Seafood';","1083":"SELECT DISTINCT a.authorName FROM author a JOIN writes w ON a.authorId = w.authorId WHERE w.paperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Noah A Smith'));","1084":"SELECT paper.title, paper.year FROM paper JOIN journal ON paper.journalId = journal.journalId JOIN venue ON paper.venueId = venue.venueId WHERE paper.title LIKE '%Parsing papers using Jeopardy!%' AND paper.year = 2014;","1085":"SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Los Angeles' AND category.category_name = 'Apple Store';","1086":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1087":"SELECT business.name FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.uid WHERE business.city = 'Dallas' AND user.name = 'Patrick';","1088":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'CVPR' GROUP BY author.authorId, author.authorName ORDER BY SUM(paper.numCitedBy) DESC LIMIT 1;","1089":"SELECT business.city FROM business WHERE business.name = 'MGM Grand Buffet';","1090":"SELECT SUM(checkin.COUNT) FROM checkin JOIN neighbourhood ON checkin.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'Brighton Heights';","1091":"SELECT COUNT(*) AS number_of_papers FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'SIGIR';","1092":"SELECT business.name, business.rating FROM business JOIN category ON business.business_id = category.business_id WHERE business.is_open = 1 AND business.rating >= 3.5 AND category.category_name = 'Mexican' AND business.city = 'Dallas';","1093":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1094":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1095":"SELECT business.* FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.user_id JOIN category ON business.business_id = category.business_id WHERE review.rating >= 3 AND user.name = 'Patrick' AND category.category_name = 'Bars';","1096":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId;","1097":"SELECT COUNT(paper.paperId) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2015 AND journal.journalName = 'Nature Communications';","1098":"SELECT DISTINCT venue.venueName FROM venue JOIN paper ON venue.venueId = paper.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'ImageNet';","1099":"SELECT paper.title, paper.year FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId JOIN paperKeyphrase ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'syntactic parsing' AND author.authorName != 'chris dyer';","1100":"SELECT writes.authorId, COUNT(paper.paperId) AS numPapers FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Machine Learning' GROUP BY writes.authorId ORDER BY numPapers DESC;","1101":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN venue ON paper.venueId = venue.venueId JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE paperKeyphrase.keyphraseId = (SELECT keyphraseId FROM keyphrase WHERE keyphraseName = 'Parsing') AND venue.venueName = 'ACL' AND paper.year = 2014 AND dataset.datasetName = 'Jeopardy! Questions';","1102":"SELECT COUNT(*) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Vintner Grill' AND review.year = 2010;","1103":"SELECT DISTINCT writes.authorId, paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'sensor fusion';","1104":"SELECT business.business_id, business.name FROM business JOIN review ON review.business_id = business.business_id JOIN user ON review.user_id = user.user_id WHERE user.name = 'Niloofar';","1105":"SELECT COUNT(review.rid) FROM review JOIN neighbourhood ON review.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'South Summerlin';","1106":"SELECT review.* FROM review JOIN business ON review.business_id = business.business_id WHERE review.rating = 2.5;","1107":"SELECT business.business_id, business.name FROM business WHERE business.city = 'Los Angeles';","1108":"SELECT venue.venueName FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.title = 'Fracture of acrylic bone cement';","1109":"SELECT DISTINCT author.authorId FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'CVPR' AND paper.year = 2007;","1110":"SELECT DISTINCT author.authorName\nFROM author\nJOIN writes ON author.authorId = writes.authorId\nJOIN paper ON writes.paperId = paper.paperId\nWHERE paper.year = 2015;","1111":"SELECT business.name, business.full_address FROM business WHERE business.state = 'Pennsylvania';","1112":"SELECT DISTINCT user.name FROM user JOIN tip ON user.uid = tip.user_id JOIN business ON tip.business_id = business.business_id WHERE business.city = 'Dallas';","1113":"SELECT paper.year, COUNT(*) AS num_papers FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS' GROUP BY paper.year ORDER BY num_papers DESC LIMIT 1;","1114":"SELECT paper.title FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 1995 AND journal.journalName = 'Academic radiology';","1115":"SELECT paper.year, COUNT(*) AS num_papers FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS' GROUP BY paper.year ORDER BY num_papers DESC LIMIT 1;","1116":"SELECT author.authorId, author.authorName FROM author JOIN writes ON author.authorId = writes.authorId WHERE writes.paperId IN (SELECT paperId FROM writes WHERE authorId = (SELECT authorId FROM author WHERE authorName = 'Noah A Smith'));","1117":"SELECT a2.authorName, COUNT(DISTINCT c.citingPaperId) AS citation_count\nFROM cite c\nJOIN writes w1 ON c.citedPaperId = w1.paperId\nJOIN author a1 ON w1.authorId = a1.authorId\nJOIN writes w2 ON c.citingPaperId = w2.paperId\nJOIN author a2 ON w2.authorId = a2.authorId\nWHERE a1.authorName = 'Daniel A Reed'\nGROUP BY a2.authorId\nORDER BY citation_count DESC;","1118":"SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Bars' AND business.city = 'Dallas' AND business.rating > 3.5;","1119":"SELECT COUNT(review.business_id) AS business_count FROM review JOIN user ON review.user_id = user.user_id WHERE user.name = 'Michelle' AND review.year = 2010;","1120":"SELECT tip.text FROM business JOIN tip ON business.business_id = tip.business_id WHERE business.name = 'Cafe Zinho' AND business.state = 'Texas';","1121":"SELECT COUNT(*) FROM business JOIN category ON category.business_id = business.business_id WHERE business.city = 'Madison' AND category.category_name = 'escape games';","1122":"SELECT journal.journalName FROM journal JOIN paper ON journal.journalId = paper.journalId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2010 AND keyphrase.keyphraseName = 'Trophic Cascade';","1123":"SELECT COUNT(DISTINCT business.business_id) FROM review JOIN user ON review.user_id = user.user_id JOIN business ON review.business_id = business.business_id WHERE review.year = 2010 AND user.name = 'Christine' AND business.city = 'San Diego';","1124":"SELECT paper.title, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'parsing' ORDER BY paper.numCitedBy DESC;","1125":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year DESC;","1126":"SELECT COUNT(*) FROM paper WHERE paper.title LIKE '%convolutional neural networks%' AND paper.year = 2016;","1127":"SELECT DISTINCT coauthors.authorName\nFROM writes AS w1\nJOIN author AS a1 ON w1.authorId = a1.authorId\nJOIN writes AS w2 ON w1.paperId = w2.paperId\nJOIN author AS coauthors ON w2.authorId = coauthors.authorId\nWHERE a1.authorName = 'Noah A Smith'\nAND coauthors.authorName != 'Noah A Smith';","1128":"SELECT DISTINCT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS';","1129":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'WebKB';","1130":"SELECT checkin.day, SUM(checkin.COUNT) AS total_checkins FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.city = 'Los Angeles' AND business.name LIKE '%Moroccan%' GROUP BY checkin.day;","1131":"SELECT COUNT(*) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2015 AND journal.journalName = 'nature communications';","1132":"SELECT DISTINCT paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Pedro Domingos';","1133":"SELECT AVG(review.rating) AS average_rating FROM review WHERE review.year = 2014;","1134":"SELECT paper.paperId FROM paper JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName = 'WebKB';","1135":"SELECT review.rating, review.text, review.business_id FROM review JOIN user ON review.user_id = user.user_id WHERE review.rating > 4 AND user.name = 'Patrick';","1136":"SELECT keyphrase.keyphraseName, COUNT(*) AS topic_count FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE author.authorName = 'Oren Etzioni' GROUP BY keyphrase.keyphraseName ORDER BY topic_count DESC;","1137":"SELECT author.authorId, author.authorName, COUNT(paper.paperId) AS numPapers FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId JOIN author ON writes.authorId = author.authorId WHERE paper.year = 2007 AND venue.venueName = 'CVPR' GROUP BY author.authorId, author.authorName ORDER BY numPapers DESC LIMIT 1;","1138":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN cite ON paper.paperId = cite.citingPaperId JOIN writes AS author_citing ON cite.citingPaperId = author_citing.paperId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'Dan Klein') AND author_citing.authorId = (SELECT authorId FROM author WHERE authorName = 'Michael I. Jordan');","1139":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paperKeyphrase.paperId = paper.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year < 2010 AND keyphrase.keyphraseName = 'character recognition';","1140":"SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Dallas' AND business.rating > 3.5 AND category.category_name = 'Bars';","1141":"SELECT business.name, business.full_address FROM business WHERE business.city = 'Los Angeles';","1142":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON dataset.datasetId = paperDataset.datasetId JOIN paper ON paper.paperId = paperDataset.paperId JOIN writes ON writes.paperId = paper.paperId JOIN author ON author.authorId = writes.authorId WHERE author.authorName = 'jitendra malik';","1143":"SELECT author.authorName, COUNT(paper.numCitedBy) AS citationCount FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'CVPR' GROUP BY author.authorId, author.authorName ORDER BY citationCount DESC LIMIT 1;","1144":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year DESC;","1145":"SELECT DISTINCT coauthors.authorName\nFROM writes AS mainAuthor\nJOIN writes AS coauthorWrites ON mainAuthor.paperId = coauthorWrites.paperId\nJOIN author AS coauthors ON coauthorWrites.authorId = coauthors.authorId\nJOIN author AS noah ON mainAuthor.authorId = noah.authorId\nWHERE noah.authorName = 'Noah A Smith'\nAND coauthors.authorId != noah.authorId;","1146":"SELECT paper.paperId, paper.numCiting FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Artificial Intelligence' ORDER BY paper.numCiting DESC LIMIT 1;","1147":"SELECT paper.title FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Richard Ladner' AND venue.venueName = 'chi';","1148":"SELECT author.authorName, COUNT(*) AS paper_count\nFROM writes\nJOIN paper ON writes.paperId = paper.paperId\nJOIN venue ON paper.venueId = venue.venueId\nJOIN author ON writes.authorId = author.authorId\nWHERE paper.year = 2007 AND venue.venueName = 'CVPR'\nGROUP BY author.authorId\nORDER BY paper_count DESC\nLIMIT 1;","1149":"SELECT paper.paperId, paper.numCiting FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.numCiting < 5 AND venue.venueName = 'ACL';","1150":"SELECT business.name, business.rating FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Dallas' AND business.rating > 3.5 AND category.category_name = 'Mexican';","1151":"SELECT venue.venueName FROM venue JOIN paper ON paper.venueId = venue.venueId WHERE paper.title = 'Trophic Cascade';","1152":"SELECT venue.venueName, COUNT(paper.paperId) AS paper_count FROM paper JOIN venue ON paper.venueId = venue.venueId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' GROUP BY venue.venueName ORDER BY paper_count DESC LIMIT 1;","1153":"SELECT review.* FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Kabob Palace' AND review.year = 2014;","1154":"SELECT COUNT(*) FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year BETWEEN 2011 AND 2016 AND keyphrase.keyphraseName = 'question answering';","1155":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'WebKB';","1156":"SELECT DISTINCT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2012 AND keyphrase.keyphraseName = 'Neutralizing Antibody';","1157":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Richard Ladner' AND venue.venueName = 'chi';","1158":"SELECT keyphrase.keyphraseName, COUNT(*) AS popularity FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN venue ON venue.venueId = paper.venueId WHERE paper.year = 2015 AND venue.venueName = 'NIPS' GROUP BY keyphrase.keyphraseName ORDER BY popularity DESC;","1159":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year >= 2006 AND keyphrase.keyphraseName LIKE '%juicing%' AND keyphrase.keyphraseName LIKE '%cancer%';","1160":"SELECT paper.year, paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Michael Stonebraker' AND paper.title LIKE '%GIS Database%';","1161":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'nature communications';","1162":"SELECT DISTINCT paper.title\nFROM paper\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nINNER JOIN venue ON paper.venueId = venue.venueId\nWHERE author.authorName = 'Richard Ladner' AND venue.venueName = 'chi';","1163":"SELECT citedPaper.title FROM cite JOIN paper AS citedPaper ON cite.citedPaperId = citedPaper.paperId WHERE cite.citingPaperId IN (SELECT paperId FROM paper WHERE title LIKE '%parsing%');","1164":"SELECT paper.title, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'Artificial Intelligence' ORDER BY paper.numCitedBy DESC;","1165":"SELECT dataset.datasetName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperDataset ON paper.paperId = paperDataset.paperId JOIN dataset ON paperDataset.datasetId = dataset.datasetId WHERE author.authorName = 'Jitendra Malik';","1166":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId JOIN cite ON cite.citedPaperId = paper.paperId WHERE author.authorName = 'Ohad Shamir' GROUP BY paper.paperId ORDER BY COUNT(cite.citingPaperId) DESC LIMIT 1;","1167":"SELECT SUM(tip.likes) FROM tip JOIN user ON tip.user_id = user.uid JOIN business ON tip.business_id = business.business_id WHERE user.name = 'Niloofar' AND business.name = 'Cafe Zinho';","1168":"SELECT paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Luke S Zettlemoyer';","1169":"SELECT COUNT(review.rid) AS review_count FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Adrienne';","1170":"SELECT COUNT(*) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Michael I. Jordan' AND paper.year = 2016;","1171":"SELECT COUNT(*) FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'Noah Smith' AND paper.year >= 2009;","1172":"SELECT DISTINCT author.authorName FROM author JOIN writes ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'NIPS';","1173":"SELECT title FROM paper ORDER BY numCiting DESC LIMIT 1;","1174":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE keyphrase.keyphraseName = 'syntactic parsing' AND author.authorName != 'chris dyer';","1175":"SELECT a2.authorName, COUNT(*) AS citation_count\nFROM cite c\nJOIN paper p1 ON c.citedPaperId = p1.paperId\nJOIN writes w1 ON p1.paperId = w1.paperId\nJOIN author a1 ON w1.authorId = a1.authorId\nJOIN paper p2 ON c.citingPaperId = p2.paperId\nJOIN writes w2 ON p2.paperId = w2.paperId\nJOIN author a2 ON w2.authorId = a2.authorId\nWHERE a1.authorName = 'Daniel A Reed'\nGROUP BY a2.authorId\nORDER BY citation_count DESC\nLIMIT 1;","1176":"SELECT author.authorName, COUNT(paper.paperId) AS numPapers FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'chi' GROUP BY author.authorId, author.authorName ORDER BY numPapers DESC LIMIT 1;","1177":"SELECT DISTINCT paper.year FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'Pedro Domingos';","1178":"SELECT * FROM paper WHERE paper.year <> 2022;","1179":"SELECT DISTINCT user.name FROM user JOIN review ON user.uid = review.user_id JOIN business ON review.business_id = business.business_id JOIN category ON business.business_id = category.business_id WHERE review.year = 2010 AND category.category_name = 'restaurant';","1180":"SELECT DISTINCT keyphrase.keyphraseName FROM keyphrase JOIN paperKeyphrase ON keyphrase.keyphraseId = paperKeyphrase.keyphraseId JOIN paper ON paperKeyphrase.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'uist';","1181":"SELECT COUNT(*) FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'sigir';","1182":"SELECT paper.title FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'Donald E Knuth';","1183":"SELECT paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year ASC LIMIT 1;","1184":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning';","1185":"SELECT dataset.datasetName FROM dataset JOIN paperKeyphrase ON dataset.datasetId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'large-scale datasets used in semantic parsing';","1186":"SELECT DISTINCT business.city FROM business JOIN category ON business.business_id = category.business_id WHERE business.name = 'Taj Mahal';","1187":"SELECT COUNT(*) FROM review JOIN user ON review.user_id = user.uid WHERE review.year = 2015 AND user.name = 'Niloofar';","1188":"SELECT author.authorName FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.title = 'sensor fusion';","1189":"SELECT DISTINCT paper.title\nFROM paper\nJOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId\nJOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId\nWHERE paper.year = YEAR(CURDATE()) \nAND keyphrase.keyphraseName = 'question answering';","1190":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year < 2010 AND keyphrase.keyphraseName = 'character recognition';","1191":"SELECT COUNT(DISTINCT writes.authorId) FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2010 AND venue.venueName = 'sigcse';","1192":"SELECT COUNT(*) AS escape_game_count FROM business WHERE business.city = 'Madison' AND business.name LIKE '%escape game%';","1193":"SELECT paper.paperId FROM paper WHERE paper.year = 2014;","1194":"SELECT paper.title, author.authorName FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId JOIN venue ON paper.venueId = venue.venueId WHERE venue.venueName = 'ACL';","1195":"SELECT paper.title FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1196":"SELECT cite.citingPaperId FROM cite JOIN writes ON cite.citedPaperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Daniel Jurafsky';","1197":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Sergey Levine' AND paper.year = (SELECT MAX(year) FROM paper WHERE paper.paperId IN (SELECT paperId FROM writes WHERE authorId = author.authorId));","1198":"SELECT paper.year FROM writes JOIN author ON writes.authorId = author.authorId JOIN paper ON writes.paperId = paper.paperId WHERE author.authorName = 'ameet soni';","1199":"SELECT journal.journalName FROM journal;","1200":"SELECT DISTINCT a.authorName FROM author a JOIN writes w ON a.authorId = w.authorId JOIN cite c ON w.paperId = c.citingPaperId JOIN paper p ON c.citedPaperId = p.paperId WHERE a.authorName = 'Oren Etzioni';","1201":"SELECT DISTINCT journal.journalName FROM journal JOIN paper ON journal.journalId = paper.journalId WHERE paper.title LIKE '%Temporal Data%';","1202":"SELECT checkin.COUNT FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name = 'Cafe Zinho' AND checkin.day = 'Friday';","1203":"SELECT citingPaperId FROM cite WHERE citedPaperId IN (SELECT paperId FROM paper WHERE title LIKE '%NIPS%');","1204":"SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Madison' AND category.category_name = 'escape game';","1205":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year < 2010 AND keyphrase.keyphraseName LIKE '%character recognition%';","1206":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Michael Armstrong' AND paper.year BETWEEN 1990 AND 1999;","1207":"SELECT paper.title FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName != 'chris dyer';","1208":"SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Irish Pub' AND business.city = 'Dallas';","1209":"SELECT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId WHERE paper.venueId = (SELECT venueId FROM venue WHERE venueName = 'NIPS');","1210":"SELECT business.city FROM business WHERE business.rating < 1.5;","1211":"SELECT paper.year FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Michael Stonebraker';","1212":"SELECT keyphrase.keyphraseName, COUNT(*) AS frequency FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2015 GROUP BY keyphrase.keyphraseName ORDER BY frequency DESC;","1213":"SELECT * FROM review WHERE review.rating < 1;","1214":"SELECT paper.paperId, paper.numCitedBy FROM paper ORDER BY paper.numCitedBy DESC LIMIT 1;","1215":"SELECT paper.title FROM paper WHERE paper.year = 2015;","1216":"SELECT paper.title, paper.numCiting FROM paper WHERE paper.title LIKE '%parsing%' ORDER BY paper.numCiting DESC;","1217":"SELECT DISTINCT author.authorName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN journal ON paper.journalId = journal.journalId WHERE journal.journalName = 'NIPS';","1218":"SELECT author.authorName, COUNT(paper.paperId) AS paper_count FROM writes JOIN paper ON writes.paperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE paper.title LIKE '%semantic parsing%' AND paper.year > 2005 GROUP BY author.authorId, author.authorName ORDER BY paper_count DESC LIMIT 1;","1219":"SELECT COUNT(tip.tip_id) AS tip_count FROM tip JOIN user ON tip.user_id = user.uid WHERE tip.year = 2010 AND user.name = 'Michelle';","1220":"SELECT COUNT(review.user_id) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Sushi Too' AND business.city = 'Pittsburgh';","1221":"SELECT paper.title FROM paper JOIN cite ON paper.paperId = cite.citedPaperId JOIN writes ON cite.citingPaperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Oren Etzioni';","1222":"SELECT MAX(paper.year)\nFROM paper\nINNER JOIN writes ON paper.paperId = writes.paperId\nINNER JOIN author ON writes.authorId = author.authorId\nWHERE author.authorName = 'Mary Crainie';","1223":"SELECT COUNT(paper.paperId) FROM paper JOIN journal ON paper.journalId = journal.journalId WHERE paper.year = 2015 AND journal.journalName = 'Cell';","1224":"SELECT journal.journalName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN journal ON paper.journalId = journal.journalId WHERE author.authorName = 'Takashi Matsumoto';","1225":"SELECT paper.title, paper.numCiting FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'Ohad Shamir' ORDER BY paper.numCiting DESC LIMIT 1;","1226":"SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE business.state = 'Texas' AND category.category_name = 'Moroccan';","1227":"SELECT checkin.business_id, SUM(checkin.COUNT) AS total_checkins FROM checkin GROUP BY checkin.business_id ORDER BY total_checkins DESC LIMIT 1;","1228":"SELECT paper.title FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE paper.year = 2016 AND keyphrase.keyphraseName = 'question answering';","1229":"SELECT venue.venueName FROM author JOIN writes ON author.authorId = writes.authorId JOIN paper ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE author.authorName = 'Peter Mertens';","1230":"SELECT paper.title FROM paper JOIN writes ON writes.paperId = paper.paperId JOIN venue ON paper.venueId = venue.venueId WHERE writes.authorId = (SELECT authorId FROM author WHERE authorName = 'li dong') AND venue.venueName = 'acl' AND paper.year = 2016;","1231":"SELECT COUNT(tip.tip_id) AS number_of_tips FROM tip JOIN user ON tip.user_id = user.user_id WHERE user.name = 'Michelle';","1232":"SELECT COUNT(*) FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId JOIN venue ON paper.venueId = venue.venueId WHERE keyphrase.keyphraseName = 'deep reinforcement learning' AND venue.venueName = 'nips';","1233":"SELECT paper.title, paper.numCitedBy FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'parsing' ORDER BY paper.numCitedBy DESC;","1234":"SELECT paper.title, paper.year FROM paper JOIN paperKeyphrase ON paper.paperId = paperKeyphrase.paperId JOIN keyphrase ON paperKeyphrase.keyphraseId = keyphrase.keyphraseId WHERE keyphrase.keyphraseName = 'deep learning' ORDER BY paper.year ASC LIMIT 1;","1235":"SELECT DISTINCT coauthor.authorName FROM author AS coauthor JOIN writes AS w ON coauthor.authorId = w.authorId WHERE w.paperId IN (SELECT w2.paperId FROM writes AS w2 JOIN author AS a ON w2.authorId = a.authorId WHERE a.authorName = 'Noah A Smith' AND w2.authorId != a.authorId);","1236":"SELECT paper.title, paper.year FROM paper JOIN venue ON paper.venueId = venue.venueId WHERE paper.year = 2015 AND venue.venueName = 'pldi';","1237":"SELECT AVG(c.count) AS avg_checkins_per_day\nFROM business b\nJOIN checkin c ON b.business_id = c.business_id\nJOIN category cat ON b.business_id = cat.business_id\nWHERE b.name = 'Barrio Cafe' \nAND cat.category_name = 'restaurant'\nGROUP BY c.day;","1238":"SELECT paper.year FROM paper WHERE paper.title = 'A Switching Architecture For ISDN';","1239":"SELECT dataset.datasetName FROM dataset JOIN paperDataset ON paperDataset.datasetId = dataset.datasetId WHERE dataset.datasetName LIKE '%semantic parsing%';","1240":"SELECT paper.year, COUNT(cite.citedPaperId) AS citation_count FROM paper JOIN writes ON paper.paperId = writes.paperId JOIN cite ON cite.citedPaperId = paper.paperId JOIN author ON writes.authorId = author.authorId WHERE author.authorName = 'luke zettlemoyer' GROUP BY paper.year;","1241":"SELECT paper.* FROM paper JOIN cite ON paper.paperId = cite.citedPaperId WHERE paper.numCitedBy < 5 AND cite.citingPaperId IN (SELECT paperId FROM paper WHERE venueId = (SELECT venueId FROM venue WHERE venueName = 'ACL'));","1242":"SELECT author.aid, author.name, COUNT(publication.pid) AS paper_count FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY author.aid, author.name ORDER BY paper_count DESC LIMIT 1;","1243":"SELECT movie.title, movie.release_year FROM movie JOIN classification ON movie.mid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE movie.release_year = 2010 AND genre.genre = 'Sci-Fi';","1244":"SELECT RESTAURANT.NAME FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND RESTAURANT.CITY_NAME = 'mountain view';","1245":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication_keyword.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB';","1246":"SELECT publication.title FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' AND publication.citation_num > 200;","1247":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication.pid = publication_keyword.pid WHERE publication.cid = (SELECT cid FROM conference WHERE name = 'VLDB') GROUP BY keyword.keyword ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1248":"SELECT COUNT(*) AS number_of_movies FROM movie WHERE movie.release_year = 2013;","1249":"SELECT author.aid, COUNT(writes.pid) AS paper_count FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid WHERE publication.jid = (SELECT jid FROM journal WHERE name = 'PVLDB') GROUP BY author.aid ORDER BY paper_count DESC LIMIT 1;","1250":"SELECT cite.cited FROM cite JOIN publication ON publication.pid = cite.citing WHERE publication.title = 'Making database systems usable';","1251":"SELECT COUNT(*) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.NAME = 'Denny' AND GEOGRAPHIC.REGION = 'Bay Area';","1252":"SELECT COUNT(DISTINCT publication_keyword.kid) AS keyword_count FROM publication JOIN publication_keyword ON publication.pid = publication_keyword.pid WHERE publication.title = 'Making database systems usable';","1253":"SELECT COUNT(RESTAURANT.NAME) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Chinese' AND GEOGRAPHIC.REGION = 'Bay Area';","1254":"SELECT movie.release_year FROM movie WHERE movie.title = 'The Imitation Game';","1255":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN writes ON publication_keyword.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1256":"SELECT COUNT(publication.pid) AS number_of_papers FROM publication JOIN conference ON publication.cid = conference.cid JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did JOIN organization ON domain.oid = organization.oid WHERE organization.name = 'University of Michigan' AND conference.name = 'PVLDB';","1257":"SELECT RESTAURANT.NAME, RESTAURANT.CITY_NAME FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'alameda';","1258":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.CITY_NAME = 'alameda';","1259":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC;","1260":"SELECT publication.title FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE (author.name = 'H. V. Jagadish' OR author.name = 'Yunyao Li') AND publication.year > 2005 AND journal.name = 'PVLDB';","1261":"SELECT cite.citing FROM cite JOIN publication ON cite.cited = publication.pid WHERE publication.title = 'Making database systems usable';","1262":"SELECT COUNT(DISTINCT t1.name)\nFROM actor t1\nJOIN cast t2 ON t1.aid = t2.aid\nJOIN movie t3 ON t2.msid = t3.mid\nWHERE t1.nationality = 'China' AND t3.title = 'Rush Hour 3';","1263":"SELECT pid, citation_num FROM publication WHERE year > 2000 ORDER BY citation_num DESC LIMIT 1;","1264":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.STREET_NAME = 'Buchanan' AND LOCATION.CITY_NAME = 'San Francisco';","1265":"SELECT COUNT(DISTINCT writes.aid) AS author_count FROM publication JOIN writes ON publication.pid = writes.pid WHERE publication.title = 'Making database systems usable';","1266":"SELECT conference.homepage FROM conference WHERE conference.name = 'VLDB';","1267":"SELECT COUNT(cite.citing) AS citation_count FROM cite JOIN publication ON cite.cited = publication.pid WHERE publication.title = 'Making database systems usable' AND publication.year < 2010;","1268":"SELECT publication.title, publication.year FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year > 2000;","1269":"SELECT director.name FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did JOIN tags ON movie.mid = tags.msid WHERE tags.kid IN (SELECT id FROM keyword WHERE keyword.keyword LIKE '%nuclear weapons%');","1270":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON LOCATION.RESTAURANT_ID = RESTAURANT.ID WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND RESTAURANT.CITY_NAME = 'san francisco';","1271":"SELECT COUNT(publication.pid) AS number_of_papers FROM publication JOIN conference ON publication.cid = conference.cid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE conference.name = 'VLDB' AND keyword.keyword = 'Information Retrieval';","1272":"SELECT actor.name FROM actor WHERE actor.birth_city = 'Tehran';","1273":"SELECT actor.birth_city FROM actor WHERE actor.name = 'Kevin Spacey';","1274":"SELECT publication.* FROM publication JOIN cite ON cite.cited = publication.pid GROUP BY publication.pid ORDER BY COUNT(cite.citing) DESC LIMIT 1;","1275":"SELECT actor.birth_year FROM actor WHERE actor.name = 'Benedict Cumberbatch';","1276":"SELECT COUNT(DISTINCT keyword.kid)\nFROM publication\nJOIN writes ON publication.pid = writes.pid\nJOIN author ON writes.aid = author.aid\nJOIN organization ON author.oid = organization.oid\nJOIN publication_keyword ON publication.pid = publication_keyword.pid\nJOIN keyword ON publication_keyword.kid = keyword.kid\nWHERE organization.name = 'University of Michigan';","1277":"SELECT movie.budget FROM movie WHERE movie.title = 'Juno' AND movie.release_year = 2007;","1278":"SELECT title FROM publication WHERE citation_num > 200;","1279":"SELECT domain.name FROM author JOIN domain_author ON author.aid = domain_author.aid JOIN domain ON domain_author.did = domain.did WHERE author.name = 'H. V. Jagadish';","1280":"SELECT author.* FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid WHERE publication.title = 'Making database systems usable';","1281":"SELECT movie.title FROM movie JOIN written_by ON movie.mid = written_by.msid JOIN writer ON written_by.wid = writer.wid WHERE writer.name = 'Matt Damon';","1282":"SELECT publication.* FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid JOIN journal ON publication.jid = journal.jid WHERE author.name = 'H. V. Jagadish' AND journal.name = 'PVLDB';","1283":"SELECT RESTAURANT.NAME FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View';","1284":"SELECT COUNT(DISTINCT journal.jid) FROM journal JOIN publication ON journal.jid = publication.jid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1285":"SELECT COUNT(DISTINCT keyword.kid) AS number_of_keywords FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication.pid = publication_keyword.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'PVLDB';","1286":"SELECT SUM(publication.citation_num) FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'PVLDB';","1287":"SELECT COUNT(*) FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB';","1288":"SELECT COUNT(*) FROM actor WHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000;","1289":"SELECT producer.pid, COUNT(DISTINCT directed_by.did) AS director_count FROM producer JOIN made_by ON producer.pid = made_by.pid JOIN directed_by ON made_by.msid = directed_by.msid GROUP BY producer.pid ORDER BY director_count DESC LIMIT 1;","1290":"SELECT m.title FROM movie m JOIN directed_by db ON m.mid = db.msid WHERE db.did = (SELECT did FROM directed_by WHERE msid = (SELECT mid FROM movie WHERE title = 'Revolutionary Road'));","1291":"SELECT SUM(publication.citation_num) FROM publication JOIN conference ON publication.cid = conference.cid WHERE publication.year = 2005 AND conference.name = 'PVLDB';","1292":"SELECT business.business_id, COUNT(category.id) AS category_count FROM business JOIN category ON business.business_id = category.business_id GROUP BY business.business_id ORDER BY category_count DESC LIMIT 1;","1293":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.CITY_NAME = 'alameda' AND RESTAURANT.RATING >= 4;","1294":"SELECT conference.cid, conference.name FROM conference JOIN publication ON publication.cid = conference.cid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY conference.cid, conference.name HAVING COUNT(publication.pid) > 60;","1295":"SELECT movie.title, movie.budget FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN producer ON made_by.pid = producer.pid WHERE producer.name = 'Quentin Tarantino' ORDER BY movie.release_year DESC LIMIT 1;","1296":"SELECT publication.pid FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid JOIN journal ON publication.jid = journal.jid WHERE publication.citation_num > 200 AND author.name = 'H. V. Jagadish' AND journal.name = 'PVLDB';","1297":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN writes ON publication_keyword.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY keyword.keyword ORDER BY COUNT(publication_keyword.pid) DESC LIMIT 1;","1298":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'san francisco' AND RESTAURANT.FOOD_TYPE = 'french' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1299":"SELECT COUNT(DISTINCT m.mid)\nFROM movie m\nJOIN directed_by db ON m.mid = db.msid\nJOIN director d ON db.did = d.did\nJOIN cast c ON m.mid = c.msid\nJOIN actor a ON c.aid = a.aid\nWHERE d.name = 'Asghar Farhadi' \nAND a.name = 'Taraneh Alidoosti';","1300":"SELECT movie.release_year, COUNT(movie.mid) AS number_of_movies FROM movie JOIN directed_by ON directed_by.msid = movie.mid JOIN director ON directed_by.did = director.did WHERE director.name = 'Woody Allen' GROUP BY movie.release_year;","1301":"SELECT COUNT(RESTAURANT.ID) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Chinese' AND GEOGRAPHIC.REGION = 'Bay Area';","1302":"SELECT COUNT(*) AS organization_count FROM organization WHERE organization.continent = 'Databases';","1303":"SELECT author.aid, author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' GROUP BY author.aid, author.name HAVING COUNT(publication.pid) > 10;","1304":"SELECT NAME, RATING FROM RESTAURANT WHERE FOOD_TYPE = 'American' AND CITY_NAME = 'Bay Area' ORDER BY RATING DESC LIMIT 1;","1305":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.CITY_NAME = 'Mountain View';","1306":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.REGION = 'yosemite' OR GEOGRAPHIC.REGION = 'mono lake') ORDER BY RESTAURANT.RATING DESC;","1307":"SELECT DISTINCT publication.pid FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' OR author.name = 'Divesh Srivastava';","1308":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island';","1309":"SELECT author.aid FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' GROUP BY author.aid HAVING COUNT(publication.pid) > 10;","1310":"SELECT COUNT(writes.pid) AS number_of_papers FROM writes JOIN author ON writes.aid = author.aid WHERE author.name IN ('H. V. Jagadish', 'Yunyao Li', 'Cong Yu');","1311":"SELECT organization.name, organization.continent, organization.homepage, organization.oid FROM organization;","1312":"SELECT publication.year FROM publication WHERE publication.title = 'Making database systems usable';","1313":"SELECT author.name FROM author JOIN writes ON author.aid = writes.aid WHERE writes.pid IN ( SELECT pid FROM writes WHERE aid = (SELECT aid FROM author WHERE name = 'H. V. Jagadish') ) AND writes.pid IN ( SELECT pid FROM writes WHERE aid = (SELECT aid FROM author WHERE name = 'Divesh Srivastava') ) GROUP BY author.aid HAVING COUNT(DISTINCT writes.pid) >= 2;","1314":"SELECT publication.year FROM publication WHERE publication.title = 'Making database systems usable';","1315":"SELECT t1.name, t1.rating, t2.house_number, t2.street_name\nFROM RESTAURANT t1\nJOIN LOCATION t2 ON t1.id = t2.restaurant_id\nWHERE t1.food_type = 'Arabic'\nAND t2.street_name = 'Buchanan'\nAND t2.city_name = 'San Francisco'\nAND t1.rating > 2.5;","1316":"SELECT publication.title, publication.year FROM publication JOIN journal ON publication.jid = journal.jid WHERE publication.year > 2000 AND journal.name = 'PVLDB';","1317":"SELECT publication.* FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE author.name = 'H. V. Jagadish' AND keyword.keyword = 'User Study';","1318":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.RATING >= 4 AND GEOGRAPHIC.CITY_NAME = 'Mountain View';","1319":"SELECT conference.name, conference.homepage FROM conference WHERE conference.name = 'PVLDB';","1320":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco' ORDER BY RESTAURANT.RATING DESC;","1321":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON LOCATION.RESTAURANT_ID = RESTAURANT.ID JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND GEOGRAPHIC.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC;","1322":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1323":"SELECT COUNT(*) AS organization_count FROM organization WHERE organization.continent = 'North America';","1324":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.NAME = 'jamerican cuisine' AND LOCATION.CITY_NAME = 'san francisco';","1325":"SELECT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN domain_publication ON domain_publication.pid = publication.pid JOIN domain_keyword ON domain_publication.did = domain_keyword.did JOIN keyword ON domain_keyword.kid = keyword.kid WHERE author.homepage = 'University of Michigan' AND keyword.keyword = 'Databases' GROUP BY author.aid ORDER BY SUM(publication.citation_num) DESC LIMIT 1;","1326":"SELECT COUNT(DISTINCT m.title) \nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN movie m ON c.msid = m.mid\nWHERE a.name = 'Jennifer Aniston' \nAND m.release_year > 2010;","1327":"SELECT journal.name FROM journal JOIN publication ON journal.jid = publication.jid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY journal.jid ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1328":"SELECT director.name FROM movie JOIN copyright ON movie.mid = copyright.msid JOIN directed_by ON copyright.msid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE movie.title = 'James Bond';","1329":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1330":"SELECT DISTINCT a2.name FROM author a1 JOIN writes w1 ON a1.aid = w1.aid JOIN publication p ON w1.pid = p.pid JOIN writes w2 ON p.pid = w2.pid JOIN author a2 ON w2.aid = a2.aid WHERE a1.name = 'H. V. Jagadish';","1331":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area';","1332":"SELECT COUNT(DISTINCT keyword.kid) AS keyword_count FROM conference JOIN domain_conference ON conference.cid = domain_conference.cid JOIN domain_keyword ON domain_conference.did = domain_keyword.did JOIN keyword ON domain_keyword.kid = keyword.kid WHERE conference.name = 'VLDB';","1333":"SELECT publication.pid FROM publication WHERE publication.year > 2000 AND publication.citation_num > 200;","1334":"SELECT a.name\nFROM cast c\nJOIN actor a ON c.aid = a.aid\nJOIN tv_series t ON c.msid = t.sid\nWHERE c.role = 'Olivia Pope' AND t.title = 'Scandal';","1335":"SELECT actor.name\nFROM actor\nJOIN cast ON cast.aid = actor.aid\nJOIN movie ON cast.msid = movie.mid\nJOIN directed_by ON directed_by.msid = movie.mid\nJOIN director ON directed_by.did = director.did\nWHERE director.name = 'Quentin Tarantino'\nORDER BY movie.release_year DESC\nLIMIT 1;","1336":"SELECT organization.name FROM organization JOIN domain_author ON organization.oid = domain_author.oid JOIN domain ON domain_author.did = domain.did JOIN domain_keyword ON domain.did = domain_keyword.did JOIN keyword ON domain_keyword.kid = keyword.kid WHERE keyword.keyword = 'Databases';","1337":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.CITY_NAME = 'san francisco' AND RESTAURANT.FOOD_TYPE = 'french' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1338":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1339":"SELECT DISTINCT m.title\nFROM cast c1\nJOIN actor a1 ON c1.aid = a1.aid\nJOIN cast c2 ON c1.msid = c2.msid\nJOIN actor a2 ON c2.aid = a2.aid\nJOIN movie m ON c1.msid = m.mid\nWHERE a1.name = 'Woody Strode'\nAND a2.name = 'Jason Robards';","1340":"SELECT a.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN copyright cr ON c.msid = cr.msid\nJOIN movie m ON cr.msid = m.mid\nWHERE m.title = 'The Imitation Game' AND c.role = 'Alan Turing';","1341":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.CITY_NAME = 'yosemite' OR GEOGRAPHIC.CITY_NAME = 'mono lake');","1342":"SELECT COUNT(publication.pid) FROM publication JOIN writes ON publication.pid = writes.pid JOIN conference ON publication.cid = conference.cid WHERE writes.aid = (SELECT aid FROM author WHERE name = 'H. V. Jagadish') AND conference.name = 'VLDB' AND publication.year > 2000;","1343":"SELECT movie.title\nFROM cast\nJOIN actor ON cast.aid = actor.aid\nJOIN movie ON cast.msid = movie.mid\nWHERE actor.name = 'Rowan Atkinson' AND cast.role = 'Mr. Bean';","1344":"SELECT COUNT(*) FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'french' AND RESTAURANT.CITY_NAME = 'palo alto';","1345":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE LOCATION.STREET_NAME = 'Bethel Island Rd' AND GEOGRAPHIC.CITY_NAME = 'Bethel Island' AND RESTAURANT.RATING >= 4;","1346":"SELECT COUNT(*) FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year > 2000;","1347":"SELECT publication.title, publication.year FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' AND publication.year > 2000;","1348":"SELECT conference.* FROM conference JOIN publication ON publication.cid = conference.cid JOIN writes ON writes.pid = publication.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1349":"SELECT actor.name FROM actor WHERE actor.gender = 'female' AND actor.birth_city = 'Austin';","1350":"SELECT RESTAURANT.NAME, LOCATION.CITY_NAME FROM RESTAURANT JOIN LOCATION ON LOCATION.RESTAURANT_ID = RESTAURANT.ID WHERE RESTAURANT.NAME = 'Jamerican Cuisine';","1351":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.STREET_NAME = 'Buchanan' AND RESTAURANT.CITY_NAME = 'San Francisco';","1352":"SELECT publication.* FROM publication JOIN domain_publication ON domain_publication.pid = publication.pid WHERE publication.year > 2000 AND publication.citation_num > 200 AND domain_publication.did = (SELECT did FROM domain WHERE name = 'Databases');","1353":"SELECT publication.pid, cite.citing FROM conference JOIN publication ON conference.cid = publication.cid JOIN cite ON cite.citing = publication.pid WHERE conference.name = 'VLDB';","1354":"SELECT a.name, c.role\nFROM cast c\nJOIN actor a ON c.aid = a.aid\nJOIN copyright cp ON c.msid = cp.msid\nJOIN movie m ON cp.msid = m.mid\nWHERE m.title = 'Daddy Long Legs';","1355":"SELECT publication.title FROM publication JOIN journal ON publication.jid = journal.jid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE journal.name = 'PVLDB' AND keyword.keyword = 'Keyword search';","1356":"SELECT publication.* FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' ORDER BY publication.citation_num DESC LIMIT 1;","1357":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island';","1358":"SELECT journal.jid, journal.homepage, journal.name FROM journal JOIN publication ON journal.jid = publication.jid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY journal.jid, journal.homepage, journal.name HAVING COUNT(publication.pid) > 60;","1359":"SELECT cite.cited FROM publication JOIN cite ON publication.pid = cite.citing WHERE publication.jid = (SELECT jid FROM journal WHERE name = 'PVLDB');","1360":"SELECT COUNT(*) AS organization_count FROM organization WHERE organization.continent = 'North America';","1361":"SELECT m.title\nFROM movie m\nJOIN copyright c ON m.mid = c.msid\nJOIN cast ca1 ON c.msid = ca1.msid\nJOIN actor a1 ON ca1.aid = a1.aid\nJOIN cast ca2 ON c.msid = ca2.msid\nJOIN actor a2 ON ca2.aid = a2.aid\nWHERE a1.name = 'Jason Robards' \nAND a2.name = 'Woody Strode';","1362":"SELECT author.aid FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' GROUP BY author.aid ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1363":"SELECT publication.title, publication.citation_num FROM publication JOIN domain_publication ON domain_publication.pid = publication.pid JOIN domain ON domain_publication.did = domain.did WHERE publication.year > 2000 AND domain.name = 'Databases' ORDER BY publication.citation_num DESC LIMIT 1;","1364":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND GEOGRAPHIC.CITY_NAME = 'Mountain View';","1365":"SELECT COUNT(*) AS number_of_keywords FROM keyword;","1366":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND RESTAURANT.CITY_NAME = 'mountain view';","1367":"SELECT publication.pid, publication.title FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain_journal ON domain_publication.did = domain_journal.did JOIN journal ON domain_journal.jid = journal.jid WHERE publication.year > 2000 AND publication.citation_num > 200 AND journal.name = 'PVLDB';","1368":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.FOOD_TYPE = 'jamerican' AND RESTAURANT.CITY_NAME = 'san francisco';","1369":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING, GEOGRAPHIC.CITY_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.CITY_NAME = 'yosemite' OR GEOGRAPHIC.CITY_NAME = 'mono lake') ORDER BY RESTAURANT.RATING DESC;","1370":"SELECT journal.name FROM journal JOIN publication ON journal.jid = publication.jid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY journal.name ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1371":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME, GEOGRAPHIC.CITY_NAME FROM RESTAURANT JOIN LOCATION ON LOCATION.RESTAURANT_ID = RESTAURANT.ID JOIN GEOGRAPHIC ON GEOGRAPHIC.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.NAME = 'denny' AND GEOGRAPHIC.REGION = 'bay area';","1372":"SELECT COUNT(DISTINCT actor.aid)\nFROM actor\nJOIN cast ON actor.aid = cast.aid\nJOIN copyright ON cast.msid = copyright.msid\nJOIN movie ON copyright.msid = movie.mid\nWHERE movie.title = 'Saving Private Ryan';","1373":"SELECT conference.cid, conference.name FROM conference JOIN publication ON publication.cid = conference.cid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY conference.cid, conference.name ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1374":"SELECT * FROM movie WHERE movie.release_year = 2015;","1375":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND RESTAURANT.CITY_NAME = 'San Francisco' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1376":"SELECT publication.title FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE author.name IN ('H. V. Jagadish', 'Yunyao Li');","1377":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication.pid = publication_keyword.pid JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' GROUP BY keyword.keyword ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1378":"SELECT publication.abstract FROM publication WHERE publication.title = 'Making database systems usable';","1379":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND RESTAURANT.CITY_NAME = 'san francisco' AND LOCATION.STREET_NAME = 'buchanan';","1380":"SELECT keyword.kid FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication_keyword.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'PVLDB' GROUP BY keyword.kid HAVING COUNT(publication.pid) > 100;","1381":"SELECT m.title\nFROM cast c1\nJOIN actor a1 ON c1.aid = a1.aid\nJOIN cast c2 ON c1.msid = c2.msid\nJOIN actor a2 ON c2.aid = a2.aid\nJOIN movie m ON c1.msid = m.mid\nWHERE a1.name = 'Woody Strode' \nAND a2.name = 'Jason Robards';","1382":"SELECT actor.name FROM actor WHERE actor.nationality = 'Italy' AND actor.birth_year > 1980;","1383":"SELECT publication.* FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE author.name = 'H. V. Jagadish' AND conference.name = 'VLDB';","1384":"SELECT movie.title, movie.release_year FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.name = 'Steven Spielberg' AND movie.release_year > 2006;","1385":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.CITY_NAME = 'Yosemite' OR GEOGRAPHIC.CITY_NAME = 'Mono Lake') ORDER BY RESTAURANT.RATING DESC;","1386":"SELECT actor.birth_year FROM actor WHERE actor.name = 'Kevin Spacey';","1387":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.CITY_NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'alameda';","1388":"SELECT RESTAURANT.NAME FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View';","1389":"SELECT COUNT(RESTAURANT.ID) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Italian' AND GEOGRAPHIC.COUNTY = 'Yolo';","1390":"SELECT COUNT(publication.pid) FROM publication JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE author.name = 'H. V. Jagadish' AND keyword.keyword = 'User Study';","1391":"SELECT COUNT(publication.pid) AS number_of_papers FROM publication JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid JOIN conference ON publication.cid = conference.cid WHERE keyword.keyword = 'Keyword search' AND conference.name = 'PVLDB';","1392":"SELECT publication.* FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB';","1393":"SELECT actor.name FROM actor WHERE actor.nationality = 'Afghanistan';","1394":"SELECT m.title\nFROM movie m\nJOIN copyright c ON m.mid = c.msid\nJOIN cast ca ON ca.msid = c.msid\nJOIN actor a ON a.aid = ca.aid\nJOIN directed_by db ON db.msid = c.msid\nJOIN director d ON d.did = db.did\nWHERE d.name = 'Asghar Farhadi'\nAND a.name = 'Taraneh Alidoosti';","1395":"SELECT author.name FROM author JOIN domain_author ON author.aid = domain_author.aid JOIN domain ON domain_author.did = domain.did WHERE domain.name = 'Databases' AND author.aid IN (SELECT oid FROM organization WHERE name = 'University of Michigan');","1396":"SELECT COUNT(*) FROM movie JOIN copyright ON movie.mid = copyright.msid JOIN tags ON copyright.msid = tags.msid WHERE movie.release_year = 2015 AND tags.kid = (SELECT id FROM keyword WHERE keyword = 'Iraq war');","1397":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area';","1398":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND GEOGRAPHIC.REGION = 'Bay Area';","1399":"SELECT COUNT(DISTINCT conference.cid) FROM conference JOIN publication ON conference.cid = publication.cid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1400":"SELECT citation_num\nFROM publication\nWHERE title = 'Making database systems usable';","1401":"SELECT actor.name FROM actor WHERE actor.birth_city = 'Tehran';","1402":"SELECT publication.title FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid WHERE author.name = 'H. V. Jagadish';","1403":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC;","1404":"SELECT actor.birth_year FROM actor WHERE actor.name = 'Benedict Cumberbatch';","1405":"SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN cite ON writes.pid = cite.cited WHERE cite.citing IN (SELECT pid FROM writes WHERE aid = (SELECT aid FROM author WHERE name = 'H. V. Jagadish'));","1406":"SELECT publication.title, publication.citation_num FROM publication JOIN conference ON publication.cid = conference.cid WHERE publication.citation_num > 200 AND conference.name = 'VLDB';","1407":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND GEOGRAPHIC.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC;","1408":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN writes ON publication_keyword.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY keyword.keyword HAVING COUNT(publication_keyword.pid) > 10;","1409":"SELECT R.NAME, L.HOUSE_NUMBER, L.STREET_NAME\nFROM RESTAURANT R\nINNER JOIN LOCATION L ON R.ID = L.RESTAURANT_ID\nWHERE L.STREET_NAME = 'buchanan'\nAND L.CITY_NAME = 'san francisco'\nAND R.FOOD_TYPE = 'arabic'\nAND R.RATING > 2.5;","1410":"SELECT genre.genre FROM movie JOIN copyright ON movie.mid = copyright.msid JOIN classification ON copyright.msid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE movie.title = 'Jurassic Park';","1411":"SELECT COUNT(*) FROM director JOIN directed_by ON director.did = directed_by.did JOIN copyright ON directed_by.msid = copyright.msid JOIN movie ON copyright.msid = movie.mid WHERE director.name = 'Quentin Tarantino' AND (movie.release_year < 2002 OR movie.release_year > 2010);","1412":"SELECT COUNT(*) AS number_of_papers FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.pid IN (SELECT pid FROM writes WHERE aid IN (SELECT aid FROM author WHERE homepage LIKE '%University of Michigan%'));","1413":"SELECT t1.name\nFROM cast t2\nJOIN actor t1 ON t2.aid = t1.aid\nWHERE t2.role = 'Mr. Bean';","1414":"SELECT t1.title, COUNT(DISTINCT t3.aid) AS num_chinese_actors\nFROM movie t1\nJOIN cast t2 ON t1.mid = t2.msid\nJOIN actor t3 ON t2.aid = t3.aid\nWHERE t3.nationality = 'China'\nGROUP BY t1.title\nORDER BY num_chinese_actors DESC\nLIMIT 1;","1415":"SELECT movie.title FROM movie JOIN tags ON movie.mid = tags.msid JOIN keyword ON tags.kid = keyword.id WHERE keyword.keyword = 'nuclear weapons';","1416":"SELECT author.aid, author.homepage, author.name FROM author WHERE author.homepage LIKE '%University of Michigan%';","1417":"SELECT m.title\nFROM movie m\nJOIN cast c ON m.mid = c.msid\nJOIN actor a ON c.aid = a.aid\nWHERE a.name = 'Robin Wright';","1418":"SELECT COUNT(*) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Chinese' AND GEOGRAPHIC.REGION = 'Bay Area';","1419":"SELECT m.release_year, COUNT(DISTINCT m.mid) AS num_movies\nFROM cast c\nJOIN actor a ON c.aid = a.aid\nJOIN copyright cr ON c.msid = cr.msid\nJOIN movie m ON cr.msid = m.mid\nWHERE a.name = 'Brad Pitt'\nGROUP BY m.release_year;","1420":"SELECT publication.pid, publication.citation_num FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did WHERE domain.name = 'Databases' ORDER BY publication.citation_num DESC LIMIT 1;","1421":"SELECT COUNT(organization.oid) AS total_organizations FROM organization;","1422":"SELECT actor.birth_year FROM actor WHERE actor.name = 'Kevin Spacey';","1423":"SELECT COUNT(DISTINCT author.aid) FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB';","1424":"SELECT director.name FROM movie JOIN copyright ON movie.mid = copyright.msid JOIN directed_by ON copyright.msid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE movie.title = 'James Bond';","1425":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'bay area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1426":"SELECT COUNT(DISTINCT author.aid) FROM author JOIN writes ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB';","1427":"SELECT conference.cid, conference.name FROM conference JOIN publication ON publication.cid = conference.cid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY conference.cid, conference.name ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1428":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND GEOGRAPHIC.CITY_NAME = 'Mountain View';","1429":"SELECT publication.* FROM publication JOIN conference ON publication.cid = conference.cid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE conference.name = 'VLDB' AND keyword.keyword = 'Information Retrieval';","1430":"SELECT actor.nationality FROM actor WHERE actor.name = 'Kevin Spacey';","1431":"SELECT COUNT(DISTINCT cite.citing) AS number_of_authors FROM cite JOIN publication ON cite.cited = publication.pid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1432":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC;","1433":"SELECT movie.title\nFROM movie\nJOIN copyright ON movie.mid = copyright.msid\nJOIN cast ON cast.msid = copyright.msid\nWHERE cast.role = 'Daffy Duck';","1434":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.CITY_NAME = 'Mountain View';","1435":"SELECT COUNT(*) FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did JOIN organization ON domain.did = organization.oid WHERE publication.year > 2000 AND organization.name = 'University of Michigan';","1436":"SELECT COUNT(publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB';","1437":"SELECT actor.name FROM actor WHERE actor.nationality = 'Afghanistan';","1438":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'american' AND GEOGRAPHIC.REGION = 'bay area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1439":"SELECT a.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN movie m ON c.msid = m.mid\nWHERE m.title = 'The Imitation Game' AND c.role = 'Alan Turing';","1440":"SELECT movie.title FROM movie JOIN copyright ON copyright.msid = movie.mid JOIN tags ON tags.msid = copyright.msid WHERE tags.kid = (SELECT id FROM keyword WHERE keyword = 'nuclear weapons');","1441":"SELECT writer.name\nFROM movie\nJOIN written_by ON movie.mid = written_by.msid\nJOIN writer ON written_by.wid = writer.wid\nWHERE movie.title = 'The Truman Show';","1442":"SELECT publication.year, COUNT(cite.cited) AS citation_count FROM publication JOIN cite ON cite.citing = publication.pid WHERE publication.title = 'Making database systems usable' GROUP BY publication.year;","1443":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN domain_publication ON publication_keyword.pid = domain_publication.pid JOIN domain_author ON domain_publication.did = domain_author.did JOIN author ON domain_author.aid = author.aid JOIN organization ON author.oid = organization.oid WHERE organization.name = 'University of Michigan';","1444":"SELECT SUM(publication.citation_num) FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year = 2005;","1445":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication.pid = publication_keyword.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' GROUP BY keyword.keyword HAVING COUNT(publication.pid) > 100;","1446":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View';","1447":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'bay area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1448":"SELECT publication.pid FROM publication WHERE publication.citation_num > 200;","1449":"SELECT author.aid FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database' GROUP BY author.aid HAVING COUNT(publication.pid) > 10;","1450":"SELECT actor.name FROM actor WHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980;","1451":"SELECT DISTINCT p.name\nFROM producer p\nJOIN made_by mb ON p.pid = mb.pid\nJOIN copyright c ON mb.msid = c.msid\nJOIN cast ca ON c.msid = ca.msid\nJOIN actor a ON ca.aid = a.aid\nJOIN movie m ON c.msid = m.mid\nWHERE a.name = 'Kate Winslet';","1452":"SELECT COUNT(*) AS number_of_papers FROM writes JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1453":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND RESTAURANT.CITY_NAME = 'San Francisco' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1454":"SELECT COUNT(DISTINCT t4.title) \nFROM organization AS t1\nJOIN author AS t2 ON t1.oid = t2.oid\nJOIN writes AS t3 ON t2.aid = t3.aid\nJOIN publication AS t4 ON t3.pid = t4.pid\nWHERE t1.name = 'University of Michigan';","1455":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'french' AND (GEOGRAPHIC.REGION = 'yosemite' OR GEOGRAPHIC.REGION = 'mono lake');","1456":"SELECT publication.pid FROM publication JOIN conference ON publication.cid = conference.cid JOIN writes ON writes.pid = publication.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' AND conference.name = 'VLDB' AND publication.year > 2000;","1457":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View';","1458":"SELECT movie.title, movie.release_year FROM movie JOIN classification ON movie.mid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE movie.release_year = 2010 AND genre.genre = 'Sci-Fi';","1459":"SELECT COUNT(DISTINCT author.aid) AS researcher_count FROM author WHERE author.homepage LIKE '%University of Michigan%';","1460":"SELECT organization.name FROM organization WHERE organization.name = 'H. V. Jagadish';","1461":"SELECT actor.name FROM actor WHERE actor.birth_city = 'Tehran';","1462":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.FOOD_TYPE = 'jamerican cuisine' AND RESTAURANT.CITY_NAME = 'san francisco';","1463":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1464":"SELECT m.mid, m.title\nFROM movie m\nJOIN cast c ON m.mid = c.msid\nJOIN actor a ON c.aid = a.aid\nWHERE a.name = 'Robin Wright';","1465":"SELECT DISTINCT a.name FROM actor a JOIN cast c ON a.aid = c.aid WHERE c.msid IN (SELECT msid FROM cast WHERE aid = (SELECT aid FROM actor WHERE name = 'Tom Hanks'));","1466":"SELECT COUNT(publication.pid) AS number_of_papers FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE author.name = 'H. V. Jagadish' AND journal.homepage = 'PVLDB';","1467":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'alameda';","1468":"SELECT publication.pid FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' AND publication.citation_num > 200;","1469":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1470":"SELECT movie.mid, movie.title\nFROM movie\nJOIN cast ON cast.msid = movie.mid\nJOIN actor ON cast.aid = actor.aid\nWHERE actor.name = 'Robin Wright';","1471":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area' AND RESTAURANT.FOOD_TYPE = 'American' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1472":"SELECT RESTAURANT.NAME FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND RESTAURANT.CITY_NAME = 'mountain view';","1473":"SELECT journal.homepage, journal.jid FROM journal JOIN publication ON publication.jid = journal.jid JOIN writes ON writes.pid = publication.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1474":"SELECT conference.* FROM conference JOIN publication ON publication.cid = conference.cid WHERE publication.title = 'Making database systems usable';","1475":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1476":"SELECT COUNT(DISTINCT actor.aid) \nFROM cast \nINNER JOIN movie ON cast.msid = movie.mid \nINNER JOIN actor ON cast.aid = actor.aid \nWHERE movie.title = 'Saving Private Ryan';","1477":"SELECT journal.name FROM journal JOIN publication ON publication.jid = journal.jid JOIN writes ON writes.pid = publication.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY journal.jid HAVING COUNT(publication.pid) = (SELECT MAX(paper_count) FROM (SELECT COUNT(publication.pid) AS paper_count FROM publication JOIN writes ON writes.pid = publication.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY publication.jid) AS counts);","1478":"SELECT COUNT(*) AS number_of_papers FROM publication JOIN writes ON publication.pid = writes.pid JOIN conference ON publication.cid = conference.cid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' AND conference.name = 'VLDB';","1479":"SELECT publication.year, COUNT(publication.pid) AS number_of_papers FROM conference JOIN publication ON conference.cid = publication.cid WHERE conference.name = 'VLDB' GROUP BY publication.year;","1480":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC;","1481":"SELECT a.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN movie m ON c.msid = m.mid\nWHERE m.title = 'The Imitation Game' AND c.role = 'Alan Turing';","1482":"SELECT COUNT(DISTINCT author.aid) FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database';","1483":"SELECT COUNT(publication_keyword.pid) FROM publication_keyword JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Natural Language';","1484":"SELECT COUNT(*) FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year < 2000;","1485":"SELECT publication.pid, publication.title, publication.abstract, publication.year, publication.citation_num, publication.reference_num FROM publication JOIN conference ON publication.cid = conference.cid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE conference.name = 'PVLDB' AND author.homepage LIKE '%University of Michigan%';","1486":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.CITY_NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'alameda';","1487":"SELECT COUNT(RESTAURANT.ID) FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'French' AND RESTAURANT.CITY_NAME = 'Palo Alto';","1488":"SELECT actor.aid FROM actor WHERE actor.birth_year = 1984;","1489":"SELECT author.aid FROM author JOIN writes ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year > 1995 AND publication.year < 2002;","1490":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'San Francisco' AND RESTAURANT.FOOD_TYPE = 'French' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1491":"SELECT COUNT(*) FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE author.name = 'H. V. Jagadish' AND publication.year > 2000 AND conference.name = 'PVLDB';","1492":"SELECT DISTINCT author.aid, author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' AND publication.year = 2010;","1493":"SELECT keyword.keyword FROM keyword;","1494":"SELECT t4.title\nFROM actor t1\nJOIN cast t2 ON t1.aid = t2.aid\nJOIN copyright t3 ON t2.msid = t3.msid\nJOIN tv_series t4 ON t3.msid = t4.sid\nWHERE t1.name = 'Scott Foley';","1495":"SELECT publication.pid, publication.title FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid JOIN conference ON publication.cid = conference.cid WHERE author.name = 'H. V. Jagadish' AND conference.name = 'VLDB' AND publication.citation_num > 200;","1496":"SELECT publication.pid, publication.title FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did JOIN organization ON domain.did = organization.oid WHERE organization.name = 'University of Michigan';","1497":"SELECT director.name FROM director WHERE director.nationality = 'Afghanistan';","1498":"SELECT COUNT(*) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.COUNTY = 'santa cruz county' AND RESTAURANT.FOOD_TYPE = 'jamerican cuisine';","1499":"SELECT publication.pid FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name IN ('H. V. Jagadish', 'Divesh Srivastava') AND publication.year < 2000;","1500":"SELECT director.name FROM tv_series JOIN directed_by ON tv_series.sid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE tv_series.title = 'House of Cards' AND tv_series.release_year = 2013;","1501":"SELECT COUNT(*) FROM directed_by JOIN director ON directed_by.did = director.did WHERE director.name = 'Steven Spielberg';","1502":"SELECT director.nationality, director.birth_city FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title = 'The Past';","1503":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1504":"SELECT movie.mid FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.birth_city = 'Los Angeles';","1505":"SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year = 1984;","1506":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'alameda';","1507":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC;","1508":"SELECT business.business_id, COUNT(review.rid) AS review_count FROM review JOIN business ON review.business_id = business.business_id WHERE review.month = 4 GROUP BY business.business_id ORDER BY review_count DESC LIMIT 1;","1509":"SELECT COUNT(*) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.NAME = 'buttercup kitchen' AND GEOGRAPHIC.CITY_NAME = 'san francisco';","1510":"SELECT movie.title, movie.mid FROM movie JOIN copyright ON movie.mid = copyright.msid JOIN classification ON copyright.msid = classification.msid GROUP BY movie.mid, movie.title HAVING COUNT(classification.gid) = (SELECT MAX(genre_count) FROM (SELECT COUNT(gid) AS genre_count FROM classification GROUP BY msid) AS genre_counts);","1511":"SELECT publication.title, publication.citation_num FROM publication JOIN writes ON publication.pid = writes.pid WHERE writes.aid = (SELECT aid FROM author WHERE name = 'H. V. Jagadish') ORDER BY publication.citation_num DESC LIMIT 1;","1512":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.CITY_NAME = 'alameda';","1513":"SELECT actor.birth_city FROM actor WHERE actor.name = 'Kevin Spacey';","1514":"SELECT COUNT(DISTINCT t3.title)\nFROM tags t1\nJOIN keyword t2 ON t1.kid = t2.id\nJOIN movie t3 ON t1.msid = t3.mid\nWHERE t3.release_year > 1990\nAND t2.keyword = 'Persians';","1515":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.STREET_NAME = 'Buchanan' AND LOCATION.CITY_NAME = 'San Francisco';","1516":"SELECT publication.title FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name IN ('H. V. Jagadish', 'Divesh Srivastava') ORDER BY publication.citation_num DESC LIMIT 1;","1517":"SELECT DISTINCT d.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN copyright cr ON c.msid = cr.msid\nJOIN directed_by db ON cr.msid = db.msid\nJOIN director d ON db.did = d.did\nJOIN movie m ON cr.msid = m.mid\nWHERE a.name = 'Kate Winslet';","1518":"SELECT m.title\nFROM movie m\nJOIN directed_by db ON m.mid = db.msid\nJOIN director d ON db.did = d.did\nJOIN cast c ON m.mid = c.msid\nJOIN actor a ON c.aid = a.aid\nWHERE d.name = 'Asghar Farhadi' AND a.name = 'Taraneh Alidoosti';","1519":"SELECT organization.name, organization.homepage FROM organization WHERE organization.continent = 'North America';","1520":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'bay area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1521":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island';","1522":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.CITY_NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area';","1523":"SELECT publication.pid FROM publication JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Natural Language';","1524":"SELECT a.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN movie m ON c.msid = m.mid\nWHERE a.gender = 'female' AND m.title = 'Saving Private Ryan';","1525":"SELECT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid WHERE author.name = 'University of Michigan' GROUP BY author.aid, author.name HAVING SUM(publication.citation_num) > 5000;","1526":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'French';","1527":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND LOCATION.CITY_NAME = 'San Francisco' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1528":"SELECT COUNT(publication.pid) AS number_of_papers FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' AND publication.year > 2000;","1529":"SELECT COUNT(DISTINCT w.aid) AS number_of_authors FROM writes w JOIN author a ON w.aid = a.aid WHERE w.pid IN (SELECT pid FROM writes WHERE aid = (SELECT aid FROM author WHERE name = 'H. V. Jagadish'));","1530":"SELECT COUNT(DISTINCT movie.mid) AS movie_count\nFROM cast\nINNER JOIN actor ON cast.aid = actor.aid\nINNER JOIN movie ON cast.msid = movie.mid\nWHERE actor.name = 'Shahab Hosseini';","1531":"SELECT journal.homepage FROM journal WHERE journal.name = 'PVLDB';","1532":"SELECT organization.name FROM organization JOIN domain_author ON organization.oid = domain_author.aid JOIN domain ON domain_author.did = domain.did WHERE organization.continent = 'North America' AND domain.name = 'Databases';","1533":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND GEOGRAPHIC.CITY_NAME = 'san francisco' AND LOCATION.STREET_NAME = 'buchanan';","1534":"SELECT movie.title, movie.release_year FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.name = 'Jim Jarmusch' ORDER BY movie.release_year DESC LIMIT 1;","1535":"SELECT publication.pid, publication.citation_num FROM publication JOIN conference ON publication.cid = conference.cid WHERE publication.year > 2000 AND conference.name = 'VLDB' ORDER BY publication.citation_num DESC LIMIT 1;","1536":"SELECT COUNT(movie.mid) FROM directed_by JOIN director ON directed_by.did = director.did JOIN movie ON directed_by.msid = movie.mid WHERE director.name = 'Quentin Tarantino' AND movie.release_year > 2010;","1537":"SELECT a.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN copyright cp ON c.msid = cp.msid\nJOIN movie m ON cp.msid = m.mid\nWHERE a.nationality = 'Canada'\nAND m.title LIKE '%James Bond%';","1538":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1539":"SELECT publication.title FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' ORDER BY publication.citation_num DESC LIMIT 1;","1540":"SELECT * FROM actor WHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980;","1541":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View';","1542":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.REGION = 'yosemite' OR GEOGRAPHIC.REGION = 'mono lake');","1543":"SELECT publication.*, journal.name FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB';","1544":"SELECT publication.* FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE (author.name = 'H. V. Jagadish' OR author.name = 'Divesh Srivastava') AND publication.citation_num > 200;","1545":"SELECT conference.homepage FROM conference WHERE conference.name = 'VLDB';","1546":"SELECT COUNT(*) FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE (author.name = 'H. V. Jagadish' OR author.name = 'Divesh Srivastava') AND publication.year < 2000;","1547":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.CITY_NAME = 'alameda' AND RESTAURANT.RATING > 4 ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1548":"SELECT t2.name\nFROM cast t1\nINNER JOIN actor t2 ON t1.aid = t2.aid\nINNER JOIN movie t3 ON t1.msid = t3.mid\nWHERE t1.role = 'Alan Turing' AND t3.title = 'The Imitation Game';","1549":"SELECT tv_series.title, tv_series.release_year FROM tv_series JOIN written_by ON tv_series.sid = written_by.msid JOIN writer ON written_by.wid = writer.wid WHERE writer.name = 'Shonda Rhimes';","1550":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication_keyword.pid = publication.pid WHERE publication.title = 'Making database systems usable';","1551":"SELECT COUNT(*) FROM RESTAURANT WHERE FOOD_TYPE = 'french' AND CITY_NAME = 'palo alto';","1552":"SELECT organization.homepage FROM organization WHERE organization.name = 'University of Michigan';","1553":"SELECT COUNT(*) AS number_of_papers FROM publication WHERE publication.year < 2000 AND publication.title LIKE '%PVLDB%';","1554":"SELECT COUNT(movie.mid) FROM directed_by JOIN movie ON directed_by.msid = movie.mid WHERE directed_by.did = (SELECT did FROM director WHERE name = 'Quentin Tarantino') AND movie.release_year < 2010;","1555":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1556":"SELECT publication.pid FROM publication WHERE publication.year > 2000;","1557":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area' AND RESTAURANT.RATING > 4.0;","1558":"SELECT publication.year, COUNT(publication.pid) AS number_of_papers FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' GROUP BY publication.year;","1559":"SELECT actor.nationality FROM actor WHERE actor.name = 'Christoph Waltz';","1560":"SELECT RESTAURANT.NAME FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'san francisco' AND RESTAURANT.FOOD_TYPE = 'french' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1561":"SELECT author.homepage FROM author WHERE author.name = 'H. V. Jagadish';","1562":"SELECT publication.* FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did JOIN organization ON domain.oid = organization.oid WHERE publication.year > 2000 AND organization.name = 'University of Michigan';","1563":"SELECT COUNT(keyword.kid) FROM keyword JOIN domain_keyword ON keyword.kid = domain_keyword.kid JOIN domain ON domain_keyword.did = domain.did WHERE domain.name = 'Databases';","1564":"SELECT d.name\nFROM movie m\nJOIN directed_by db ON m.mid = db.msid\nJOIN director d ON db.did = d.did\nWHERE m.title = \"Joy\" AND m.release_year = 2015;","1565":"SELECT actor.aid, actor.gender, actor.name, actor.nationality, actor.birth_city, actor.birth_year FROM actor WHERE actor.nationality = 'Afghanistan';","1566":"SELECT m.title\nFROM movie m\nJOIN cast c1 ON m.mid = c1.msid\nJOIN actor a1 ON c1.aid = a1.aid\nJOIN cast c2 ON m.mid = c2.msid\nJOIN actor a2 ON c2.aid = a2.aid\nWHERE a1.name = 'Woody Strode'\nAND a2.name = 'Jason Robards';","1567":"SELECT RESTAURANT.NAME FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'Mountain View' AND RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.RATING > 3;","1568":"SELECT RESTAURANT.NAME, RESTAURANT.CITY_NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.REGION = 'Bay Area';","1569":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND RESTAURANT.CITY_NAME = 'san francisco';","1570":"SELECT publication.year, SUM(publication.citation_num) AS total_citations FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'PVLDB' GROUP BY publication.year;","1571":"SELECT COUNT(DISTINCT author.aid) AS number_of_researchers FROM author JOIN domain_author ON author.aid = domain_author.aid JOIN domain ON domain_author.did = domain.did JOIN organization ON author.oid = organization.oid WHERE domain.name = 'Databases' AND organization.name = 'University of Michigan';","1572":"SELECT genre.genre FROM director JOIN directed_by ON director.did = directed_by.did JOIN classification ON directed_by.msid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE director.name = 'Asghar Farhadi';","1573":"SELECT publication.* FROM publication JOIN conference ON publication.cid = conference.cid JOIN domain_conference ON conference.cid = domain_conference.cid JOIN domain_author ON domain_conference.did = domain_author.did JOIN author ON domain_author.aid = author.aid WHERE conference.name = 'VLDB' AND author.homepage LIKE '%University of Michigan%';","1574":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND RESTAURANT.CITY_NAME = 'San Francisco' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1575":"SELECT COUNT(DISTINCT t2.title) \nFROM cast t1 \nINNER JOIN actor t3 ON t1.aid = t3.aid \nINNER JOIN movie t2 ON t1.msid = t2.mid \nWHERE t3.name = 'Shahab Hosseini';","1576":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND RESTAURANT.CITY_NAME = 'San Francisco' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1577":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1578":"SELECT COUNT(*) AS number_of_papers FROM author JOIN writes ON author.aid = writes.aid WHERE author.name IN ('H. V. Jagadish', 'Divesh Srivastava');","1579":"SELECT movie.budget FROM movie WHERE movie.title = 'Finding Nemo';","1580":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1581":"SELECT COUNT(*) FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Chinese' AND GEOGRAPHIC.REGION = 'Bay Area';","1582":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1583":"SELECT * FROM actor WHERE actor.gender = 'female' AND actor.birth_city = 'New York City' AND actor.birth_year > 1980;","1584":"SELECT publication.pid, publication.title, publication.year FROM publication JOIN conference ON publication.cid = conference.cid JOIN organization ON conference.cid = organization.oid WHERE conference.name = 'PVLDB' AND publication.year > 2000 AND organization.name = 'University of Michigan';","1585":"SELECT t4.title\nFROM actor t1\nJOIN cast t2 ON t1.aid = t2.aid\nJOIN copyright t3 ON t2.msid = t3.msid\nJOIN tv_series t4 ON t3.msid = t4.sid\nWHERE t1.name = 'Scott Foley';","1586":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'Bay Area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1587":"SELECT keyword.keyword FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication.pid = publication_keyword.pid JOIN conference ON conference.cid = publication.cid WHERE conference.name = 'VLDB';","1588":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island';","1589":"SELECT SUM(publication.citation_num) AS total_citations FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year < 2005;","1590":"SELECT a.name\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN movie m ON c.msid = m.mid\nWHERE m.title = 'The Imitation Game' \nAND c.role = 'Alan Turing';","1591":"SELECT COUNT(DISTINCT actor.aid)\nFROM actor\nJOIN cast ON cast.aid = actor.aid\nJOIN movie ON cast.msid = movie.mid\nJOIN directed_by ON directed_by.msid = movie.mid\nJOIN director ON directed_by.did = director.did\nWHERE actor.nationality = 'Iran'\nAND director.name = 'Jim Jarmusch';","1592":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.REGION = 'Yosemite' OR GEOGRAPHIC.REGION = 'Mono Lake');","1593":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island';","1594":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND GEOGRAPHIC.CITY_NAME = 'san francisco';","1595":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island' AND RESTAURANT.RATING >= 3;","1596":"SELECT publication.pid FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' AND publication.year > 2000 AND publication.jid = (SELECT jid FROM journal WHERE name = 'PVLDB');","1597":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.CITY_NAME = 'Mountain View';","1598":"SELECT m.title\nFROM movie m\nJOIN cast c ON m.mid = c.msid\nJOIN actor a ON c.aid = a.aid\nWHERE a.name = 'Gabriele Ferzetti'\nORDER BY m.release_year DESC\nLIMIT 1;","1599":"SELECT movie.release_year FROM movie WHERE movie.title = 'The Imitation Game';","1600":"SELECT COUNT(*) FROM actor WHERE actor.gender = 'female' AND actor.birth_city = 'New York City' AND actor.birth_year > 1980;","1601":"SELECT SUM(publication.citation_num) FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB';","1602":"SELECT conference.name FROM conference JOIN publication ON conference.cid = publication.cid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY conference.cid ORDER BY COUNT(publication.pid) DESC LIMIT 1;","1603":"SELECT COUNT(publication.pid) FROM publication JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB' AND publication.year > 2000 AND publication.pid IN (SELECT pid FROM domain_publication WHERE did IN (SELECT did FROM domain WHERE name = 'University of Michigan'));","1604":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.CITY_NAME = 'san francisco' AND LOCATION.STREET_NAME = 'buchanan' AND RESTAURANT.FOOD_TYPE = 'arabic' AND RESTAURANT.RATING IS NOT NULL ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1605":"SELECT actor.name, actor.aid FROM actor WHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980;","1606":"SELECT m.title\nFROM movie m\nJOIN cast c ON m.mid = c.msid\nJOIN actor a ON c.aid = a.aid\nJOIN directed_by db ON m.mid = db.msid\nJOIN director d ON db.did = d.did\nWHERE a.name = 'Taraneh Alidoosti'\nAND d.name = 'Asghar Farhadi';","1607":"SELECT COUNT(DISTINCT movie.title)\nFROM cast\nINNER JOIN actor ON cast.aid = actor.aid\nINNER JOIN movie ON cast.msid = movie.mid\nWHERE actor.name = 'Shahab Hosseini';","1608":"SELECT actor.nationality FROM actor WHERE actor.name = 'Christoph Waltz';","1609":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE LOCATION.STREET_NAME = 'bethel island rd' AND LOCATION.CITY_NAME = 'bethel island';","1610":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'Arabic' AND LOCATION.STREET_NAME = 'Buchanan' AND GEOGRAPHIC.CITY_NAME = 'San Francisco' ORDER BY RESTAURANT.RATING DESC;","1611":"SELECT SUM(publication.citation_num) AS total_citations FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did JOIN organization ON domain.oid = organization.oid WHERE organization.name = 'University of Michigan';","1612":"SELECT publication.pid FROM publication JOIN journal ON publication.jid = journal.jid WHERE publication.year > 2000 AND journal.name = 'PVLDB' ORDER BY publication.citation_num DESC LIMIT 1;","1613":"SELECT movie.title, writer.name, producer.name FROM movie JOIN written_by ON written_by.msid = movie.mid JOIN writer ON written_by.wid = writer.wid JOIN made_by ON made_by.msid = movie.mid JOIN producer ON made_by.pid = producer.pid WHERE writer.name = 'Woody Allen' AND producer.name = 'Woody Allen';","1614":"SELECT COUNT(*) AS number_of_papers FROM publication WHERE publication.year > 2000 AND publication.title LIKE '%PVLDB%';","1615":"SELECT author.aid, author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication_keyword ON writes.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Relational Database';","1616":"SELECT COUNT(DISTINCT keyword.kid) AS keyword_count FROM keyword JOIN publication_keyword ON keyword.kid = publication_keyword.kid JOIN publication ON publication.pid = publication_keyword.pid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish';","1617":"SELECT publication.citation_num FROM publication WHERE publication.title = 'Making database systems usable';","1618":"SELECT movie.title FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.name = 'Alfred Hitchcock';","1619":"SELECT publication.year, COUNT(publication.pid) AS number_of_papers FROM writes JOIN author ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid WHERE author.name = 'H. V. Jagadish' GROUP BY publication.year;","1620":"SELECT COUNT(*) AS movie_count FROM movie WHERE movie.release_year = 2013;","1621":"SELECT RESTAURANT.NAME, RESTAURANT.FOOD_TYPE, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.REGION = 'Yosemite' OR GEOGRAPHIC.REGION = 'Mono Lake');","1622":"SELECT DISTINCT director.name FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE movie.title = 'James Bond';","1623":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.FOOD_TYPE = 'French' AND LOCATION.CITY_NAME = 'Mountain View';","1624":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1625":"SELECT SUM(publication.citation_num) AS total_citations FROM publication JOIN publication_keyword ON publication.pid = publication_keyword.pid JOIN keyword ON publication_keyword.kid = keyword.kid WHERE keyword.keyword = 'Natural Language';","1626":"SELECT COUNT(RESTAURANT.ID) FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'French' AND RESTAURANT.CITY_NAME = 'Palo Alto';","1627":"SELECT SUM(publication.citation_num) AS total_citations FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'PVLDB' AND publication.year < 2005;","1628":"SELECT author.name, author.homepage FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid WHERE author.homepage LIKE '%University of Michigan%' GROUP BY author.aid HAVING SUM(publication.citation_num) > 5000;","1629":"SELECT COUNT(*) AS number_of_papers FROM publication WHERE publication.year > 2000;","1630":"SELECT RESTAURANT.NAME FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND GEOGRAPHIC.CITY_NAME IN ('Yosemite', 'Mono Lake');","1631":"SELECT journal.jid, journal.name FROM journal JOIN publication ON journal.jid = publication.jid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY journal.jid, journal.name HAVING COUNT(publication.pid) > 10;","1632":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.CITY_NAME = 'Yosemite' OR GEOGRAPHIC.CITY_NAME = 'Mono Lake') ORDER BY RESTAURANT.RATING DESC;","1633":"SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE journal.name = 'PVLDB';","1634":"SELECT publication.title, publication.year FROM publication JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE publication.year > 2005 AND (author.name = 'H. V. Jagadish' OR author.name = 'Yunyao Li');","1635":"SELECT publication.* FROM publication JOIN conference ON publication.cid = conference.cid WHERE publication.year > 2000 AND publication.citation_num > 200 AND conference.name = 'VLDB';","1636":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'American' AND GEOGRAPHIC.REGION = 'bay area' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1637":"SELECT DISTINCT author.aid, author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN journal ON publication.jid = journal.jid WHERE publication.year > 2010 AND journal.name = 'PVLDB';","1638":"SELECT DISTINCT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year = 2002;","1639":"SELECT author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid WHERE author.homepage LIKE '%University of Michigan%' GROUP BY author.aid ORDER BY SUM(publication.citation_num) DESC LIMIT 1;","1640":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1641":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID WHERE RESTAURANT.CITY_NAME = 'mountain view' AND RESTAURANT.FOOD_TYPE = 'arabic' AND RESTAURANT.RATING >= 4;","1642":"SELECT COUNT(DISTINCT m.mid)\nFROM actor a\nJOIN cast c ON a.aid = c.aid\nJOIN copyright cr ON c.msid = cr.msid\nJOIN movie m ON cr.msid = m.mid\nWHERE a.name = 'Shahab Hosseini';","1643":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE GEOGRAPHIC.CITY_NAME = 'san francisco' AND RESTAURANT.FOOD_TYPE = 'french' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1644":"SELECT writer.name FROM movie JOIN copyright ON movie.mid = copyright.msid JOIN written_by ON copyright.msid = written_by.msid JOIN writer ON written_by.wid = writer.wid WHERE movie.title = 'The Truman Show';","1645":"SELECT COUNT(DISTINCT m.title) \nFROM cast c\nJOIN actor a ON c.aid = a.aid\nJOIN movie m ON c.msid = m.mid\nWHERE a.name = \"Humphrey Bogart\" \nAND m.release_year < 1942;","1646":"SELECT DISTINCT author.aid, author.name FROM author JOIN writes ON author.aid = writes.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB';","1647":"SELECT keyword.keyword FROM keyword JOIN domain_keyword ON keyword.kid = domain_keyword.kid JOIN domain ON domain_keyword.did = domain.did WHERE domain.name = 'Databases';","1648":"SELECT author.aid, author.name FROM author JOIN writes ON writes.aid = author.aid JOIN publication ON writes.pid = publication.pid JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' AND publication.year < 2002;","1649":"SELECT a.name\nFROM movie m\nJOIN copyright c ON m.mid = c.msid\nJOIN cast ca ON ca.msid = c.msid\nJOIN actor a ON ca.aid = a.aid\nWHERE m.title = 'Camp X-Ray';","1650":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.CITY_NAME = 'san francisco' AND RESTAURANT.FOOD_TYPE = 'french' ORDER BY RESTAURANT.RATING DESC LIMIT 1;","1651":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT WHERE RESTAURANT.FOOD_TYPE = 'French';","1652":"SELECT RESTAURANT.NAME, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE LOCATION.STREET_NAME = 'Buchanan' AND GEOGRAPHIC.CITY_NAME = 'San Francisco' AND RESTAURANT.FOOD_TYPE = 'Arabic' AND RESTAURANT.RATING = 'Good';","1653":"SELECT RESTAURANT.NAME, RESTAURANT.RATING FROM RESTAURANT JOIN LOCATION ON RESTAURANT.ID = LOCATION.RESTAURANT_ID JOIN GEOGRAPHIC ON LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'French' AND (GEOGRAPHIC.CITY_NAME = 'yosemite' OR GEOGRAPHIC.CITY_NAME = 'mono lake');","1654":"SELECT conference.cid FROM conference JOIN publication ON conference.cid = publication.cid JOIN writes ON publication.pid = writes.pid JOIN author ON writes.aid = author.aid WHERE author.name = 'H. V. Jagadish' GROUP BY conference.cid HAVING COUNT(publication.pid) > 10;","1655":"SELECT RESTAURANT.NAME, RESTAURANT.RATING, LOCATION.HOUSE_NUMBER, LOCATION.STREET_NAME FROM RESTAURANT JOIN LOCATION ON RESTAURANT.CITY_NAME = LOCATION.CITY_NAME WHERE RESTAURANT.FOOD_TYPE = 'arabic' AND LOCATION.STREET_NAME = 'buchanan' AND LOCATION.CITY_NAME = 'san francisco';","1656":"SELECT publication.year, SUM(publication.citation_num) AS total_citations FROM publication JOIN conference ON publication.cid = conference.cid WHERE conference.name = 'VLDB' GROUP BY publication.year;","1657":"SELECT COUNT(publication.pid) FROM publication JOIN domain_publication ON publication.pid = domain_publication.pid JOIN domain ON domain_publication.did = domain.did JOIN organization ON organization.oid = domain.oid WHERE organization.name = 'University of Michigan' AND domain.name = 'Databases';","1658":"SELECT DISTINCT a2.name FROM author a1 JOIN writes w ON a1.aid = w.aid JOIN publication p ON w.pid = p.pid JOIN writes w2 ON p.pid = w2.pid JOIN author a2 ON w2.aid = a2.aid WHERE a1.name = 'H. V. Jagadish' AND p.year > 2000;"},"gold_sql":{"0":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","1":"SELECT COUNT ( city_name ) FROM city;","2":"SELECT state_name FROM state;","3":"SELECT population FROM city WHERE city_name  =  \"boulder\";","4":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","5":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );","6":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","7":"SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";","8":"SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;","9":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","10":"SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","11":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","12":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","13":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","14":"SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"rhode island\";","15":"SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";","16":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","17":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","18":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","19":"SELECT population FROM state WHERE state_name  =  \"california\";","20":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","21":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","22":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","23":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","24":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );","25":"SELECT COUNT ( state_name ) FROM state;","26":"SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );","27":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","28":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","29":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","30":"SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );","31":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","32":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","33":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","34":"SELECT population FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","35":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","36":"SELECT area FROM state WHERE state_name  =  \"new mexico\";","37":"SELECT city_name FROM city WHERE state_name  =  \"texas\";","38":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","39":"SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );","40":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","41":"SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";","42":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );","43":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";","44":"SELECT state_name FROM state;","45":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","46":"SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";","47":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );","48":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";","49":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","50":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","51":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","52":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","53":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","54":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","55":"SELECT area FROM state WHERE capital  =  \"albany\";","56":"SELECT density FROM state WHERE state_name  =  \"wyoming\";","57":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","58":"SELECT COUNT ( city_name ) FROM city;","59":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );","60":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","61":"SELECT area FROM state WHERE state_name  =  \"new mexico\";","62":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","63":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","64":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","65":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","66":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","67":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );","68":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","69":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","70":"SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );","71":"SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","72":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","73":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","74":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";","75":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";","76":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","77":"SELECT population FROM city WHERE city_name  =  \"boulder\";","78":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;","79":"SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","80":"SELECT SUM ( population ) FROM state;","81":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";","82":"SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","83":"SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;","84":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","85":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","86":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","87":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","88":"SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";","89":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","90":"SELECT city_name FROM city WHERE population  >  150000;","91":"SELECT MAX ( highest_elevation ) FROM highlow;","92":"SELECT population FROM state WHERE state_name  =  \"california\";","93":"SELECT population FROM state WHERE state_name  =  \"california\";","94":"SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","95":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","96":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","97":"SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","98":"SELECT population FROM state WHERE state_name  =  \"california\";","99":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","100":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";","101":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","102":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","103":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";","104":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","105":"SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;","106":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) );","107":"SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );","108":"SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;","109":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"colorado\" ) );","110":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","111":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","112":"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );","113":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","114":"SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","115":"SELECT highest_point FROM highlow;","116":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","117":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","118":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","119":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","120":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );","121":"SELECT capital FROM state WHERE state_name  =  \"texas\";","122":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","123":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";","124":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","125":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );","126":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","127":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","128":"SELECT SUM ( population ) FROM state;","129":"SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";","130":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );","131":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","132":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","133":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";","134":"SELECT population FROM state WHERE state_name  =  \"california\";","135":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","136":"SELECT density FROM state;","137":"SELECT population FROM city WHERE city_name  =  \"boulder\";","138":"SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","139":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";","140":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","141":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );","142":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";","143":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","144":"SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );","145":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";","146":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );","147":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","148":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","149":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","150":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );","151":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );","152":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","153":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";","154":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","155":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";","156":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","157":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","158":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","159":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";","160":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","161":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );","162":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";","163":"SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","164":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","165":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","166":"SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;","167":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","168":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","169":"SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";","170":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","171":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","172":"SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );","173":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","174":"SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","175":"SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";","176":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","177":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","178":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";","179":"SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","180":"SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";","181":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","182":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","183":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","184":"SELECT SUM ( LENGTH ) FROM river;","185":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","186":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","187":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","188":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","189":"SELECT SUM ( area ) FROM state;","190":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );","191":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","192":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","193":"SELECT COUNT ( city_name ) FROM city;","194":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","195":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","196":"SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );","197":"SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","198":"SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","199":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","200":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","201":"SELECT COUNT ( city_name ) FROM city;","202":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";","203":"SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","204":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","205":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","206":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","207":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","208":"SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","209":"SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","210":"SELECT population FROM city WHERE city_name  =  \"boulder\";","211":"SELECT COUNT ( state_name ) FROM state;","212":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","213":"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );","214":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;","215":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","216":"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );","217":"SELECT density FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","218":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","219":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );","220":"SELECT COUNT ( city_name ) FROM city;","221":"SELECT city_name FROM city WHERE state_name  =  \"texas\";","222":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","223":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","224":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","225":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","226":"SELECT COUNT ( state_name ) FROM state;","227":"SELECT capital FROM state WHERE state_name  =  \"texas\";","228":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );","229":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","230":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","231":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";","232":"SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","233":"SELECT capital FROM state WHERE state_name  =  \"texas\";","234":"SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","235":"SELECT lake_name FROM lake WHERE state_name  =  \"california\";","236":"SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","237":"SELECT population FROM state WHERE state_name  =  \"california\";","238":"SELECT MAX ( highest_elevation ) FROM highlow;","239":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","240":"SELECT area FROM state WHERE state_name  =  \"new mexico\";","241":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","242":"SELECT city_name FROM city WHERE state_name  =  \"texas\";","243":"SELECT population FROM city WHERE city_name  =  \"boulder\";","244":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","245":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","246":"SELECT population FROM state WHERE state_name  =  \"california\";","247":"SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";","248":"SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );","249":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","250":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","251":"SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";","252":"SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","253":"SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;","254":"SELECT MAX ( highest_elevation ) FROM highlow;","255":"SELECT population FROM city WHERE city_name  =  \"boulder\";","256":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","257":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","258":"SELECT area FROM state WHERE state_name  =  \"new mexico\";","259":"SELECT density FROM state WHERE state_name  =  \"wyoming\";","260":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","261":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;","262":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","263":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","264":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","265":"SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";","266":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","267":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","268":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","269":"SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","270":"SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );","271":"SELECT COUNT ( state_name ) FROM state;","272":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","273":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","274":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","275":"SELECT population FROM city WHERE city_name  =  \"boulder\";","276":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","277":"SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );","278":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","279":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";","280":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","281":"SELECT city_name FROM city WHERE population  >  150000;","282":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","283":"SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","284":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";","285":"SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","286":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","287":"SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";","288":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","289":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","290":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";","291":"SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );","292":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","293":"SELECT city_name FROM city WHERE state_name  =  \"texas\";","294":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","295":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";","296":"SELECT city_name FROM city WHERE state_name  =  \"texas\";","297":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","298":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","299":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","300":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","301":"SELECT MAX ( highest_elevation ) FROM highlow;","302":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","303":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","304":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","305":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","306":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );","307":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","308":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","309":"SELECT population FROM city WHERE city_name  =  \"boulder\";","310":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","311":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );","312":"SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","313":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","314":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );","315":"SELECT COUNT ( state_name ) FROM state;","316":"SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","317":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";","318":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","319":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","320":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","321":"SELECT population FROM city WHERE city_name  =  \"boulder\";","322":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","323":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","324":"SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );","325":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","326":"SELECT population FROM state WHERE state_name  =  \"california\";","327":"SELECT SUM ( area ) FROM state;","328":"SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM river );","329":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","330":"SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;","331":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","332":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";","333":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";","334":"SELECT population FROM state WHERE state_name  =  \"california\";","335":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";","336":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";","337":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","338":"SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";","339":"SELECT capital FROM state WHERE state_name  =  \"texas\";","340":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000;","341":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","342":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","343":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","344":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";","345":"SELECT COUNT ( state_name ) FROM state;","346":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );","347":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","348":"SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";","349":"SELECT area FROM state WHERE state_name  =  \"new mexico\";","350":"SELECT population FROM state WHERE state_name  =  \"california\";","351":"SELECT capital FROM state WHERE state_name  =  \"texas\";","352":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","353":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","354":"SELECT population FROM state WHERE state_name  =  \"california\";","355":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";","356":"SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\";","357":"SELECT city_name FROM city WHERE state_name  =  \"texas\";","358":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","359":"SELECT SUM ( area ) FROM state;","360":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";","361":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );","362":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","363":"SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\";","364":"SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";","365":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;","366":"SELECT traverse FROM river WHERE river_name  =  \"ohio\";","367":"SELECT population FROM city WHERE city_name  =  \"boulder\";","368":"SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";","369":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","370":"SELECT SUM ( area ) FROM state;","371":"SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","372":"SELECT population FROM city WHERE city_name  =  \"boulder\";","373":"SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";","374":"SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","375":"SELECT area FROM state WHERE state_name  =  \"new mexico\";","376":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","377":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","378":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );","379":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","380":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","381":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );","382":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","383":"SELECT border FROM border_info WHERE state_name  =  \"kentucky\";","384":"SELECT population FROM city WHERE city_name  =  \"boulder\";","385":"SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";","386":"SELECT population FROM city WHERE city_name  =  \"boulder\";","387":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","388":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","389":"SELECT density FROM state WHERE state_name  =  \"wyoming\";","390":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );","391":"SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";","392":"SELECT state_name FROM state;","393":"SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );","394":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );","395":"SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );","396":"SELECT population FROM state WHERE state_name  =  \"california\";","397":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","398":"SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );","399":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";","400":"SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\";","401":"SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );","402":"SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","403":"SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );","404":"SELECT city_name FROM city WHERE population  >  150000;","405":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" );","406":"SELECT state_name FROM city WHERE city_name  =  \"springfield\";","407":"SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) );","408":"SELECT capital FROM state WHERE state_name  =  \"texas\";","409":"SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );","410":"SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;","411":"SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;","412":"SELECT river_name FROM river WHERE traverse  =  \"illinois\";","413":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","414":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","415":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","416":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;","417":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";","418":"SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750;","419":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );","420":"SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );","421":"SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;","422":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","423":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","424":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","425":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","426":"SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );","427":"SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );","428":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","429":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","430":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","431":"SELECT COUNT ( DISTINCT state_name ) FROM border_info;","432":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","433":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","434":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );","435":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","436":"SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;","437":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","438":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","439":"SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );","440":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;","441":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";","442":"SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );","443":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","444":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","445":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","446":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","447":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";","448":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;","449":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","450":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;","451":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","452":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","453":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","454":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";","455":"SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","456":"SELECT city_name FROM city;","457":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","458":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";","459":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","460":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","461":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","462":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;","463":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";","464":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );","465":"SELECT state_name FROM state WHERE capital  =  \"salem\";","466":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","467":"SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","468":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","469":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","470":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","471":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","472":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","473":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","474":"SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );","475":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","476":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","477":"SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );","478":"SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\";","479":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","480":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","481":"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;","482":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","483":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;","484":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","485":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","486":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","487":"SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";","488":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","489":"SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );","490":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","491":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","492":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","493":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";","494":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","495":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","496":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","497":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";","498":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;","499":"SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";","500":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","501":"SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;","502":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;","503":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","504":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","505":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","506":"SELECT river_name FROM river WHERE country_name != \"usa\";","507":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","508":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","509":"SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";","510":"SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );","511":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","512":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","513":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","514":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","515":"SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );","516":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","517":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","518":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";","519":"SELECT state_name FROM state WHERE capital  =  \"salem\";","520":"SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;","521":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","522":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","523":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","524":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","525":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","526":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","527":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","528":"SELECT lake_name FROM lake WHERE area  >  750;","529":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";","530":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","531":"SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;","532":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";","533":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","534":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );","535":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","536":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";","537":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","538":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","539":"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;","540":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );","541":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","542":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";","543":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","544":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","545":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;","546":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","547":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","548":"SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );","549":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";","550":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","551":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","552":"SELECT highest_elevation FROM highlow;","553":"SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );","554":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","555":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";","556":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","557":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";","558":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","559":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","560":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","561":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );","562":"SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;","563":"SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );","564":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","565":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";","566":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;","567":"SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );","568":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","569":"SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","570":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","571":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","572":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","573":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;","574":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;","575":"SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;","576":"SELECT area FROM state;","577":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","578":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );","579":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","580":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","581":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","582":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","583":"SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );","584":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","585":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","586":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","587":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","588":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","589":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;","590":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";","591":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","592":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","593":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","594":"SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","595":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";","596":"SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","597":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","598":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";","599":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","600":"SELECT traverse FROM river;","601":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";","602":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","603":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;","604":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","605":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;","606":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","607":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","608":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","609":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","610":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;","611":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );","612":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","613":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );","614":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";","615":"SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";","616":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );","617":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","618":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";","619":"SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );","620":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";","621":"SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );","622":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","623":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","624":"SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","625":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","626":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","627":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","628":"SELECT MAX ( area ) FROM state;","629":"SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","630":"SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );","631":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","632":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","633":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","634":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","635":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );","636":"SELECT density FROM state WHERE capital  =  \"austin\";","637":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","638":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","639":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","640":"SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";","641":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","642":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","643":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","644":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","645":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","646":"SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );","647":"SELECT river_name FROM river;","648":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;","649":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","650":"SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;","651":"SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );","652":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","653":"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","654":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","655":"SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );","656":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","657":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","658":"SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\";","659":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";","660":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","661":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";","662":"SELECT COUNT ( river_name ) FROM river;","663":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","664":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );","665":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","666":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","667":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","668":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","669":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","670":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;","671":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","672":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","673":"SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","674":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","675":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","676":"SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";","677":"SELECT traverse FROM river;","678":"SELECT DISTINCT capital FROM state;","679":"SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );","680":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","681":"SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","682":"SELECT state_name FROM state WHERE capital  =  \"salem\";","683":"SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;","684":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","685":"SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );","686":"SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";","687":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","688":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";","689":"SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";","690":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","691":"SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";","692":"SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";","693":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","694":"SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );","695":"SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;","696":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","697":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","698":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","699":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","700":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","701":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","702":"SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","703":"SELECT lake_name FROM lake;","704":"SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";","705":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","706":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","707":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","708":"SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";","709":"SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );","710":"SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","711":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","712":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","713":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","714":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","715":"SELECT lake_name FROM lake WHERE area  >  750;","716":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;","717":"SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","718":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","719":"SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );","720":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","721":"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"mississippi\" ) );","722":"SELECT state_name FROM state WHERE capital  =  \"salem\";","723":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","724":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","725":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","726":"SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";","727":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","728":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;","729":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","730":"SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";","731":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","732":"SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );","733":"SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","734":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";","735":"SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","736":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","737":"SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );","738":"SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";","739":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","740":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","741":"SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;","742":"SELECT state_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );","743":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";","744":"SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );","745":"SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"ohio\";","746":"SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","747":"SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;","748":"SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";","749":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","750":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;","751":"SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );","752":"SELECT traverse FROM river WHERE LENGTH  >  750;","753":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","754":"SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;","755":"SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;","756":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","757":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","758":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","759":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";","760":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","761":"SELECT population \/ area FROM state WHERE state_name  =  \"pennsylvania\";","762":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";","763":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","764":"SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );","765":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","766":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";","767":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";","768":"SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";","769":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";","770":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","771":"SELECT state_name FROM mountain;","772":"SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );","773":"SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";","774":"SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name );","775":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","776":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","777":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";","778":"SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;","779":"SELECT AVG ( population ) FROM state;","780":"SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );","781":"SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";","782":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","783":"SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );","784":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;","785":"SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";","786":"SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );","787":"SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );","788":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";","789":"SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";","790":"SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );","791":"SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750;","792":"SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;","793":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";","794":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","795":"SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;","796":"SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;","797":"SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );","798":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","799":"SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";","800":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","801":"SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";","802":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","803":"SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;","804":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";","805":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","806":"SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );","807":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";","808":"SELECT MAX ( area ) FROM state;","809":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";","810":"SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";","811":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","812":"SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";","813":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","814":"SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"texas\";","815":"SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );","816":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","817":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;","818":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";","819":"SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\";","820":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","821":"SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );","822":"SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";","823":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";","824":"SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );","825":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";","826":"SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";","827":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;","828":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";","829":"SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";","830":"SELECT name FROM business WHERE rating  >  4.5;","831":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","832":"SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";","833":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","834":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;","835":"SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;","836":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";","837":"SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";","838":"SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;","839":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";","840":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";","841":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";","842":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","843":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;","844":"SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;","845":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","846":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;","847":"SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;","848":"SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";","849":"SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";","850":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","851":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","852":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";","853":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","854":"SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";","855":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","856":"SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";","857":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";","858":"SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;","859":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","860":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","861":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","862":"SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";","863":"SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";","864":"SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";","865":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;","866":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","867":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";","868":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";","869":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";","870":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";","871":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","872":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";","873":"SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;","874":"SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";","875":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","876":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";","877":"SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";","878":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","879":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","880":"SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;","881":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";","882":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;","883":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","884":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","885":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","886":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";","887":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";","888":"SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;","889":"SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;","890":"SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";","891":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";","892":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","893":"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";","894":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;","895":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","896":"SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";","897":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;","898":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","899":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";","900":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","901":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;","902":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";","903":"SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";","904":"SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;","905":"SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";","906":"SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;","907":"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";","908":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","909":"SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;","910":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;","911":"SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";","912":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","913":"SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;","914":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","915":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","916":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","917":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";","918":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","919":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;","920":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;","921":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","922":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;","923":"SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";","924":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;","925":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";","926":"SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;","927":"SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;","928":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";","929":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;","930":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";","931":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;","932":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;","933":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";","934":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";","935":"SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;","936":"SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;","937":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;","938":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","939":"SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;","940":"SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;","941":"SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;","942":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","943":"SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;","944":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";","945":"SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";","946":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","947":"SELECT state FROM business WHERE name  =  \"Whataburger\";","948":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;","949":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","950":"SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";","951":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;","952":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;","953":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","954":"SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";","955":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";","956":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","957":"SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";","958":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";","959":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","960":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","961":"SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";","962":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;","963":"SELECT user_id FROM USER WHERE name  =  \"Michelle\";","964":"SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";","965":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","966":"SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;","967":"SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;","968":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","969":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";","970":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","971":"SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";","972":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","973":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","974":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","975":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","976":"SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;","977":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","978":"SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );","979":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;","980":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;","981":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","982":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;","983":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","984":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";","985":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","986":"SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";","987":"SELECT name FROM business WHERE rating  =  3.5;","988":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","989":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","990":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;","991":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","992":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";","993":"SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;","994":"SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";","995":"SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;","996":"SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;","997":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";","998":"SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;","999":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;","1000":"SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;","1001":"SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";","1002":"SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;","1003":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1004":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","1005":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1006":"SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";","1007":"SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;","1008":"SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";","1009":"SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";","1010":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";","1011":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;","1012":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;","1013":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";","1014":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1015":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","1016":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1017":"SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";","1018":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1019":"SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";","1020":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1021":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1022":"SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";","1023":"SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";","1024":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","1025":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1026":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1027":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1028":"SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;","1029":"SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;","1030":"SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;","1031":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1032":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1033":"SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";","1034":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1035":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1036":"SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;","1037":"SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;","1038":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";","1039":"SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";","1040":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";","1041":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;","1042":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","1043":"SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";","1044":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";","1045":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;","1046":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";","1047":"SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";","1048":"SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;","1049":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";","1050":"SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";","1051":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","1052":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";","1053":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","1054":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1055":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;","1056":"SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";","1057":"SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;","1058":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1059":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";","1060":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;","1061":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";","1062":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";","1063":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";","1064":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;","1065":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1066":"SELECT city FROM business WHERE name  =  \"Taj Mahal\";","1067":"SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";","1068":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";","1069":"SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";","1070":"SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;","1071":"SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;","1072":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";","1073":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","1074":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";","1075":"SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;","1076":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;","1077":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";","1078":"SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";","1079":"SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";","1080":"SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;","1081":"SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";","1082":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";","1083":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1084":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";","1085":"SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";","1086":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1087":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";","1088":"SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;","1089":"SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";","1090":"SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";","1091":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";","1092":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";","1093":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1094":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1095":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";","1096":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","1097":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1098":"SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";","1099":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";","1100":"SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;","1101":"SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";","1102":"SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;","1103":"SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";","1104":"SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";","1105":"SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";","1106":"SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;","1107":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";","1108":"SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";","1109":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;","1110":"SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;","1111":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";","1112":"SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";","1113":"SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;","1114":"SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;","1115":"SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;","1116":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1117":"SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;","1118":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";","1119":"SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";","1120":"SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";","1121":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";","1122":"SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;","1123":"SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";","1124":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1125":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","1126":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;","1127":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1128":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";","1129":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","1130":"SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;","1131":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1132":"SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;","1133":"SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;","1134":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","1135":"SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";","1136":"SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;","1137":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;","1138":"SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";","1139":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;","1140":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";","1141":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";","1142":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","1143":"SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;","1144":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","1145":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1146":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;","1147":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","1148":"SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;","1149":"SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;","1150":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";","1151":"SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";","1152":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;","1153":"SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;","1154":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;","1155":"SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";","1156":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","1157":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","1158":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","1159":"SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;","1160":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";","1161":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";","1162":"SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";","1163":"SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";","1164":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;","1165":"SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";","1166":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1167":"SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";","1168":"SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;","1169":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";","1170":"SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;","1171":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );","1172":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";","1173":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1174":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";","1175":"SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;","1176":"SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;","1177":"SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;","1178":"SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;","1179":"SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;","1180":"SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";","1181":"SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";","1182":"SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";","1183":"SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;","1184":"SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;","1185":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","1186":"SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";","1187":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";","1188":"SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";","1189":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;","1190":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;","1191":"SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";","1192":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";","1193":"SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;","1194":"SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";","1195":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1196":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";","1197":"SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;","1198":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;","1199":"SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;","1200":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";","1201":"SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;","1202":"SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";","1203":"SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";","1204":"SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";","1205":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;","1206":"SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";","1207":"SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";","1208":"SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";","1209":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";","1210":"SELECT city FROM business WHERE rating  <  1.5;","1211":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";","1212":"SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;","1213":"SELECT text FROM review WHERE rating  <  1;","1214":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1215":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1216":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1217":"SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";","1218":"SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;","1219":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";","1220":"SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";","1221":"SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";","1222":"SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";","1223":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;","1224":"SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;","1225":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1226":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";","1227":"SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;","1228":"SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;","1229":"SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";","1230":"SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";","1231":"SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";","1232":"SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";","1233":"SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;","1234":"SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;","1235":"SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";","1236":"SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";","1237":"SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;","1238":"SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";","1239":"SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";","1240":"SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;","1241":"SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;","1242":"SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;","1243":"SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;","1244":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1245":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";","1246":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;","1247":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;","1248":"SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;","1249":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;","1250":"SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";","1251":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";","1252":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";","1253":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";","1254":"SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";","1255":"SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";","1256":"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";","1257":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";","1258":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;","1259":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1260":"SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;","1261":"SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";","1262":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";","1263":"SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;","1264":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1265":"SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";","1266":"SELECT homepage FROM conference WHERE name  =  \"VLDB\";","1267":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;","1268":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;","1269":"SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";","1270":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1271":"SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";","1272":"SELECT name FROM actor WHERE birth_city  =  \"Tehran\";","1273":"SELECT birth_city FROM director WHERE name  =  \"director_name0\";","1274":"SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;","1275":"SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";","1276":"SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";","1277":"SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";","1278":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;","1279":"SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";","1280":"SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";","1281":"SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";","1282":"SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";","1283":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1284":"SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1285":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";","1286":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";","1287":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";","1288":"SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;","1289":"SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;","1290":"SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";","1291":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;","1292":"SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;","1293":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;","1294":"SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;","1295":"SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;","1296":"SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;","1297":"SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;","1298":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1299":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";","1300":"SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;","1301":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";","1302":"SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";","1303":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;","1304":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1305":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1306":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1307":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";","1308":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";","1309":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;","1310":"SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";","1311":"SELECT name FROM organization;","1312":"SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";","1313":"SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";","1314":"SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";","1315":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1316":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;","1317":"SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";","1318":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1319":"SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";","1320":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1321":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1322":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1323":"SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";","1324":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";","1325":"SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;","1326":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;","1327":"SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;","1328":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";","1329":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1330":"SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1331":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );","1332":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";","1333":"SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;","1334":"SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";","1335":"SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;","1336":"SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";","1337":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1338":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1339":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";","1340":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";","1341":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1342":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;","1343":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";","1344":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";","1345":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;","1346":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;","1347":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;","1348":"SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1349":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";","1350":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";","1351":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1352":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;","1353":"SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";","1354":"SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";","1355":"SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";","1356":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;","1357":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";","1358":"SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;","1359":"SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";","1360":"SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";","1361":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";","1362":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;","1363":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;","1364":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1365":"SELECT COUNT ( DISTINCT keyword ) FROM keyword;","1366":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1367":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;","1368":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";","1369":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1370":"SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;","1371":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";","1372":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";","1373":"SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;","1374":"SELECT title FROM movie WHERE release_year  =  2015;","1375":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1376":"SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";","1377":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;","1378":"SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";","1379":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1380":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;","1381":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";","1382":"SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";","1383":"SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";","1384":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;","1385":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1386":"SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";","1387":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";","1388":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1389":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";","1390":"SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";","1391":"SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";","1392":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";","1393":"SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";","1394":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";","1395":"SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";","1396":"SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;","1397":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );","1398":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";","1399":"SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1400":"SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";","1401":"SELECT name FROM actor WHERE birth_city  =  \"Tehran\";","1402":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";","1403":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1404":"SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";","1405":"SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1406":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;","1407":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1408":"SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;","1409":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1410":"SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";","1411":"SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;","1412":"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";","1413":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";","1414":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;","1415":"SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";","1416":"SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";","1417":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";","1418":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";","1419":"SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;","1420":"SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;","1421":"SELECT COUNT ( DISTINCT name ) FROM organization;","1422":"SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";","1423":"SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";","1424":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";","1425":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;","1426":"SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";","1427":"SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;","1428":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1429":"SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";","1430":"SELECT nationality FROM director WHERE name  =  \"director_name0\";","1431":"SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1432":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1433":"SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";","1434":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1435":"SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;","1436":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";","1437":"SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";","1438":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1439":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";","1440":"SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";","1441":"SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";","1442":"SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR;","1443":"SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";","1444":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;","1445":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;","1446":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1447":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1448":"SELECT title FROM publication WHERE citation_num  >  200;","1449":"SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;","1450":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;","1451":"SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";","1452":"SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";","1453":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1454":"SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";","1455":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1456":"SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;","1457":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1458":"SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;","1459":"SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";","1460":"SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";","1461":"SELECT name FROM actor WHERE birth_city  =  \"Tehran\";","1462":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";","1463":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1464":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";","1465":"SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";","1466":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";","1467":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";","1468":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;","1469":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1470":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";","1471":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1472":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1473":"SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1474":"SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";","1475":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1476":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";","1477":"SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;","1478":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";","1479":"SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;","1480":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;","1481":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";","1482":"SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";","1483":"SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";","1484":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;","1485":"SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";","1486":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";","1487":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";","1488":"SELECT name FROM actor WHERE birth_year  =  1984;","1489":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;","1490":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1491":"SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;","1492":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;","1493":"SELECT keyword FROM keyword;","1494":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";","1495":"SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;","1496":"SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";","1497":"SELECT name FROM director WHERE nationality  =  \"Afghanistan\";","1498":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";","1499":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;","1500":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";","1501":"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";","1502":"SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";","1503":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1504":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";","1505":"SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;","1506":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;","1507":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1508":"SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;","1509":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";","1510":"SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;","1511":"SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;","1512":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";","1513":"SELECT birth_city FROM director WHERE name  =  \"director_name0\";","1514":"SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;","1515":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1516":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;","1517":"SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";","1518":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";","1519":"SELECT name FROM organization WHERE continent  =  \"North America\";","1520":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;","1521":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;","1522":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );","1523":"SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";","1524":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";","1525":"SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;","1526":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1527":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1528":"SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;","1529":"SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";","1530":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";","1531":"SELECT homepage FROM journal WHERE name  =  \"PVLDB\";","1532":"SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";","1533":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1534":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;","1535":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;","1536":"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;","1537":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";","1538":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1539":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;","1540":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;","1541":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1542":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1543":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";","1544":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;","1545":"SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";","1546":"SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;","1547":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;","1548":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";","1549":"SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";","1550":"SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";","1551":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";","1552":"SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";","1553":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;","1554":"SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;","1555":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1556":"SELECT title FROM publication WHERE YEAR  >  2000;","1557":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;","1558":"SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;","1559":"SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";","1560":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1561":"SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";","1562":"SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;","1563":"SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";","1564":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";","1565":"SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";","1566":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";","1567":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1568":"SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );","1569":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1570":"SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;","1571":"SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";","1572":"SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";","1573":"SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";","1574":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1575":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";","1576":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1577":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1578":"SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";","1579":"SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";","1580":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1581":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";","1582":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1583":"SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";","1584":"SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;","1585":"SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";","1586":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1587":"SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";","1588":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";","1589":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;","1590":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";","1591":"SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";","1592":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1593":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";","1594":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1595":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;","1596":"SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;","1597":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1598":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;","1599":"SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";","1600":"SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";","1601":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";","1602":"SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;","1603":"SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;","1604":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1605":"SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;","1606":"SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";","1607":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";","1608":"SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";","1609":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;","1610":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1611":"SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";","1612":"SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;","1613":"SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";","1614":"SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;","1615":"SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";","1616":"SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";","1617":"SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";","1618":"SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";","1619":"SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year;","1620":"SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;","1621":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1622":"SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";","1623":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";","1624":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1625":"SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";","1626":"SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";","1627":"SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;","1628":"SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;","1629":"SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;","1630":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1631":"SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;","1632":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1633":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";","1634":"SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;","1635":"SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;","1636":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );","1637":"SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;","1638":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;","1639":"SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;","1640":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1641":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1642":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";","1643":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1644":"SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";","1645":"SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;","1646":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";","1647":"SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";","1648":"SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;","1649":"SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";","1650":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );","1651":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1652":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1653":"SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;","1654":"SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;","1655":"SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;","1656":"SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;","1657":"SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";","1658":"SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;"},"reasoning":{"0":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the longest river in the US. 2. Condition Structure: No specific filtering condition is needed since we are looking for the longest river across all entries. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","1":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of cities. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter cities that belong to the country 'USA'. 3. Join Structure: Not required, as we can filter directly from the city table based on the country name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of cities that meet the specified condition.","2":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"state_name\" from the \"state\" table. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all states. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of all states.","3":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city named \"Boulder\". 2. Condition Structure: Use a WHERE clause to filter for the city where \"city.city_name\" is equal to 'Boulder'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population of a specific city.","4":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the length of the river. Use the FROM clause to specify the river table and join it with the state table to relate rivers to their respective states. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the state with the longest river. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse field to connect rivers with their corresponding states. 4. Aggregation Structure: Use the MAX function to find the maximum length of the river and filter the results to get the state associated with this maximum length.","5":"1. Sequential Structure: Start with the SELECT clause to retrieve the name of the state. Use the FROM clause to specify the border_info table, as it contains the information about states that border California. 2. Condition Structure: Use a WHERE clause to filter for states that border California. 3. Join Structure: Use a JOIN between the border_info and state tables based on the state_name to get the relevant details of the bordering states. 4. Aggregation Structure: Use the ORDER BY clause to sort the states by area in descending order and limit the result to get the largest state.","6":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the smallest area. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the smallest area. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.area\" to rank states by area and apply LIMIT 1 to select the state with the smallest area.","7":"1. Sequential Structure: Begin with the SELECT clause to retrieve both the city name and its population. Use the FROM clause to specify the `city` table, which contains the relevant data.\n2. Condition Structure: Apply a WHERE clause to filter for cities located in the state of Alaska by using `state_name = 'Alaska'`.\n3. Join Structure: No joins are necessary, as all relevant data is contained within the `city` table.\n4. Aggregation Structure: Use the MAX function to find the largest population among the cities in Alaska. Additionally, ensure that the result is tied to the specific city with the largest population by selecting both the city name and population.","8":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the smallest urban population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the smallest population. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the smallest urban population.","9":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the largest state based on area. 2. Condition Structure: No specific filtering condition is needed since we want to find the biggest state by area. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the maximum area and then filter for the state that has this maximum area.","10":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is needed since we are looking for the lowest point in the USA, which will be derived from the \"highlow\" table. 3. Join Structure: No JOIN is necessary, as the information is available within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the lowest point.","11":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"area\" of the states. 2. Condition Structure: No specific filtering condition is needed since we want to find the smallest state by area. 3. Join Structure: No JOIN is required as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.area\" to rank states by area and apply LIMIT 1 to select the state with the smallest area.","12":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter the records for the state of \"Illinois.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" and \"state_name\" fields to ensure we are only selecting rivers that traverse through Illinois. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names of the rivers.","13":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" for the rivers in Illinois. 2. Condition Structure: Apply a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","14":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of capitals. Use the FROM clause to specify the state table, as it contains the capital information. 2. Condition Structure: Use a WHERE clause to filter for the state name 'Rhode Island' to focus on the relevant state. 3. Join Structure: Not required, as we are only interested in the state table for this query. 4. Aggregation Structure: Use the COUNT function to count the number of capitals associated with Rhode Island.","15":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.population\" for the major cities in Wisconsin. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Wisconsin. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to ensure we are only considering cities from Wisconsin. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the population values for the specified cities.","16":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: Use a WHERE clause to filter the records where \"river.traverse\" matches the \"state.state_name\" for the Mississippi River. 3. Join Structure: A JOIN is necessary to connect the \"state\" table with the \"river\" table based on the relationship defined by \"river.traverse = state.state_name.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the population values for the specified states.","17":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest area. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum area. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the largest area and apply a WHERE clause to filter for the state that has this maximum area.","18":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which represents the states bordering Kentucky. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is equal to 'Kentucky'. 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the states that border Kentucky.","19":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of California from the state table. 2. Condition Structure: Use a WHERE clause to filter for the state name \"California\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population value for California.","20":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the largest state. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the largest population. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the largest population.","21":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that the Ohio River passes through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio River'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that pass through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","22":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" of the largest capital based on population. 2. Condition Structure: No specific filtering condition is needed since we want to find the largest capital based on population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank capitals by population and apply LIMIT 1 to select the capital with the largest population.","23":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" and \"state.population\" since we want to find the largest capital based on population. 2. Condition Structure: No specific filtering condition is needed as we want to find the capital with the largest population. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank capitals by population and apply LIMIT 1 to select the capital with the highest population.","24":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and population. Use the FROM clause to specify the state table. 2. Join Structure: Use a JOIN between the state table and the border_info table to connect states with their bordering states. 3. Condition Structure: Apply a WHERE clause to filter for states that border California. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to get the largest state.","25":"1. Sequential Structure: Start with the SELECT clause to count the number of states in the USA. 2. Condition Structure: No specific filtering condition is needed since we want to count all states. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"state\" table. 4. Aggregation Structure: Use COUNT to determine the total number of states.","26":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table. 2. Join Structure: Use a JOIN between the river and state tables based on the traverse field in the river table and the state_name in the state table to link rivers to their respective states. 3. Condition Structure: Use a WHERE clause to filter for the state with the longest river by applying a subquery that selects the maximum length from the river table. 4. Aggregation Structure: Use the MAX function in a subquery to find the longest river's length, which will be used to filter the states.","27":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of the state with the highest population density. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum density. 3. Join Structure: No JOIN is required as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the highest density.","28":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its population. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: We need to find the smallest state by area, so we will use a subquery to identify the state with the minimum area. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate cities to their respective states. 4. Aggregation Structure: Use GROUP BY to group cities by state name and apply the MAX function to find the largest city by population within the smallest state.","29":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the state of Idaho. 3. Join Structure: Not required, as we can directly filter the river table based on the state name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of rivers that meet the specified condition.","30":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names from the highlow table. Use the FROM clause to specify the highlow table. 2. Condition Structure: Apply a WHERE clause to filter states where the highest point is greater than the highest point in Colorado. 3. Join Structure: Not required, as we only need data from the highlow table. 4. Aggregation Structure: Not needed, as we are comparing values directly without any aggregation.","31":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the smallest state. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the smallest area. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use the MIN function to find the state with the smallest area, and we will need to group by \"state_name\" to ensure we can identify the corresponding state.","32":"1. Sequential Structure: Start with the SELECT clause to retrieve the adjacent state name from the \"border_info\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where \"border_info.state_name\" is 'Kentucky'. 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the adjacent state.","33":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the population of the largest city. Use the FROM clause to specify the city table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the largest city across all states. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate cities to their respective states. 4. Aggregation Structure: Use the MAX function to find the maximum population among the cities and GROUP BY the state name to ensure we can identify which state has the largest city.","34":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state. Use the FROM clause to specify the state table. 2. Aggregation Structure: Use the MIN function to find the smallest area among the states, which will help identify the smallest state. 3. Condition Structure: Use a WHERE clause to filter the state with the minimum area. 4. No Join Structure is needed, as all required data is available in the state table.","35":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population. Use the FROM clause to specify the state table. 2. Join Structure: Use an INNER JOIN between the river and state tables based on the condition that the river's traverse matches the state name to identify the states through which the Mississippi River runs. 3. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in all states that the Mississippi runs through. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to get the state with the largest population.","36":"1. Sequential Structure: Start with the SELECT clause to retrieve the area and population of New Mexico. Use the FROM clause to specify the state table as the source of this information. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, New Mexico, ensuring we only get data relevant to that state. 3. Join Structure: Not required, as all necessary data is available in the state table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","37":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the cities in Texas. 2. Condition Structure: Apply a WHERE clause to filter the records where \"city.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since the required information is available within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply listing the cities and their populations.","38":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the highest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","39":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain_name\" of the highest mountain in the US. 2. Condition Structure: No specific filtering condition is needed since we are looking for the highest mountain across all states. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"mountain\" table. 4. Aggregation Structure: Use the MAX function to find the maximum altitude and apply a WHERE clause to filter for the mountain with that maximum altitude.","40":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital city name and its population. Use the FROM clause to specify the state table and JOIN it with the city table to link states with their capital cities. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the largest capital city based on population. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state name to connect the capital city with its corresponding state. 4. Aggregation Structure: Use the MAX function to find the maximum population among the capital cities and filter the results to return the capital city with that maximum population.","41":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of states. The relevant field is \"state.population.\" 2. Condition Structure: We need to filter for states that border Texas. This will be done using a WHERE clause that checks for states in the \"border_info\" table where \"border\" is 'Texas.' 3. Join Structure: We will use a JOIN between the \"state\" and \"border_info\" tables based on the condition that \"state.state_name\" matches \"border_info.border\" to get the relevant states. 4. Aggregation Structure: No aggregation is needed here since we are directly retrieving the population values for the states that meet the criteria.","42":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city_name\" of the city with the smallest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the smallest population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the smallest population.","43":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" from the \"highlow\" table. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Iowa\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the lowest point for the specified state.","44":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"state_name\" from the \"state\" table. 2. Condition Structure: No specific filtering condition is required since we want to list all states. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of all states.","45":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the least population density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the least density.","46":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city, which is \"city.population.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city \"Seattle\" and the state \"Washington.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are looking at the correct state for the city. 4. Aggregation Structure: No aggregation is needed since we are retrieving a specific value (population) for a single city.","47":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Join Structure: Use JOIN clauses to connect the river table with the border_info table based on the state names, allowing us to find rivers that flow through states bordering Tennessee. 3. Condition Structure: Apply a WHERE clause to filter for states that are listed as bordering Tennessee in the border_info table. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by river length in descending order and limit the results to get the longest river.","48":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" for the major rivers in Illinois. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table and we are directly filtering by the state name. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","49":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name. Use the FROM clause to specify the state table. We will also need to join the river table to filter for the Mississippi River. 2. Condition Structure: Use a WHERE clause to filter for the river name 'Mississippi' to ensure we are only considering states that the Mississippi River runs through. 3. Join Structure: Use an INNER JOIN between the state and river tables based on the state name to connect the river data with the corresponding states. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by the area of the state in ascending order and limit the results to get the smallest state.","50":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the largest state in the USA. 2. Condition Structure: No specific filtering condition is needed since we want to find the largest state based on area. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.area\" to rank states by size and apply LIMIT 1 to select the largest state.","51":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the major cities in Kansas. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.state_name\" is 'Kansas'. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, but we may want to order the results by population to identify the major cities.","52":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the highest density in the USA. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by density and apply LIMIT 1 to select the state with the highest density.","53":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population density. Use the FROM clause to specify the state table. Then, apply the ORDER BY clause to sort the results by population density in descending order. 2. Condition Structure: No specific condition (WHERE clause) is needed since we want the state with the largest population density. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by density and limiting to the top result effectively gives us the state with the largest population density.","54":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are directly linking the river to the states. 3. Join Structure: Use a JOIN clause to connect the \"river\" table with the \"state\" table based on the condition that \"river.traverse\" matches \"state.state_name.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the population values for the relevant states.","55":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.area\" of the state whose capital is \"Albany\". 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.capital\" is equal to 'Albany'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the area of a specific state based on the capital.","56":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.density\" for Wyoming. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'Wyoming'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the density value for Wyoming.","57":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the river table and JOIN it with the state table to link states with the rivers they traverse. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the states that lie on the largest river. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse field to identify which states are associated with the river. 4. Aggregation Structure: Use the MAX function to find the length of the largest river and filter the results to only include states that lie on that river.","58":"1. Sequential Structure: Start with the SELECT clause to count the number of cities. We will use the COUNT function on the \"city\" table. 2. Condition Structure: Apply a WHERE clause to filter for cities that belong to the \"United States\" by checking the \"country_name\" field in the \"city\" table. 3. Join Structure: No JOIN is necessary here, as we can directly filter the \"city\" table based on the country name. 4. Aggregation Structure: Use COUNT to aggregate the total number of cities that meet the specified condition.","59":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highlow.highest_point\" since the question asks for the highest point in a specific state. 2. Condition Structure: Apply a WHERE clause to filter for the state where the capital is \"Des Moines.\" 3. Join Structure: Use a JOIN between the \"highlow\" and \"state\" tables based on \"state_name\" to link the highest point information with the corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the highest point for the specified state.","60":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in Wyoming. 3. Aggregation Structure: Use the ORDER BY clause to sort the cities by population in descending order and limit the result to the top entry to find the largest city. 4. Join Structure: Not required, as all necessary data is available in the city table.","61":"1. Sequential Structure: Start with the SELECT clause to specify the \"state.area\" for New Mexico. 2. Condition Structure: Use a WHERE clause to filter for the state name \"New Mexico\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single value for the area of New Mexico.","62":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of the state with the largest density. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by density and apply LIMIT 1 to select the state with the highest density.","63":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table, as it contains the information about states that border other states. 2. Condition Structure: Use a WHERE clause to filter for states that are adjacent to states that the Mississippi River runs through. This will involve checking the river table for the river name 'Mississippi'. 3. Join Structure: Use a JOIN between the border_info and state tables to connect the bordering states with their respective names. Additionally, join the river table to filter based on the Mississippi River. 4. Aggregation Structure: Not required, as we are simply retrieving state names based on the specified conditions without any aggregation.","64":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the river table, as we want to find states associated with the longest river. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the states that the longest river crosses. 3. Join Structure: Use a JOIN between the river and state tables based on the traverse field to link rivers with the states they cross. 4. Aggregation Structure: Use the MAX function to find the longest river and filter the results accordingly.","65":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the smallest population density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the smallest density.","66":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" and the count of distinct states it traverses. 2. Condition Structure: No specific filtering condition is needed, as we want to find the river that traverses the most states. 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"river.traverse\" and \"state.state_name\" to link each river with the states it traverses. 4. Aggregation Structure: Use COUNT with DISTINCT to count the number of unique states each river traverses, then use ORDER BY in descending order to rank rivers by the number of states traversed. Finally, use LIMIT 1 to select the river that traverses the most states.","67":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names from the state table. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter states that do not have any corresponding entries in the border_info table, indicating they have no bordering states. 3. Join Structure: Use a LEFT JOIN between the state table and the border_info table on the state_name to identify states that do not have any borders. 4. Aggregation Structure: Not needed, as we are simply filtering for states without borders without any aggregation.","68":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the river \"Ohio\" runs. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is \"Ohio.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" and \"state_name\" to link the river with the states it runs through. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","69":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that the Ohio river runs through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that run through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","70":"1. Sequential Structure: Start with the SELECT clause to count the number of states. Use the FROM clause to specify the highlow table, as it contains the elevation data. 2. Condition Structure: Use a WHERE clause to filter states based on their lowest elevation being lower than Alabama's lowest elevation. 3. Join Structure: Not required, as we can retrieve Alabama's lowest elevation directly from the highlow table without needing to join with other tables. 4. Aggregation Structure: Use COUNT to aggregate the number of states that meet the condition of having a lower elevation than Alabama.","71":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.country_name\" is 'us'. 3. Join Structure: Use a JOIN between the \"highlow\" and \"state\" tables based on \"state_name\" to link the lowest point information with the corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the lowest point for the specified country.","72":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table and JOIN it with the state table to link cities with their respective states. Apply a WHERE clause to filter for the capital cities in the USA. 2. Condition Structure: Use the WHERE clause to filter for cities that are capitals, specifically in the USA. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to connect city details with their corresponding states. 4. Aggregation Structure: Use the MAX function to find the largest population among the capital cities, and then filter the results to get the city with that maximum population.","73":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which represents the states that border Kentucky. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is equal to 'Kentucky'. 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the states that border Kentucky.","74":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"highlow.lowest_point\" which indicates the lowest spot in the specified state. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Iowa.\" 3. Join Structure: No JOIN is necessary since the information can be obtained directly from the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the lowest point for the specified state.","75":"1. Sequential Structure: Start with the SELECT clause to specify the \"river.length\" of the river named \"Rio Grande\". 2. Condition Structure: Use a WHERE clause to filter for the river with the name 'Rio Grande'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the length of a specific river.","76":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the least population density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the least density.","77":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.population\" for Boulder. 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Boulder\". 3. Join Structure: No JOIN is necessary since the required information is available within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population for the specified city.","78":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population. Use the FROM clause to specify the state table. 2. Join Structure: Use a JOIN between the state table and the border_info table to connect states with their bordering states, specifically filtering for those that border Oklahoma. 3. Condition Structure: Apply a WHERE clause to filter for states that are listed as bordering Oklahoma in the border_info table. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the results to get the most populated state.","79":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table. Apply the ORDER BY clause to sort the states by population in descending order to identify the state with the largest population. 2. Condition Structure: No specific condition (WHERE clause) is needed as we are interested in the state with the largest population. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by population and limiting to the top result effectively gives us the capital of the state with the largest population.","80":"1. Sequential Structure: Start with the SELECT clause to specify the total population of all states. 2. Aggregation Structure: Use the SUM function to calculate the combined population from the \"state\" table. 3. Condition Structure: No specific filtering condition is needed since we want the total population of all states. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"state\" table.","81":"1. Sequential Structure: Start with the SELECT clause to specify the \"river.length\" of the river named \"Rio Grande\". 2. Condition Structure: Use a WHERE clause to filter for the river with the name 'Rio Grande'. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the length of a specific river.","82":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" of the state with the smallest area. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are looking for the state with the smallest area. 3. Aggregation Structure: Use the MIN function to find the smallest area among the states. 4. Grouping Structure: Use GROUP BY on \"state.state_name\" to ensure we are considering each state individually when determining the smallest area. 5. Limiting Structure: Use LIMIT 1 to retrieve only the capital of the state with the smallest area.","83":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point and state name. Use the FROM clause to specify the highlow table. 2. Condition Structure: Apply a WHERE clause to filter states where the lowest point is equal to sea level (0). 3. Join Structure: Not required, as all necessary data is contained within the highlow table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","84":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. We will use the COUNT function to get the total number of rivers in Idaho. 2. Condition Structure: Apply a WHERE clause to filter the records for the state of Idaho. 3. Join Structure: No JOIN is necessary here, as the information about rivers is available directly in the \"river\" table, and we can filter by the \"traverse\" column. 4. Aggregation Structure: Use COUNT to aggregate the number of rivers that traverse Idaho.","85":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name. Use the FROM clause to specify the city table, as we need to find the city with the highest population. 2. Condition Structure: Use the WHERE clause to filter for the city with the maximum population. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to get the corresponding state for the city with the highest population. 4. Aggregation Structure: Use the MAX function to find the maximum population in the city table, which will help identify the city with the most population.","86":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" of the biggest city in Wyoming, along with its population. 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.state_name\" is 'Wyoming'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the highest population in Wyoming.","87":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the river table, as we need to identify the states through which the longest river runs. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the longest river directly. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse field to link the river to the states it runs through. 4. Aggregation Structure: Use the MAX function to find the length of the longest river and filter the results accordingly.","88":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.population\" for the major cities in Wisconsin. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Wisconsin. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to ensure we are only considering cities in Wisconsin. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the population of the cities without needing to summarize the data.","89":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of states. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the sparsest population density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by their population density and apply LIMIT 1 to select the state with the lowest density.","90":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" to identify the major cities. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the USA, which can be determined by checking the \"country_name\" field in the \"city\" table. 3. Join Structure: No JOIN is necessary since the relevant information is contained within the \"city\" table. 4. Aggregation Structure: No aggregation is needed, but we may want to order the results by population to highlight the major cities.","91":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the maximum value of the `highest_elevation` from the `highlow` table, as the question asks for the elevation of the highest point in the USA.\n2. Condition Structure: No specific filtering condition is needed since we are looking for the highest point across all states in the USA. The `state_name` field refers to individual states, so no filtering by country is required.\n3. Join Structure: No JOIN is necessary since all relevant information is contained within the `highlow` table.\n4. Aggregation Structure: Use the `MAX` function to find the maximum value of the `highest_elevation` column, which will give us the elevation of the highest point in the USA.","92":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for California. 2. Condition Structure: Use a WHERE clause to filter for the state name \"California\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population for a specific state.","93":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of California from the state table. The FROM clause will specify the state table. 2. Condition Structure: Use a WHERE clause to filter for the state name 'California' to get the specific population data for that state. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Not needed, as we are directly retrieving the population value without any aggregation.","94":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the state with the largest population density. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Use ORDER BY to sort the states by density in descending order and limit the result to the top entry to get the state with the largest population density.","95":"1. Sequential Structure: Start with the SELECT clause to specify the \"city.city_name\" of the city with the largest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the maximum population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the largest population.","96":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the highest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","97":"1. Sequential Structure: Begin with the SELECT clause to retrieve the maximum \"length\" of the river. Then, use the FROM clause to specify the \"river\" table. Finally, include a WHERE clause to filter for rivers where the \"country_name\" is 'USA'.\n2. Condition Structure: Apply a filtering condition using the WHERE clause to ensure that only rivers in the USA are considered. The condition should be `WHERE country_name = 'USA'`.\n3. Join Structure: No JOIN is necessary, as all relevant information is contained within the \"river\" table.\n4. Aggregation Structure: Use the MAX function to find the maximum length of the river after applying the filter for rivers in the USA.","98":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state of California. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'California'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population value for California.","99":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" and \"river.length\" for the longest river. 2. Condition Structure: Use a WHERE clause to filter for rivers that traverse the state of Texas. 3. Join Structure: No JOIN is necessary since the relevant information can be accessed directly from the \"river\" table using the condition on \"traverse.\" 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and use LIMIT 1 to select the longest river.","100":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of neighboring states. Use the FROM clause to specify the border_info table, which contains information about neighboring states. 2. Condition Structure: Use a WHERE clause to filter for the specific state 'Kentucky' to count its neighboring states. 3. Join Structure: Not required, as we are only using the border_info table to find the neighbors of Kentucky. 4. Aggregation Structure: Use the COUNT function to aggregate the number of neighboring states for Kentucky.","101":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the largest state. 2. Condition Structure: No specific filtering condition is needed since we want to find the largest state based on area. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the state with the largest area, and apply GROUP BY to ensure we are looking at the area of each state.","102":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here since the information needed is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply listing the names of the rivers.","103":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"highlow.lowest_point\" which indicates the lowest point in the specified state. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Iowa.\" 3. Join Structure: No JOIN is necessary since the information can be directly accessed from the \"highlow\" table using the state name. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the lowest point for the specified state.","104":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" and the count of distinct states it traverses. 2. Condition Structure: No specific filtering condition is needed, as we want to find the river that goes through the most states. 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"river.traverse\" and \"state.state_name\" to link each river with the states it traverses. 4. Aggregation Structure: Use COUNT with DISTINCT to count the number of unique states for each river, then use ORDER BY in descending order to rank rivers by the number of states they traverse. Finally, use LIMIT 1 to select the river that goes through the most states.","105":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Join Structure: Join the river table with the city table on the state name to relate rivers to the states that have major cities. 3. Aggregation Structure: Use GROUP BY to group the results by state name and use the COUNT function to count the number of cities in each state, identifying the state with the most major cities. 4. Condition Structure: Use a HAVING clause to filter for the state that has the maximum number of cities, and then use a subquery to find the longest river in that state.","106":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Join Structure: Join the river table with the state table to link rivers with their corresponding states based on the state name. Additionally, join the city table to find the state with the largest city. 3. Condition Structure: Use a WHERE clause to filter for the state that has the largest city by population. This requires a subquery to identify the state with the maximum population from the city table. 4. Aggregation Structure: Use the MAX function in a subquery to find the maximum population from the city table, and then filter the states based on this value.","107":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"mountain.mountain_name\" and \"mountain.mountain_altitude\" to identify the tallest mountain. 2. Condition Structure: Apply a WHERE clause to filter for records where \"mountain.state_name\" is 'United States'. 3. Join Structure: No JOIN is necessary since we are only querying the \"mountain\" table for the tallest mountain in the specified country. 4. Aggregation Structure: Use ORDER BY in descending order on \"mountain.mountain_altitude\" to rank mountains by their altitude. Use LIMIT 1 to select the tallest mountain.","108":"1. Sequential Structure: Start with the SELECT clause to retrieve the lowest point of states. Use the FROM clause to specify the highlow table, which contains the lowest point information. 2. Condition Structure: Use a WHERE clause to filter states that are traversed by the Mississippi River, which is indicated in the river table. 3. Join Structure: Use an INNER JOIN between the highlow and river tables based on the state_name to connect the lowest point data with the states that the river traverses. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","109":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name that contains the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information for each state. 2. Condition Structure: Use a WHERE clause to filter the states that are traversed by the Colorado River, ensuring we only consider relevant states. 3. Join Structure: Use a JOIN between the highlow table and the river table based on the state name to connect the highest point data with the states traversed by the Colorado River. 4. Aggregation Structure: Use the MAX function to find the highest point among the states that meet the criteria, and then filter to get the corresponding state name.","110":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"river.river_name\" and \"river.traverse\" to identify the river and the state it traverses. 2. Condition Structure: Apply a WHERE clause to filter for the specific river name, which is \"Ohio River.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" field to link the river with the corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the information about the river and its state.","111":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the smallest state based on area. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the smallest area. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use the MIN function to find the smallest area and apply a WHERE clause to filter for the state with that minimum area.","112":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the capital city. Use the FROM clause to specify the state table to get the capital of Texas. Then, join the city table to get the population of that capital city. 2. Condition Structure: Use a WHERE clause to filter for the state name 'Texas' to ensure we are only looking at the relevant state. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state name to connect the capital city with its population. 4. Aggregation Structure: Not needed, as we are retrieving a specific record without any aggregation.","113":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name. Use the FROM clause to specify the river table. 2. Aggregation Structure: Use GROUP BY to group the results by river name, allowing us to count how many states each river traverses. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of states in descending order, so that the river traversing the most states appears first. 4. Limiting Results: Use LIMIT to restrict the output to only the top result, which will be the river that traverses the most states.","114":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table, as the question asks for the highest point in the US. 2. Condition Structure: Use a WHERE clause to filter for the state name \"US\" to ensure we are looking for the highest point specifically in the United States. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the highest point.","115":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"highest_point\" and \"state_name\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is required since we want the highest points for all states. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the highest points for each state.","116":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" for the major cities in Kansas. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Kansas. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to ensure we are only considering cities that belong to the specified state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the cities without any summarization.","117":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the city is \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link each city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name associated with the city.","118":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" of the states that border Ohio. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is 'Ohio'. 3. Join Structure: Use a JOIN between the \"state\" and \"border_info\" tables based on the \"state_name\" to link each state with its border information. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states that border Ohio.","119":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name. Use the FROM clause to specify the river table. 2. Join Structure: Use a JOIN clause to connect the river table with the state table based on the traverse relationship, which indicates which states the river flows through. 3. Aggregation Structure: Use GROUP BY to group the results by river name and COUNT to determine how many states each river flows through. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the count of states, and limit the results to get the river that flows through the most states.","120":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name. Use the FROM clause to specify the border_info table, as it contains the information about states bordering Texas. 2. Condition Structure: Apply a WHERE clause to filter for states that border Texas. 3. Join Structure: Use a JOIN between the border_info and state tables based on the state_name to get the relevant details of the bordering states. 4. Aggregation Structure: Use the MIN function to find the smallest state by area or population, depending on the context, but since the question does not specify, we will assume it refers to the area.","121":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"state.capital.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Texas.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link the capital city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the capital city for Texas.","122":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population density. Use the FROM clause to specify the state table. Then, apply the ORDER BY clause to sort the results by population density in ascending order. 2. Condition Structure: No specific condition (WHERE clause) is needed since we want to find the state with the sparsest population density. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","123":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states that Kentucky borders. Use the FROM clause to specify the border_info table. 2. Condition Structure: Use a WHERE clause to filter records where the state_name is 'Kentucky', ensuring we only count the states that Kentucky borders. 3. Join Structure: Not required, as all necessary data is available within the border_info table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of states that Kentucky borders.","124":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that the Ohio River traverses. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio River'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that traverse through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","125":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter cities that are located in the USA by checking the country_name column. 3. Aggregation Structure: Use the ORDER BY clause to sort the cities by population in ascending order, and limit the results to get the smallest city. 4. Since we are looking for the smallest city, we will use LIMIT 1 to get only the top result after sorting.","126":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" and \"state.population\" since we want to find the capital with the largest population. 2. Condition Structure: No specific filtering condition is needed as we want to consider all capitals. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank capitals by population and apply LIMIT 1 to select the capital with the largest population.","127":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is equal to \"Mississippi.\" 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the condition that \"river.traverse\" matches \"state.state_name\" to link the river with the corresponding states. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the population values for the specified states.","128":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population of the United States. 2. Condition Structure: Use a WHERE clause to filter for states where the \"state.country_name\" is 'United States'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use SUM to calculate the total population across all states in the United States.","129":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain.mountain_altitude\" for Guadalupe Peak. 2. Condition Structure: Use a WHERE clause to filter for the mountain name that matches 'Guadalupe Peak'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the altitude of a specific mountain.","130":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Join Structure: Use JOIN clauses to connect the river table with the border_info table based on the state_name, ensuring we only consider rivers in states that border Tennessee. 3. Condition Structure: Apply a WHERE clause to filter for states that border Tennessee. 4. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in descending order and limit the result to get the longest river.","131":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter the records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here since the information needed is available within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the rivers.","132":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"population\" of the state with the greatest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","133":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, as it contains the highest point information for each state. 2. Condition Structure: Apply a WHERE clause to filter for the state name 'Delaware' to get the specific information for that state. 3. Join Structure: Not required, as all necessary data is available in the highlow table. 4. Aggregation Structure: Not needed, as we are retrieving a specific value without any aggregation.","134":"1. Sequential Structure: Start with the SELECT clause to specify the \"state.population\" for California. 2. Condition Structure: Use a WHERE clause to filter for the state name \"California\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population for California.","135":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" associated with the city \"springfield.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link the city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name for the specified city.","136":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the state name and its population density. 2. Condition Structure: No specific filtering condition is required since we want the population densities for all states. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the density values for each state.","137":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.population\" for the city named \"Boulder\". 2. Condition Structure: Use a WHERE clause to filter for the city where \"city.city_name\" is equal to 'Boulder'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population of a specific city.","138":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.country_name\" is 'United States'. 3. Join Structure: Use a JOIN between the \"highlow\" and \"state\" tables based on \"state_name\" to link the lowest point data with the corresponding state information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the lowest point for the specified country.","139":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" for the major rivers in Illinois. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table and we are directly filtering by the state name. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","140":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the state of Texas. 3. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in descending order and limit the result to the top entry to get the largest river. 4. Join Structure: Not required, as all necessary data is available within the river table and the condition can be applied directly.","141":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and population. Use the FROM clause to specify the border_info table and JOIN it with the state table to get the relevant state details. 2. Condition Structure: Apply a WHERE clause to filter for states that border California. 3. Join Structure: Use an INNER JOIN between the border_info and state tables based on the state_name to connect the states that border California with their respective details. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to get the largest state.","142":"1. Sequential Structure: Start with the SELECT clause to specify the \"river.length\" of the Rio Grande river. 2. Condition Structure: Use a WHERE clause to filter for the specific river name \"Rio Grande\". 3. Join Structure: No JOIN is necessary since all required information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the length of the specified river.","143":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"population\" of the state with the largest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is required as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","144":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the border_info table, as it contains the information about states that border other states. 2. Condition Structure: Use a WHERE clause to filter for the states that border the state with the largest population. This requires a subquery to first identify the state with the largest population. 3. Join Structure: Not required, as we are only using the border_info table and the subquery to get the state with the largest population. 4. Aggregation Structure: Use COUNT to aggregate the number of states that border the identified state.","145":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" for the state of Delaware. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Delaware\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the highest point for the specified state.","146":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highlow.highest_point\" for the states surrounding Mississippi. 2. Condition Structure: Apply a WHERE clause to filter for states that are listed as bordering Mississippi. 3. Join Structure: Use a JOIN between the \"border_info\" and \"highlow\" tables based on the shared \"state_name\" to link the bordering states with their highest points. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the highest points for the specified states.","147":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the population of the capital city. Use the FROM clause to specify the state table and JOIN it with the city table to link states with their capital cities. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in finding the state with the largest capital. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state name to connect each state with its capital city. 4. Aggregation Structure: Use the MAX function to find the maximum population among the capital cities and filter the results to get the corresponding state.","148":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the major cities in Kansas. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Kansas. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are only considering cities that belong to Kansas. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we are only selecting cities that are considered major, which could be inferred from a population threshold (if specified).","149":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the river name is \"Ohio.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is \"Ohio.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"river.traverse\" and \"state.state_name\" to link each river with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of states that have a river named \"Ohio.\"","150":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and population. Use the FROM clause to specify the border_info table and join it with the state table to get the relevant state details. 2. Condition Structure: Apply a WHERE clause to filter for states that border Texas. 3. Join Structure: Use an INNER JOIN between the border_info and state tables based on the state_name to connect the states that border Texas with their respective details. 4. Aggregation Structure: Use the MIN function to find the smallest state based on population among those that border Texas.","151":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter states that do not appear in the border_info table, indicating they border no other states. 3. Join Structure: Not required, as we are only filtering based on the absence of states in the border_info table. 4. Aggregation Structure: Not needed, as we are simply retrieving state names without any aggregation.","152":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" and its \"city.population\" to identify the biggest city. 2. Condition Structure: No specific filtering condition is needed, as we want to find the city with the maximum population. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to ensure we are considering cities in the US. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population. Use LIMIT 1 to select the city with the highest population.","153":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" for the major rivers in Illinois. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table and we are filtering directly by the state name. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","154":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border\" field from the \"border_info\" table, as we want to know which states border Kentucky. 2. Condition Structure: Apply a WHERE clause to filter for records where \"border_info.state_name\" is 'Kentucky'. 3. Join Structure: No JOIN is necessary here since the information can be obtained directly from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the names of states that border Kentucky.","155":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the border_info table, as it contains the information about states and their borders. 2. Condition Structure: Use the WHERE clause to filter for records where the border is 'Kentucky', ensuring we only count states that border Kentucky. 3. Join Structure: Not required, as all necessary data is available within the border_info table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of states that meet the specified condition.","156":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" since we want to find the most populous city. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Wyoming.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are only considering cities in Wyoming. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank the cities by population and use LIMIT 1 to select the most populous city.","157":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. We will also need to join the state table to find the largest state by area. 2. Condition Structure: We need to filter for the state with the maximum area, which will be done using a subquery in the WHERE clause. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the state name to relate rivers to their respective states. 4. Aggregation Structure: Use the MAX function in a subquery to find the largest state by area, and then filter the rivers based on the state name that corresponds to this maximum area. Finally, we will use the ORDER BY clause to sort the rivers by length in descending order and limit the result to get the longest river.","158":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the state of Texas. 3. Join Structure: Not required, as all necessary data is available within the river table. 4. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in descending order and limit the result to the top entry to find the longest river.","159":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Delaware.\" 3. Join Structure: No JOIN is necessary since the \"highest_point\" and \"state_name\" are both in the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the highest point for the specified state.","160":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that have cities named \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.city_name\" is 'Springfield.' 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the shared key \"state_name\" to link each city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique state names are returned.","161":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Join Structure: Use JOIN clauses to connect the river table with the border_info table to find rivers that flow through states bordering Alabama. 3. Condition Structure: Apply a WHERE clause to filter for states that are bordered by Alabama, ensuring we only get rivers from those states. 4. Aggregation Structure: Not needed, as we are simply retrieving river names without any aggregation.","162":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_elevation\" for the state of Delaware. 2. Condition Structure: Use a WHERE clause to filter for the specific state, which is \"Delaware\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the highest elevation for the specified state.","163":"1. Sequential Structure: Start with the SELECT clause to retrieve the population density of the state. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for the state with the smallest area. 3. Join Structure: Not required, as all necessary data is contained within the state table. 4. Aggregation Structure: Use a subquery within the WHERE clause to find the minimum area from the state table, allowing us to filter for the state with the smallest area.","164":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the smallest area. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the smallest area. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.area\" to rank states by area and apply LIMIT 1 to select the state with the smallest area.","165":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the river table, as we want to find states associated with the longest river. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the longest river directly. 3. Join Structure: Use a JOIN between the river and state tables based on the state_name to link rivers with the states they traverse. 4. Aggregation Structure: Use the MAX function to find the length of the longest river and filter the results accordingly.","166":"1. Sequential Structure: Start with the SELECT clause to retrieve the lowest point of the states. Use the FROM clause to specify the highlow table, which contains the lowest point information for each state. 2. Condition Structure: Use a WHERE clause to filter for states that the Mississippi River runs through, which is indicated by the river table where the river name is 'Mississippi'. 3. Join Structure: Use an INNER JOIN between the highlow and river tables based on the state_name to connect the lowest point data with the states traversed by the Mississippi River. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","167":"1. Sequential Structure: Start with the SELECT clause to count the number of rivers found in Idaho. 2. Condition Structure: Use a WHERE clause to filter for rivers where \"river.traverse\" is equal to 'Idaho'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"river\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of rivers that meet the specified condition.","168":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that the Ohio River runs through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio River'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that run through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","169":"1. Sequential Structure: Start with the SELECT clause to specify the count of rivers named \"colorado\". 2. Condition Structure: Use a WHERE clause to filter for rivers where the \"river_name\" is equal to 'colorado'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"river\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of rivers that meet the specified condition.","170":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population density. Use the FROM clause to specify the state table. 2. Aggregation Structure: Calculate the population density by dividing the population by the area. This will be done in the SELECT clause. 3. Condition Structure: Use the ORDER BY clause to sort the results by population density in ascending order to find the smallest density. 4. Limit Structure: Use LIMIT 1 to ensure that only the state with the smallest population density is returned.","171":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" of the city with the largest population. 2. Condition Structure: Use a WHERE clause to filter for cities where \"state.country_name\" is 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"city\" table, and the country condition can be applied directly. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the highest population.","172":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain_name\" and \"mountain_altitude\" of the tallest mountain in America. 2. Condition Structure: Use a WHERE clause to filter for mountains located in \"America\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"mountain\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"mountain.mountain_altitude\" to rank mountains by altitude and apply LIMIT 1 to select the tallest mountain.","173":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the highest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","174":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve both the river name and its length. Use the `FROM` clause to specify the `river` table. A subquery will be used to first find the maximum river length.\n2. Condition Structure: Apply a `WHERE` clause to filter for rivers that traverse the state of Texas. Additionally, use a subquery to ensure that the river(s) returned have the maximum length.\n3. Join Structure: No joins are necessary, as all relevant data is contained within the `river` table.\n4. Aggregation Structure: Use the `MAX` function in a subquery to find the longest river length, and then retrieve the river(s) with that length.","175":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter the rivers that traverse the state of Colorado. 3. Join Structure: Not required, as we can filter directly from the river table using the state name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of rivers that meet the specified condition.","176":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: Use a WHERE clause to filter for states where \"river.traverse\" is equal to 'mississippi'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" to link each state with the river it traverses. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the population values for the specified states.","177":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" since we want to know the name of the river. 2. Condition Structure: Apply a WHERE clause to filter for records where \"river.traverse\" is 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information needed is available within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the name of the river.","178":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in 'Alaska'. 3. Aggregation Structure: Use the ORDER BY clause to sort the cities by population in ascending order, allowing us to identify the smallest city. 4. Limit Structure: Use LIMIT 1 to ensure that only the smallest city is returned.","179":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table. Apply the ORDER BY clause to sort the states by population in descending order to find the state with the most inhabitants. 2. Condition Structure: No specific condition (WHERE clause) is needed as we are interested in the state with the highest population. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Although no aggregate function is directly used, sorting by population and limiting to the top result effectively gives us the capital of the state with the most inhabitants.","180":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table for the state of Delaware. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Delaware\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the highest point for the specified state.","181":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" since we want to know which rivers flow through Illinois. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is equal to 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","182":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter the records for the state \"Illinois.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" and \"state_name\" fields to ensure we are only selecting rivers that are in Illinois. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names of the rivers.","183":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" and \"river.length\" for the biggest river in Texas. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is 'Texas'. 3. Join Structure: No JOIN is necessary since we are only querying the \"river\" table based on the state name. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length. Use LIMIT 1 to select the longest river in Texas.","184":"1. Sequential Structure: Start with the SELECT clause to specify the total length of all rivers in the USA. 2. Condition Structure: No specific filtering condition is needed since we want the total length of all rivers regardless of their state. 3. Join Structure: No JOIN is necessary as we are only interested in the \"river\" table. 4. Aggregation Structure: Use the SUM function to calculate the total length of all rivers.","185":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population from the city table. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in Wyoming. 3. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to the top one to find the city with the largest population. 4. Join Structure: Not required, as all necessary data is available in the city table and the filtering is done based on the state name.","186":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the largest state in terms of area. 2. Condition Structure: No specific filtering condition is needed since we want to find the biggest state overall. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the maximum area among the states, and then filter to get the corresponding state name.","187":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the longest river in America. 2. Condition Structure: No specific filtering condition is needed since we are looking for the longest river overall. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","188":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the major cities in Kansas. 2. Condition Structure: Apply a WHERE clause to filter the records where \"state.state_name\" is 'Kansas'. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the major cities and their populations.","189":"1. Sequential Structure: Start with the SELECT clause to specify the total area in square kilometers from the \"state\" table. 2. Condition Structure: Use a WHERE clause to filter for states where \"state.country_name\" is 'US'. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"state\" table. 4. Aggregation Structure: Use SUM to calculate the total area of all states in the US.","190":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Join Structure: Use JOIN clauses to connect the river table with the border_info and state tables based on the relationships defined in the schema. This will allow us to find rivers that run through states that border Alabama. 3. Condition Structure: Apply a WHERE clause to filter for states that are bordering Alabama by checking the state_name in the border_info table. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of rivers without any aggregation.","191":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital city name and its population. Use the FROM clause to specify the city table and JOIN it with the state table to link capitals with their respective states. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in capitals in the USA, which can be filtered by the country name in the JOIN. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to connect capitals with their populations. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to the top entry to find the most populated capital.","192":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the Ohio River runs through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio River'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link states with the rivers that run through them. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","193":"1. Sequential Structure: Start with the SELECT clause to specify the count of cities. 2. Condition Structure: No specific filtering condition is needed since we want to count all cities in the US. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cities in the \"city\" table.","194":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border\" field from the \"border_info\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where \"border_info.state_name\" is 'Kentucky'. 3. Join Structure: No JOIN is necessary since the relevant information is contained within the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the borders of Kentucky.","195":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest area. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum area. 3. Join Structure: No JOIN is necessary as all required information is available in the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the maximum area and then filter for the corresponding state using a WHERE clause.","196":"1. Sequential Structure: Start with the SELECT clause to count the number of states. Use the FROM clause to specify the state table. We will need to join the highlow table to access the highest point of each state. 2. Condition Structure: We need to filter states based on their highest point being greater than the highest point of the state with the largest capital city. This will require a subquery to first identify the state with the largest capital city and then retrieve its highest point. 3. Join Structure: Use an INNER JOIN between the state and highlow tables based on the state_name to relate state information with their highest points. 4. Aggregation Structure: Use COUNT to aggregate the number of states that meet the condition of having a higher point than the identified highest point.","197":"1. Sequential Structure: Start with the SELECT clause to retrieve the length of the river. Use the FROM clause to specify the `river` table. To ensure we get the correct river length, we need to use a subquery to first find the maximum length of rivers in Texas and then filter for rivers that match this length.\n2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the state of Texas. This can be done by directly filtering on the `traverse` field in the `river` table, which links to the state name.\n3. Join Structure: A JOIN between the `river` and `state` tables is unnecessary because the `river` table already contains the `traverse` field, which directly links to the state name. We can avoid the join and directly filter on the `traverse` field.\n4. Aggregation Structure: Use the MAX function in a subquery to first find the maximum river length in Texas. Then, filter for rivers that match this maximum length to ensure the correct river length is returned.","198":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table, as the question asks for the highest point in the country. 2. Condition Structure: No specific filtering condition is needed since we want the highest point across all states. 3. Join Structure: No JOIN is necessary because all required information is contained within the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highlow.highest_point\" to rank the points and apply LIMIT 1 to select the highest point.","199":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"river.river_name\" for the longest river. 2. Condition Structure: No specific filtering condition is required since we want to find the longest river among all available rivers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","200":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" of the largest city in Wyoming. 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.state_name\" is 'Wyoming'. 3. Aggregation Structure: Use the MAX function to find the city with the highest population in Wyoming. 4. Grouping Structure: Since we are looking for the largest city, we will need to use ORDER BY on \"city.population\" in descending order and apply LIMIT 1 to get the largest city.","201":"1. Sequential Structure: Start with the SELECT clause to count the number of cities. We will use the COUNT function on the \"city\" table. 2. Condition Structure: Apply a WHERE clause to filter for cities that belong to the country 'USA'. 3. Join Structure: No JOIN is necessary here, as we can filter directly from the \"city\" table based on the country name. 4. Aggregation Structure: Use COUNT to aggregate the total number of cities that meet the specified condition.","202":"1. Sequential Structure: Start with the SELECT clause to specify the \"river.length\" of the Rio Grande river. 2. Condition Structure: Use a WHERE clause to filter for the specific river name \"Rio Grande\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the length of the specified river.","203":"1. Sequential Structure: Begin with the SELECT clause to retrieve the population of the city. Use the FROM clause to specify the `city` table. Additionally, retrieve the city name to identify the largest city.\n2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the USA by using `country_name = 'USA'`.\n3. Join Structure: No joins are necessary, as all the required information is contained within the `city` table.\n4. Aggregation Structure: Use the ORDER BY clause to sort the cities by population in descending order and LIMIT 1 to get the city with the largest population.","204":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the city is \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link the city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name associated with the city.","205":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of the states. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the highest density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by density and apply LIMIT 1 to select the state with the highest density.","206":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and population. Use the FROM clause to specify the state table. 2. Join Structure: Use an INNER JOIN between the state and river tables based on the state name to connect states with the rivers that traverse them. 3. Condition Structure: Apply a WHERE clause to filter for the river named 'Mississippi' to ensure we are only considering states through which this river runs. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the results to get the most populous state.","207":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter cities that are located in the USA by checking the country_name column. 3. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order to find the biggest city. Limit the results to the top entry to get the largest city. 4. Join Structure: Not required, as all necessary data is available in the city table.","208":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city. Use the FROM clause to specify the city table and join it with the state table to access the area of the states. 2. Condition Structure: Use a WHERE clause to filter for the state with the largest area. This will involve a subquery to find the maximum area from the state table. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to relate cities to their respective states. 4. Aggregation Structure: Use the MAX function to find the largest area in the state table and then filter the city records to find the largest city in that state based on population.","209":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table, as the question asks for the highest point in the USA. 2. Condition Structure: Use a WHERE clause to filter for the state name \"USA\" to ensure we are looking for the highest point specifically in the USA. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the highest point for the specified state.","210":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of Boulder City. 2. Condition Structure: Use a WHERE clause to filter for the city name that matches 'Boulder City'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population for a specific city.","211":"1. Sequential Structure: Start with the SELECT clause to specify the count of states. 2. Condition Structure: Use a WHERE clause to filter for states where \"state.country_name\" is 'United States'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of states that meet the specified condition.","212":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its population. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: We need to find the largest state by area, so we will use a subquery to identify the state with the maximum area. Additionally, we will filter for cities that belong to this state. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate cities to their respective states. 4. Aggregation Structure: Use the MIN function to find the smallest city by population within the largest state identified in the subquery.","213":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" for the major cities. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause, as we are interested in cities from states that the Mississippi River runs through. 3. Join Structure: Use a JOIN between the \"city\" and \"river\" tables based on the \"state_name\" to link cities with the states they belong to, specifically filtering for the Mississippi River. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to select only major cities by possibly filtering based on population if required.","214":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population. Use the FROM clause to specify the border_info table, which contains the states bordering Oklahoma. 2. Join Structure: Use a JOIN between the border_info and state tables on the state_name to connect the bordering states with their population data. 3. Condition Structure: Apply a WHERE clause to filter for states that border Oklahoma. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the result to get the state with the largest population.","215":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its population. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: We need to find the smallest state first, so we will use a subquery to identify the state with the smallest population. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate cities to their respective states. 4. Aggregation Structure: Use the MAX function to find the city with the largest population within the smallest state identified in the subquery.","216":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the capital city. Use the FROM clause to specify the state table to get the capital name. 2. Condition Structure: Use a WHERE clause to filter for the state name 'Texas' to get the relevant capital. 3. Join Structure: Use a JOIN between the state and city tables based on the state name to link the capital city with its population. 4. Aggregation Structure: Not needed, as we are retrieving a specific population value without any aggregation.","217":"1. Sequential Structure: Start with the SELECT clause to retrieve the population density of the state. Use the FROM clause to specify the state table. 2. Aggregation Structure: To find the largest state, we need to calculate the area of each state and identify the maximum area. The population density can be calculated as population divided by area. 3. Condition Structure: Use a WHERE clause to filter for the state with the maximum area. 4. Calculation Structure: The population density is calculated as population\/area, and we will include this calculation in the SELECT clause.","218":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" of the most populous city. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the highest population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the most populous city.","219":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information. 2. Condition Structure: Apply a WHERE clause to filter for the state where the capital is 'Des Moines'. 3. Join Structure: Not required, as we can directly filter the highlow table based on the state name derived from the condition. 4. Aggregation Structure: Not needed, as we are retrieving a specific value without any aggregation.","220":"1. Sequential Structure: Start with the SELECT clause to specify the count of cities. 2. Condition Structure: No specific filtering condition is needed since we want to count all cities in the US. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cities in the \"city\" table.","221":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"city.city_name.\" 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in Texas, using the condition \"state.state_name = 'Texas'.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the shared key \"state_name\" to ensure we are only selecting cities from Texas. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the cities.","222":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" and its \"city.population\" to identify the largest city. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Wyoming.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are only considering cities in Wyoming. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population, and use LIMIT 1 to select the largest city.","223":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the highest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the most populous state.","224":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter the records for the state \"Illinois.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" and \"state_name\" fields to ensure we are only selecting rivers that traverse through Illinois. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names of the rivers.","225":"1. Sequential Structure: Start with the SELECT clause to specify the \"city.city_name\" of the city with the highest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the maximum population. 3. Join Structure: No JOIN is required as all necessary information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the highest population.","226":"1. Sequential Structure: Start with the SELECT clause to count the number of states in the USA. 2. Condition Structure: Use a WHERE clause to filter for states where \"state.country_name\" is 'usa'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of states that meet the specified condition.","227":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" for the specified state. 2. Condition Structure: Apply a WHERE clause to filter for the state name \"Texas.\" 3. Join Structure: No JOIN is necessary since the information is available within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the capital for Texas.","228":"1. Sequential Structure: Start with the SELECT clause to specify the \"city.city_name\" of the city with the least population. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the minimum population. 3. Join Structure: No JOIN is required as all necessary information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the least population.","229":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the smallest state based on area. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the smallest area. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.area\" to rank states by area and apply LIMIT 1 to select the smallest state.","230":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that have a city named \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"city.city_name\" is 'Springfield.' 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique state names are returned.","231":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" for the state of Texas. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Texas\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the highest point for the specified state.","232":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for the state with the maximum population density. 3. Join Structure: Not required, as all necessary data is contained within the state table. 4. Aggregation Structure: Use the MAX function to find the maximum density and filter the population based on this value.","233":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" for the state of Texas. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the capital of Texas based on the specified condition.","234":"1. Sequential Structure: Start with the SELECT clause to retrieve the area of the state. Use the FROM clause to specify the state table. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest population density. 3. Join Structure: Not required, as all necessary data is contained within the state table. 4. Aggregation Structure: Use the MIN function to find the smallest population density and filter the state based on this value.","235":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the lake name and area. 2. Condition Structure: Use a WHERE clause to filter for lakes that are located in \"California\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"lake\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and areas of lakes in California.","236":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" and \"state_name\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is needed since we are looking for the lowest point in the US, which is represented in the \"highlow\" table. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the lowest point and its corresponding state.","237":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of California from the \"state\" table. 2. Condition Structure: Use a WHERE clause to filter for the state name \"California\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population value for California.","238":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum value of \"highest_elevation\" from the \"highlow\" table, as the user is asking for the highest point in America.\n2. Condition Structure: Apply a WHERE clause to filter for records where \"state.country_name\" is 'America'. This ensures that only states in America are considered.\n3. Join Structure: Use an INNER JOIN between the \"highlow\" table and the \"state\" table based on \"state_name\" to ensure that the query only considers states in America.\n4. Aggregation Structure: Use the MAX function to find the highest value of \"highest_elevation\" across all states in America.","239":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where Springfield is located. 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name for the specified city.","240":"1. Sequential Structure: Start with the SELECT clause to retrieve the area and population of New Mexico from the \"state\" table. 2. Condition Structure: Use a WHERE clause to filter for the state name \"New Mexico\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the area and population for New Mexico.","241":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest area. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum area. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the largest area and apply a WHERE clause to filter for the state that has this maximum area.","242":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"city.city_name\" which contains the names of the cities. 2. Condition Structure: Apply a WHERE clause to filter the records for cities that are located in the state of Texas. 3. Join Structure: No JOIN is necessary here, as the \"city\" table already contains the \"state_name\" field which can be directly filtered. 4. Aggregation Structure: No aggregation is needed since we are simply listing the city names.","243":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city named \"Boulder\". 2. Condition Structure: Use a WHERE clause to filter for the city name \"Boulder\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population of a specific city.","244":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"state.state_name\" where towns named \"Springfield\" are located. 2. Condition Structure: Use a WHERE clause to filter for records where \"city.city_name\" is 'Springfield'. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to associate each city with its respective state. 4. Aggregation Structure: No aggregation is needed, but DISTINCT is applied to ensure unique state names are returned.","245":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"city.city_name\" and \"city.population.\" 2. Condition Structure: Apply a WHERE clause to filter for cities located in the state of Kansas. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are only selecting cities from Kansas. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the cities and their populations.","246":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of California from the state table. 2. Condition Structure: Use a WHERE clause to filter for the state name 'California'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population value for California.","247":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain.mountain_altitude\" for Guadalupe Peak. 2. Condition Structure: Use a WHERE clause to filter for the mountain name that matches 'Guadalupe Peak'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the altitude of a specific mountain.","248":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table, as it contains the relationships between states. 2. Condition Structure: Use a WHERE clause to filter for states that border Colorado. This will involve checking the border column for the state name 'Colorado'. 3. Join Structure: Use a JOIN clause to connect the border_info table with itself to find states that border the states that border Colorado. 4. Aggregation Structure: Not needed, as we are simply retrieving state names based on the specified conditions without any aggregation.","249":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the lowest population density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the lowest density.","250":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table, as it contains the information about states and their borders. 2. Condition Structure: Use a WHERE clause to filter for states that border the 'Ohio River'. 3. Join Structure: Use a JOIN between the border_info and river tables based on the state_name and traverse fields to connect states with the rivers they border. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of states without any aggregation.","251":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.population\" for the major cities in Wisconsin. 2. Condition Structure: Apply a WHERE clause to filter for cities that belong to the state of Wisconsin. 3. Join Structure: No JOIN is necessary here since the \"city\" table already contains the \"state_name\" field, which we can use to filter directly. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population values for the specified cities.","252":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.country_name\" is 'USA'. 3. Join Structure: Use a JOIN between the \"highlow\" and \"state\" tables based on \"state_name\" to link the highest point information with the corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the highest point.","253":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: Use a WHERE clause to filter for states that the Mississippi River traverses. Additionally, we need to find the smallest state by area, so we will use a subquery to identify the smallest state. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to link cities with their respective states. 4. Aggregation Structure: Use GROUP BY to group cities by state_name and apply the MAX function to find the largest city in terms of population within the smallest state identified in the subquery.","254":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum value of \"highest_elevation\" from the \"highlow\" table, as the user is asking for the height of the highest point in the USA.\n2. Condition Structure: No specific condition is needed to filter by country, as the \"highlow\" table already contains elevation data for each state in the USA.\n3. Join Structure: No JOIN is necessary, as the \"highlow\" table already contains the relevant elevation data for each state.\n4. Aggregation Structure: Use the MAX function to find the maximum value of \"highest_elevation\" across all states in the \"highlow\" table.","255":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city \"Boulder.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"Boulder.\" 3. Join Structure: No JOIN is needed here, as the population information is available directly in the \"city\" table. 4. Aggregation Structure: No aggregation is required since we are directly retrieving the population of a specific city.","256":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name. Use the FROM clause to specify the river table. 2. Join Structure: Use a JOIN between the river and state tables based on the traverse and state_name fields to link rivers with the states they run through. 3. Aggregation Structure: Use GROUP BY to group the results by river name, allowing us to count the number of states each river traverses. 4. Condition Structure: Use ORDER BY to sort the results by the count of states in descending order and limit the results to get the river that runs through the most states.","257":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter the records for the state \"Illinois.\" 3. Join Structure: No JOIN is necessary since the information about rivers and their corresponding states is available in the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply listing the names of the rivers.","258":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.area\" for New Mexico. 2. Condition Structure: Use a WHERE clause to filter for the state name \"New Mexico\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the area of a specific state.","259":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"density\" of the state named \"Wyoming\". 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is equal to 'Wyoming'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single value based on a specific condition.","260":"1. Sequential Structure: Start with the SELECT clause to retrieve the neighboring states, which will be from the \"border_info\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific state \"Kentucky\" to find its neighboring states. 3. Join Structure: No JOIN is necessary here, as the information can be directly obtained from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the neighboring states.","261":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information for each state. 2. Condition Structure: Use a WHERE clause to filter for states that border Colorado. This will involve checking the border_info table for states that are listed as bordering Colorado. 3. Join Structure: Use a JOIN between the highlow and border_info tables on the state_name to connect the highest point data with the states that border Colorado. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","262":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is equal to \"state.state_name,\" specifically for the Mississippi River. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the condition that \"river.traverse\" matches \"state.state_name\" to link the states with the river. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the population values for the specified states.","263":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the biggest state based on population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the maximum population and apply a WHERE clause to filter for the state that has this maximum population.","264":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which contains the names of the states that border Kentucky. 2. Condition Structure: Apply a WHERE clause to filter for records where \"border_info.border\" is 'Kentucky'. 3. Join Structure: Use a JOIN between the \"border_info\" and \"state\" tables based on \"border_info.state_name\" and \"state.state_name\" to ensure we are getting the correct state names that border Kentucky. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states that border Kentucky.","265":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter for the specific city 'Seattle' and the state 'Washington'. 3. Join Structure: Not required, as all necessary data is available in the city table. 4. Aggregation Structure: Not needed, as we are retrieving a specific value without any aggregation.","266":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the longest river in the United States. 2. Condition Structure: Use a WHERE clause to filter for rivers that traverse the \"United States\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","267":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the major cities in Kansas. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.state_name\" is 'Kansas'. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we are only selecting cities that are considered major, which typically means having a significant population.","268":"1. Sequential Structure: Start with the SELECT clause to count the number of rivers. We will use the COUNT function on the \"river.river_name\" field. 2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the state of Idaho. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table and we can directly filter by the state name. 4. Aggregation Structure: Use COUNT to aggregate the number of rivers that meet the specified condition.","269":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" since we want to list the cities. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" is 'mississippi' to focus on the specific river. 3. Join Structure: Use a JOIN between the \"city\" and \"river\" tables based on the \"state_name\" to link cities with the states through which the Mississippi runs. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the cities.","270":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the least populous state. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the minimum population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the least population.","271":"1. Sequential Structure: Start with the SELECT clause to count the number of states in the USA. 2. Condition Structure: Use a WHERE clause to filter for states where the \"country_name\" is 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use COUNT to determine the total number of states that meet the specified condition.","272":"1. Sequential Structure: Start with the SELECT clause to specify the \"city.city_name\" of the largest city based on population. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the largest population. 3. Join Structure: No JOIN is required as all necessary information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the highest population.","273":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that have cities named \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.city_name\" is 'Springfield.' 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the shared key \"state_name\" to link each city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be applied to ensure unique state names are returned.","274":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" and \"river.length\" for the longest river in Texas. 2. Condition Structure: Use a WHERE clause to filter for records where \"state.state_name\" is 'Texas'. 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on \"river.traverse\" and \"state.state_name\" to link each river with its respective state. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length, and use LIMIT 1 to select the longest river.","275":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city named \"Boulder\". 2. Condition Structure: Use a WHERE clause to filter for the city name \"Boulder\". 3. Join Structure: No JOIN is necessary since the required information is available within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population of a specific city.","276":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the states that border Kentucky. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.state_name\" is 'Kentucky'. 3. Join Structure: Use a JOIN between the \"border_info\" and \"state\" tables based on the \"border\" column to link the bordering states with their names. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names of the states.","277":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names and their highest points. Use the FROM clause to specify the highlow table, which contains the highest point information for each state. 2. Condition Structure: Use the WHERE clause to filter states where the highest point is greater than that of Colorado. This requires a subquery to first get the highest point of Colorado. 3. Join Structure: Not required, as all necessary data is contained within the highlow table. 4. Aggregation Structure: Not needed, as we are simply comparing values without any aggregation.","278":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the highest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","279":"1. Sequential Structure: Start with the SELECT clause to specify the \"river.length\" of the river named \"rio grande\". 2. Condition Structure: Use a WHERE clause to filter for the river with the name 'rio grande'. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single value based on a specific condition.","280":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers that traverse the state of Idaho. 3. Join Structure: Not required, as the necessary information is contained within the river table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of rivers that meet the specified condition.","281":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" to identify the major cities. 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the United States, which can be determined by checking if \"state.country_name\" is 'United States'. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to link each city with its respective state. 4. Aggregation Structure: Since the question asks for major cities, we may want to consider a threshold for \"major\" based on population. However, without a specific threshold provided, we will assume all cities in the United States are to be listed.","282":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the city is \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link the city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name associated with the city.","283":"1. Sequential Structure: Start with the SELECT clause to retrieve the population density of the state. The population density can be calculated by dividing the population by the area. Use the FROM clause to specify the state table. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest area, as we are interested in the smallest state. 3. Join Structure: Not required, as all necessary data is available within the state table. 4. Aggregation Structure: Use the MIN function to find the smallest area in the state table, which will help identify the smallest state for the density calculation.","284":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" of the state \"Iowa\". 2. Condition Structure: Use a WHERE clause to filter for the state name \"Iowa\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the lowest point for the specified state.","285":"1. Sequential Structure: Begin with the SELECT clause to retrieve the length of the river, as the user is asking for the longest river. However, we must also include a condition to filter rivers by the country \"USA\" since the user specifically asked for the longest river in the USA.\n2. Condition Structure: A WHERE clause is necessary to filter the rivers by `country_name = 'USA'` to ensure we are only considering rivers in the USA.\n3. Join Structure: No JOIN is necessary because all required data (river length and country) is contained within the \"river\" table.\n4. Aggregation Structure: Use the MAX function to find the maximum length of the rivers in the USA, which will give us the length of the longest river.","286":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the river flows through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio River'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that flow through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","287":"1. Sequential Structure: Start with the SELECT clause to specify the \"length\" of the river named \"rio grande\". 2. Condition Structure: Use a WHERE clause to filter for the river with the name \"rio grande\". 3. Join Structure: No JOIN is necessary since all required information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the length of a specific river.","288":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which represents the states that adjoin Kentucky. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is 'Kentucky'. 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the states that border Kentucky.","289":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name associated with the city \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the shared key \"state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name for the specified city.","290":"1. Sequential Structure: Start with the SELECT clause to retrieve the capitals of the states. The required field is \"state.capital.\" 2. Condition Structure: We need to filter the states that border Texas. This will be done using a WHERE clause that checks for states in the \"border_info\" table where \"border\" is 'Texas.' 3. Join Structure: Use a JOIN between the \"state\" table and the \"border_info\" table based on the \"state_name\" to link each state with its border information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the capitals of the states that meet the condition.","291":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the smallest population. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the smallest population. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the smallest population.","292":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: Use a WHERE clause to filter the records where \"river.traverse\" matches the \"state.state_name\" for the Mississippi River. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the condition that \"river.traverse\" equals \"state.state_name\" to link the states with the river. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the population values for the relevant states.","293":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the cities in Texas. 2. Condition Structure: Apply a WHERE clause to filter the records where \"city.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since the information needed is available within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply listing the cities and their populations.","294":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which represents the neighboring states. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is 'Kentucky'. 3. Join Structure: Use a JOIN between the \"border_info\" and \"state\" tables based on the shared \"state_name\" to ensure we get the correct state names. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the neighboring states.","295":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Texas.\" 3. Join Structure: No JOIN is necessary since we are only querying the \"highlow\" table for the highest point in Texas. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the highest point for the specified state.","296":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the cities located in Texas. 2. Condition Structure: Apply a WHERE clause to filter the records where \"city.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since the information needed is available within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and populations of the cities.","297":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which represents the states that border Kentucky. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is equal to 'Kentucky'. 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the states that border Kentucky.","298":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its population density. Use the FROM clause to specify the city table and join it with the state table to access the density information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the city with the highest population density. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate city data with its corresponding state density. 4. Aggregation Structure: Use ORDER BY to sort the results by population density in descending order and limit the results to the top entry to find the city with the highest density.","299":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" that corresponds to the river. 2. Condition Structure: Use a WHERE clause to filter for the specific river name, which is \"Ohio River.\" 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" field in the river table and the \"state_name\" field in the state table to find the state that has the Ohio River. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the name of the state.","300":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" and its corresponding \"state.population\". 2. Condition Structure: No specific filtering condition is needed since we want to find the largest state capital by population. 3. Join Structure: No JOIN is required as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank the capitals by population and apply LIMIT 1 to select the capital with the highest population.","301":"1. Sequential Structure: Start with the SELECT clause to retrieve the maximum value of \"highest_elevation\" from the \"highlow\" table, as we are looking for the highest elevation across all states.\n2. Condition Structure: No specific condition is needed to filter by country, as the \"highlow\" table already contains elevation data for states in the United States.\n3. Join Structure: No JOIN is required, as the \"highlow\" table already contains the necessary elevation data, and there is no need to link it with the \"state\" table.\n4. Aggregation Structure: Use the MAX function to find the highest value of \"highest_elevation\" across all states in the \"highlow\" table.","302":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population.\" 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Wyoming. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are only considering cities in Wyoming. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order to find the cities with the highest populations.","303":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","304":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"river_name\" from the \"river\" table. 2. Condition Structure: Use a WHERE clause to filter for rivers that traverse the state of \"Illinois\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the rivers that meet the specified condition.","305":"1. Sequential Structure: Start with the SELECT clause to count the number of rivers. We will use the COUNT function to get the total number of rivers in Idaho. 2. Condition Structure: Apply a WHERE clause to filter the records for the state \"Idaho.\" 3. Join Structure: No JOIN is necessary here, as we can directly query the \"river\" table using the state name. 4. Aggregation Structure: Use COUNT to aggregate the number of rivers that match the condition specified in the WHERE clause.","306":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter states that do not have any surrounding states by ensuring that the state name is not present in the border_info table. 3. Join Structure: Not required, as we only need to filter based on the absence of matching state names in the border_info table. 4. Aggregation Structure: Not needed, as no aggregation functions are required for this query.","307":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" for the rivers flowing through Illinois. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","308":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" of the city with the largest population in Wyoming. 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.state_name\" is 'Wyoming'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the largest population.","309":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter for the city named 'Boulder' to get the specific population count. 3. Join Structure: Not required, as all necessary data is available in the city table. 4. Aggregation Structure: Not needed, as we are directly retrieving the population of a specific city without any aggregation.","310":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the most populous state. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the highest population. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the most populous state.","311":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest points of states. Use the FROM clause to specify the border_info table, as it contains the states surrounding Mississippi. 2. Join Structure: Use an INNER JOIN between the border_info and highlow tables based on the state_name to connect the states with their highest points. 3. Condition Structure: Apply a WHERE clause to filter for states that are bordering Mississippi. 4. Aggregation Structure: Not needed, as we are directly retrieving the highest points without any aggregation.","312":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.country_name\" is 'United States'. 3. Join Structure: Use a JOIN between the \"highlow\" and \"state\" tables based on \"state_name\" to link the highest point information with the corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the highest point for the specified country.","313":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the lowest population density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the lowest density.","314":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest population density. This will involve a subquery to find the minimum density from the state table. 3. Join Structure: Use a JOIN between the highlow and state tables based on the state_name to relate the highest point to the corresponding state. 4. Aggregation Structure: Use the MIN function in a subquery to determine the smallest population density from the state table.","315":"1. Sequential Structure: Start with the SELECT clause to count the number of states in the \"state\" table. 2. Condition Structure: Use a WHERE clause to filter for states where \"state.country_name\" is 'United States'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of states that meet the specified condition.","316":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state. Use the FROM clause to specify the state table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the state with the highest population density. 3. Join Structure: Not required, as we only need data from the state table. 4. Aggregation Structure: Use the ORDER BY clause to sort the states by population density in descending order and limit the result to the top entry to get the state with the highest density.","317":"1. Sequential Structure: Start with the SELECT clause to retrieve the capitals of the states. Use the FROM clause to specify the state table. 2. Join Structure: Use a JOIN clause to connect the state table with the border_info table based on the state_name to find states that border Texas. 3. Condition Structure: Apply a WHERE clause to filter for states that border Texas. 4. Aggregation Structure: Not needed, as we are simply retrieving the capitals without any aggregation.","318":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that border the Ohio River. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio River'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link states with the rivers they border. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states that border the specified river.","319":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest area. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum area. 3. Join Structure: No JOIN is necessary as all required information is available in the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the largest area and apply a WHERE clause to filter for the state that has this maximum area.","320":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population.\" 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Wyoming. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"state_name\" to ensure we are only considering cities in Wyoming. 4. Aggregation Structure: Use ORDER BY to sort the cities by population in descending order and LIMIT 1 to get the city with the largest population.","321":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"city.city_name\" and \"city.population.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city, \"Boulder.\" 3. Join Structure: No JOIN is necessary since the information is available within the \"city\" table, and we are only interested in Boulder. 4. Aggregation Structure: No aggregation is needed as we are retrieving specific information about a single city.","322":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name. Use the FROM clause to specify the river table. We will need to count the number of distinct states that each river traverses. 2. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the number of unique states for each river. This will help us determine which river runs through the most states. 3. Grouping Structure: Use GROUP BY to group the results by river name, allowing us to count the states for each river. 4. Ordering Structure: Use ORDER BY to sort the results in descending order based on the count of states, and limit the results to get the river that runs through the most states.","323":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"border_info.state_name\" which represents the states that border Kentucky. 2. Condition Structure: Use a WHERE clause to filter for records where \"border_info.border\" is equal to 'Kentucky'. 3. Join Structure: No JOIN is necessary here, as the information can be directly accessed from the \"border_info\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the states that border Kentucky.","324":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"mountain.mountain_name\" and \"mountain.mountain_altitude\" to identify the highest mountain. 2. Condition Structure: No specific filtering condition is needed here, as we are interested in finding the highest mountain in the US. 3. Join Structure: Use a JOIN between the \"mountain\" and \"highlow\" tables based on \"state_name\" to ensure we are considering mountains in the US. 4. Aggregation Structure: Use ORDER BY in descending order on \"mountain.mountain_altitude\" to rank mountains by altitude. Use LIMIT 1 to select the highest mountain.","325":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter the records for the state \"Illinois.\" 3. Join Structure: No JOIN is necessary here, as the information about rivers is contained within the \"river\" table and can be filtered directly. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","326":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state of California. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'California'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population value for California.","327":"1. Sequential Structure: Start with the SELECT clause to specify the total area of all states combined. 2. Aggregation Structure: Use the SUM function to calculate the total area from the \"state.area\" field. 3. Condition Structure: No specific filtering condition is needed since we want the total area of all states. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"state\" table.","328":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the length of the river. Use the FROM clause to specify the river table and join it with the state table to relate rivers to their respective states. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the state with the longest river. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse field to connect rivers with their corresponding states. 4. Aggregation Structure: Use the MAX function to find the maximum length of the river and filter the results to get the state associated with that maximum length.","329":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the 'United States'. 3. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in descending order and limit the result to the top entry to find the longest river. 4. Join Structure: Not required, as all necessary data is available within the river table and the condition is directly applied to the state name.","330":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name. Use the FROM clause to specify the river table. 2. Aggregation Structure: Use GROUP BY to group the results by river name, allowing us to count the number of states each river traverses. 3. Condition Structure: Use the ORDER BY clause to sort the results by the count of states in descending order, so that the river running through the most states appears first. 4. Limiting Results: Use LIMIT to restrict the output to only the top result, which will be the river that runs through the most states.","331":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" for the states through which the Mississippi River runs. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are directly linking the river to the states. 3. Join Structure: Use a JOIN clause to connect the \"state\" table with the \"river\" table based on the condition that \"river.traverse\" matches \"state.state_name.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the population values for the relevant states.","332":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" from the \"highlow\" table for the state of Iowa. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Iowa\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the lowest point for the specified state.","333":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the major cities in Kansas. 2. Condition Structure: Apply a WHERE clause to filter the records for the state of Kansas, using the condition \"state.state_name = 'Kansas'.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to ensure we are only looking at cities within Kansas. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the major cities and their populations.","334":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state of California. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'California'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population value for California.","335":"1. Sequential Structure: Start with the SELECT clause to retrieve the capitals of the states. Use the FROM clause to specify the border_info table, as it contains the information about states that border Texas. 2. Condition Structure: Use a WHERE clause to filter for states that border Texas by checking the border column in the border_info table. 3. Join Structure: Use a JOIN between the border_info table and the state table on the state_name to get the capitals of the states that border Texas. 4. Aggregation Structure: Not needed, as we are simply retrieving the capitals without any aggregation.","336":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the border_info table, as it contains the information about state borders. 2. Condition Structure: Use a WHERE clause to filter for records where the state_name is 'Kentucky', ensuring we only count the states that Kentucky borders. 3. Join Structure: Not required, as all necessary data is available within the border_info table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of states that Kentucky borders.","337":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that the river \"Ohio\" runs through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that run through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","338":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city. Use the FROM clause to specify the city table. 2. Condition Structure: Apply a WHERE clause to filter for cities in the state of Alaska. Additionally, we need to find the city with the maximum population. 3. Join Structure: Use a JOIN between the city and state tables based on the state_name to ensure we are only considering cities in Alaska. 4. Aggregation Structure: Use the MAX function to find the maximum population and filter the results accordingly.","339":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" for Texas. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Texas\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the capital of Texas based on the specified condition.","340":"1. Sequential Structure: Start with the SELECT clause to specify the count of major cities. Since the question asks for the number of major cities, we will use the COUNT function. 2. Condition Structure: We need to define what constitutes a \"major city.\" Typically, this could be based on a population threshold, but since no specific threshold is provided, we will assume that any city with a population greater than a certain number (e.g., 100,000) is considered a major city. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of cities that meet the population condition.","341":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the name of the largest city. Use the FROM clause to specify the city table, as it contains the population data needed to identify the largest city. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the largest city across all states. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate cities to their respective states. 4. Aggregation Structure: Use the MAX function to find the maximum population and GROUP BY the state name to ensure we can identify the largest city for each state.","342":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" since we are interested in the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter for records where \"river.traverse\" is 'Illinois' to get only the rivers that traverse the state of Illinois. 3. Join Structure: No JOIN is necessary here, as the information needed is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","343":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" and \"state.population\" of the capital cities. 2. Condition Structure: No specific filtering condition is needed since we want to find the capital city with the largest population. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank the capital cities by population and apply LIMIT 1 to select the biggest capital city.","344":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" of the state Texas. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Texas\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the highest point for the specified state.","345":"1. Sequential Structure: Start with the SELECT clause to count the number of states. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all states. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"state\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of states.","346":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and area. Use the FROM clause to specify the state table. 2. Join Structure: Use a JOIN between the state table and the border_info table to connect states that border Texas. 3. Condition Structure: Apply a WHERE clause to filter for states that border Texas. 4. Aggregation Structure: Use ORDER BY to sort the results by area in ascending order and limit the results to get the state with the smallest area.","347":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and population. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for the state where the country name is 'Wyoming'. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state name to link cities with their respective states. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to get the most populated area.","348":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_elevation\" from the \"highlow\" table. Since we are looking for the elevation of a specific mountain, \"Guadalupe Peak,\" we should directly select the relevant column without using any aggregation functions.\n2. Condition Structure: Apply a WHERE clause to filter for the specific mountain, \"Guadalupe Peak,\" by checking the \"highest_point\" column in the \"highlow\" table.\n3. Join Structure: No JOIN is necessary, as all the required information is available within the \"highlow\" table.\n4. Aggregation Structure: No aggregation is needed, as we are retrieving a specific value for \"Guadalupe Peak\" rather than summarizing multiple rows.","349":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.area\" for New Mexico. 2. Condition Structure: Use a WHERE clause to filter for the state name \"New Mexico\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the area of New Mexico.","350":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of California. 2. Condition Structure: Use a WHERE clause to filter for the state name \"California\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population value for California.","351":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" for the state of Texas. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the capital of Texas.","352":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its corresponding population density. Use the FROM clause to specify the city table and join it with the state table to access the density information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the city with the highest population density across all states. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to relate cities to their respective states. 4. Aggregation Structure: Use ORDER BY to sort the results by population density in descending order and limit the results to the top entry to find the city with the highest density.","353":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the river \"ohio\" flows. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'ohio'. 3. Join Structure: Use a JOIN between the \"river\" and \"state\" tables based on the \"traverse\" field in the \"river\" table and the \"state_name\" field in the \"state\" table to link the river with the states it flows through. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","354":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state of California. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'California'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population value for California.","355":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Texas.\" 3. Join Structure: No JOIN is necessary since the \"highest_point\" and \"state_name\" are both in the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the highest point for Texas.","356":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_elevation\" from the \"highlow\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Pennsylvania.\" 3. Join Structure: No JOIN is necessary since the required information is available within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the lowest elevation for Pennsylvania.","357":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"city.city_name.\" 2. Condition Structure: Apply a WHERE clause to filter for cities that are located in the state of Texas, using the condition \"state_name = 'Texas'.\" 3. Join Structure: No JOIN is necessary here, as the \"city\" table already contains the \"state_name\" field that we need to filter on. 4. Aggregation Structure: No aggregation is needed since we are simply listing the cities.","358":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"river_name\" of the longest river in the USA. 2. Condition Structure: No specific filtering condition is needed since we are looking for the longest river in the USA. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","359":"1. Sequential Structure: Start with the SELECT clause to specify the total area of the states in the USA. 2. Aggregation Structure: Use the SUM function to calculate the total area across all states. 3. Condition Structure: Apply a WHERE clause to filter for states where the \"state.country_name\" is 'usa'. 4. Join Structure: No JOIN is necessary since all required information is contained within the \"state\" table.","360":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the city names and their populations. 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.state_name\" is 'Wyoming'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"city.population\" to rank cities by their population and apply LIMIT 1 to select the city with the highest population in Wyoming.","361":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Join Structure: We need to join the river table with the border_info table to find states that border Alabama. This requires an INNER JOIN on the state_name field. 3. Condition Structure: Use a WHERE clause to filter for states that are listed as bordering Alabama in the border_info table. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of rivers without any aggregation.","362":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the longest river. 2. Condition Structure: No specific filtering condition is needed since we want to find the longest river overall. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","363":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"lake.lake_name\" which represents the names of the lakes. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.state_name\" is 'Michigan'. 3. Join Structure: Use a JOIN between the \"lake\" and \"state\" tables based on \"state_name\" to link each lake with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the lakes without any summarization.","364":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital cities. Use the FROM clause to specify the state table, as it contains the capital information. 2. Join Structure: Use a JOIN between the border_info table and the state table to connect states that border Texas with their respective capitals. 3. Condition Structure: Apply a WHERE clause to filter for states that border Texas, using the border_info table to identify these states. 4. Aggregation Structure: Not needed, as we are simply retrieving the capital cities without any aggregation.","365":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population. Use the FROM clause to specify the border_info table, which contains the states that border Oklahoma. 2. Condition Structure: Use a WHERE clause to filter for states that border Oklahoma. 3. Join Structure: Use a JOIN between the border_info and state tables on the state_name to get the population of the bordering states. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the results to get the state with the highest population.","366":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that the Ohio river runs through. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.river_name\" is 'Ohio'. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" columns to link each state with the rivers that run through it. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the states.","367":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city named \"Boulder\". 2. Condition Structure: Use a WHERE clause to filter for the city where \"city.city_name\" is 'Boulder'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the population of a specific city.","368":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain.mountain_name\" as we are interested in the name of the highest mountain. 2. Condition Structure: Apply a WHERE clause to filter for records where \"mountain.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since we are only querying the \"mountain\" table for mountains in Texas. 4. Aggregation Structure: Use ORDER BY in descending order on \"mountain.mountain_altitude\" to rank the mountains by their altitude. Use LIMIT 1 to select the highest mountain.","369":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"river.river_name\" and \"river.length\" for the rivers in Texas. 2. Condition Structure: Apply a WHERE clause to filter the records for rivers that traverse the state of Texas. 3. Join Structure: No JOIN is necessary here since we are only querying the \"river\" table based on the state name. 4. Aggregation Structure: Use ORDER BY to sort the rivers by their length in descending order to identify the biggest rivers.","370":"1. Sequential Structure: Start with the SELECT clause to specify the total area of all states. 2. Aggregation Structure: Use the SUM function to calculate the combined area of all states. 3. Condition Structure: No specific filtering condition is needed since we want the total area of all 50 states. 4. Join Structure: No JOIN is required as all necessary information is contained within the \"state\" table.","371":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of states. The relevant field is \"state.population.\" 2. Condition Structure: Use a WHERE clause to filter for states that are connected to the Mississippi river. This is indicated by the condition \"border_info.border = 'Mississippi'.\" 3. Join Structure: Use a JOIN between the \"state\" and \"border_info\" tables based on \"state.state_name\" and \"border_info.state_name\" to link each state with its border information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the populations of the states without any need for summarization.","372":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city \"Boulder.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"Boulder.\" 3. Join Structure: No JOIN is needed here, as the population information is available directly in the \"city\" table. 4. Aggregation Structure: No aggregation is required since we are directly retrieving the population of a specific city.","373":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" since we want to know the names of the major rivers. 2. Condition Structure: Apply a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table and we are directly filtering based on the state name. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","374":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state. Use the FROM clause to specify the state table. 2. Aggregation Structure: Use the MAX function to find the largest area among the states. 3. Condition Structure: Use a WHERE clause to filter the state whose area matches the maximum area found. 4. No Join Structure is needed, as all required data is contained within the state table.","375":"1. Sequential Structure: Start with the SELECT clause to specify the area of the state, which is \"state.area\". 2. Condition Structure: Use a WHERE clause to filter for the state name \"New Mexico\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single value based on a specific condition.","376":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of the state with the greatest population density. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the highest density.","377":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of the states. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the greatest density. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by density and apply LIMIT 1 to select the state with the highest density.","378":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" of the smallest city based on population. 2. Condition Structure: No specific filtering condition is needed since we want to find the city with the smallest population. 3. Join Structure: No JOIN is required as all necessary information is available in the \"city\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"city.population\" to rank cities by population and apply LIMIT 1 to select the city with the smallest population.","379":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"river.river_name\" for the river that runs through Illinois. 2. Condition Structure: Use a WHERE clause to filter for rivers where \"river.traverse\" is equal to 'Illinois'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the name of the river that meets the specified condition.","380":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"density\" of the state with the highest population density. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum density. 3. Join Structure: No JOIN is required as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the highest density.","381":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name. Use the FROM clause to specify the city table, as we need to find the city with the largest population. 2. Condition Structure: Use a WHERE clause to filter for the city with the maximum population. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to relate the city to its corresponding state. 4. Aggregation Structure: Use the MAX function to find the largest population in the city table, and then filter the results accordingly.","382":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the largest state based on area. 2. Condition Structure: No specific filtering condition is needed since we want to find the largest state by area. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.area\" to rank states by area and apply LIMIT 1 to select the largest state.","383":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of states that border Kentucky. Use the FROM clause to specify the border_info table. 2. Condition Structure: Apply a WHERE clause to filter records where the state_name is 'Kentucky', ensuring we only get the states that surround Kentucky. 3. Join Structure: Not required, as we can directly filter the border_info table based on the state_name. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of bordering states without any aggregation.","384":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the city \"Boulder.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"Boulder.\" 3. Join Structure: No JOIN is needed here, as the population information is available directly in the \"city\" table. 4. Aggregation Structure: No aggregation is required since we are directly retrieving the population of a specific city.","385":"1. Sequential Structure: Start with the SELECT clause to specify the count of rivers in Idaho. 2. Condition Structure: Use a WHERE clause to filter for rivers where \"river.traverse\" is 'Idaho'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"river\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of rivers that meet the specified condition.","386":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the city of Boulder. 2. Condition Structure: Apply a WHERE clause to filter for the specific city name, which is \"Boulder.\" 3. Join Structure: No JOIN is necessary here, as the information about the city can be obtained directly from the \"city\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the population of Boulder.","387":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"river.river_name\" which contains the names of the rivers. 2. Condition Structure: Apply a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table and we are only interested in rivers that traverse Illinois. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the rivers.","388":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the city is \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the \"state_name\" to link the city with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name associated with the city \"Springfield.\"","389":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.density\" for Wyoming. 2. Condition Structure: Use a WHERE clause to filter for the state name \"Wyoming\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the density for a specific state.","390":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Join Structure: Use JOIN to connect the river table with the border_info table on the state name to find rivers that run through states bordering Tennessee. 3. Condition Structure: Apply a WHERE clause to filter for states that are listed as bordering Tennessee. 4. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in descending order and limit the result to get the longest river.","391":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"lowest_point\" from the \"highlow\" table for the state of Iowa. 2. Condition Structure: Use a WHERE clause to filter for the state where \"highlow.state_name\" is 'Iowa'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the lowest point for the specified state.","392":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"state_name\" from the \"state\" table. 2. Condition Structure: No specific filtering condition is required since we want all states in the USA. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of all states.","393":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the lowest population density. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum density. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"state.density\" to rank states by population density and apply LIMIT 1 to select the state with the lowest density.","394":"1. Sequential Structure: Start with the SELECT clause to specify the \"river.river_name\" and \"river.length\" for the longest river. 2. Condition Structure: No specific filtering condition is needed since we are looking for the longest river that passes through the US. 3. Join Structure: No JOIN is necessary as the relevant information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the longest river.","395":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and calculate the population density. 2. Aggregation Structure: Use the formula for population density, which is population divided by area (state.population \/ state.area). 3. Ordering Structure: Use ORDER BY in descending order on the calculated population density to rank states by their density. 4. Limiting Structure: Use LIMIT 1 to retrieve only the state with the largest population density. 5. Condition Structure: No specific filtering condition is needed since we want the state with the maximum density.","396":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state of California. 2. Condition Structure: Use a WHERE clause to filter for the state where the name is 'California'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the population value for California.","397":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"state.state_name\" to identify the location of Springfield. 2. Condition Structure: Apply a WHERE clause to filter for the specific city name \"Springfield.\" 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the shared \"state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the location of Springfield.","398":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the highlow table, as it contains the highest points of each state. 2. Condition Structure: Use a WHERE clause to filter for states where the highest point is greater than the highest point in Colorado. This requires a subquery to first find the highest point in Colorado. 3. Join Structure: Not required, as all necessary data is contained within the highlow table. 4. Aggregation Structure: Not needed, as we are comparing values directly without any aggregation functions.","399":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the border_info table, as it contains the information about states that border other states. 2. Condition Structure: Use the WHERE clause to filter for records where the border is 'Kentucky', ensuring we only count states that border Kentucky. 3. Join Structure: Not required, as all necessary data is available within the border_info table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of states that meet the specified condition.","400":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the states. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter states that have cities named 'Durham' by checking the city table. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state_name to connect states with their respective cities. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","401":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the lowest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the minimum population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use the MIN function to find the lowest population and apply ORDER BY in ascending order on \"state.population\" to rank states by population. Use LIMIT 1 to select the state with the lowest population.","402":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.population\" of the largest state. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the largest population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the highest population.","403":"1. Sequential Structure: Start with the SELECT clause to count the number of states. Use the FROM clause to specify the state table. 2. Condition Structure: Use a WHERE clause to filter states that do not have any rivers. This can be done by ensuring that the state name is not present in the river table. 3. Join Structure: Not required, as we are only filtering based on the absence of matching state names in the river table. 4. Aggregation Structure: Use COUNT(*) to aggregate the number of states that meet the specified condition.","404":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the city names and their populations. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all major cities in the US. 3. Join Structure: A JOIN is necessary to combine the \"city\" and \"state\" tables based on the shared key \"state_name\" to ensure we are only considering cities in the US. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and populations of the cities.","405":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names through which the longest river in Texas runs. Use the FROM clause to specify the river table. 2. Condition Structure: Use a WHERE clause to filter for the river that runs through Texas and has the maximum length. 3. Join Structure: Not required, as all necessary data is available within the river table. 4. Aggregation Structure: Use the MAX function to identify the longest river in Texas.","406":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that have a city named \"Springfield.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"city.city_name\" is 'Springfield.' 3. Join Structure: Use a JOIN between the \"state\" and \"city\" tables based on \"state.state_name\" and \"city.state_name\" to link each state with its respective cities. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique state names are returned.","407":"1. Sequential Structure: Start with the SELECT clause to retrieve the city names. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the highlow table on the state_name to relate cities to their respective states. 3. Condition Structure: Use a WHERE clause to filter for the state that has the highest point, which can be identified from the highlow table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","408":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" for the state of Texas. 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the capital of Texas based on the specified condition.","409":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest population. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the maximum population. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use the ORDER BY clause in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the largest population.","410":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population. Use the FROM clause to specify the border_info table, which contains the states bordering Oklahoma. 2. Join Structure: Use an INNER JOIN between the border_info and state tables on the state_name to connect the states with their populations. 3. Condition Structure: Apply a WHERE clause to filter for states that border Oklahoma. 4. Aggregation Structure: Use ORDER BY to sort the results by population in descending order and limit the results to the top one to find the state with the largest population.","411":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information for each state. 2. Join Structure: Use a JOIN between the highlow table and the border_info table to connect states that border Colorado. The join will be based on the state_name field. 3. Condition Structure: Apply a WHERE clause to filter for states that are listed as bordering Colorado. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","412":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" since we want to know which river flows through Illinois. 2. Condition Structure: Use a WHERE clause to filter for records where \"river.traverse\" matches 'Illinois'. 3. Join Structure: No JOIN is necessary here, as the information is available within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of rivers.","413":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" and \"state.population\" to identify the largest capital by population. 2. Condition Structure: No specific filtering condition is needed since we want to find the largest capital in the US. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank capitals by population and apply LIMIT 1 to select the largest capital.","414":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. We will need to join the paperKeyphrase table to filter papers based on their keyphrases. 2. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables on the paperId to connect papers with their keyphrases. Additionally, join the keyphrase table to access the keyphrase names. 3. Condition Structure: Use a WHERE clause to filter for keyphrases that are related to \"Question Answering\". 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","415":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that are associated with the keyphrase \"TAIL NIPS.\" 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we will filter based on the keyphrase in the JOIN. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId\" and then join with the \"keyphrase\" table based on \"keyphraseId\" to filter for the specific keyphrase. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that match the keyphrase.","416":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the author's name. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for authors with the name 'mohammad rastegari'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the papers with their respective authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","417":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers that used the ImageNet dataset. Use the FROM clause to specify the paperDataset table, which links papers to datasets. 2. Condition Structure: Use a WHERE clause to filter for the dataset name 'ImageNet' to ensure we are only counting papers that used this specific dataset. 3. Join Structure: Use an INNER JOIN between the paperDataset and dataset tables based on datasetId to connect papers with their corresponding datasets. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that match the specified condition.","418":"1. Sequential Structure: Start with the SELECT clause to count the number of states. Use the FROM clause to specify the state table. 2. Join Structure: Use an INNER JOIN between the state and river tables based on the state name to identify states that are next to major rivers. 3. Aggregation Structure: Use the COUNT function to aggregate the number of states that meet the criteria. 4. Condition Structure: No specific condition is needed since we are counting all states that are adjacent to rivers.","419":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers based on the state that has the lowest point in the USA. This requires a subquery to identify the state with the lowest point. 3. Join Structure: Not required, as we are only filtering based on the state name from the highlow table and the river table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","420":"1. Sequential Structure: Start with the SELECT clause to count the number of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers that do not traverse the state with the capital 'Albany'. 3. Join Structure: Use a JOIN between the river and state tables based on the traverse and state_name fields to identify which rivers traverse which states. 4. Aggregation Structure: Use the COUNT function to aggregate the number of rivers that meet the specified condition.","421":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.numCitedBy\" to identify the titles of the papers and the number of times they have been cited. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2010 and in the venue 'EMNLP'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCitedBy\" to rank the papers by the number of citations, and use LIMIT to select the top cited papers.","422":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the keyphrases associated with each paper. Finally, apply GROUP BY to group the results by author. 2. Condition Structure: Use the WHERE clause to filter papers that are associated with the keyphrase 'syntactic parsing'. 3. Join Structure: Use INNER JOINs between the author, writes, and paperKeyphrase tables to connect authors to their papers and the keyphrases of those papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers published by each author and apply ORDER BY to sort the results in descending order, limiting the output to the authors with the most published papers.","423":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper details. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use a WHERE clause to filter for papers written by both authors, Peter Mertens and Dina Barbian. This will require checking the author names in the JOIN condition. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their respective authors. Additionally, join the author table to filter by author names. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","424":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" and \"author.authorName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that have the title containing \"convolution\" and are written by the author \"Brian Curless.\" 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table based on \"paperId\" and with the \"author\" table based on \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","425":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers authored by Liwen Xiong in 2015. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Liwen Xiong\" and the year 2015. 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors. Additionally, join the \"author\" table to filter by the author's name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","426":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: We need to filter the rivers based on the state with the largest population, so we will use a subquery to find the state with the maximum population. 3. Join Structure: Use a JOIN between the river and state tables based on the state name to relate rivers to their respective states. 4. Aggregation Structure: Use COUNT to aggregate the number of rivers in the identified state.","427":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers that do not traverse through Tennessee. 3. Join Structure: Not required, as we only need to filter based on the traverse column in the river table. 4. Aggregation Structure: Not needed, as we are simply retrieving records without any aggregation.","428":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as this table contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for citations where the author is 'Noah A Smith'. This will involve joining the author and writes tables to link the author to their papers. 3. Join Structure: Use JOINs between the author, writes, and cite tables based on the authorId and paperId to connect the author to their cited papers. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the specified author.","429":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers related to \"Question Answering.\" 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Question Answering.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"paperKeyphrase\" table on \"paperId\" and then with the \"keyphrase\" table on \"keyphraseId\" to link each paper with its respective keyphrases. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique paper titles are returned.","430":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the dataset name. 2. Condition Structure: No specific filtering condition is required since we want to list all datasets related to semantic parsing. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"dataset\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the dataset names.","431":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct states. Use the FROM clause to specify the border_info table, which contains information about state borders. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to count all states that border at least one other state. 3. Join Structure: Not required, as we can directly use the border_info table to identify states that have borders with other states. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the unique states that appear in the border column of the border_info table, ensuring we only count each state once.","432":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link papers with their authors. Additionally, join the author table to filter by the specific author name 'Luke Zettlemoyer'. 3. Condition Structure: Use a WHERE clause to filter for the author name 'Luke Zettlemoyer' to ensure we only get papers written by this author. 4. Aggregation Structure: Not needed, as we are simply retrieving the titles of papers without any aggregation.","433":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the author's name. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use the WHERE clause to filter for papers with the title containing \"convolution\" and authored by \"brian curless\". 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","434":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name from the state table. Use the FROM clause to specify the state table. 2. Condition Structure: Use a WHERE clause to filter states that do not have any corresponding entries in the river table. 3. Join Structure: Use a LEFT JOIN between the state and river tables based on the state name to identify states and their rivers. 4. Aggregation Structure: Use a WHERE clause to check for NULL values in the river table, indicating that there are no rivers associated with that state.","435":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for citations related to papers written by the author \"Noah A. Smith\". This will involve a subquery to find the paper IDs associated with this author. 3. Join Structure: Use a JOIN between the writes and cite tables based on paperId to connect the citations to the papers written by the specified author. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the papers written by \"Noah A. Smith\".","436":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table and join it with the venue table to filter by the specific venue and year. 2. Condition Structure: Use a WHERE clause to filter for papers presented at TACL in the year 2014. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: To determine the \"best\" paper, we can assume it is the one with the highest number of citations (numCiting). Therefore, we will use ORDER BY to sort by numCiting in descending order and limit the result to the top paper.","437":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table and JOIN it with the paperKeyphrase table to link keyphrases to papers. Then, join the writes table to connect papers to authors, and finally, filter for the specific author 'Luke Zettlemoyer'. 2. Condition Structure: Use a WHERE clause to filter for the author name 'Luke Zettlemoyer' to ensure we only get keyphrases associated with this author. 3. Join Structure: Use INNER JOINs between the keyphrase, paperKeyphrase, and writes tables based on their respective keys to relate keyphrases to the papers written by the specified author. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","438":"1. Sequential Structure: Start with the SELECT clause to retrieve the author information. Use the FROM clause to specify the author table. We will need to join the relevant tables to connect authors with their papers and the keyphrase of interest. 2. Join Structure: Use JOINs to connect the author table with the writes table (to get the papers written by authors), and then join with the paperKeyphrase table (to link papers with their keyphrases) and the keyphrase table (to filter for the specific keyphrase 'syntactic parsing'). 3. Aggregation Structure: Use GROUP BY to group the results by author, allowing us to count the number of papers each author has published in the specified keyphrase. We will then use ORDER BY to sort the results in descending order based on the count of papers. 4. Condition Structure: Use a WHERE clause to filter for papers that are associated with the keyphrase 'syntactic parsing'.","439":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table. 2. Condition Structure: We need to filter for the state that borders Texas, which requires a WHERE clause to identify states that are in the border_info table with Texas as a border. 3. Join Structure: Use a JOIN between the state and border_info tables to connect states with their borders. We will also need to join the border_info table again to find the state that borders the state that borders Texas. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","440":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table. We will need to join this with the paper table to filter by year and then join with the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the author named 'Christof Dallermassl' and the year 2000. 3. Join Structure: Use JOINs between the keyphrase, paper, and writes tables based on their relationships to connect keyphrases to the papers written by the specified author. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","441":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. We will also need to join the venue table to filter by the venue name (CVPR) and the year (2016). 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2016 and at the venue 'CVPR'. Additionally, we will filter for papers that are related to the specific keyphrase 'Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset'. 3. Join Structure: Use JOIN clauses to connect the paper table with the venue table based on venueId, and also join with the paperKeyphrase and keyphrase tables to filter by the specific keyphrase. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","442":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and area. Use the FROM clause to specify the state table. We will also need to join the river table to access the length of the river and the state it traverses. 2. Condition Structure: We need to find the longest river, so we will use a WHERE clause to filter for the river with the maximum length. 3. Join Structure: Use an INNER JOIN between the state and river tables based on the state name to connect the river data with the corresponding state. 4. Aggregation Structure: Use the MAX function to find the longest river and then filter the states based on the area to find the smallest state that the longest river runs through.","443":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"river.river_name\" of the shortest river in the United States. 2. Condition Structure: Use a WHERE clause to filter rivers that traverse the \"United States\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the shortest river.","444":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and join it with the venue and paperKeyphrase tables to filter based on the venue name and keyphrase. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2012 and in the venue 'acl', as well as to ensure that the keyphrase is 'Parsing'. 3. Join Structure: Use INNER JOINs between the paper, venue, and paperKeyphrase tables based on their respective foreign key relationships to connect papers with their venues and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","445":"1. Sequential Structure: Start with the SELECT clause to retrieve the author ID and the count of papers they have written. Use the FROM clause to specify the writes table, which connects authors to papers. 2. Join Structure: Join the writes table with the paperKeyphrase table to link papers to their keyphrases, and then join with the keyphrase table to filter for papers related to 'syntactic parsing'. 3. Aggregation Structure: Use GROUP BY to group the results by author ID, allowing us to count the number of papers each author has written that match the keyphrase. 4. Condition Structure: Use the HAVING clause to filter for the author(s) with the maximum count of papers related to 'syntactic parsing'.","446":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper titles from the paper table. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Apply a WHERE clause to filter for papers authored by \"Liwen Xiong\" in the year 2015. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","447":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name where \"Mount Whitney\" is located. 2. Condition Structure: Use a WHERE clause to filter for the specific mountain name \"Mount Whitney.\" 3. Join Structure: Use a JOIN between the \"mountain\" and \"state\" tables based on \"state_name\" to link the mountain with its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name associated with the specified mountain.","448":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author name 'oren etzioni' to ensure we only get papers written by this author. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the latest paper first, and limit the results to 1 to retrieve only the latest paper.","449":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the author with the name 'Sharon Goldwater'. 3. Join Structure: Not required, as all necessary information is available in the writes table, which directly links authors to their papers. 4. Aggregation Structure: Not needed, as we are simply checking for the existence of papers without any aggregation.","450":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the `paper` table and join it with the `paperKeyphrase` and `keyphrase` tables to link papers with their keyphrases. Apply a WHERE clause to filter for the current year and the specific keyphrase \"Multiuser Receiver in the Decision Feedback.\"\n2. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase \"Multiuser Receiver in the Decision Feedback\" and are from the current year. The keyphrase is treated as a single entity, and the current year should be dynamically inserted or specified.\n3. Join Structure: Use INNER JOINs between the `paper`, `paperKeyphrase`, and `keyphrase` tables based on their respective foreign keys to connect papers with their keyphrases. The `journal` table is not needed, as the keyphrase contains the entire phrase.\n4. Aggregation Structure: Use COUNT to aggregate the number of distinct papers that meet the specified conditions. No need for `GROUP BY` or `HAVING` since we are only counting papers with the specific keyphrase.","451":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant field, which is \"paper.paperId\" since we want to identify the papers authored by Sharon Goldwater. 2. Condition Structure: Apply a WHERE clause to filter for records where the author's name matches 'sharon goldwater.' 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its authors, and another JOIN with the \"author\" table to access the author's name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the list of papers without any summarization.","452":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"author.authorId\" and \"paper.title\" for the authors who had papers at the specified venue in 2016. 2. Condition Structure: Use a WHERE clause to filter for records where \"venue.venueId\" corresponds to the ACL conference and \"paper.year\" is 2016. 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"venue\" table based on \"venueId\" to ensure we are only looking at papers presented at the ACL venue. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique authors and their papers are returned.","453":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" and \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to the keyphrase \"Question Answering.\" This will involve a JOIN with the \"keyphrase\" table to find the relevant keyphrase. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId,\" and then join with the \"keyphrase\" table based on \"keyphraseId\" to filter for the specific keyphrase. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and years of the papers that match the condition.","454":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the paperDataset table to link papers with their datasets. 2. Condition Structure: Use the WHERE clause to filter for datasets that match the name 'ImageNet'. 3. Join Structure: Use an INNER JOIN between the paper and paperDataset tables based on paperId to connect papers with their corresponding datasets. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that run experiments on the specified dataset.","455":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the lowest point. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the lowest point. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"highlow.lowest_point\" to rank states by their lowest point and apply LIMIT 1 to select the state with the lowest point.","456":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"city.city_name\" and \"city.population\" for the cities in the USA. 2. Condition Structure: Apply a WHERE clause to filter for records where \"state.country_name\" is 'USA'. 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on \"city.state_name\" and \"state.state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the cities and their populations.","457":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since the question is asking for the name of the dataset related to \"semantic parsing.\" 2. Condition Structure: Apply a WHERE clause to filter for datasets that are specifically related to \"semantic parsing.\" 3. Join Structure: Use a JOIN between the \"paperDataset\" and \"dataset\" tables based on \"datasetId\" to link each paper with its corresponding dataset. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the dataset names that match the condition.","458":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that have the keyphrase 'deep learning'.","459":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Join Structure: Use JOINs to connect the writes table with the paper table to access paper details and the venue table to filter by the venue name \"AISTATS\". 3. Condition Structure: Apply a WHERE clause to filter for the author named \"David M. Blei\" and the venue named \"AISTATS\". 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers written by the specified author in the specified venue.","460":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"keyphrase.keyphraseName\" which represents the keywords associated with the papers. 2. Condition Structure: Apply a WHERE clause to filter for papers written by the author \"Luke Zettlemoyer.\" 3. Join Structure: Use JOINs to connect the \"writes\" table with the \"paper\" table based on \"paperId\" and then join the \"paperKeyphrase\" table to link papers with their corresponding keyphrases. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be used to ensure unique keywords are returned.","461":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to filter by the specific keyphrase name. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the papers that match the condition.","462":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use the WHERE clause to filter for papers written by the author \"Oren Etzioni\". 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the most recent papers first.","463":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for keyphrases that match 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that have the keyphrase 'deep learning'.","464":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers that traverse states which are identified as bordering the state with the capital 'Atlanta'. 3. Join Structure: Use JOINs to connect the state table with the border_info table to find states that border the state with the capital 'Atlanta', and then join this result with the river table to find the rivers that run through those states. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of rivers without any aggregation.","465":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where the capital is \"salem.\" 2. Condition Structure: Use a WHERE clause to filter for the specific capital city \"salem.\" 3. Join Structure: No JOIN is necessary since we can directly access the \"state\" table to find the state corresponding to the capital. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the state name associated with the capital.","466":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2015 and authored by \"Liwen Xiong\". 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","467":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital city of the state. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for the state with the largest population, which indicates the largest state. 3. Join Structure: Not required, as all necessary data is contained within the state table. 4. Aggregation Structure: Use the MAX function to find the maximum population, which will help identify the largest state.","468":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' names, which will come from the \"author\" table. 2. Condition Structure: We need to filter the results to only include papers from the ACL 2016 conference. This will be done by joining the \"venue\" and \"paper\" tables and applying a WHERE clause to specify the venue name and the year. 3. Join Structure: Use JOIN clauses to connect the \"venue\" table with the \"paper\" table based on \"venueId,\" and then join the \"paper\" table with the \"writes\" table to link papers to their authors. Finally, join the \"writes\" table with the \"author\" table to get the authors' names. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to select distinct author names to avoid duplicates.","469":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"highest_elevation\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the highest elevation. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highlow.highest_elevation\" to rank states by their elevation and apply LIMIT 1 to select the state with the highest elevation.","470":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" since we are interested in the titles of the papers. 2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the venue name \"chi.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the condition.","471":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link authors to their papers. Additionally, join the keyphrase table to filter papers based on the keyphrase \"convolution\". 2. Condition Structure: Use a WHERE clause to filter for the author named \"Brian Curless\" and to ensure that the keyphrase associated with the papers is \"convolution\". 3. Join Structure: Use INNER JOINs between the paper, writes, and paperKeyphrase tables to connect authors with their papers and the keyphrases associated with those papers. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","472":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table and join it with the paperKeyphrase and writes tables to link keyphrases to papers authored by Luke Zettlemoyer. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'Luke Zettlemoyer'. 3. Join Structure: Use INNER JOINs between the keyphrase, paperKeyphrase, and writes tables based on their respective keys to connect keyphrases to the papers written by the specified author. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","473":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"highest_elevation\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the highest elevation. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highlow.highest_elevation\" to rank states by their highest elevation and apply LIMIT 1 to select the state with the highest elevation.","474":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its lowest point. Use the FROM clause to specify the highlow table, which contains the lowest point information for each state. 2. Join Structure: Use JOIN clauses to connect the highlow table with the border_info table to find states that border Idaho. The border_info table will help identify which states are adjacent to Idaho. 3. Condition Structure: Apply a WHERE clause to filter for states that border Idaho by checking the border_info table for entries where the border is 'Idaho'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","475":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for keyphrases that contain the term 'chi'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their associated keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","476":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. We will also need to join the state table to find the largest state based on area. 2. Condition Structure: We need to filter for the state with the largest area. This will be done using a subquery to find the maximum area from the state table. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the state name to link rivers to their respective states. 4. Aggregation Structure: Use the MAX function in a subquery to determine the largest state by area, which will be used in the WHERE clause to filter rivers that flow through that state.","477":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter out rivers that run through Tennessee by ensuring that the traverse field does not match 'Tennessee'. 3. Join Structure: Not required, as all necessary data is available within the river table. 4. Aggregation Structure: Not needed, as we are simply retrieving records based on the specified condition without any aggregation.","478":"1. Sequential Structure: Start with the SELECT clause to retrieve the field \"mountain.mountain_name\" which contains the names of the mountains. 2. Condition Structure: Apply a WHERE clause to filter for records where \"mountain.state_name\" is 'Alaska'. 3. Join Structure: No JOIN is necessary since all the required information is available within the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed as we are simply listing the names of the mountains.","479":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the `authorName` and the count of papers they have published. Use the `FROM` clause to specify the `writes` table, which links authors to their papers. \n2. Join Structure: Join the `writes` table with the `author` table on `authorId` to retrieve the `authorName`. Then, join the `writes` table with the `paper` table on `paperId` to get the papers. Next, join the `paper` table with the `paperKeyphrase` table to link papers to their keyphrases. Finally, join with the `keyphrase` table to filter for the specific keyphrase 'syntactic parsing'.\n3. Condition Structure: Use the `WHERE` clause to filter for papers that are associated with the keyphrase 'syntactic parsing'.\n4. Aggregation Structure: Use `GROUP BY` to group the results by `authorId` and `authorName` to count the number of papers published by each author related to the keyphrase. Use `ORDER BY` to sort the results by the count of papers in descending order and `LIMIT` to return the author with the most publications.","480":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the `paperKeyphrase` table, which links papers to their keyphrases. Additionally, join the `keyphrase` table to retrieve the actual keyphrase names.\n2. Join Structure: Use JOINs to connect the `paperKeyphrase` table with the `paper` table (to get the paperId) and the `writes` table (to filter by author). We will also join the `author` table to filter for the specific author, Luke Zettlemoyer. Finally, join the `keyphrase` table to retrieve the keyphrase names.\n3. Condition Structure: Use a WHERE clause to filter for the author with the name 'Luke Zettlemoyer'. Additionally, use `DISTINCT` to avoid duplicate keyphrases.\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","481":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers authored by Sanjeev Arora. 2. Condition Structure: Use a WHERE clause to filter for the specific author name \"sanjeev arora.\" 3. Join Structure: Use JOINs to connect the \"writes\" table with the \"author\" table to filter by author, and then join with the \"paper\" table to get the relevant paper details. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by year to get the most recent papers first.","482":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the year. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers based on the year 2015 and the author's name 'Liwen Xiong'. 3. Join Structure: Use JOIN clauses to connect the paper table with the writes table to link papers to their authors, and then join with the author table to filter by the author's name. 4. Aggregation Structure: Not needed, as we are simply retrieving specific records without any aggregation.","483":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use the WHERE clause to filter for the author named 'oren etzioni' to ensure we only get papers written by this author. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their respective authors. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the latest paper, and limit the results to 1 to retrieve only the most recent paper.","484":"1. Sequential Structure: Start with the SELECT clause to retrieve the city names. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: We need to filter for the largest state based on area, so we will use a WHERE clause to identify the state with the maximum area. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to connect cities with their respective states. 4. Aggregation Structure: Use the MAX function in a subquery to find the largest state by area, which will be used in the WHERE clause to filter cities belonging to that state.","485":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link papers with their authors. 3. Condition Structure: Apply a WHERE clause to filter for papers written by the author named 'Sharon Goldwater'. 4. Aggregation Structure: Not needed, as we are simply retrieving titles without any aggregation.","486":"1. Sequential Structure: Start with the SELECT clause to retrieve the citation count for papers authored by Noah A. Smith. Use the FROM clause to specify the necessary tables, particularly the author, writes, and cite tables. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'Noah A. Smith' and to ensure we are counting citations for papers written by this author. 3. Join Structure: Use JOINs to connect the author table with the writes table on authorId, and then join the writes table with the paper table on paperId to access the citingPaperId in the cite table. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the papers authored by Noah A. Smith.","487":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields related to Massachusetts, specifically \"state.state_name,\" \"state.population,\" \"state.area,\" \"state.country_name,\" and \"state.capital.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific state, \"Massachusetts.\" 3. Join Structure: No JOIN is necessary since all the required information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of Massachusetts.","488":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs. Use the FROM clause to specify the writes table, which connects papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for records where the authors are 'Peter Mertens' and 'Dina Barbian'. This will involve checking for both authors in the same paper. 3. Join Structure: Use JOINs to connect the writes table with the author table to get the author names. We will need to join the writes table twice to check for both authors. 4. Aggregation Structure: Not needed, as we are simply checking for the existence of a paper written by both authors without any aggregation.","489":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names that border the most populous state. Use the FROM clause to specify the state table and JOIN it with the border_info table to get the bordering states. 2. Condition Structure: Use a WHERE clause to filter for the state with the highest population, which will be determined using a subquery. 3. Join Structure: Use an INNER JOIN between the state and border_info tables based on the state_name to connect the states with their borders. 4. Aggregation Structure: Use the MAX function in a subquery to find the maximum population from the state table, which will help identify the most populous state.","490":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link papers with their authors. Additionally, join the author table to filter by the specific author. 3. Condition Structure: Apply a WHERE clause to filter for papers written by the author 'Sharon Goldwater'. 4. Aggregation Structure: Not required, as we are simply retrieving the titles of the papers without any aggregation.","491":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information for each state. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the state with the highest point overall. 3. Join Structure: Not required, as we can retrieve the state name directly from the highlow table. 4. Aggregation Structure: Use the MAX function to find the highest point across all states and filter the results to get the corresponding state name.","492":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names and paper titles. Use the FROM clause to specify the `paper` table and JOIN it with the `writes` table to link papers to their authors. Additionally, join with the `venue` table to filter by the specific venue name and year. Importantly, also join with the `keyphrase` and `paperKeyphrase` tables to filter papers by the keyphrase \"Parsing.\"\n2. Condition Structure: Use the WHERE clause to filter for papers associated with the keyphrase \"Parsing,\" published in the year 2012, and at the venue \"acl.\" This requires filtering by the keyphrase name, the venue name, and the year.\n3. Join Structure: Use INNER JOINs between the `paper`, `writes`, `venue`, `keyphrase`, and `paperKeyphrase` tables based on the relevant foreign keys to connect authors with their papers, the venue details, and the keyphrase.\n4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","493":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain_name\", \"country_name\", and \"state_name\" for Mount Whitney. 2. Condition Structure: Use a WHERE clause to filter for the specific mountain name \"Mount Whitney\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the location details of Mount Whitney.","494":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and JOIN it with the keyphrase table to filter papers based on the keyphrase. Additionally, join with the venue table to filter by the venue name. 2. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase 'TAIL' and are published in the venue 'NIPS'. 3. Join Structure: Use INNER JOINs between the paper, keyphrase, and venue tables based on their respective foreign keys to connect papers with their keyphrases and venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","495":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"highest_elevation\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the highest elevation. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highest_elevation\" to rank states by their elevation and apply LIMIT 1 to select the state with the highest elevation.","496":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" for the titles of the papers. 2. Condition Structure: Apply a WHERE clause to filter for papers that were presented at the venue \"NIPS.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","497":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" where Mount Whitney is located. 2. Condition Structure: Use a WHERE clause to filter for the specific mountain name, which is \"Mount Whitney.\" 3. Join Structure: Use a JOIN between the \"mountain\" and \"state\" tables based on \"mountain.state_name\" and \"state.state_name\" to link the mountain to its corresponding state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the state name associated with Mount Whitney.","498":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct keyphrases used in papers. Use the FROM clause to specify the `keyphrase` table. We will need to join this with the `paperKeyphrase` table to link keyphrases to their respective papers, and then join with the `writes`, `paper`, and `author` tables to filter by author and year. The `DISTINCT` keyword is necessary to avoid duplicate keyphrases if the same keyphrase is used in multiple papers by the same author.\n2. Condition Structure: Use a WHERE clause to filter for papers written in the last year. Since the SQL environment may not support the `YEAR()` function, we will directly compare the `year` column with the specific year (e.g., 2022). Additionally, filter for the specific author, Christof Dallermassl, by joining with the `author` table and using the `authorName` column.\n3. Join Structure: Use INNER JOINs to connect the `keyphrase`, `paperKeyphrase`, `writes`, `paper`, and `author` tables based on their respective foreign keys to ensure we are linking the correct records. The join with the `author` table is crucial to filter by the author's name.\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","499":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers published by the author. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the specific author by name, 'ras bodik'. 3. Join Structure: Use an INNER JOIN between the writes table and the author table based on authorId to link the author with their published papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified author.","500":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of publications. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the specific author, Christopher D. Manning, by matching the authorName in the author table. 3. Join Structure: Use an INNER JOIN between the writes and author tables based on authorId to connect the author with their publications. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers written by the specified author.","501":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital names from the state table. Use the FROM clause to specify the state table and JOIN it with the city table to link capitals with their respective cities. 2. Condition Structure: Use a WHERE clause to filter capitals that are not classified as major cities. This can be determined by checking if the population of the city is below a certain threshold that defines a major city. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state name to connect capitals with their corresponding city records. 4. Aggregation Structure: Not required, as we are filtering based on a condition without needing to aggregate data.","502":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where the author published their papers. Use `DISTINCT` to avoid duplicate venue names, as the author may have published multiple papers in the same venue.\n2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2016 and by the author \"li dong.\" Ensure that the `author` table is included in the query to access the `authorName` column.\n3. Join Structure: Use JOIN clauses to connect the `writes` table with the `paper` table on `paperId`, the `paper` table with the `venue` table on `venueId`, and the `writes` table with the `author` table on `authorId` to filter by the author's name.\n4. Aggregation Structure: No aggregation is needed, but the use of `DISTINCT` ensures that duplicate venue names are removed from the result set.","503":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrases used by the author \"Luke Zettlemoyer.\" This will involve selecting the \"keyphrase.keyphraseName.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author by name, ensuring we only get keyphrases associated with \"Luke Zettlemoyer.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"paperKeyphrase\" table to link papers to their keyphrases. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique keyphrases are returned.","504":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table and join it with the paperKeyphrase table to link papers with their keyphrases. Additionally, join the venue table to filter papers based on the venue name 'NIPS'. 2. Condition Structure: Use the WHERE clause to filter for papers that are published in the 'NIPS' venue and have the keyphrase 'TAIL'. 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, and venue tables based on their respective foreign key relationships to connect papers with their keyphrases and venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","505":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"paper.title,\" \"paper.year,\" \"paper.numCiting,\" and \"paper.numCitedBy.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to the keyphrase \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its corresponding keyphrases. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant papers without summarizing the data.","506":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers that do not run through the USA by checking that the traverse field does not equal 'USA'. 3. Join Structure: Not required, as all necessary data is available within the river table. 4. Aggregation Structure: Not needed, as we are simply retrieving records based on the specified condition without any aggregation.","507":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers published in the specified journal. 2. Condition Structure: Use a WHERE clause to filter for papers that are published in the journal named \"NIPS.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"journal\" tables based on \"journalId\" to link each paper with its respective journal. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers.","508":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the author table with the writes table on authorId to find the papers written by the specified authors. 3. Condition Structure: Apply a WHERE clause to filter for the authors' names, specifically looking for both \"Peter Mertens\" and \"Dina Barbian\". 4. Aggregation Structure: Use GROUP BY to group the results by paperId to ensure we only get distinct papers that both authors contributed to.","509":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers cited by Mirella Lapata. Use the FROM clause to specify the cite table, as we are interested in citation records. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Mirella Lapata' by joining the writes table to find the corresponding paper IDs that she has written. 3. Join Structure: Use an INNER JOIN between the cite table and the writes table to connect the citing papers with the authors who wrote them, specifically filtering for Mirella Lapata. 4. Aggregation Structure: Use COUNT to aggregate the number of papers cited by the specific author.","510":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest population. This will involve a subquery to find the minimum population from the state table. 3. Join Structure: Not required, as we are only using the highlow and state tables based on the state_name. 4. Aggregation Structure: Use a subquery to find the state with the smallest population, which will be used in the WHERE clause to filter the results from the highlow table.","511":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"paper.title,\" \"paper.year,\" \"paper.numCiting,\" and \"paper.numCitedBy.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to the keyphrase \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to filter by the specific keyphrase name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant papers based on the specified keyphrase.","512":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant paper details. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use the WHERE clause to filter for papers authored by 'Liwen Xiong' in the year 2015. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","513":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Then, join with the keyphrase table to access the keyphrase names. 3. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase 'Question Answering'. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified condition without any aggregation.","514":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers authored by Christopher D. Manning. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the specific author by name, ensuring we only count papers authored by Christopher D. Manning. 3. Join Structure: Not required, as we can directly filter the writes table based on the author name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the specified author.","515":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the highest point. Use the FROM clause to specify the highlow table, which contains the highest peak information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the state with the highest peak across all states. 3. Join Structure: Not required, as we can retrieve the state name directly from the highlow table. 4. Aggregation Structure: Use the MAX function to find the highest point among all states, and then filter to get the corresponding state name.","516":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. We will also need to join the keyphrase table to filter for specific keyphrases related to the papers. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2012 and that are associated with the keyphrase \"Parsing\". 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. Additionally, join the keyphrase table to filter for the specific keyphrase. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","517":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers with their authors. Additionally, join the author table to filter by specific authors. 3. Condition Structure: Use a WHERE clause to filter for papers written by both Peter Mertens and Dina Barbian. This can be achieved by ensuring that the paper ID appears in the writes table for both authors. 4. Aggregation Structure: Use GROUP BY to group the results by paper ID and apply a HAVING clause to ensure that only papers written by both authors are included (i.e., having a count of 2 for the authors).","518":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Ed Desmond' and to ensure that the papers are related to the keyphrase 'Semantic Parsing'. 3. Join Structure: Use JOINs to connect the writes table with the paper table to get the paper IDs and then join with the paperKeyphrase table to filter by the keyphrase. Finally, join with the keyphrase table to match the keyphrase name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified author on the specified topic.","519":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name where the capital is 'Salem'. Use the FROM clause to specify the state table. 2. Condition Structure: Use the WHERE clause to filter for the capital city named 'Salem'. 3. Join Structure: Not required, as all necessary information is contained within the state table. 4. Aggregation Structure: Not needed, as we are retrieving a specific record based on the condition without any aggregation.","520":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and its population. Use the FROM clause to specify the state table. We will also need to join the highlow and border_info tables to get the necessary information about the state with the lowest point and its bordering states. 2. Condition Structure: We need to filter for the state with the lowest point using the WHERE clause. This will involve a subquery to find the state with the minimum lowest point. 3. Join Structure: Use JOIN clauses to connect the highlow table with the state table based on state_name, and then join the border_info table to find states that border the identified state. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to get the largest state that borders the state with the lowest point.","521":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. Additionally, join with the author table to filter by the author's name. 2. Condition Structure: Use the WHERE clause to filter for the author named 'brian curless' and to ensure that the keyphrase related to the paper includes 'convolution'. 3. Join Structure: Use INNER JOINs between the paper, writes, and author tables based on the authorId to connect papers with their respective authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","522":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. We will also need to join the paper table to filter for papers related to \"syntactic parsing\". 2. Condition Structure: Use the WHERE clause to filter for papers that have \"syntactic parsing\" in their title. This will help us identify the relevant papers authored by the authors we are interested in. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the authorId and paperId to connect authors with their respective papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers authored by each author that match the condition, and then use GROUP BY to group the results by author. Finally, apply ORDER BY to sort the results in descending order based on the count of papers, and limit the results to get the top author.","523":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs and names. Use the FROM clause to specify the `paper` table and JOIN it with the `writes` table to link papers with their authors. Additionally, join the `venue` table to filter papers based on the venue name and year. Finally, include the `author` table in the JOIN to retrieve the author details.\n2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2016 and in the venue named 'acl'.\n3. Join Structure: Use INNER JOINs between the `paper`, `writes`, `venue`, and `author` tables based on their foreign key relationships to connect papers with their authors and the corresponding venue.\n4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","524":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Daniella Coelho publishes. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Daniella Coelho.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"authorId\" and then connect \"writes\" with the \"paper\" table on \"paperId\" to access the \"venueId.\" Finally, join the \"venue\" table to get the venue names. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique conference names are returned.","525":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table and join it with the paperKeyphrase and writes tables to link papers with their keyphrases and authors. 2. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase 'keyphrase0' and are written by the author 'brian curless'. 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, and writes tables based on their respective keys to connect papers with their keyphrases and authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","526":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. Additionally, join the paperKeyphrase table to filter papers based on keyphrases. 2. Condition Structure: Use a WHERE clause to filter for the author named 'brian curless' and the keyphrase 'convolution'. 3. Join Structure: Use INNER JOINs between the paper, writes, and paperKeyphrase tables based on their respective IDs to connect papers with their authors and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","527":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use the WHERE clause to filter for papers written by either 'Peter Mertens' or 'Dina Barbian'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","528":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the lake name and area. 2. Condition Structure: Use a WHERE clause to filter for lakes that are located in the \"US\" (country_name = 'US'). 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"lake\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and areas of the lakes.","529":"1. Sequential Structure: Start with the SELECT clause to count the number of papers written by Ed Desmond. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Ed Desmond' and to ensure that the papers are related to the keyphrase 'Semantic Parsing'. 3. Join Structure: Use JOINs to connect the writes table with the paper table to access the titles of the papers and the keyphrase table to filter by the specific keyphrase. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","530":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Apply a WHERE clause to filter for keyphrases that match 'chi', ensuring we only get papers associated with this keyphrase. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their corresponding keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","531":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the average urban population. Use the FROM clause to specify the state table. 2. Aggregation Structure: Use the AVG function to calculate the average population for each state. Apply GROUP BY to group the results by state name. 3. Condition Structure: Use the ORDER BY clause to sort the results by average population in ascending order, allowing us to identify the state with the smallest average urban population. 4. Limit Structure: Use LIMIT to restrict the results to only the first entry, which will be the state with the smallest average urban population.","532":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the `title` of the papers and their corresponding `numCiting` (citation count). Use the `FROM` clause to specify the `paper` table, as it contains the citation information.\n2. Join Structure: Use a `JOIN` between the `paper`, `writes`, and `author` tables to link papers to their authors. The `writes` table connects `paperId` to `authorId`, and the `author` table allows us to filter by the specific author, Zachary Tatlock.\n3. Condition Structure: Use a `WHERE` clause to filter for the author with the name 'Zachary Tatlock'. To avoid case sensitivity issues, use the `LOWER()` function to ensure the author's name is matched correctly.\n4. Aggregation Structure: No aggregation is needed, as we are interested in listing each paper and its individual citation count, rather than a total sum.","533":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the specific author, Christopher D. Manning, by matching the authorId from the writes table with the corresponding authorId from the author table. 3. Join Structure: Use an INNER JOIN between the writes and author tables based on authorId to connect the papers written by the specified author. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the author.","534":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the river table, as we need to identify the longest river first. 2. Condition Structure: No specific condition is needed in the WHERE clause for the river, as we will be filtering based on the maximum length of the river. 3. Join Structure: Use a JOIN between the river and state tables based on the traverse field to connect the river with the states that border it. 4. Aggregation Structure: Use the MAX function to find the length of the longest river, and then filter the states that border this river.","535":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'David M. Blei' and the venue named 'AISTATS'. 3. Join Structure: Use JOINs to connect the writes table with the paper table on paperId, and then join the paper table with the venue table on venueId to access the venue name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers written by the specified author in the specified venue.","536":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.river_name\" and \"river.length\" for the shortest river. 2. Condition Structure: Apply a WHERE clause to filter for rivers that traverse the state of Texas. 3. Join Structure: No JOIN is necessary since we can filter directly from the \"river\" table using the \"traverse\" column. 4. Aggregation Structure: Use ORDER BY to sort the rivers by length in ascending order and LIMIT 1 to get the shortest river.","537":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table. We will also need to join the writes and paperKeyphrase tables to connect authors to their respective keyphrases. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'Luke Zettlemoyer' to ensure we only get the keyphrases associated with this specific author. 3. Join Structure: Use JOINs between the author, writes, and paperKeyphrase tables based on the authorId and paperId to relate authors to their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","538":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'David M. Blei' and the venue named 'AISTATS'. 3. Join Structure: Use JOINs to connect the writes table with the paper table to access the venueId, and then join with the venue table to filter by the venue name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified author at the specified venue.","539":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrases associated with the papers authored by Sanjeev Arora. Use the FROM clause to specify the author table and join it with the writes table to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'Sanjeev Arora' to ensure we are only looking at his papers. 3. Join Structure: Use JOINs between the author, writes, paper, and paperKeyphrase tables to connect authors to their papers and then to the keyphrases associated with those papers. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","540":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table and JOIN it with the city table to access the population data. 2. Condition Structure: No specific condition is needed in the WHERE clause, as we want to find the state capital with the smallest population. 3. Join Structure: Use an INNER JOIN between the state and city tables based on the state name to connect state capitals with their corresponding populations. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in ascending order and limit the result to the top entry to find the smallest population.","541":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table and join it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase 'Question Answering'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","542":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"authorName\" that matches the specified name. 2. Condition Structure: Use a WHERE clause to filter for the author name that exactly matches \"subhasis chaudhuri\". 3. Join Structure: No JOIN is necessary since all relevant information is in the \"author\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the author's name based on a specific condition.","543":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of states. Use the FROM clause to specify the border_info table, as it contains the information about states and their borders. 2. Join Structure: Use a JOIN clause to connect the border_info table with the river table based on the condition that the river traverses the state. This will allow us to filter states that border those through which the Mississippi River traverses. 3. Condition Structure: Use a WHERE clause to filter for the specific river name, which is 'Mississippi', ensuring we only get states that border states through which this river flows. 4. Aggregation Structure: Not needed, as we are simply retrieving state names based on the specified conditions without any aggregation.","544":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers authored by Liwen Xiong. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, JOIN the paper table to get the year of publication. 2. Condition Structure: Use the WHERE clause to filter for the author with the name 'Liwen Xiong' and to ensure that the papers were published in the past year. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on authorId and paperId to connect the relevant data. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","545":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use the WHERE clause to filter for the author named 'oren etzioni' to ensure we only get papers written by this specific author. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their respective authors. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the latest papers first.","546":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs and titles. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Additionally, join with the keyphrase table to access the keyphrase names. 3. Condition Structure: Use the WHERE clause to filter for keyphrases that match \"Question Answering\". 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","547":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the keyphrases associated with each paper. 2. Condition Structure: Use a WHERE clause to filter for papers that are related to the keyphrase 'syntactic parsing'. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective IDs to connect authors to their published papers and the keyphrases associated with those papers. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and COUNT to determine the number of papers each author has published related to 'syntactic parsing'. Finally, use ORDER BY to sort the results in descending order and limit the output to the top result to find the most published author.","548":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of major cities. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the state table to filter cities based on the states through which the major river in Virginia runs. Additionally, join the river table to identify the major river in Virginia. 3. Condition Structure: Use a WHERE clause to filter for the specific river in Virginia and ensure that we are only considering states that the river traverses. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","549":"1. Sequential Structure: Start with the SELECT clause to specify the count of papers related to \"ImageNet\". 2. Condition Structure: Use a WHERE clause to filter papers where the title contains \"ImageNet\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of papers that meet the specified condition.","550":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the shortest river. 2. Condition Structure: No specific filtering condition is needed since we want to find the shortest river among all available. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the shortest river.","551":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and JOIN it with the venue table to link papers with their respective venues. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2012 and specifically in the venue named 'ACL'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect the papers with their venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","552":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"highest_point\" of each state. 2. Condition Structure: No specific filtering condition is needed since we want the highest points for all states. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the highest points for each state.","553":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name that borders another state. Use the FROM clause to specify the border_info table, which contains the relationships between states. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest population by comparing the population of states. 3. Join Structure: Use a JOIN between the border_info table and the state table to connect the bordering states with their population data. 4. Aggregation Structure: Use the MIN function to find the smallest population among the states, which will be used in the filtering condition.","554":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"paper.title\" and \"paper.year\" for the publications related to \"Question Answering.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that have \"Question Answering\" in their title. This will help us focus on the relevant publications. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table to get the authors, and potentially with the \"venue\" and \"journal\" tables if we want to include more details about where the papers were published. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are distinct if necessary.","555":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for keyphrases that match 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that match the specified keyphrase.","556":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers with their authors, and then join with the author table to get the author names. 3. Condition Structure: Apply a WHERE clause to filter for papers written by either 'Peter Mertens' or 'Dina Barbian'. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified authors without any aggregation.","557":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the writes table to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Ed Desmond' and to ensure that the papers are related to the keyphrase 'Semantic Parsing'. 3. Join Structure: Use JOINs to connect the writes table with the paper table on paperId, and then join the paperKeyphrase table to link papers with their keyphrases. Finally, join the keyphrase table to filter by the specific keyphrase name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","558":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the authors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the specific authors, \"Peter Mertens\" and \"Dina Barbian\", ensuring we only get records for these two authors. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to connect authors with their respective papers. 4. Aggregation Structure: Not required, as we are simply retrieving the names of the authors without any aggregation.","559":"1. Sequential Structure: Start with the SELECT clause to count the number of papers written by the author. We will use the COUNT function on \"writes.paperId.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Christopher D. Manning.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table based on \"authorId\" to link the papers with the corresponding authors. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified author.","560":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrases used by the author, which is \"keyphrase.keyphraseName.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Luke Zettlemoyer.\" This will involve a subquery to find the author's ID based on their name. 3. Join Structure: Use JOIN clauses to connect the \"writes\" table with the \"author\" table to get the author's ID, and then join the \"paperKeyphrase\" table to link papers with their keyphrases. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique keyphrases are returned.","561":"1. Sequential Structure: Start with the SELECT clause to count the number of states. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for the state whose capital is 'Boston'. 3. Join Structure: Use a JOIN between the border_info table and the state table to find states that border the identified state. 4. Aggregation Structure: Use COUNT to aggregate the number of states that border the state with Boston as its capital.","562":"1. Sequential Structure: Start with the SELECT clause to retrieve the year of publication for the paper. Use the FROM clause to specify the paper table and JOIN it with the writes table to link authors to their papers. Additionally, join with the author table to filter for the specific author, Michael Stonebraker. Finally, join with the venue table to ensure we are looking at papers published in the VLDB venue. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Michael Stonebraker' and the venue name 'VLDB'. We also need to ensure we are looking for the first paper, which will require ordering by year. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and venue tables based on their respective foreign keys to connect authors to their papers and the papers to their venues. 4. Aggregation Structure: Use ORDER BY to sort the results by year in ascending order and limit the results to the first entry to find the first VLDB paper published by Michael Stonebraker.","563":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state. Use the FROM clause to specify the state table. 2. Join Structure: Use a JOIN clause to connect the state table with the border_info table based on the state_name to find states that border Texas. 3. Condition Structure: Apply a WHERE clause to filter for states that border Texas. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by population in descending order and limit the results to get the largest state.","564":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" since we want to know the titles of the papers and their publication year. 2. Condition Structure: Apply a WHERE clause to filter for papers that were published in the year 2012 and appeared at the venue 'acl'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","565":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper\" titles associated with the author \"Subhasis Chaudhuri.\" 2. Condition Structure: Use a WHERE clause to filter for the specific author name \"Subhasis Chaudhuri.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"paperId\" to link each paper with its corresponding author. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique paper titles are returned.","566":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title,\" \"paper.year,\" and \"author.authorName.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"author.authorName\" matches 'mohammad rastegari.' 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"writes\" table on \"paperId\" and the \"author\" table on \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and years of the papers authored by 'mohammad rastegari.'","567":"1. Sequential Structure: Start with the SELECT clause to retrieve both the \"state_name\" and \"area\" of the smallest state. This ensures that we not only get the smallest area but also the corresponding state.\n2. Condition Structure: Use a subquery in the WHERE clause to filter for the state that has the minimum area. This ensures that we return the state with the smallest area.\n3. Join Structure: No JOIN is required, as all necessary information is available in the \"state\" table.\n4. Aggregation Structure: Use the MIN function in a subquery to find the smallest area, and then filter the main query to return the state with that area.","568":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers, along with the year and venue name. Use the FROM clause to specify the paper table and join it with the venue table to get the venue name. 2. Condition Structure: Use the WHERE clause to filter papers that are about 'Parsing', published in the year 2012, and presented in the 'acl' venue. 3. Join Structure: Use JOINs between the paper and venue tables based on the venueId to connect paper details with their respective venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","569":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information. Then, we will need to join it with the state table to find the state with the largest area. 2. Condition Structure: We will need to filter the results to find the state with the largest area. This can be done using a subquery to get the maximum area from the state table. 3. Join Structure: Use an INNER JOIN between the highlow and state tables based on the state_name to connect the highest point information with the corresponding state. 4. Aggregation Structure: Use the MAX function in a subquery to find the largest area from the state table, which will be used to filter the results in the main query.","570":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Condition Structure: We need to find the smallest state first, so we will use a subquery to get the state with the minimum area. This will be used in the WHERE clause to filter rivers that traverse this state. 3. Join Structure: We will join the river table with the state table based on the state name to ensure we are only considering rivers in the smallest state. 4. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in descending order and limit the result to get the longest river.","571":"1. Sequential Structure: Start with the SELECT clause to count the number of papers related to the keyphrase \"Parsing\" published in the year 2012. \n2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the keyphrase \"Parsing,\" were published in the year 2012, and are from the venue \"acl.\"\n3. Join Structure: Use a JOIN between the `paper`, `venue`, `paperKeyphrase`, and `keyphrase` tables. The `paperKeyphrase` table links papers to keyphrases, and the `keyphrase` table allows us to filter by the keyphrase \"Parsing.\" The `venue` table is joined to ensure we are considering papers from the correct venue.\n4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","572":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and join it with the venue table to filter for the specific venue. Additionally, join with the paperKeyphrase table to filter for papers that have the keyphrase \"Parsing\". 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2012 and specifically in the venue \"acl 2012\". 3. Join Structure: Use INNER JOINs between the paper, venue, and paperKeyphrase tables based on their respective keys to connect papers with their venues and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","573":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name where the author \"Li Dong\" published. Use the FROM clause to specify the relevant tables, which include the author, writes, paper, and venue tables. 2. Condition Structure: Use a WHERE clause to filter for the author with the name \"Li Dong\" and the year 2016 to ensure we only get the relevant publications. 3. Join Structure: Use JOIN clauses to connect the author table with the writes table on authorId, then join the writes table with the paper table on paperId, and finally join the paper table with the venue table on venueId to get the venue names. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","574":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table and join it with the paperKeyphrase table to link keyphrases to their respective papers. Additionally, join the writes table to connect authors to their papers, and the paper table to filter by year. 2. Condition Structure: Use the WHERE clause to filter for papers authored by 'Christof Dallermassl' in the year 2000. 3. Join Structure: Use INNER JOINs between the keyphrase, paperKeyphrase, writes, and paper tables based on their respective keys to connect authors, papers, and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","575":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names where the capital is the highest point. Use the FROM clause to specify the state table and JOIN it with the highlow table to access the highest point information. 2. Condition Structure: Use the WHERE clause to filter records where the capital of the state matches the highest point of that state. 3. Join Structure: Use an INNER JOIN between the state and highlow tables based on the state_name to relate the state capitals with their highest points. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","576":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the area of the states. 2. Condition Structure: No specific filtering condition is required since we want the area of all states. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"state\" table. 4. Aggregation Structure: No aggregation function is needed since we are simply retrieving the area values for each state.","577":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were published in the year 2012 and are related to the keyphrase 'Parsing'. 3. Join Structure: Use JOIN clauses to connect the paper table with the paperKeyphrase table based on the paperId, and then join with the keyphrase table to filter by the specific keyphrase. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified conditions without any aggregation.","578":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the border_info table to find states that border California. This requires an INNER JOIN on the state_name field. 3. Condition Structure: Use a WHERE clause to filter for states that are listed as bordering California in the border_info table. 4. Aggregation Structure: Use GROUP BY to group the results by city name and state name, and then use the MAX function to find the largest city by population within those states.","579":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"author.authorName\" of the prominent scholars. We will also include the \"paper.title\" to provide context on their work related to syntactic parsing. 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to \"syntactic parsing.\" This will help us focus on the relevant area of research. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId\" and \"paperId,\" and then join the \"paper\" table to access the titles of the papers written by the authors. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only list distinct authors who have written papers on the specified topic.","580":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper details. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers with their authors. Additionally, join the author table to filter for specific authors. 3. Condition Structure: Use a WHERE clause to filter for papers that have both 'Peter Mertens' and 'Dina Barbian' as co-authors. This can be achieved by checking the presence of both authors in the writes table for the same paper. 4. Aggregation Structure: Use GROUP BY to group the results by paper ID and apply a HAVING clause to ensure that both authors are present for each paper.","581":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers authored by David M. Blei. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for records where the author's name is 'David M. Blei' and the venue name is 'AISTATS'. 3. Join Structure: Use JOINs to connect the writes table with the paper table to access the paper details and then join with the venue table to filter by the venue name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers authored by David M. Blei in the specified venue.","582":"1. Sequential Structure: Start with the SELECT clause to retrieve the year of collaboration. Use the FROM clause to specify the writes table, which connects authors to papers. 2. Condition Structure: Use a WHERE clause to filter for the specific authors, Peter Mertens and Dina Barbian, ensuring we only get records where both authors collaborated on the same paper. 3. Join Structure: Use JOINs to connect the writes table with the author table to get the names of the authors and the paper table to get the year of publication. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","583":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.capital\" of the largest state. 2. Condition Structure: No specific filtering condition is needed at this stage, as we are looking for the largest state based on population. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the capital of the largest state.","584":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.paperId\" for the papers written by the authors. 2. Condition Structure: Use a WHERE clause to filter for the authors' names, specifically \"Peter Mertens\" and \"Dina Barbian.\" 3. Join Structure: Use JOIN between the \"writes\" table and the \"author\" table to link the authors to their respective papers, and then join with the \"paper\" table to get the paper details. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to select papers written by both authors.","585":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically \"paper.year\" and \"venue.venueName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers from the year 2012 and specifically from the venue \"acl.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant records without needing to summarize data.","586":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the year. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015. Additionally, we need to filter for papers written by the author \"Liwen Xiong\". 3. Join Structure: Use JOIN between the paper and writes tables based on paperId to link papers with their authors. Then, join with the author table to filter by the author's name. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","587":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and JOIN it with the venue and paperKeyphrase tables to filter based on the venue and keyphrase. 2. Condition Structure: Use a WHERE clause to filter for papers that are associated with the venue 'NIPS' and the keyphrase 'TAIL'. 3. Join Structure: Use INNER JOINs between the paper, venue, and paperKeyphrase tables based on their respective foreign keys to connect papers with their venues and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","588":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the `paper` table and JOIN it with the `writes` and `author` tables to link papers with their authors. Additionally, use the DISTINCT keyword to avoid duplicate results, as an author may have multiple entries for the same paper in the `writes` table.\n2. Condition Structure: Apply a WHERE clause to filter for papers published by the author \"Liwen Xiong\" and for papers published in the last year. Instead of using unsupported functions like `YEAR(CURRENT_DATE) - 1`, directly compare the `year` column with the previous year (e.g., `2022` if the current year is `2023`).\n3. Join Structure: Use INNER JOINs between the `writes`, `author`, and `paper` tables based on `authorId` and `paperId` to identify the papers written by the specified author and retrieve the paper details.\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","589":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that are related to Monte Carlo simulations and published since 2011. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is greater than or equal to 2011 and the title contains \"Monte Carlo simulation\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers that meet the specified conditions.","590":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the city table, as we need to check for cities named 'Springfield'. 2. Condition Structure: Use the WHERE clause to filter for cities with the name 'Springfield'. Additionally, we will need to ensure that we are counting distinct states to avoid duplicates. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to relate cities to their respective states. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the number of unique states that have a city named 'Springfield'.","591":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers published by the author. Use the FROM clause to specify the writes table, which links authors to their published papers. 2. Condition Structure: Use a WHERE clause to filter for the specific author, Christopher D. Manning, by matching the authorName in the author table. 3. Join Structure: Use an INNER JOIN between the writes and author tables based on authorId to connect the author with their published papers. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the specified author.","592":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"author.authorName\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2016 and specifically in the venue \"ACL.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId.\" Additionally, join the \"paper\" table with the \"venue\" table to filter by venue name. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","593":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers related to the specified topic. 2. Condition Structure: Apply a WHERE clause to filter for papers that have keyphrases related to \"Question Answering.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"paperKeyphrase\" table on \"paperId\" and then with the \"keyphrase\" table on \"keyphraseId\" to link each paper with its respective keyphrases. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that match the condition.","594":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the shortest river length using the `MIN` function. The `FROM` clause will specify the `river` table as the source of the data.\n2. Condition Structure: Apply a `WHERE` clause to filter the rivers by `country_name = 'USA'`, ensuring that only rivers in the USA are considered.\n3. Join Structure: No JOIN is necessary, as all the required information is contained within the `river` table.\n4. Aggregation Structure: Use the `MIN` function to find the shortest river length in the USA.","595":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. We will use the COUNT function on the \"paper.paperId\" field. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2014 and in the venue \"ACL.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","596":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names from the border_info table. Use the FROM clause to specify the border_info table. 2. Condition Structure: Apply a WHERE clause to filter states that border states where the Mississippi River runs through. This requires checking if the border state is in the list of states that the Mississippi River traverses. 3. Join Structure: Use a JOIN clause to connect the border_info table with the river table based on the state names to identify the relevant states. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","597":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"author.authorName\" and \"venue.venueName\" to list the authors and the venue they published in. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2016 and in the venue 'ACL'. 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"paperId\" and then join the \"paper\" table with the \"venue\" table on \"venueId\" to link authors to their respective papers and venues. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to select distinct authors to avoid duplicates.","598":"1. Sequential Structure: Start with the SELECT clause to specify the count of major cities in Texas. 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.state_name\" is 'Texas'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cities that meet the specified condition.","599":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for citations related to papers authored by \"Noah Smith\". This requires a subquery to find the authorId associated with \"Noah Smith\". 3. Join Structure: Use JOINs to connect the writes table to the paper table to find the papers written by \"Noah Smith\" and then link to the cite table to count the citations for those papers. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the papers authored by \"Noah Smith\".","600":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" of the states that have a river. 2. Condition Structure: No specific filtering condition is needed beyond the join, as we are interested in all states that have at least one river. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the relationship where \"river.traverse\" matches \"state.state_name\" to find states that have rivers. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure that each state is listed only once.","601":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that are related to the keyphrase 'deep learning'.","602":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers to their authors. Additionally, join the author table to filter by specific author names. 3. Condition Structure: Use a WHERE clause to filter for papers written by both \"Peter Mertens\" and \"Dina Barbian\". This can be achieved by checking for the presence of both authors in the writes table for the same paper. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","603":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2016 and authored by 'li dong'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link the papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","604":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Then, join with the keyphrase table to access the keyphrase names. 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'Question Answering'. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified condition without any aggregation.","605":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table. We will need to join several tables to connect authors to their papers and then to the keyphrases associated with those papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Christof Dallermassl' and the year 2000. 3. Join Structure: Use JOINs to connect the author table with the writes table (to get the papers written by the author), then join the paper table (to filter by year), and finally join the paperKeyphrase and keyphrase tables to get the keyphrases associated with those papers. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","606":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases. Additionally, join with the \"keyphrase\" table to access the keyphrase names. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the papers that match the condition.","607":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the necessary tables, which include the author, writes, and cite tables. 2. Condition Structure: Use a WHERE clause to filter for the author named 'noah a smith' by joining the author table with the writes table to get the corresponding paper IDs. 3. Join Structure: Use JOINs to connect the author table with the writes table on authorId, and then join the cite table on the paperId to count the citations for the papers written by 'noah a smith'. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the papers associated with the specified author.","608":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the `paper` table, which contains the paper titles. Then, join the `writes` table to link the papers to the author. Additionally, join the `paperKeyphrase` and `keyphrase` tables to filter papers by the keyphrase \"convolution.\"\n2. Condition Structure: Use a WHERE clause to filter for the author named 'brian curless' by joining the `author` table. Also, filter for the keyphrase \"convolution\" by joining the `keyphrase` table and checking for the keyphrase name.\n3. Join Structure: Use INNER JOINs between the `writes`, `author`, `paper`, `paperKeyphrase`, and `keyphrase` tables. The `writes` table is joined with the `author` table on `authorId` to filter by the author's name. The `paperKeyphrase` table is joined with the `paper` table on `paperId` to link papers to keyphrases, and the `keyphrase` table is joined on `keyphraseId` to filter by the keyphrase \"convolution.\"\n4. Aggregation Structure: No aggregation is needed, but the use of `DISTINCT` ensures that duplicate paper titles are not returned.","609":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the papers that match the condition.","610":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author named 'oren etzioni' and to find the latest paper by ordering the results by year in descending order. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Use ORDER BY to sort the results by year and limit the output to the most recent paper.","611":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: We need to filter rivers based on the state with the largest population, so we will use a subquery to find that state. 3. Join Structure: Use the JOIN clause to connect the river table with the state table based on the state name. 4. Aggregation Structure: Use the MAX function in a subquery to find the maximum population from the state table, which will help us identify the state with the largest population.","612":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and join it with the writes table to link authors to their papers. We will also need to join the paper table to filter for papers related to \"syntactic parsing\". 2. Condition Structure: Use a WHERE clause to filter for papers that have \"syntactic parsing\" in their title, ensuring we only consider relevant papers. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the authorId and paperId to connect authors with their respective papers. 4. Aggregation Structure: Use GROUP BY to group results by authorId and authorName, and apply an aggregate function like COUNT to determine the number of papers each author has written on the topic. Finally, use ORDER BY to sort by the count in descending order and limit the results to the top author.","613":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and area. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for the river named 'Rio Grande' in the traverse column of the river table. 3. Join Structure: Use an INNER JOIN between the state and river tables based on the state name to connect the states with the river they traverse. 4. Aggregation Structure: Use the MAX function to find the state with the largest area among those that the Rio Grande runs through.","614":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the conference papers authored by Subhasis Chaudhuri. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, Subhasis Chaudhuri, by matching the \"author.authorName.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId\" to get the titles of the papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","615":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers cited by Mirella Lapata. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Mirella Lapata' by joining the author table to get the corresponding authorId. 3. Join Structure: Use JOINs between the author, writes, and cite tables to connect the author to the papers they have cited. 4. Aggregation Structure: Use COUNT to aggregate the number of citations made by the specified author.","616":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter rivers that run through states that border the state with the capital 'Atlanta'. 3. Join Structure: Use JOINs to connect the river table with the state and border_info tables based on the relationships defined in the schema. 4. Aggregation Structure: Not required, as we are simply retrieving river names based on the specified conditions without any aggregation.","617":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Christopher D. Manning\", by matching the authorId with the corresponding authorName. 3. Join Structure: An INNER JOIN is needed between the writes table and the author table to connect the authorId with the author's name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers written by the specified author.","618":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" to list the titles of the papers. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"subhasis chaudhuri,\" by checking the \"author.authorName.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"writes.paperId = paper.paperId\" to associate each paper with its authors. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the titles of the papers without any need for grouping or counting.","619":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the state. Use the FROM clause to specify the border_info table, and then join it with the state table to get the relevant state information. 2. Condition Structure: Use a WHERE clause to filter for states that border Wyoming. Additionally, we will need to find the smallest state based on area or population, depending on the context. 3. Join Structure: Use an INNER JOIN between the border_info and state tables based on the state_name to connect the states that border Wyoming with their respective populations. 4. Aggregation Structure: Use the MIN function to find the smallest state based on the population or area, and then retrieve the population of that state.","620":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that match the specified criteria. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2016 and at the venue \"CVPR '16.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","621":"1. Sequential Structure: Start with the SELECT clause to retrieve the density of the state. Use the FROM clause to specify the state table. 2. Condition Structure: We need to filter for the state that the largest river runs through, so we will use a WHERE clause to specify this condition. 3. Join Structure: We will use a JOIN clause to connect the river table with the state table based on the condition that the river's traverse matches the state's name. 4. Aggregation Structure: We will use the MAX function to find the length of the largest river and filter the state based on this maximum length.","622":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" for the titles of the papers and \"venue.venueName\" for the names of the venues. 2. Condition Structure: Apply a WHERE clause to filter for papers that have \"chi\" in their title, which can be done using the LIKE operator. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and venue names without any summarization.","623":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"venue.venueName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"TAIL\" and are published in the venue \"NIPS.\" 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"venue\" table based on \"venueId,\" and the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId\" to link each paper with its keyphrases. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant papers based on the specified conditions.","624":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of states that border another state. Use the FROM clause to specify the border_info table, which contains the relationships between states. 2. Condition Structure: We need to find the state with the smallest area, so we will use a subquery in the WHERE clause to filter for states based on their area. 3. Join Structure: Use the JOIN clause to connect the border_info table with the state table based on the state_name to get the relevant state names. 4. Aggregation Structure: Use the MIN function in a subquery to find the smallest area among the states, which will be used to filter the states in the main query.","625":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Then, join the keyphrase table to filter for the specific keyphrase of interest. 3. Condition Structure: Use the WHERE clause to filter for keyphrases that match 'Question Answering'. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified condition without any aggregation.","626":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link authors to their papers. Additionally, join the journal table to filter by the specific journal name \"AISTATS\". 2. Condition Structure: Use a WHERE clause to filter for the author named \"David M. Blei\" and the journal named \"AISTATS\". 3. Join Structure: Use INNER JOINs between the paper, writes, and journal tables based on their respective foreign keys to connect authors with their papers and the journals they are published in. 4. Aggregation Structure: Use COUNT to aggregate the number of papers authored by David M. Blei in the specified journal.","627":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. Additionally, join with the venue table to filter by the specific venue name 'AISTATS'. 2. Condition Structure: Use a WHERE clause to filter for the author name 'David M. Blei' and the venue name 'AISTATS'. 3. Join Structure: Use INNER JOINs between the paper, writes, and venue tables based on the appropriate foreign keys to connect authors to their papers and the papers to their venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers authored by David M. Blei in the specified venue.","628":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.area\" of the largest state. 2. Condition Structure: No specific filtering condition is needed since we want to find the largest state by area. 3. Join Structure: No JOIN is necessary as all required information is available in the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the maximum area among all states.","629":"1. Sequential Structure: Start with the SELECT clause to retrieve the city names. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: Use a WHERE clause to filter for the smallest state by area. This requires a subquery to find the minimum area from the state table. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to link cities to their respective states. 4. Aggregation Structure: Use a subquery to determine the smallest state by area, which will be used in the WHERE clause to filter the cities.","630":"1. Sequential Structure: Start with the SELECT clause to retrieve the mountain name and its altitude. Use the FROM clause to specify the mountain table. 2. Condition Structure: Apply a WHERE clause to filter for mountains located in the United States by checking the country name. 3. Join Structure: Use a JOIN between the mountain and highlow tables on the state name to ensure we are considering mountains in the context of their states. 4. Aggregation Structure: Use the ORDER BY clause to sort the mountains by altitude in descending order and limit the results to get the highest mountain.","631":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table. We will need to join with the writes table to link authors to their papers, and then join with the paperKeyphrase table to connect papers to their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for the author name 'Luke Zettlemoyer' to ensure we only get keyphrases associated with this specific author. 3. Join Structure: Use INNER JOINs between the keyphrase, writes, and paperKeyphrase tables based on their respective foreign keys to connect authors to their papers and then to the keyphrases. 4. Aggregation Structure: Not required, as we are simply retrieving keyphrase names without any aggregation.","632":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" to get the titles of the papers authored by Sharon Goldwater. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"sharon goldwater,\" by checking the \"author.authorName.\" 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table based on \"paperId\" and \"authorId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for grouping or counting.","633":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for citations related to the author 'noah a smith'. This will involve joining the writes table to get the paper IDs associated with the author and then filtering the cite table based on those paper IDs. 3. Join Structure: Use JOINs between the writes table and the cite table to connect the author's papers to their citations. Specifically, join writes on authorId to get the paperId, and then join cite on citedPaperId to count the citations for those papers. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the papers written by 'noah a smith'.","634":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers authored by Liwen Xiong in 2015. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Liwen Xiong\" and the year \"2015.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"paperId\" to link each paper with its respective authors. Additionally, join the \"author\" table to filter by the author's name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for summarization.","635":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of major cities. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the border_info table to find states that border Nebraska. This requires an INNER JOIN on the state_name field. 3. Condition Structure: Use a WHERE clause to filter for states that are listed as bordering Nebraska in the border_info table. 4. Aggregation Structure: Use the COUNT function to count the number of cities in the selected states.","636":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.density\" of the state whose capital is \"Austin\". 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.capital\" is equal to 'Austin'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the density of the specified state.","637":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" which represents the conferences where Daniella Coelho submits her papers. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Daniella Coelho,\" using the \"author.authorName\" field. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId\" to access the \"venueId.\" Finally, join the \"paper\" table with the \"venue\" table to get the conference names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the conferences.","638":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"keyphrase.keyphraseName\" which represents the keywords. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Luke Zettlemoyer,\" by checking the \"author.authorName.\" 3. Join Structure: Use JOINs to connect the \"writes\" table with the \"author\" table to filter by author, and then join with the \"paper\" table to link papers written by the author. Finally, join with the \"paperKeyphrase\" table to connect papers to their keywords, and then join with the \"keyphrase\" table to get the actual keyword names. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique keywords are returned.","639":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the shortest river. 2. Condition Structure: No specific filtering condition is needed since we want to find the shortest river among all available rivers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the shortest river.","640":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river.length\" for the specified river. 2. Condition Structure: Apply a WHERE clause to filter for the specific river name \"colorado\" and the state name \"texas.\" 3. Join Structure: No JOIN is necessary here since the relevant information can be accessed directly from the \"river\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the length of a specific river.","641":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. We will also need to join the writes table to filter papers by the author and the paperKeyphrase table to filter by the keyphrase. 2. Condition Structure: Use a WHERE clause to filter for the author named 'brian curless' and the keyphrase 'convolution'. 3. Join Structure: Use INNER JOINs between the paper, writes, and paperKeyphrase tables based on their respective foreign keys to connect papers with their authors and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","642":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs from the paper table. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'Question Answering'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their corresponding keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","643":"1. Sequential Structure: Start with the SELECT clause to retrieve the author information. Use the FROM clause to specify the author table. We will also need to join with the writes table to link authors to their papers, and then join with the paperKeyphrase and keyphrase tables to filter for the specific keyphrase \"syntactic parsing\". 2. Join Structure: Use INNER JOINs to connect the author table with the writes table on authorId, the writes table with the paper table on paperId, the paper table with the paperKeyphrase table on paperId, and finally the paperKeyphrase table with the keyphrase table on keyphraseId. 3. Aggregation Structure: Use GROUP BY to group the results by authorId and authorName, allowing us to count the number of publications for each author. We will use COUNT to aggregate the number of papers associated with the keyphrase \"syntactic parsing\". 4. Condition Structure: Use a HAVING clause to filter for the author with the maximum number of publications related to the keyphrase \"syntactic parsing\".","644":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by both Peter Mertens and Dina Barbian. This will involve checking for the presence of both authors in the writes table for the same paper. 3. Join Structure: Not required, as all necessary data can be accessed through the writes table. 4. Aggregation Structure: Not needed, as we are checking for the existence of a paper written by both authors without requiring any aggregation.","645":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.paperId\" and any other relevant fields from the \"paper\" table that we might want to display, such as the title. 2. Condition Structure: Apply a WHERE clause to filter for papers written by the author \"Sharon Goldwater.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"writes.paperId\" to link each paper with its corresponding author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the papers without needing to summarize any data.","646":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter states that do not border Texas by checking the border_info table. 3. Join Structure: Use a JOIN between the state and border_info tables based on the state_name to identify which states are listed as borders. 4. Aggregation Structure: Not needed, as we are simply retrieving state names based on the specified condition without any aggregation.","647":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the river name and its length. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all major rivers in the US. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"river\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and lengths of the rivers.","648":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for the author named 'Oren Etzioni'. Additionally, we need to find the latest paper, which will be determined by the maximum year. 3. Join Structure: Use JOINs between the author and writes tables to connect authors to their papers, and then join with the paper table to access the paper details. 4. Aggregation Structure: Use the MAX function to find the latest year in which the paper was published by Oren Etzioni.","649":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for citations related to the author \"Noah A. Smith\". This will involve joining the author table to find the authorId corresponding to \"Noah A. Smith\". 3. Join Structure: Use JOINs to connect the author table with the writes table to get the paperId for the author, and then join with the cite table to count the citations for those papers. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the papers written by \"Noah A. Smith\".","650":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table and JOIN it with the highlow table to access the lowest point information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the state with the lowest point directly from the highlow table. 3. Join Structure: Use an INNER JOIN between the state and highlow tables based on the state_name to relate the state with its lowest point. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","651":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of co-authors. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by Mark Steedman, ensuring we only count co-authors associated with his papers. 3. Join Structure: Not required, as we can count co-authors directly from the writes table by filtering on the authorId of Mark Steedman. 4. Aggregation Structure: Use COUNT to aggregate the number of distinct authors who have co-authored papers with Mark Steedman, excluding himself from the count.","652":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that mention the keyphrase \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to access the keyphrase names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that match the specified keyphrase.","653":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the capital. Use the FROM clause to specify the state table, as it contains the information about the states and their capitals. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest area, which will help identify the smallest state. 3. Join Structure: Use a JOIN between the state and city tables based on the capital name to get the population of the capital city. 4. Aggregation Structure: Use the MIN function to find the smallest area among the states, which will be used in the WHERE clause to filter the relevant state.","654":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use a WHERE clause to filter for papers written by either \"Peter Mertens\" or \"Dina Barbian\". 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","655":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point and the area of the state. Use the FROM clause to specify the state table and JOIN it with the highlow table to access the highest point information. 2. Condition Structure: Use a WHERE clause to filter for the state with the largest area. 3. Join Structure: Use an INNER JOIN between the state and highlow tables based on the state name to connect the area of the state with its highest point. 4. Aggregation Structure: Use the MAX function to find the state with the largest area.","656":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.paperId\" and any other relevant fields from the \"paper\" table that we might want to include, such as the title. 2. Condition Structure: Apply a WHERE clause to filter for papers authored by \"sharon goldwater.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"writes.paperId = paper.paperId\" to link each paper with its authors. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the papers authored by the specified author.","657":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" and \"highest_point\" from the \"highlow\" table. 2. Condition Structure: No specific filtering condition is needed since we want to find the state with the highest point. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highest_point\" to rank states by their highest point and apply LIMIT 1 to select the state with the highest point.","658":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and city name. Use the FROM clause to specify the city table, as we are interested in cities and their populations. 2. Condition Structure: Use a WHERE clause to filter for cities that are located in Montana. This will help us narrow down the results to only those cities within the specified state. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to ensure we are correctly associating cities with their respective states. 4. Aggregation Structure: Use the ORDER BY clause to sort the cities by population in descending order and limit the results to get the largest city.","659":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. We will use the COUNT function to get the total number of parsing papers published at ACL in 2014. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2014 and at the venue \"ACL.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","660":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" from the \"highlow\" table, as we want to know which state has the highest point. 2. Condition Structure: No specific filtering condition is needed here, as we are interested in the highest point in the USA, which is a specific value we can directly reference. 3. Join Structure: No JOIN is necessary since we are only interested in the \"highlow\" table for the highest point and its corresponding state. 4. Aggregation Structure: Use ORDER BY to sort the results based on the \"highest_point\" in descending order and LIMIT 1 to get the state with the highest point.","661":"1. Sequential Structure: Start with the SELECT clause to retrieve the title, year, number of citations, and number of times cited by other papers from the paper table. 2. Condition Structure: Use a WHERE clause to filter for papers that are related to the keyphrase \"dependent types\" by joining with the keyphrase table. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables on paperId to link papers with their keyphrases, and then join with the keyphrase table to filter for the specific keyphrase. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","662":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter the records for rivers that traverse the country 'US'. 3. Join Structure: Not required, as we can filter directly from the river table based on the country name. 4. Aggregation Structure: Use the COUNT function to aggregate the total number of rivers that meet the specified condition.","663":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and join it with the venue table to get the venue names. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2012 and in the venue named 'Parsing'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: Not required, as we are simply retrieving specific records without any aggregation.","664":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and area. Use the FROM clause to specify the state table. We will also need to join the border_info table to find states that border the state with the highest population. 2. Condition Structure: We need to filter for the state with the highest population using a subquery in the WHERE clause. 3. Join Structure: Use an INNER JOIN between the state and border_info tables based on the state_name to connect states with their bordering states. 4. Aggregation Structure: Use the MAX function to find the largest area among the states that border the state with the highest population.","665":"1. Sequential Structure: Start with the SELECT clause to retrieve the papers written by Liwen Xiong in 2015. We will need to select the relevant fields from the paper table. 2. Condition Structure: Use the WHERE clause to filter for papers written in the year 2015 and by the specific author, Liwen Xiong. This will involve checking the author's name in the author table. 3. Join Structure: Use JOIN clauses to connect the writes table with the paper table to get the papers associated with the author, and then join with the author table to filter by the author's name. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","666":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers written by the author \"Sharon Goldwater.\" The relevant field is \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author by checking if \"author.authorName\" matches \"Sharon Goldwater.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table based on \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","667":"1. Sequential Structure: Start with the SELECT clause to count the number of papers written by the author. We will use the COUNT function on \"writes.paperId.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Christopher D. Manning,\" by matching the \"author.authorId\" with the corresponding \"writes.authorId.\" 3. Join Structure: A JOIN is necessary to connect the \"writes\" table with the \"author\" table based on \"authorId\" to ensure we are counting papers written by the correct author. 4. Aggregation Structure: Use COUNT to aggregate the number of papers associated with the specified author.","668":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and join it with the writes and author tables to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for papers authored by 'David M. Blei' and published in the venue 'AISTATS'. 3. Join Structure: Use INNER JOINs between the paper, writes, and author tables based on the paperId and authorId to connect the relevant data. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","669":"1. Sequential Structure: Start with the SELECT clause to specify the dataset names related to semantic parsing. 2. Condition Structure: Use a WHERE clause to filter datasets that are relevant to \"semantic parsing\". This may involve checking if the dataset name contains the phrase \"semantic parsing\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"dataset\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving dataset names that meet the specified condition.","670":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers related to \"monte carlo simulation\" published since 2011. 2. Condition Structure: Use a WHERE clause to filter for papers published in or after the year 2011. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table to filter for keyphrases related to \"monte carlo simulation\". 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the titles of the papers that meet the specified conditions.","671":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers authored by Christopher D. Manning. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use the WHERE clause to filter records for the author named 'Christopher D. Manning'. 3. Join Structure: Not required, as all necessary data can be accessed directly from the writes table and the author table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the specified author.","672":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Daniella Coelho publishes. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Daniella Coelho.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"authorId\" and then join the \"paper\" table on \"paperId\" to link to the \"venue\" table using \"venueId.\" 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be applied to ensure unique conference names are returned.","673":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name. Use the FROM clause to specify the highlow table, as it contains the information about the lowest point. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to retrieve the state with the lowest point directly from the highlow table. 3. Join Structure: Use an INNER JOIN between the highlow and state tables based on the state_name to connect the lowest point information with the corresponding state name. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","674":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Daniella Coelho typically publishes. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Daniella Coelho,\" using the \"author.authorName\" field. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"paper\" table on \"paperId\" to link to the \"venue\" table using \"venueId.\" 4. Aggregation Structure: Since the question asks for typical venues, we can use GROUP BY to group the results by \"venue.venueName\" and possibly use COUNT to determine the frequency of publications in each venue.","675":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers. 2. Condition Structure: Use a WHERE clause to filter for records where the \"venue.venueName\" is 'NIPS'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers.","676":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table. 2. Join Structure: Use JOINs to connect the border_info table to itself multiple times to find states that border states that border states that border Texas. 3. Condition Structure: Use a WHERE clause to filter for states that border Texas in the first join, then continue filtering for states that border those states in subsequent joins. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","677":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" of the states that have rivers running through them. 2. Condition Structure: No specific filtering condition is needed beyond the relationship established by the JOIN. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the \"state_name\" and \"traverse\" fields to link states with the rivers that run through them. 4. Aggregation Structure: No aggregation is needed, but DISTINCT should be applied to ensure unique state names are returned.","678":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the state capital names. 2. Condition Structure: Use a WHERE clause to filter for states where the \"country_name\" is 'USA'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the capitals for the specified condition.","679":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Join Structure: Join the river table with the border_info table to link rivers with the states that border Colorado. This requires an INNER JOIN on the state_name field. 3. Condition Structure: Use a WHERE clause to filter for states that border Colorado. This can be done by checking if the border field in the border_info table matches 'Colorado'. 4. Aggregation Structure: Use the COUNT function to aggregate the number of rivers that run through the states identified in the previous steps.","680":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Daniella Coelho publishes. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Daniella Coelho.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"authorId\" and then connect the \"writes\" table with the \"paper\" table on \"paperId\" to access the \"venueId.\" Finally, join the \"venue\" table to get the venue names. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique venue names are returned.","681":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the river table, and then apply a JOIN to connect it with the state table based on the state name. 2. Condition Structure: Use a WHERE clause to filter for the river with the minimum length, ensuring we only get the states that the shortest river runs through. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the state name to relate the river data to the corresponding states. 4. Aggregation Structure: Use the MIN function to find the shortest river length, which will be used in the WHERE clause to filter the results.","682":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state whose capital is \"Salem\". 2. Condition Structure: Use a WHERE clause to filter for states where \"state.capital\" is equal to 'Salem'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the state name based on a specific condition.","683":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID of the best paper. Use the FROM clause to specify the paper table and JOIN it with the journal table to filter for the specific journal and year. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2014 and in the journal TACL. 3. Join Structure: Use an INNER JOIN between the paper and journal tables based on the journal ID to connect papers with their respective journals. 4. Aggregation Structure: Since we are looking for the \"best\" paper, we may need to define what \"best\" means (e.g., highest number of citations). Assuming the best paper is the one with the highest number of citations, we will use the ORDER BY clause to sort by the number of citations in descending order and limit the result to the top paper.","684":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers related to the keyphrase \"Question Answering.\" 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Question Answering.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to access the keyphrase names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that match the specified keyphrase.","685":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: We need to filter rivers based on the state with the lowest elevation, so we will use a WHERE clause to specify this condition. 3. Join Structure: We will join the highlow table with the river table on the state name to connect the rivers with their corresponding states. 4. Aggregation Structure: We will use a subquery to find the state with the lowest elevation from the highlow table, which will be used in the WHERE clause to filter the rivers.","686":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields of interest, which are \"paper.title,\" \"paper.year,\" \"paper.numCiting,\" and \"paper.numCitedBy.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to the keyphrase \"machine networks for one shot learning.\" This will involve a JOIN with the keyphrase table. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to filter by the specific keyphrase. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the keyphrase.","687":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers authored by Sharon Goldwater. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Sharon Goldwater,\" by matching the \"author.authorName.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","688":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers published by the specified author. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause for the author name, as we will join the author table to filter by \"balakrishnan prabhakaran.\" 3. Join Structure: Use JOIN clauses to connect the \"writes\" table with the \"author\" table based on \"authorId\" and with the \"paper\" table based on \"paperId\" to get the titles of the papers written by the author. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the titles of the papers.","689":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain.mountain_altitude\" for Mount McKinley. 2. Condition Structure: Use a WHERE clause to filter for the specific mountain name, which is 'Mount McKinley'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the altitude of a specific mountain.","690":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" and \"venue.venueName.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"paper.year\" is 2016 and \"venue.venueName\" is 'acl'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of papers published at the specified venue in the specified year.","691":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. Additionally, join with the venue table to filter by the specific venue name 'AISTATS'. 2. Condition Structure: Use a WHERE clause to filter for the author named 'David M. Blei' and the venue named 'AISTATS'. 3. Join Structure: Use INNER JOINs between the paper, writes, and venue tables based on the appropriate foreign keys to connect authors to their published papers and the venues where those papers were published. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers published by the specified author at the specified venue.","692":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" for the academic papers. 2. Condition Structure: We need to filter the results to include only those papers that are related to the keyphrase \"machine networks\" and \"one shot learning.\" This will be done using a WHERE clause. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId,\" and then join with the \"keyphrase\" table based on \"keyphraseId\" to filter by the specific keyphrases. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the keyphrases.","693":"1. Sequential Structure: Start with the SELECT clause to retrieve the papers written by the authors. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the authors' names, specifically looking for 'Peter Mertens' and 'Dina Barbian'. 3. Join Structure: Use JOINs to connect the writes table with the author table based on authorId to get the names of the authors associated with each paper. 4. Aggregation Structure: Not needed, as we are simply retrieving the titles of the papers without any aggregation.","694":"1. Sequential Structure: Start with the SELECT clause to retrieve the mountain name and its altitude. Use the FROM clause to specify the mountain table. 2. Condition Structure: Apply a WHERE clause to filter out mountains that are located in Alaska, ensuring we only consider mountains from other states. 3. Join Structure: Not required, as we only need data from the mountain table and the condition can be applied directly. 4. Aggregation Structure: Use the MAX function to find the highest peak among the filtered results.","695":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOIN clauses to connect the author table with the writes table and then with the paper table based on the authorId and paperId. 3. Condition Structure: Apply a WHERE clause to filter for the author name 'Sanjeev Arora' and to ensure we are only retrieving recent papers, which can be defined by a specific year or range (for example, papers from the last few years). 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","696":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table and join it with the paperKeyphrase table to link keyphrases to papers. Then, join the writes table to connect papers to authors. Finally, apply a WHERE clause to filter for the author named 'Luke Zettlemoyer'. 2. Condition Structure: Use the WHERE clause to filter for the specific author by matching the authorName with 'Luke Zettlemoyer'. 3. Join Structure: Use INNER JOINs between the keyphrase, paperKeyphrase, and writes tables based on their respective foreign keys to connect keyphrases to the papers written by the specified author. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","697":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper details. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers with their authors, and then join the writes table with the author table to filter by specific authors. 3. Condition Structure: Use a WHERE clause to filter for papers that are coauthored by both \"Peter Mertens\" and \"Dina Barbian\". This can be achieved by ensuring that both authors are present in the writes table for the same paper. 4. Aggregation Structure: Use GROUP BY to group the results by paper ID and apply a HAVING clause to ensure that only papers with both authors are included in the final result.","698":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table. We will also need to join the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the author named 'brian curless' and to ensure that the keyphrase associated with the paper is 'convolution'. 3. Join Structure: Use JOINs between the writes, paper, and paperKeyphrase tables to connect authors to their papers and to filter based on the keyphrase. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","699":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers written by the specified author, \"sharon goldwater.\" 2. Condition Structure: Use a WHERE clause to filter for the author name \"sharon goldwater.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique paper titles are returned if necessary.","700":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"author.authorName\" since we want to find the title of the paper and the author's name. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"brian curless\" to find papers written by this author. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table based on \"paperId\" and \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the title of the paper and the author's name without any need for grouping or counting.","701":"1. Sequential Structure: Begin with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the `paper` table. \n2. Condition Structure: Apply a WHERE clause to filter papers that were published last year and appeared in the venue named 'acl'. Additionally, filter papers that are associated with the keyphrase \"Parsing.\"\n3. Join Structure: Use an INNER JOIN between the `paper` and `venue` tables based on `venueId` to connect papers with their respective venues. Also, use INNER JOINs with the `paperKeyphrase` and `keyphrase` tables to filter papers by the keyphrase \"Parsing.\"\n4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","702":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Use a WHERE clause to filter rivers based on the state that has the highest point, which will be determined by a subquery. 3. Join Structure: Not required, as we can directly filter the river table using the state name from the highlow table. 4. Aggregation Structure: Use COUNT to aggregate the number of rivers in the specified state.","703":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"lake_name\" from the \"lake\" table. 2. Condition Structure: Use a WHERE clause to filter for lakes where \"lake.country_name\" is 'us'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"lake\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the lakes that meet the specified condition.","704":"1. Sequential Structure: Start with the SELECT clause to count the number of cities in Texas. We will use the COUNT function on the \"city.city_name\" field. 2. Condition Structure: Apply a WHERE clause to filter for cities that belong to the state of Texas. 3. Join Structure: No JOIN is necessary here, as we can directly access the \"city\" table to filter by state. 4. Aggregation Structure: Use COUNT to aggregate the number of cities that meet the specified condition.","705":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"river_name\" of the shortest river in the USA. 2. Condition Structure: No specific filtering condition is needed since we want to find the shortest river across all entries. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the shortest river.","706":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the dataset ID and dataset name. 2. Condition Structure: No specific filtering condition is required since we want all datasets that contain semantic parsing information. 3. Join Structure: No JOIN is needed as all necessary information is available in the \"dataset\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the dataset information.","707":"1. Sequential Structure: Begin with the SELECT clause to retrieve the count of distinct paper IDs. Use the FROM clause to specify the `writes` table, which links authors to their papers. Then, join the `author` table to filter by the author's name.\n2. Condition Structure: Use a WHERE clause to filter for the author named 'Christopher D. Manning' by joining the `author` table with the `writes` table.\n3. Join Structure: A JOIN is required between the `writes` and `author` tables to match the author's name with their corresponding papers.\n4. Aggregation Structure: Use the COUNT function to aggregate the number of distinct papers associated with the author. This will allow us to check if the author has published any papers.","708":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct states. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter for the river named 'Missouri River'. 3. Join Structure: Use a JOIN clause to connect the river table with the state table based on the traverse field to count the states the river flows through. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the unique states that the Missouri River flows through.","709":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the lowest elevation. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the minimum lowest elevation. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"highlow.lowest_elevation\" to rank states by their lowest elevation and apply LIMIT 1 to select the state with the lowest elevation.","710":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table. 2. Join Structure: Join the state table with the highlow table on the state_name to relate the state with its highest elevation. 3. Condition Structure: Use a WHERE clause to filter for the state with the maximum elevation. 4. Aggregation Structure: Use a subquery to find the maximum elevation from the highlow table, which will be used in the WHERE clause to filter the relevant state.","711":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"venue.venueName\" for the papers published in the specified venue. 2. Condition Structure: Use a WHERE clause to filter for records where \"venue.venueName\" contains the substring 'chi'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venue.venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the venue name.","712":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" that corresponds to the papers written by the specified author. 2. Condition Structure: Use a WHERE clause to filter for the author with the name \"sharon goldwater.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"paperId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for summarization.","713":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the year. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers written in the year 2015. Additionally, filter for the author by joining with the writes table and the author table to match the author's name 'Liwen Xiong'. 3. Join Structure: Use JOINs between the paper, writes, and author tables based on the authorId and paperId to connect the papers with their respective authors. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","714":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the research papers related to \"Question Answering.\" 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Question Answering.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"paperKeyphrase\" table on \"paperId\" and then with the \"keyphrase\" table on \"keyphraseId\" to link each paper with its respective keyphrases. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique paper titles are returned.","715":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the lake name and area. 2. Condition Structure: Use a WHERE clause to filter for lakes that are located in the 'united states'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"lake\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and areas of the lakes in the specified country.","716":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that match the specified criteria. 2. Condition Structure: Use a WHERE clause to filter for papers that contain the phrase 'monte carlo simulation' in their title and were published after the year 2011. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers that meet the specified conditions.","717":"1. Sequential Structure: Start with the SELECT clause to retrieve the capital of the state. Use the FROM clause to specify the state table and JOIN it with the highlow table to access the highest point information. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in the state with the highest point. 3. Join Structure: Use an INNER JOIN between the state and highlow tables based on the state_name to relate the capital with the highest point of the state. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","718":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for keyphrases that match 'Question Answering'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases, and then join with the keyphrase table to access the keyphrase names. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","719":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Join Structure: Join the city table with the border_info table to find states that border California. This requires an INNER JOIN on the state_name field. 3. Condition Structure: Use a WHERE clause to filter for states that are listed as bordering California. 4. Aggregation Structure: Use GROUP BY to group the results by city and state, and then use the MAX function to find the largest city by population within those states.","720":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. We will also need to join with the writes table to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by 'brian curless' and that are associated with the keyphrase 'convolution'. 3. Join Structure: Use INNER JOIN between the paper and writes tables based on paperId to connect authors with their respective papers. Additionally, join the paperKeyphrase and keyphrase tables to filter by the specific keyphrase. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","721":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the capital. Use the FROM clause to specify the state table, as it contains the necessary information about the capital and its population. 2. Condition Structure: We need to filter for the largest state that the Mississippi River runs through. This requires a WHERE clause to identify states where the river traverses. 3. Join Structure: We will use a JOIN between the state and river tables based on the state_name and traverse fields to ensure we are only considering states that the Mississippi River runs through. 4. Aggregation Structure: We will use the MAX function to find the largest state by area, and then filter to get the population of its capital.","722":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state that has the capital \"Salem\". 2. Condition Structure: Use a WHERE clause to filter for the state where \"state.capital\" is equal to 'Salem'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"state\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the state name based on a specific condition.","723":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs of the papers coauthored by both authors. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the authors' names, specifically looking for papers where both Peter Mertens and Dina Barbian are listed as authors. 3. Join Structure: Use JOINs to connect the writes table with the author table based on authorId to get the names of the authors associated with each paper. 4. Aggregation Structure: Use GROUP BY to group the results by paperId, ensuring that we only get papers that have both authors. Use HAVING to filter groups that have both authors present.","724":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" that corresponds to the publications of the author. 2. Condition Structure: Use a WHERE clause to filter for the specific author by checking if \"author.authorName\" is equal to 'sharon goldwater'. 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"paperId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers published by the specified author.","725":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"writes.paperId\" which corresponds to the papers written by the specified authors. 2. Condition Structure: Use a WHERE clause to filter for records where the author's name is either \"Peter Mertens\" or \"Dina Barbian.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table based on \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique paper IDs are returned.","726":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"mountain_name\", \"state_name\", and \"country_name\" for Mount Whitney. 2. Condition Structure: Use a WHERE clause to filter for the specific mountain name \"Mount Whitney\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the location details for Mount Whitney.","727":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields of interest, which are \"paper.title,\" \"paper.year,\" \"paper.numCiting,\" and \"paper.numCitedBy.\" 2. Condition Structure: No specific filtering condition is mentioned in the question, so we will not apply a WHERE clause. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"venue\" and \"journal\" tables based on their respective foreign keys to gather additional information if needed. 4. Aggregation Structure: No aggregation is required since we are simply retrieving the specified fields without summarizing the data.","728":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers related to \"monte carlo simulation\" published after the year 2011. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is greater than 2011 and the title contains \"monte carlo simulation\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving titles of papers that meet the specified conditions.","729":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" that contains the keyword \"chi\". 2. Condition Structure: Use a WHERE clause to filter for titles that include the substring \"chi\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving titles that meet the specified condition.","730":"1. Sequential Structure: Start with the SELECT clause to retrieve the total population. Use the FROM clause to specify the state table, as we need to aggregate the population of states. 2. Join Structure: Use a JOIN clause to connect the state table with the border_info table based on the state_name to identify states that border Texas. 3. Condition Structure: Use a WHERE clause to filter for states that are listed as bordering Texas in the border_info table. 4. Aggregation Structure: Use the SUM function to calculate the total population of the states that meet the criteria.","731":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"dataset.datasetName\" for datasets related to semantic parsing. 2. Condition Structure: Use a WHERE clause to filter datasets that contain the term \"semantic parsing\" in their name. 3. Join Structure: No JOIN is required since all necessary information is in the \"dataset\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the names of datasets that meet the specified condition.","732":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the state table. 2. Condition Structure: Apply a WHERE clause to filter for states that are borders of the state with the greatest population. 3. Join Structure: Use a JOIN between the border_info and state tables based on the state_name to connect the states with their borders. 4. Aggregation Structure: Use a subquery to find the state with the maximum population, which will be used to filter the border states.","733":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names that border another state. Use the FROM clause to specify the border_info table, which contains the relationships between states. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest area by comparing the area of states in the state table. 3. Join Structure: Use a JOIN between the border_info and state tables based on the state_name to connect the bordering states with their respective areas. 4. Aggregation Structure: Use the MIN function to find the smallest area from the state table, which will be used in the WHERE clause to filter the relevant state.","734":"1. Sequential Structure: Start with the SELECT clause to specify the count of big cities in Texas. A big city is typically defined by a certain population threshold, which we will assume is above a certain number (e.g., 100,000). 2. Condition Structure: Use a WHERE clause to filter for cities that are located in Texas and have a population above the defined threshold for big cities. 3. Join Structure: No JOIN is necessary since all required information is available in the \"city\" table. 4. Aggregation Structure: Use COUNT to calculate the number of cities that meet the specified conditions.","735":"1. Sequential Structure: Start with the SELECT clause to retrieve the lowest point of the state. Use the FROM clause to specify the state table and JOIN it with the highlow table to access the lowest point information. 2. Condition Structure: Use a WHERE clause to filter for the state with the largest area. 3. Join Structure: Use an INNER JOIN between the state and highlow tables based on the state_name to relate the area of the state with its lowest point. 4. Aggregation Structure: Use the MAX function to find the state with the largest area, which will be used in the filtering condition.","736":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. We will also need to join the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2015 and authored by \"Liwen Xiong\". 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the papers with their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","737":"1. Sequential Structure: Start with the SELECT clause to retrieve the population density of the state. Use the FROM clause to specify the state table. 2. Condition Structure: Use a WHERE clause to filter for the state with the smallest population. This will require a subquery to find the minimum population from the state table. 3. Join Structure: Not required, as all necessary data is contained within the state table. 4. Aggregation Structure: Use the MIN function in a subquery to determine the smallest population, which will be used in the filtering condition.","738":"1. Sequential Structure: Start with the SELECT clause to specify the count of major cities in Texas. 2. Condition Structure: Use a WHERE clause to filter for cities that are located in Texas. 3. Join Structure: No JOIN is necessary since the relevant information is available in the \"city\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of major cities in Texas.","739":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" that corresponds to the papers published by the author. 2. Condition Structure: Apply a WHERE clause to filter for the specific author by name, which is \"chi.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table to link authors to their published papers, and another JOIN between the \"writes\" table and the \"paper\" table to get the titles of those papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","740":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names of Peter Mertens and Dina Barbian. Use the FROM clause to specify the author table. 2. Join Structure: Use JOINs to connect the authors with the papers they have written through the writes table, linking authors to their respective papers. 3. Condition Structure: Use a WHERE clause to filter for the specific authors, ensuring we check for collaborations between Peter Mertens and Dina Barbian by looking for papers that both authors have written. 4. Aggregation Structure: Not needed, as we are checking for the existence of a collaboration rather than aggregating data.","741":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers and their citation counts. Use the FROM clause to specify the paper table and join it with the venue table to filter for the specific venue. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2010 and specifically in the venue 'EMNLP'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order to identify the papers with the most citations.","742":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"city.city_name\" and \"city.population\" to identify the smallest city. 2. Condition Structure: No specific filtering condition is needed, as we want to find the city with the smallest population. 3. Join Structure: No JOIN is necessary since the information is available within the \"city\" table, but we will need to reference the \"state\" table to get the state name. 4. Aggregation Structure: Use ORDER BY to sort the cities by population in ascending order and LIMIT 1 to select the city with the smallest population.","743":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the city table, as we need to check for cities named 'Springfield'. 2. Condition Structure: Use the WHERE clause to filter for cities with the name 'Springfield'. Additionally, we will need to ensure that we are counting distinct states to avoid duplicates. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to relate cities to their respective states. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the number of unique states that have a city named 'Springfield'.","744":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table, as it contains the relationships between states. 2. Condition Structure: We need to filter for states that border the states which border the state with the largest population. This requires a subquery to first identify the state with the largest population. 3. Join Structure: Use JOINs between the border_info and state tables to connect the states with their borders. 4. Aggregation Structure: Use the MAX function in a subquery to find the state with the largest population, which will be used to filter the results in the main query.","745":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of major rivers. Use the FROM clause to specify the river table. 2. Condition Structure: Use the WHERE clause to filter for rivers that traverse the state of Ohio. 3. Join Structure: Not required, as all necessary data is available in the river table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of rivers that meet the specified condition.","746":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states that border the largest state. Use the FROM clause to specify the border_info table, as it contains the relationships between states. 2. Condition Structure: Use a WHERE clause to filter for the states that border the largest state. This requires identifying the largest state first, which can be done using a subquery to find the state with the maximum area. 3. Join Structure: Not required, as we can directly filter the border_info table based on the state name of the largest state. 4. Aggregation Structure: Use COUNT to aggregate the number of states that border the largest state.","747":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID of the paper that was cited the most. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers from the year 2010 and specifically from the venue 'EMNLP'. 3. Join Structure: Use a JOIN clause to connect the paper table with the cite table based on the paper ID to count how many times each paper was cited. 4. Aggregation Structure: Use GROUP BY to group the results by paper ID and then use COUNT to aggregate the number of citations. Finally, apply an ORDER BY clause to sort the results in descending order of citation count and limit the results to get the most cited paper.","748":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct states. Use the FROM clause to specify the river table and JOIN it with the state table to link the river with the states it traverses. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to count all states that the Missouri River runs through. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse field to connect the river with the states it runs through. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the unique states that the Missouri River traverses.","749":"1. Sequential Structure: Start with the SELECT clause to specify the \"paper.title\" of the papers related to Question Answering. 2. Condition Structure: Use a WHERE clause to filter for papers that have \"Question Answering\" in their title. 3. Join Structure: No JOIN is necessary since all relevant information is in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers that meet the specified condition.","750":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of papers related to \"monte carlo simulation\" published after the year 2011. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is greater than 2011 and the title contains \"monte carlo simulation\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving titles that meet the specified conditions.","751":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the border_info table, as it contains the information about states that border other states. 2. Condition Structure: Use a WHERE clause to filter for records where the border is the 'Mississippi River'. 3. Join Structure: Not required, as we can directly filter the border_info table based on the river name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of states that meet the specified condition.","752":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct \"state_name\" from the \"state\" table. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we want to find states that contain at least one major river. 3. Join Structure: Use a JOIN between the \"state\" and \"river\" tables based on the shared key \"state_name\" and \"traverse\" to link states with their rivers. 4. Aggregation Structure: Use DISTINCT to ensure that each state is listed only once, as we are interested in states that have at least one river.","753":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. Additionally, join the paperKeyphrase table to connect papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for papers written by 'brian curless' and that are related to the keyphrase 'convolution'. 3. Join Structure: Use INNER JOINs between the paper, writes, and paperKeyphrase tables based on their respective foreign keys to ensure we are linking the correct records. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","754":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the largest urban population. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the largest population. 3. Join Structure: No JOIN is necessary as all relevant information is available in the \"state\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"state.population\" to rank states by population and apply LIMIT 1 to select the state with the largest urban population.","755":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the number of citations. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2010 and associated with the EMNLP venue. 3. Join Structure: Use a JOIN clause to connect the paper table with the venue table based on the venueId to ensure we are only considering papers from the EMNLP venue. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order to get the most cited papers at the top.","756":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" since we want to know the titles of the papers published by the author. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and authored by \"Liwen Xiong.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its corresponding authors. Additionally, join the \"author\" table to filter by the author's name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for summarization.","757":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Daniella Coelho has published. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Daniella Coelho.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"authorId,\" and then join the \"writes\" table with the \"paper\" table on \"paperId.\" Finally, join the \"paper\" table with the \"venue\" table on \"venueId\" to get the conference names. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique conference names are returned.","758":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state that contains the highest point. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the highest point. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highlow.highest_point\" to rank states by their highest point and apply LIMIT 1 to select the state with the highest point.","759":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. Additionally, join the keyphrase table to get the keyphrase names. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Question Answering\". 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, and keyphrase tables based on their respective IDs to connect papers with their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","760":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the convolution papers authored by Brian Curless. 2. Condition Structure: Use a WHERE clause to filter for papers written by the author \"Brian Curless.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, but we will filter the results to only include papers that contain the term \"convolution\" in their title.","761":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the population density, which is calculated by dividing the population by the area. Use the `FROM` clause to specify the `state` table.\n2. Condition Structure: Apply a `WHERE` clause to filter for the state named 'Pennsylvania'.\n3. Join Structure: No joins are required, as all necessary data (population and area) is available in the `state` table.\n4. Aggregation Structure: No aggregation is needed, as the query is focused on a single state. The population density is calculated directly by dividing the population by the area.","762":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"author.authorName\" for the authors' names. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2016 and in the venue \"acl.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"paperId\" and then join the \"paper\" table on \"paperId\" to access the venue information. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are distinct to avoid duplicate author names.","763":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers with their authors, and then join the writes table with the author table to filter by specific authors. 3. Condition Structure: Use a WHERE clause to filter for papers that have both Peter Mertens and Dina Barbian as co-authors. This can be achieved by checking for the presence of both authors in the writes table for the same paper. 4. Aggregation Structure: Use GROUP BY to group the results by paper ID and apply a HAVING clause to ensure that both authors are present for each paper.","764":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of lakes. Use the FROM clause to specify the lake table. 2. Join Structure: Join the lake table with the border_info table to find states that border Texas. This requires using the border column in the border_info table to match with the state_name. 3. Condition Structure: Use a WHERE clause to filter for states that border Texas. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of lakes without any aggregation.","765":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"keyphrase.keyphraseName\" which represents the keywords used by the author. 2. Condition Structure: We need to filter the results to only include papers written by \"Luke Zettlemoyer.\" This will be done using a WHERE clause that checks for the author's name. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId.\" Finally, join the \"paper\" table with the \"paperKeyphrase\" table to link papers with their respective keywords, and then join with the \"keyphrase\" table to get the keyword names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the keywords associated with the specified author.","766":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"paper.numCiting\" to identify the top dependent types papers based on the number of citations. 2. Condition Structure: No specific filtering condition is needed since we want to find the top papers based on their citation count. 3. Join Structure: No JOIN is required as all necessary information is available in the \"paper\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCiting\" to rank the papers by the number of citations. Apply LIMIT to retrieve the top papers.","767":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that meet the specified conditions. 2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the journal \"NIPS\" and have \"TAIL\" in their title. 3. Join Structure: Use a JOIN between the \"paper\" and \"journal\" tables based on \"journalId\" to link each paper with its respective journal. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the titles of the papers that meet the conditions.","768":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers cited by Mirella Lapata. Use the FROM clause to specify the cite table, as we are interested in the citations. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Mirella Lapata' by joining the writes table to get the authorId corresponding to her name. 3. Join Structure: Use an INNER JOIN between the cite table and the writes table to connect the citing papers to the authors who wrote them, ensuring we only count citations made by Mirella Lapata. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers cited by Mirella Lapata.","769":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Additionally, join with the keyphrase table to filter for keyphrases related to \"dependent types\". 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"dependent types\". 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order to list the most popular publications first.","770":"1. Sequential Structure: Start with the SELECT clause to retrieve the `authorName` and the count of papers. Use the FROM clause to specify the `writes` table, which connects authors to their papers. \n2. Join Structure: Use JOINs to connect the `writes` table with the `paper` table on `paperId`, and then join the `paperKeyphrase` table to link papers with their keyphrases. Finally, join the `keyphrase` table to filter for the specific keyphrase \"syntactic parsing\". Additionally, join the `author` table to retrieve the `authorName`.\n3. Condition Structure: Use the WHERE clause to filter for the keyphrase \"syntactic parsing\" in the `keyphraseName` column.\n4. Aggregation Structure: Use GROUP BY to group the results by `authorId` and `authorName`, allowing us to count the number of papers each author has written on the specified keyphrase. Use ORDER BY COUNT(paper.paperId) DESC to sort the authors by the number of papers in descending order, and LIMIT 1 to get the author with the most papers.","771":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the mountains along with their corresponding country and state names. 2. Condition Structure: No specific filtering condition is needed since the question asks for the locations of all mountains. 3. Join Structure: No JOIN is required as all necessary information is available in the \"mountain\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and locations of the mountains.","772":"1. Sequential Structure: Start with the SELECT clause to retrieve the population of the capital. Use the FROM clause to specify the state table, as it contains the capital and population information. 2. Condition Structure: We need to filter for the largest state, which requires a subquery to find the state with the maximum area. 3. Join Structure: Use a JOIN between the state and city tables to get the population of the capital city, linking them through the state name. 4. Aggregation Structure: Use the MAX function in a subquery to determine the largest state by area.","773":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest and lowest elevation of \"Death Valley\". 2. Condition Structure: Use a WHERE clause to filter for the state name that matches 'Death Valley'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"highlow\" table. 4. Aggregation Structure: No aggregation is needed as we are directly retrieving the elevation values for the specified location.","774":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and population. Use the FROM clause to specify the city table. 2. Join Structure: Use an INNER JOIN between the city and river tables based on the state_name to link cities with states that have rivers. 3. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in all cities in states with rivers. 4. Aggregation Structure: Use GROUP BY to group the results by city name and population, and then apply the ORDER BY clause to sort by population in descending order to find the biggest city. Finally, limit the results to the top entry.","775":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the keyphrases associated with each paper. 2. Condition Structure: Use a WHERE clause to filter for papers that are associated with the keyphrase 'syntactic parsing'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on their respective IDs to connect authors to their papers, and then join with the paperKeyphrase and keyphrase tables to filter by the specific keyphrase. 4. Aggregation Structure: Use GROUP BY to group the results by author, and use COUNT to count the number of papers each author has written on the specified keyphrase. Finally, use ORDER BY to sort the results in descending order and limit the output to the top author.","776":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" to show the titles of the papers authored by Sharon Goldwater. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Sharon Goldwater.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors, and then filter by \"authorId\" to find papers written by Sharon Goldwater. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the titles of the papers.","777":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrases associated with the author \"Luke Zettlemoyer.\" We will select \"keyphrase.keyphraseName.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author by name, \"Luke Zettlemoyer.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId.\" Finally, join the \"paper\" table with the \"paperKeyphrase\" table and the \"keyphrase\" table to get the keyphrases related to the papers written by the author. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the keyphrases associated with the author's papers.","778":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the keyphrase names and the year directly from the `paper.year` column. There is no need to use the `YEAR()` function, as the year is already stored in the `paper.year` column. Use `DISTINCT` to ensure that duplicate keyphrases for the same year are not included in the results.\n2. Condition Structure: Use a `WHERE` clause to filter for the author named 'Luke S Zettlemoyer' to ensure we only get keyphrases associated with this specific author.\n3. Join Structure: Use `INNER JOINs` to connect the `author` table with the `writes` table on `authorId`, then join the `paper` table on `paperId`, and finally join the `paperKeyphrase` and `keyphrase` tables to get the keyphrases associated with each paper. Use table aliases to improve readability and avoid ambiguity.\n4. Aggregation Structure: No aggregation is needed. Instead, use `ORDER BY` to sort the results by year and keyphrase name to match the user query's intent.","779":"1. Sequential Structure: Begin with the SELECT clause to retrieve the overall average population across all states in the US. The query should focus on calculating a single average value, not individual averages for each state.\n2. Condition Structure: No specific filtering condition is needed since we are calculating the average population across all states in the US.\n3. Join Structure: No joins are required, as the query only involves the `state` table.\n4. Aggregation Structure: Use the `AVG` function to calculate the overall average population across all states. No GROUP BY clause is necessary, as we are not calculating individual averages for each state.","780":"1. Sequential Structure: Start with the SELECT clause to retrieve the city name and its population. Use the FROM clause to specify the city table and join it with the state table to access state information. 2. Condition Structure: Use a WHERE clause to filter for the smallest state based on area. This requires a subquery to find the state with the minimum area. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state name to relate cities to their respective states. 4. Aggregation Structure: Use the MIN function to find the smallest city by population within the smallest state identified in the previous step.","781":"1. Sequential Structure: Start with the SELECT clause to count the number of states. Use the FROM clause to specify the border_info table, as it contains the relevant information about state borders. 2. Condition Structure: Use a WHERE clause to filter for states that border Colorado and New Mexico. This will involve checking the border column for both states. 3. Join Structure: Not required, as all necessary data is available within the border_info table. 4. Aggregation Structure: Use COUNT to aggregate the number of states that meet the specified conditions.","782":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers authored by \"Sharon Goldwater.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its authors, and another JOIN with the \"author\" table to filter by author name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers authored by the specified author.","783":"1. Sequential Structure: Start with the SELECT clause to retrieve the highest point. Use the FROM clause to specify the highlow table, which contains the highest point information. We will also need to join the state table to access the area of each state. 2. Condition Structure: We need to filter for the smallest state based on area. This will be done using a subquery to find the minimum area from the state table. 3. Join Structure: Use an INNER JOIN between the highlow and state tables based on the state_name to relate the highest point with the corresponding state area. 4. Aggregation Structure: Use the MIN function in a subquery to determine the smallest state by area, which will be used in the WHERE clause to filter the results.","784":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference names, which are found in the \"venue\" table. 2. Condition Structure: Use a WHERE clause to filter for records where the author's name is 'li dong' and the year of the paper is 2016. 3. Join Structure: Use JOINs to connect the \"writes\" table with the \"paper\" table on \"paperId\" and then join the \"paper\" table with the \"venue\" table on \"venueId\" to link each paper to its respective conference. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the conferences.","785":"1. Sequential Structure: Start with the SELECT clause to count the number of cities. We will use the COUNT function on the \"city.city_name\" field. 2. Condition Structure: Apply a WHERE clause to filter for cities that belong to the state of Texas, specifically where \"state.state_name\" is 'Texas.' 3. Join Structure: Use a JOIN clause to connect the \"city\" table with the \"state\" table based on the \"state_name\" field to ensure we are counting cities in Texas. 4. Aggregation Structure: Use COUNT to aggregate the number of cities that meet the specified condition.","786":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name. Use the FROM clause to specify the river table and apply a WHERE clause to filter for the river named 'Rio Grande'. 2. Condition Structure: Use the WHERE clause to filter for the river name 'Rio Grande' and ensure we are looking for the state that it traverses. 3. Join Structure: Use a JOIN between the river and state tables based on the traverse relationship to connect the river with the corresponding state. 4. Aggregation Structure: Use the ORDER BY clause to sort the results by the area of the state in descending order and limit the results to get the largest state.","787":"1. Sequential Structure: Start with the SELECT clause to retrieve the state name and the length of the river. Use the FROM clause to specify the river table and join it with the state table to relate rivers to their respective states. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the state with the shortest river. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse field to connect rivers with their corresponding states. 4. Aggregation Structure: Use the ORDER BY clause to sort the rivers by length in ascending order and limit the result to the first entry to find the shortest river.","788":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and join it with the venue table to filter for the specific venue (ACL 2014). 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2014 and associated with the venue for ACL. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on venueId to connect papers with their respective venues. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that match the specified conditions.","789":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use a WHERE clause to filter for citations related to papers written by the author named 'noah smith'. This requires a subquery to first find the paper IDs associated with 'noah smith'. 3. Join Structure: Use JOINs to connect the writes table with the author table to get the author ID and then join with the paper table to get the paper IDs that 'noah smith' has written. 4. Aggregation Structure: Use COUNT to aggregate the number of times the papers written by 'noah smith' have been cited.","790":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of rivers. Use the FROM clause to specify the river table. 2. Condition Structure: We need to filter rivers that flow through states that border the state with the largest population. This requires a subquery to first identify the state with the largest population. 3. Join Structure: Use JOINs to connect the river table with the border_info table and the state table to find the relevant states that border the state with the largest population. 4. Aggregation Structure: Use the MAX function in a subquery to find the state with the largest population, and then use this result to filter the states in the border_info table.","791":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the state table. 2. Condition Structure: Use a WHERE clause to filter states that have major rivers by checking if the state name exists in the river table. 3. Join Structure: Use an INNER JOIN between the state and river tables based on the state name to relate states with their rivers. 4. Aggregation Structure: Use COUNT to aggregate the number of states that have major rivers.","792":"1. Sequential Structure: Start with the SELECT clause to retrieve the author ID. Use the FROM clause to specify the writes table, which links authors to papers. 2. Join Structure: Join the writes table with the cite table on the paper ID to connect authors with the number of times their papers have been cited. 3. Aggregation Structure: Use GROUP BY to group the results by author ID and COUNT to aggregate the number of citations for each author. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the count of citations and limit the results to get the author with the most citations.","793":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for papers written by 'Ed Desmond' and to ensure that the keyphrase 'Semantic Parsing' is associated with those papers. 3. Join Structure: Use JOINs between the paper, writes, and paperKeyphrase tables to connect papers with their authors and keyphrases. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","794":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by both 'Peter Mertens' and 'Dina Barbian'. This will involve checking the author names in the author table. 3. Join Structure: Use JOINs to connect the writes table with the author table to get the author names and with the paper table to get the paper titles. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","795":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state.state_name\" for the states that have a major city named \"Austin.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"city.city_name\" is 'Austin.' 3. Join Structure: Use a JOIN between the \"city\" and \"state\" tables based on the shared key \"state_name\" to link each city with its respective state. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the states.","796":"1. Sequential Structure: Start with the SELECT clause to specify that we want to count the total number of papers. 2. Condition Structure: No specific filtering condition is needed since we want the total count of all papers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"paper\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of papers in the \"paper\" table.","797":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"river_name\" of the shortest river. 2. Condition Structure: No specific filtering condition is required since we want to find the shortest river among all available rivers. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"river\" table. 4. Aggregation Structure: Use ORDER BY in ascending order on \"river.length\" to rank rivers by their length and apply LIMIT 1 to select the shortest river.","798":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers based on the year (2015) and the author's name ('Liwen Xiong'). 3. Join Structure: Use JOIN between the paper and writes tables to connect papers with their authors based on paperId and authorId. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","799":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Daniella Coelho publishes. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Daniella Coelho,\" by checking the \"author.authorName.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"authorId\" and then join the \"paper\" table on \"paperId\" to access the \"venueId.\" Finally, join the \"venue\" table to get the venue name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the venue name associated with the specified author.","800":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers written by the author \"Sharon Goldwater.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author by checking if the author's name matches \"Sharon Goldwater.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table to link the papers with their respective authors based on \"authorId.\" Additionally, join the \"paper\" table to get the titles of the papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for grouping or counting.","801":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct states. Use the FROM clause to specify the river table, as we are interested in the states that the Missouri river runs through. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are counting all states that the Missouri river traverses. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the traverse and state_name fields to link the river with the corresponding states. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the unique states that the Missouri river runs through.","802":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" to get the titles of the papers written by the author. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"sharon goldwater,\" using the \"author.authorName\" field. 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table to link the papers with their respective authors based on \"authorId.\" Additionally, join the \"paper\" table to get the titles of the papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for counting or summarizing.","803":"1. Sequential Structure: Start with the SELECT clause to retrieve the river name and its length. Use the FROM clause to specify the river table. 2. Condition Structure: Apply a WHERE clause to filter for the river that belongs to the state with the highest point. This requires a subquery to first identify the state with the highest point. 3. Join Structure: Not required, as we are only using the river table and a subquery to filter based on the state. 4. Aggregation Structure: Use the MAX function in a subquery to find the highest point among states, which will be used to filter the river records.","804":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Then, join with the keyphrase table to filter for the specific keyphrase 'ImageNet'. 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'ImageNet'. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that have the keyphrase 'ImageNet'.","805":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. Additionally, join the paperKeyphrase table to connect papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for papers written by 'brian curless' and that are associated with the keyphrase 'convolution'. 3. Join Structure: Use INNER JOINs between the paper, writes, and paperKeyphrase tables based on their respective keys to ensure we are linking the correct records. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","806":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table, as it contains the relationships between states. 2. Join Structure: Use JOIN clauses to connect the border_info table with itself to find states that border other states, specifically focusing on those that border Florida. 3. Condition Structure: Apply a WHERE clause to filter for states that border Florida in the first join, and then again for states that border those states in the second join. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","807":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and join it with the venue and keyphrase tables to filter based on the venue name and keyphrase. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2012 and specifically those associated with the venue 'acl' and the keyphrase 'Parsing'. 3. Join Structure: Use INNER JOINs between the paper, venue, and keyphrase tables based on their respective foreign key relationships to connect papers with their venues and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","808":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"area\" of the state. 2. Condition Structure: No specific filtering condition is needed since we are looking for the largest state area. 3. Join Structure: No JOIN is necessary because all required data is contained within the \"state\" table. 4. Aggregation Structure: Use the MAX function to find the maximum area among all states.","809":"1. Sequential Structure: Start with the SELECT clause to count the number of distinct states. Use the FROM clause to specify the city table, as we need to find cities named 'Springfield' and their corresponding states. 2. Condition Structure: Use the WHERE clause to filter for cities with the name 'Springfield'. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to ensure we are counting states that have a city named 'Springfield'. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the unique states that have a city named 'Springfield'.","810":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. Additionally, join with the paperKeyphrase table to connect papers to their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for papers written by 'brian curless' and that are related to the keyphrase 'convolution'. 3. Join Structure: Use INNER JOINs between the paper, writes, and paperKeyphrase tables based on their respective foreign keys to connect authors to their papers and papers to their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","811":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers written by the author. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use the WHERE clause to filter records for the author named 'Christopher D. Manning'. 3. Join Structure: Not required, as all necessary data can be accessed directly from the writes table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the specified author.","812":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct states. Use the FROM clause to specify the city table, as we need to check for cities named 'Springfield'. 2. Condition Structure: Use the WHERE clause to filter for cities with the name 'Springfield'. 3. Join Structure: Use an INNER JOIN between the city and state tables based on the state_name to ensure we are counting states that have cities named 'Springfield'. 4. Aggregation Structure: Use COUNT(DISTINCT state.state_name) to count the number of unique states that have at least one city named 'Springfield'.","813":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers written by the specified author. 2. Condition Structure: Apply a WHERE clause to filter for papers written in the year 2015 and by the author \"Liwen Xiong.\" 3. Join Structure: Use JOIN clauses to connect the \"writes\" table with the \"paper\" table based on \"paperId\" and the \"author\" table based on \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any summarization.","814":"1. Sequential Structure: Start with the SELECT clause to retrieve the field `highest_elevation` from the `highlow` table, which represents the height of the highest mountain.\n2. Condition Structure: Apply a WHERE clause to filter for the specific state, which is \"Texas,\" by using the `state_name` field in the `highlow` table.\n3. Join Structure: No JOIN is necessary since the relevant information is contained within the `highlow` table.\n4. Aggregation Structure: Use the `MAX()` function to retrieve the maximum value of `highest_elevation` for the state of Texas, as we are interested in the highest point.","815":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"state_name\" of the state with the highest elevation. 2. Condition Structure: No specific filtering condition is needed since we are looking for the state with the maximum elevation. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"highlow\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"highlow.highest_elevation\" to rank states by elevation and apply LIMIT 1 to select the state with the highest elevation.","816":"1. Sequential Structure: Start with the SELECT clause to retrieve the title, year, number of citations, and number of times cited by papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase 'chi', ensuring we only get relevant papers. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. Additionally, join with the keyphrase table to filter by the specific keyphrase name. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","817":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers published in the year 2015 and authored by 'Liwen Xiong'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link papers with their authors. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","818":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers. 2. Condition Structure: Use a WHERE clause to filter for records where the \"venueName\" is 'chi'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers.","819":"1. Sequential Structure: Start with the SELECT clause to specify the count of cities named 'Austin'. 2. Condition Structure: Use a WHERE clause to filter for cities where \"city.city_name\" is equal to 'Austin'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"city\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of cities that match the specified name.","820":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers published by the author. Use the FROM clause to specify the writes table, which links authors to their published papers. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Christopher D. Manning\", ensuring we only count papers associated with this author. 3. Join Structure: Not required, as all necessary data is available within the writes table and the author table can be filtered directly. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers published by the specified author.","821":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of states. Use the FROM clause to specify the river table, and then apply a JOIN to connect it with the state table based on the state name. 2. Condition Structure: No specific condition is needed in the WHERE clause since we are interested in all states that the shortest river runs through. 3. Join Structure: Use an INNER JOIN between the river and state tables based on the state_name to identify which states the shortest river traverses. 4. Aggregation Structure: Use the COUNT function to count the number of distinct states that the shortest river runs through.","822":"1. Sequential Structure: Start with the SELECT clause to retrieve the papers written by the author \"Sharon Goldwater.\" We will select the \"paperId\" from the \"writes\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific author by checking if \"author.authorName\" is equal to \"Sharon Goldwater.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table based on \"authorId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the list of papers written by the specified author.","823":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Additionally, join with the keyphrase table to filter for keyphrases related to \"ImageNet\". 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"ImageNet\". 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified condition.","824":"1. Sequential Structure: Start with the SELECT clause to retrieve the state names. Use the FROM clause to specify the border_info table, as it contains the information about states that border Texas. 2. Condition Structure: Apply a WHERE clause to filter for states that border Texas. 3. Join Structure: Use a JOIN clause to connect the border_info table with the river table based on the state_name to ensure that we only get states that have a major river. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","825":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links papers to authors. 2. Condition Structure: Use a WHERE clause to filter records for the author named 'Christopher D. Manning'. 3. Join Structure: Not required, as all necessary data is available within the writes table and the author table. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the specified author.","826":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by both authors, Peter Mertens and Dina Barbian. This will require checking for the presence of both author names in the author table. 3. Join Structure: Use JOINs to connect the writes table with the author table based on authorId to get the names of the authors. 4. Aggregation Structure: Use GROUP BY to group the results by paperId and apply a HAVING clause to ensure that only papers written by both authors are included, which means the count of distinct authors should be 2.","827":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs or titles. Use the FROM clause to specify the paper table and JOIN it with the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for papers written in the year 2016 and authored by Mirella Lapata. 3. Join Structure: Use an INNER JOIN between the writes and paper tables based on paperId to connect authors with their respective papers. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","828":"1. Sequential Structure: Start with the SELECT clause to retrieve user IDs from the user table. Use the FROM clause to specify the user table and JOIN it with the tip table to link users with their tips. Additionally, join the tip table with the business table to filter tips related to the specific category of 'Pet Groomers'. 2. Condition Structure: Use a WHERE clause to filter for businesses that belong to the 'Pet Groomers' category. 3. Join Structure: Use INNER JOINs between the user, tip, and business tables based on user IDs and business IDs to connect users with their tips and the corresponding businesses. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","829":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and JOIN it with the paper table to link authors to their papers. Additionally, join the paperKeyphrase table to filter papers based on the keyphrase related to \"sensor fusion\". 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"sensor fusion\". 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective keys to connect authors to their papers and the keyphrases associated with those papers. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","830":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the business ID and name of the businesses with a rating greater than 4.5 stars. 2. Condition Structure: Use a WHERE clause to filter businesses where \"business.rating\" is greater than 4.5. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving businesses that meet the specified rating condition.","831":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.paperId\" and \"paper.numCiting\" for the papers with the most citations. 2. Condition Structure: No specific filtering condition is needed since we want to find papers based on the number of citations. 3. Join Structure: No JOIN is required as all necessary information is available in the \"paper\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCiting\" to rank papers by the number of citations. Apply LIMIT to retrieve the top papers with the most citations.","832":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of co-authors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Additionally, join the paper table to filter for papers related to \"Machine Translation Output\". 2. Condition Structure: Use a WHERE clause to filter for papers that have the title containing \"Machine Translation Output\" and to ensure that the author is not Philipp Koehn, as we want co-authors. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the relevant foreign keys to connect authors with their respective papers. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","833":"1. Sequential Structure: Start with the SELECT clause to retrieve the dataset IDs used by Jitendra Malik. Use the FROM clause to specify the paperDataset table, which links papers to datasets. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Jitendra Malik' by joining the writes table to find the papers he authored. 3. Join Structure: Use JOINs between the writes table and the author table to connect authors to their papers, and then join the paperDataset table to link those papers to the datasets. 4. Aggregation Structure: Not needed, as we are simply retrieving dataset IDs without any aggregation.","834":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to filter papers based on the specified venue and year. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2007 and in the venue 'CVPR'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the relevant foreign keys to connect authors with their published papers. 4. Aggregation Structure: Use GROUP BY to group the results by author, and use COUNT to count the number of papers published by each author. Finally, apply ORDER BY to sort the results in descending order and limit the output to the top result to find the author with the most papers.","835":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and join it with the writes table to link authors to their papers. Then, join the paper table to filter papers based on the year and keyphrase. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2016 and that are associated with the keyphrase 'Bacterial Wilt'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the paperId to connect authors to their respective papers. Additionally, join the paperKeyphrase and keyphrase tables to filter by the specific keyphrase. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","836":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant columns, specifically the business details. Use the FROM clause to specify the business table as the main source of data. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in the city of 'Dallas' and that have been reviewed by the user named 'Patrick'. 3. Join Structure: Use JOIN clauses to connect the business table with the review table on the business_id, and then join with the user table on user_id to filter by the specific user. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","837":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"journal.journalName\" where Linda Shapiro publishes. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Linda Shapiro.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"paper\" table based on \"paperId,\" followed by joining the \"journal\" table based on \"journalId.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the journal names without any need for grouping or counting.","838":"1. Sequential Structure: Start with the SELECT clause to retrieve the total check-ins, which will be represented by the SUM of \"checkin.count.\" We also need to include \"business.state\" to group the results by state. 2. Condition Structure: Apply a WHERE clause to filter for businesses that are categorized as 'Italian Deli' and check-ins that occurred on 'Sunday.' 3. Join Structure: Use JOIN clauses to connect the \"category\" table with the \"business\" table based on \"business_id,\" and then join the \"checkin\" table to link check-ins to the respective businesses. 4. Aggregation Structure: Use SUM to aggregate the check-in counts and GROUP BY \"business.state\" to summarize the total check-ins for each state.","839":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews written by Michelle. Use the FROM clause to specify the review table, as it contains the relevant information about reviews. 2. Condition Structure: Use the WHERE clause to filter for reviews written by Michelle in March 2014. This involves checking both the year and month fields in the review table, as well as ensuring the user corresponds to Michelle. 3. Join Structure: An INNER JOIN is needed between the review and user tables to link the reviews to the specific user (Michelle) based on user_id. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews written by Michelle during the specified month and year.","840":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that are from the year 2016 and have 'neural attention' in the title. 3. Join Structure: Use JOIN clauses to connect the paper table with the venue table to ensure that the papers are from the ACL venue. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","841":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"business.name\" and \"business.rating.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses that have a rating of 5 and belong to the Italian category. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" and \"category.business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the businesses that meet the specified conditions.","842":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names of co-authors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors with their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by \"Noah A Smith\" to identify the relevant papers. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to get the co-authors of the papers written by Noah A Smith. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","843":"1. Sequential Structure: Begin with the SELECT clause to retrieve distinct author names from the \"author\" table. The query should also include the necessary joins to link authors to papers and datasets.\n2. Condition Structure: Use a WHERE clause to filter papers that are associated with the \"ImageNet\" dataset. This requires checking the \"datasetName\" field in the \"dataset\" table.\n3. Join Structure: Use a JOIN between the \"writes\" and \"paper\" tables based on \"writes.paperId\" and \"paper.paperId\" to link authors to their respective papers. Additionally, join the \"paperDataset\" and \"dataset\" tables to filter papers based on their association with the \"ImageNet\" dataset. Finally, join the \"author\" table to retrieve the author names.\n4. Aggregation Structure: DISTINCT is applied to ensure unique author names are returned. No further aggregation is needed.","844":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to deep learning by checking if they have a keyphrase associated with them. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables to connect papers with their keyphrases, and then join with the keyphrase table to filter for the specific keyphrase \"deep learning\". 4. Aggregation Structure: Use ORDER BY to sort the results by year in ascending order to find the first deep learning paper, and limit the results to the top entry.","845":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" and \"paper.title\" since we want to list datasets related to semantic parsing papers. 2. Condition Structure: Apply a WHERE clause to filter for papers that are specifically related to \"semantic parsing.\" This will likely involve checking the title of the paper for the term \"semantic parsing.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperDataset\" tables based on \"paperId\" to link each paper with its corresponding datasets, and then join with the \"dataset\" table to get the dataset names. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","846":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and the count of papers published. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Aggregation Structure: Use COUNT to count the number of papers published per year by the author. 3. Grouping Structure: Use GROUP BY to group the results by year to get the count of papers for each year. 4. Condition Structure: Use a WHERE clause to filter for the specific author, \"Ye Cao\". Finally, use ORDER BY to sort the results in descending order based on the count of papers and limit the results to get the year with the maximum count.","847":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and count of papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the venue table on the venueId to filter for papers specifically from NIPS. 3. Aggregation Structure: Use GROUP BY to group the results by year and COUNT to count the number of papers for each year. 4. Condition Structure: Use ORDER BY to sort the results in descending order based on the count of papers and limit the results to the top one to find the year with the most NIPS papers.","848":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"business.name\" for the names of the restaurants. 2. Condition Structure: Apply a WHERE clause to filter for businesses that are categorized as \"Italian\" and located in the \"Meadowood\" neighbourhood of \"Madison.\" 3. Join Structure: Use JOIN clauses to connect the \"business\" table with the \"neighbourhood\" and \"category\" tables based on the shared \"business_id\" to ensure we are filtering correctly based on both category and neighbourhood. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified conditions.","849":"1. Sequential Structure: Start with the SELECT clause to retrieve the total likes from the tip table. Use the FROM clause to specify the tip table and JOIN it with the user table to link tips to the users who created them. 2. Condition Structure: Use the WHERE clause to filter for tips created by the user named 'Niloofar'. 3. Join Structure: Use an INNER JOIN between the tip and user tables based on the user ID to connect tips to the corresponding user. 4. Aggregation Structure: Use the SUM function to calculate the total likes from the tips associated with 'Niloofar'.","850":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table and join it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the most recent paper, and limit the results to 1 to retrieve only the most recent paper.","851":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase 'deep learning' and to ensure we are looking for recent papers, we can also filter by year. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","852":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID. Use the FROM clause to specify the author and writes tables, and then join with the paper and venue tables to get the necessary information about the paper's year and venue. 2. Condition Structure: Use the WHERE clause to filter for the author named 'ali farhadi', the venue named 'eccv', and the year 2016. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and venue tables based on their respective foreign key relationships to connect authors to their papers and the papers to their venues. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","853":"1. Sequential Structure: Begin with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the `paper` table and join it with the `writes`, `author`, and `journal` tables to connect papers with their authors and journals. The `author` table is necessary to filter by the author's name, and the `journal` table is needed to filter by the journal's name.\n2. Condition Structure: Use the WHERE clause to filter for papers authored by 'Richard Ladner' and published in the 'chi' journal. Ensure that both conditions are applied using the correct columns from the `author` and `journal` tables.\n3. Join Structure: Use INNER JOINs between the `paper`, `writes`, `author`, and `journal` tables. The `writes` table connects the `paper` and `author` tables via `paperId` and `authorId`, while the `journal` table is connected to the `paper` table via `journalId`.\n4. Aggregation Structure: No aggregation is required, as we are retrieving specific records without any need for summarization. However, using `DISTINCT` is necessary to avoid duplicate results.","854":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and join it with the paperDataset and paperKeyphrase tables to link papers with their datasets and keyphrases. 2. Condition Structure: Use the WHERE clause to filter for papers that are related to the dataset 'ImageNet' and have the keyphrase 'deep learning'. 3. Join Structure: Use INNER JOINs between the paper, paperDataset, and paperKeyphrase tables based on their respective IDs to connect papers with the datasets and keyphrases. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","855":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of co-authors. Use the FROM clause to specify the author table and join it with the writes table to link authors with their papers. 2. Condition Structure: Use a WHERE clause to filter for papers authored by 'Noah A Smith' to find his co-authors. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to connect authors with their respective papers. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","856":"1. Sequential Structure: Start with the SELECT clause to retrieve all columns from the \"review\" table since we want to list all reviews. 2. Condition Structure: Apply a WHERE clause to filter the reviews specifically by the user named \"Niloofar.\" 3. Join Structure: Use a JOIN between the \"review\" and \"user\" tables based on the user ID to associate each review with the corresponding user. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the reviews.","857":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. Additionally, join the venue table to filter by the specific venue name (ECCV). 2. Condition Structure: Use the WHERE clause to filter for papers authored by 'Ali Farhadi' and published in the year 2016. 3. Join Structure: Use INNER JOINs between the paper, writes, and venue tables based on the relevant foreign keys to connect authors to their papers and the papers to their venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","858":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID of the most cited paper. Use the FROM clause to specify the paper table and JOIN it with the venue table to filter by the venue name 'sigcomm'. 2. Condition Structure: Use a WHERE clause to filter for papers that are published in the 'sigcomm' venue. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: Use ORDER BY to sort the papers by the number of citations in descending order and limit the result to the top entry to get the most cited paper.","859":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and join it with the writes table to link authors to their papers. Then, join the paper table to filter papers based on the year and keyphrase. 2. Condition Structure: Use the WHERE clause to filter for papers published after the year 2005 and that are related to the keyphrase 'semantic parsing'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables to connect authors with their published papers, and then join with the paperKeyphrase and keyphrase tables to filter by the specific keyphrase. 4. Aggregation Structure: Use GROUP BY to group results by author, and apply COUNT to count the number of papers published by each author. Finally, use ORDER BY to sort the results in descending order and limit the output to the author with the most publications.","860":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were published in the year 2015 and belong to the journal 'Nature Communications'. 3. Join Structure: Use an INNER JOIN between the paper and journal tables based on journalId to connect papers with their respective journals. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","861":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the latest deep learning papers. 2. Condition Structure: Since we are looking for \"latest\" papers, we will need to filter based on the year, but we need to define what \"latest\" means (e.g., the most recent year available). 3. Join Structure: We will need to join the \"paper\" table with the \"paperKeyphrase\" table to filter for papers related to deep learning. 4. Aggregation Structure: We will need to order the results by year in descending order to get the latest papers.","862":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"business\" table. 2. Condition Structure: Use a WHERE clause to filter for businesses located in \"Texas\" and having a rating below 2. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving businesses that meet the specified conditions.","863":"1. Sequential Structure: Start with the SELECT clause to retrieve the total number of check-ins. We will use the COUNT function on the \"checkin.count\" field. 2. Condition Structure: Apply a WHERE clause to filter for businesses that are located in \"Los Angeles\" and are categorized as \"Moroccan\" restaurants. 3. Join Structure: Use a JOIN between the \"business\" and \"checkin\" tables based on \"business_id\" to link each check-in record with its corresponding business. 4. Aggregation Structure: Use SUM to aggregate the check-in counts for the specified Moroccan restaurants in Los Angeles.","864":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need from the review table, specifically \"review.rating,\" \"review.text,\" \"review.year,\" and \"review.month.\" 2. Condition Structure: Apply a WHERE clause to filter for reviews associated with businesses that are categorized as \"Pet Groomers\" and have more than 100 reviews. 3. Join Structure: Use JOIN clauses to connect the \"review\" table with the \"business\" table based on \"business.business_id = review.business_id\" and the \"category\" table based on \"category.business_id = business.business_id\" to ensure we are only looking at the relevant businesses. 4. Aggregation Structure: No aggregation is needed here, but we will filter the results based on the review count condition in the WHERE clause.","865":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers published by Jamie Callan each year. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Jamie Callan' to ensure we are only counting papers published by this specific author. 3. Join Structure: Use an INNER JOIN between the writes table and the paper table based on paperId to connect the authors with their published papers and to access the year of publication. 4. Aggregation Structure: Use GROUP BY to group the results by year and COUNT to count the number of papers published by Jamie Callan in each year.","866":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers published at the specified venue. 2. Condition Structure: Use a WHERE clause to filter for records where \"paper.year\" is 2015 and the venue name is \"pldi.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and years of the papers.","867":"1. Sequential Structure: Start with the SELECT clause to specify the count of restaurants that have a rating greater than 3.5. 2. Condition Structure: Use a WHERE clause to filter for restaurants where \"business.rating\" is greater than 3.5. 3. Join Structure: No JOIN is necessary since all required information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of restaurants that meet the specified rating condition.","868":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table and join it with the venue and paperDataset tables to filter based on the year and venue. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2014 and in the venue 'eccv'. Additionally, filter for papers that are associated with the dataset 'ImageNet'. 3. Join Structure: Use INNER JOINs between the paper, venue, and paperDataset tables based on the venueId and paperId to connect papers with their respective venues and datasets. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","869":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of tips written by Michelle. Use the FROM clause to specify the tip table and JOIN it with the user table to link tips to the respective users. 2. Condition Structure: Use the WHERE clause to filter for tips written in the month of April and specifically by the user named Michelle. 3. Join Structure: Use an INNER JOIN between the tip and user tables based on user_id to connect tips to the user who wrote them. 4. Aggregation Structure: Use the COUNT function to aggregate the number of tips written by Michelle in April.","870":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"user.uid,\" \"user.user_id,\" and \"user.name.\" 2. Condition Structure: Apply a WHERE clause to filter for reviews associated with the restaurant named \"Mesa Grill.\" 3. Join Structure: Use JOIN clauses to connect the \"user\" table with the \"review\" table based on \"user.user_id\" and \"review.user_id,\" and also join the \"business\" table to link reviews to the specific restaurant using \"review.business_id\" and \"business.business_id.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving user information based on the specified conditions.","871":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"venue.venueName\" is \"pldi\" and \"paper.year\" is 2015. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the papers that meet the specified conditions.","872":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"business\" table since we want to find all relevant information about the restaurants. 2. Condition Structure: Use a WHERE clause to filter for businesses located in \"Dallas\" and having a rating greater than 4.5. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving records that meet the specified conditions.","873":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" as we are interested in the topic of the best paper. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2012 and specifically in the venue 'EMNLP-CoNLL'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: Since we are looking for the \"best\" paper, we need to define what \"best\" means. Assuming it refers to the paper with the highest number of citations, we will use ORDER BY on \"paper.numCiting\" in descending order and limit the results to 1 to get the best paper.","874":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews. Use the FROM clause to specify the review table, as we want to count the reviews related to a specific business. 2. Condition Structure: Use the WHERE clause to filter reviews for the business named \"Cafe Zinho\" located in the state of Texas. 3. Join Structure: Use an INNER JOIN between the review and business tables based on the business_id to connect reviews to their respective businesses. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews for the specified business.","875":"1. Sequential Structure: Start with the SELECT clause to retrieve the dataset names. Use the FROM clause to specify the dataset table. We will need to join the paperDataset table to link datasets with papers, and then join the writes table to connect papers with authors. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'jitendra malik' to ensure we only get datasets associated with this specific author. 3. Join Structure: Use INNER JOINs between the paperDataset, paper, and writes tables based on their respective keys to connect datasets to the papers they are associated with and to the authors who wrote those papers. 4. Aggregation Structure: Not needed, as we are simply retrieving dataset names without any aggregation.","876":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name associated with the keyphrase \"Trophic Cascade\". Use the FROM clause to specify the paper table and join it with the venue and paperKeyphrase tables to connect papers with their venues and keyphrases. 2. Condition Structure: Use a WHERE clause to filter for the keyphrase \"Trophic Cascade\" to ensure we only get conferences related to this specific topic. 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, and venue tables based on their respective keys to relate papers to their keyphrases and venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","877":"1. Sequential Structure: Start with the SELECT clause to count the number of businesses. Use the FROM clause to specify the business table and JOIN it with the neighbourhood table to link businesses with their neighbourhoods. 2. Condition Structure: Use the WHERE clause to filter for businesses located in the \"Stone Meadows\" neighbourhood and in the city of Madison. 3. Join Structure: Use an INNER JOIN between the business and neighbourhood tables based on the business_id to connect businesses with their respective neighbourhoods. 4. Aggregation Structure: Use the COUNT function to aggregate the total number of businesses that meet the specified conditions.","878":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOIN to connect the paper table with the writes table to link papers to their authors based on the paperId. Additionally, join the author table to filter for the specific author, Ohad Shamir. 3. Condition Structure: Use a WHERE clause to filter for the author named 'Ohad Shamir'. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to get the most cited paper.","879":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the paperKeyphrase table, which links papers to their keyphrases. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and specifically for the venue associated with NIPS. 3. Join Structure: Use JOINs to connect the paperKeyphrase table with the paper table on paperId to access the title and year, and to join with the keyphrase table to get the keyphrase names. 4. Aggregation Structure: Use GROUP BY to group the results by keyphrase name to identify popular topics, and use COUNT to determine the frequency of each keyphrase.","880":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"tip.text\" field, which contains the tips about the specified business. 2. Condition Structure: Apply a WHERE clause to filter for tips that are associated with the business \"Vintner Grill\" and have more than 9 likes. 3. Join Structure: Use a JOIN between the \"tip\" and \"business\" tables based on \"business_id\" to link each tip with its corresponding business. 4. Aggregation Structure: No aggregation is needed here, but we will filter the results based on the likes count in the WHERE clause.","881":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were published in the year 2014 and in the venue 'eccv'. 3. Join Structure: Use JOIN clauses to connect the paper table with the paperKeyphrase table on paperId, and then join with the keyphrase table on keyphraseId to filter for papers that use the keyphrase 'ImageNet'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","882":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers published in the year 2016. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is equal to 2016. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers from the specified year.","883":"1. Sequential Structure: Start with the SELECT clause to specify the \"paper.title\" of the papers that use \"WebKB\". 2. Condition Structure: Use a WHERE clause to filter for papers that have \"WebKB\" in their title. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers that meet the specified condition.","884":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the publications. We also need to include the \"venue.venueName\" to ensure we are filtering for the correct venue. 2. Condition Structure: Apply a WHERE clause to filter for the specific author \"Richard Ladner\" and the venue \"chi.\" 3. Join Structure: Use JOIN clauses to connect the \"author,\" \"writes,\" \"paper,\" and \"venue\" tables based on their relationships. This will allow us to link the author to their published papers and the papers to their respective venues. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for summarization.","885":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"paper.numCitedBy\" for the papers related to \"parsing\". 2. Condition Structure: Use a WHERE clause to filter papers that are related to \"parsing\". This will likely involve checking if \"parsing\" is part of the title or associated with keyphrases. 3. Join Structure: A JOIN may be necessary to connect the \"paper\" table with the \"paperKeyphrase\" table to filter papers that have the keyphrase \"parsing\". 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCitedBy\" to rank the papers by the number of citations, and apply LIMIT to get the most cited papers.","886":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that are associated with the venue named 'sigir'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on venueId to connect papers with their respective venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified condition.","887":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2014 and that are about \"Parsing\". Additionally, we need to ensure that these papers are associated with the dataset \"Jeopardy! Questions\". 3. Join Structure: Use JOIN clauses to connect the paper table with the paperDataset table on paperId, and then join with the dataset table on datasetId to filter based on the dataset name. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","888":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paperId\" of papers published in the year 2014. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is equal to 2014. 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the paper IDs for the specified year.","889":"1. Sequential Structure: Begin with the `SELECT` clause to count the number of papers. Use the `FROM` clause to specify the `paper` table as the primary table. Additionally, use the `cite` table to accurately count the number of citations for each paper.\n2. Condition Structure: Apply a `WHERE` clause to filter for papers from the year 2012 and from the ACL venue. The condition on the number of citations should be applied using a `HAVING` clause after counting the citations from the `cite` table.\n3. Join Structure: Use a `JOIN` clause to connect the `paper` table with the `venue` table to filter for papers from the ACL venue. Also, join the `cite` table to count the number of citations for each paper.\n4. Aggregation Structure: Use the `COUNT` function to count the number of citations for each paper. Use `GROUP BY` to group by `paperId` and apply a `HAVING` clause to filter papers with more than 7 citations.","890":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. We will use the COUNT function on \"paper.paperId\" to get the total number of papers. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and specifically in the ACL venue. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to ensure we are only counting papers from the ACL venue. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","891":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"business.name,\" \"business.review_count,\" and \"business.rating.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Los Angeles,\" with at least 30 reviews and an average rating above 3 stars. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables to filter for businesses that are categorized as \"Bars.\" 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the conditions for review count and rating are applied directly in the WHERE clause.","892":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table to filter papers that are related to the keyphrase \"deep learning\". 3. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase \"deep learning\". 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the most recent paper, and limit the results to the top one.","893":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue names where Peter Mertens has published. We will select \"venue.venueName.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Peter Mertens,\" using the \"author.authorName\" field. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId.\" Finally, join the \"paper\" table with the \"venue\" table based on \"venueId.\" 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique venue names are returned.","894":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of character recognition papers published before 2010. 2. Condition Structure: Use a WHERE clause to filter papers where \"paper.year\" is less than 2010. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving titles of papers that meet the specified year condition.","895":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"keyphrase.keyphraseName\" related to deep learning. 2. Condition Structure: Apply a WHERE clause to filter for keyphrases that match \"deep learning.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"paperKeyphrase\" table on \"paperId\" and then with the \"keyphrase\" table on \"keyphraseId\" to link papers with their keyphrases. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving titles and keyphrases without needing to summarize the data.","896":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.city\" where the restaurant name matches \"MGM Grand Buffet\". 2. Condition Structure: Use a WHERE clause to filter for businesses located in the state of Texas and having the name \"MGM Grand Buffet\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the cities that meet the specified conditions.","897":"1. Sequential Structure: Start with the SELECT clause to retrieve the year of the paper. Use the FROM clause to specify the `paper` table as the primary source of data.\n2. Condition Structure: Apply a WHERE clause to filter for papers written by the author \"benjamin mako hill\". This is consistent with the user query, as the user is asking for the first paper written by this author.\n3. Join Structure: Use an INNER JOIN between the `writes` and `paper` tables based on `paperId` to connect the author with their papers. Additionally, join the `author` table to filter by the author's name.\n4. Aggregation Structure: Use the MIN function to find the earliest year in which the author wrote a paper, as the user is asking for the first paper.","898":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were presented in the year 2015 and in the venue 'Nature Communications'. 3. Join Structure: Use a JOIN clause to connect the paper table with the venue table based on the venueId to ensure we are only counting papers from the specified venue. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","899":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct user IDs and names from the \"user\" table. 2. Condition Structure: Use a WHERE clause to filter for reviews associated with businesses that are categorized as \"restaurant.\" 3. Join Structure: Use JOINs to connect the \"user\" table with the \"review\" table based on \"user.uid\" and \"review.user_id,\" and then join the \"review\" table with the \"business\" table through \"review.business_id\" and \"business.business_id.\" Finally, join the \"business\" table with the \"category\" table using \"business.business_id\" and \"category.business_id.\" 4. Aggregation Structure: No aggregation is needed, but DISTINCT is applied to ensure unique users are returned.","900":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"datasetId\" associated with the papers that are related to semantic parsing. We will also include the \"title\" of the paper for clarity. 2. Condition Structure: Apply a WHERE clause to filter for papers whose titles contain the term \"semantic parsing.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperDataset\" tables based on \"paperId\" to link each paper with its corresponding datasets. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the datasets associated with the specified papers.","901":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the journal name. Use the FROM clause to specify the paper table and JOIN it with the journal table to get the journal names associated with each paper. 2. Condition Structure: Use a WHERE clause to filter papers that are related to the keyphrase \"instance segmentation\". This will ensure we only get papers that are relevant to the specified topic. 3. Join Structure: Use JOINs between the paper, journal, and paperKeyphrase tables based on the paperId and journalId to connect papers with their journals and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","902":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"business.business_id\" and \"business.name.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Pennsylvania\" and categorized as \"restaurant.\" 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the businesses that meet the criteria.","903":"1. Sequential Structure: Start with the SELECT clause to retrieve the neighbourhood names. Use the FROM clause to specify the neighbourhood table. 2. Join Structure: Join the neighbourhood table with the business table on the business_id to link neighbourhoods with their corresponding businesses. Then, join the business table with the category table to filter for Italian restaurants. 3. Condition Structure: Use the WHERE clause to filter for businesses located in 'Madison', having a rating less than 2.5, and belonging to the 'Italian' category. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","904":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"paper.title\" and \"paper.numCiting\" for ACL papers with less than 5 citations. 2. Condition Structure: Use a WHERE clause to filter papers where \"paper.numCiting\" is less than 5. 3. Join Structure: A JOIN is necessary to connect the \"paper\" table with the \"journal\" table to filter for ACL papers, which are presumably published in a specific journal. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving titles of papers that meet the citation condition.","905":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"author.authorName\" for the specified author. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Eric C. Kerrigan\" and the paper title \"Liquid Automatica.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the title and author name based on the specified conditions.","906":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" for the NLP conferences. 2. Condition Structure: Since the question asks for the \"best\" NLP conferences, we need to define what \"best\" means. Typically, this could relate to the number of citations or the reputation of the venue, but since no specific criteria are provided, we will assume we want to list all NLP conferences. 3. Join Structure: Use a JOIN between the \"venue\" and \"paper\" tables based on \"venue.venueId\" to link each venue with its respective papers. 4. Aggregation Structure: No aggregation is needed here, but we will apply a DISTINCT clause to ensure unique conference names are returned.","907":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" where Peter Mertens publishes. 2. Condition Structure: Use a WHERE clause to filter for the specific author name \"Peter Mertens.\" 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"authorId\" and then join the \"paper\" table on \"paperId,\" followed by joining the \"venue\" table on \"venueId\" to get the publication venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the venue names associated with the author.","908":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and specifically in the venue named 'pldi.' 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","909":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal names. Use the FROM clause to specify the journal table. We will need to join the journal table with the paper table to get the journal information related to the papers written by the author. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Takashi Matsumoto' to ensure we only get journals related to his articles. 3. Join Structure: Use JOIN clauses to connect the author, writes, and paper tables based on their relationships. Specifically, we will join the writes table to the paper table using paperId, and then join the paper table to the journal table using journalId. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of journals without any aggregation.","910":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically the paper details. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. Finally, apply an ORDER BY clause to sort the papers by year in descending order to get the most recent papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by the author \"Mirella Lapata\" by matching the authorName in the author table. 3. Join Structure: Use an INNER JOIN between the writes and author tables based on authorId to connect the papers with their respective authors. 4. Aggregation Structure: Use LIMIT to restrict the results to the 5 most recent papers.","911":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since we want to list the datasets mentioned at ACL. 2. Condition Structure: Use a WHERE clause to filter for records where the venue name is \"ACL.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. Additionally, join the \"paper\" and \"paperDataset\" tables to connect papers with their datasets. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the dataset names associated with papers presented at ACL.","912":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase and keyphrase tables to link papers with their keyphrases. Additionally, join with the venue table to filter papers based on the venue name. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2014 and at the venue \"ACL\". 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, keyphrase, and venue tables based on their respective foreign key relationships to connect papers with their keyphrases and the venue. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","913":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews. Use the FROM clause to specify the review table, as we need to count the reviews for a specific business. 2. Condition Structure: Use the WHERE clause to filter reviews for the year 2015 and for the business named \"Bistro Di Napoli\". 3. Join Structure: A JOIN is not necessary here since we can filter directly on the review table using the business name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews for the specified conditions.","914":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name and the venue name. Use the FROM clause to specify the author table and JOIN it with the paper and venue tables to link authors to their published papers and the venues where those papers were published. 2. Condition Structure: Use the WHERE clause to filter for the specific author named 'Richard Ladner' and the venue named 'chi'. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and venue tables based on the relationships defined in the schema to connect authors to their papers and the corresponding venues. 4. Aggregation Structure: Not required, as we are simply checking for the existence of a publication without needing to aggregate data.","915":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the author table with the writes table to find papers written by Ohad Shamir, and then join with the cite table to get citation information. 3. Condition Structure: Use a WHERE clause to filter for the author name 'Ohad Shamir' and to ensure we are only considering papers written by this author. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to the top one to find the most cited paper.","916":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of coauthors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors with their papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Noah A Smith' to identify the papers he has written. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to find all authors who have written papers with Noah A Smith. 4. Aggregation Structure: Use a WHERE clause to exclude 'Noah A Smith' from the results to ensure we only get his coauthors.","917":"1. Sequential Structure: Start with the SELECT clause to specify the count of escape games in Madison. 2. Condition Structure: Use a WHERE clause to filter for businesses located in \"Madison\" and having \"escape\" in their name. 3. Join Structure: No JOIN is necessary since all required information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of escape games that meet the specified conditions.","918":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were accepted in the year 2015 and published in 'Nature Communications'. 3. Join Structure: Use a JOIN between the paper and venue tables based on venueId to connect papers with their respective venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","919":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the first deep learning paper. 2. Condition Structure: Use a WHERE clause to filter for papers that are specifically related to \"deep learning.\" This may involve checking if the title contains the phrase \"deep learning.\" 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the title of the paper that matches the specified condition.","920":"1. Sequential Structure: Begin with the `SELECT` clause to count the number of publications. Use the `FROM` clause to specify the `paper` table, and join it with the `journal` table to filter by the specific journal. Ensure that the query dynamically handles the current year by using a compatible function like `strftime('%Y', 'now')` in SQLite to extract the current year.\n2. Condition Structure: Use the `WHERE` clause to filter for papers published in the current year and specifically in the 'Cell' journal. The journal name should be matched exactly, and the year should be dynamically calculated.\n3. Join Structure: Use an `INNER JOIN` between the `paper` and `journal` tables based on the `journalId` to relate papers to their respective journals. No additional joins are necessary since the query only asks for publications in the 'Cell' journal.\n4. Aggregation Structure: Use the `COUNT` function to aggregate the number of publications that meet the specified conditions. There is no need for `DISTINCT` in this case, as we are counting unique paper IDs.","921":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name and the count of their papers. Use the FROM clause to specify the paper and writes tables, and then join with the author table to get the author's name. 2. Condition Structure: Use the WHERE clause to filter papers that are related to \"semantic parsing\" and published after the year 2005. 3. Join Structure: Use JOINs between the paper, writes, and author tables based on the paperId and authorId to connect authors with their respective papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers per author and GROUP BY to group the results by author. Finally, use ORDER BY to sort the results in descending order based on the count of papers and limit the result to the top author.","922":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.year\" and \"paper.title\" for the deep learning papers. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"deep learning.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by \"paper.year\" in ascending order and LIMIT 1 to get the first published deep learning paper.","923":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs that are typically cited. Use the FROM clause to specify the cite table, which contains the relationships between citing and cited papers. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to retrieve all citing papers that have cited other papers. 3. Join Structure: Not required, as we are only interested in the relationships defined in the cite table. 4. Aggregation Structure: Not needed, as we are simply retrieving the IDs of papers that are cited by other papers without any aggregation.","924":"1. Sequential Structure: Start with the SELECT clause to retrieve the minimum year of publication. Use the FROM clause to specify the `paper` table and JOIN it with the `writes` and `author` tables to link authors with their publications.\n2. Condition Structure: Use a WHERE clause to filter for the author named 'benjamin mako hill'. The query should focus on finding the earliest year of publication, so no additional conditions are needed.\n3. Join Structure: Use an INNER JOIN between the `writes` and `paper` tables based on `paperId` to connect authors with their respective papers. Additionally, join the `author` table to filter by the author's name.\n4. Aggregation Structure: Use the MIN function to find the earliest year of publication for the specified author. No GROUP BY is needed since we are only interested in the minimum year.","925":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"business.name,\" \"business.city,\" and \"business.state.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Dallas\" and \"Texas\" and that have the category \"Valet Service.\" 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the specified conditions.","926":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which is the \"paper.paperId\" of the papers that have at least 5 citations. 2. Condition Structure: Use a WHERE clause to filter papers where \"paper.numCitedBy\" is greater than or equal to 5. 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving papers that meet the specified citation condition.","927":"1. Sequential Structure: Start with the SELECT clause to retrieve the text of tips. Use the FROM clause to specify the tip table. 2. Condition Structure: Apply a WHERE clause to filter tips based on the user who has written a review in the year 2012. 3. Join Structure: Use a JOIN between the tip and review tables on the user_id to connect tips to users who have written reviews. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","928":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"business.business_id\" and \"business.name.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Los Angeles\" and serving the category \"Seafood.\" 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant businesses based on the specified conditions.","929":"1. Sequential Structure: Start with the SELECT clause to retrieve the author ID and the count of papers published. Use the FROM clause to specify the writes table, which links authors to papers. 2. Join Structure: Join the writes table with the paper table on paperId to access the year and venue information. Additionally, join with the venue table to filter for the specific venue 'CVPR'. 3. Condition Structure: Use a WHERE clause to filter for papers published in the year 2007 and at the venue 'CVPR'. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and apply COUNT to count the number of papers published by each author. Finally, use ORDER BY to sort the results in descending order of the count and limit the results to the top author.","930":"1. Sequential Structure: Begin with the SELECT clause to retrieve the distinct titles of papers. Use the FROM clause to specify the `paper` table. Additionally, use the `DISTINCT` keyword to avoid duplicate results, as multiple keyphrases or authors could be associated with the same paper.\n2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the keyphrase 'syntactic parsing' and exclude those written by 'Chris Dyer'. This requires filtering based on the `keyphraseName` and excluding papers where the author is 'Chris Dyer'.\n3. Join Structure: Use JOINs to connect the `paper`, `paperKeyphrase`, `keyphrase`, `writes`, and `author` tables. The `paperKeyphrase` table is needed to link papers to keyphrases, and the `keyphrase` table is required to filter based on the keyphrase 'syntactic parsing'. The `writes` and `author` tables are necessary to exclude papers written by 'Chris Dyer'.\n4. Aggregation Structure: No aggregation is needed, as we are retrieving specific records without any summary functions.","931":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and title of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'semantic parsing'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use GROUP BY to group the results by year to get a list of papers for each year.","932":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the year. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were published before the year 2010. 3. Join Structure: Use JOIN clauses to connect the paper table with the paperKeyphrase table to access keyphrases related to the papers, and then join with the keyphrase table to filter for keyphrases related to \"character recognition\". 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","933":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"business.name\" and \"business.full_address.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Los Angeles\" and belonging to the \"Seafood\" category. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the relevant businesses that meet the criteria.","934":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers, the year, and the venue name. Use the FROM clause to specify the paper table and join it with the venue and paperDataset tables to filter based on the specified conditions. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2014 and at the venue 'eccv'. Additionally, filter for papers that utilize the 'ImageNet' dataset. 3. Join Structure: Use INNER JOINs between the paper, venue, and paperDataset tables based on their respective keys to connect papers with their venues and datasets. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","935":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the `authorName`. Use the `FROM` clause to specify the `writes` table, which links authors to their papers. Then, join the `author` table to retrieve the `authorName`. \n2. Join Structure: Join the `writes` table with the `paper` table on `paperId` to get the year of publication. Then, join with the `paperKeyphrase` table to link papers to their keyphrases, and finally join with the `keyphrase` table to filter by the specific topic. Ensure to join the `author` table to retrieve the `authorName`.\n3. Condition Structure: Use the `WHERE` clause to filter for papers published in the year 2016 and that are associated with the keyphrase 'Bacterial Wilt'. Ensure that the filtering is applied after all necessary joins are completed.\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation. However, use `DISTINCT` to avoid duplicate author entries.","936":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table. We will need to join with the paperKeyphrase and cite tables to relate keyphrases to their citations. 2. Join Structure: Use JOINs to connect the keyphrase table with the paperKeyphrase table on paperId, and then join the cite table on citedPaperId to count the citations for each keyphrase. 3. Aggregation Structure: Use GROUP BY to group the results by keyphraseId, allowing us to count the number of citations for each keyphrase. We will use the COUNT function to aggregate the citation counts. 4. Condition Structure: Apply an ORDER BY clause to sort the results by the count of citations in descending order, so we can identify the keyphrases with the most citations.","937":"1. Sequential Structure: Start with the SELECT clause to retrieve the author ID and the count of papers written by each author. Use the FROM clause to specify the author table and JOIN it with the writes and paper tables to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers published in the venue named 'chi'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the author ID and paper ID to connect authors with their respective papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers per author and GROUP BY the author ID to summarize the results. Finally, use ORDER BY to sort the results in descending order and limit the output to the top result to find the most prolific author.","938":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and title of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"deep learning\". 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the newest papers first.","939":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"tip.text\" for the specified business. 2. Condition Structure: Use a WHERE clause to filter for tips related to \"Cafe Zinho\" in the state of \"Pennsylvania\" and for the year 2010. 3. Join Structure: Use a JOIN between the \"tip\" and \"business\" tables based on \"tip.business_id\" and \"business.business_id\" to link tips to their respective businesses. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the tips that meet the specified conditions.","940":"1. Sequential Structure: Begin with the SELECT clause to count the number of distinct papers that meet the criteria. The query should focus on papers that have been cited more than 2 times, which requires counting the number of distinct citations from the `cite` table. The FROM clause will include the `paper` and `cite` tables, and the `venue` table will be joined to filter for ACL papers.\n2. Condition Structure: Use a WHERE clause to filter for papers where the venue is \"ACL.\" Additionally, use a `GROUP BY` clause to group the results by `citedPaperId` and a `HAVING` clause to ensure that only papers with more than 2 distinct citations are counted.\n3. Join Structure: A JOIN is necessary between the `paper` and `cite` tables to count the number of citations for each paper. Another JOIN is required between the `paper` and `venue` tables to filter for ACL papers based on the venue name.\n4. Aggregation Structure: Use the `COUNT` function to count the number of distinct citations for each paper. The `GROUP BY` clause will group the results by `citedPaperId`, and the `HAVING` clause will filter for papers with more than 2 citations.","941":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal names. Use the FROM clause to specify the journal table. 2. Join Structure: Join the journal table with the paper table on the journalId to relate journals to their papers. Additionally, join the paper table with the paperKeyphrase table on paperId to connect papers to their keyphrases. 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'Temporal Data', ensuring we only get journals related to this specific keyphrase. 4. Aggregation Structure: Not required, as we are simply retrieving journal names without needing to aggregate data.","942":"1. Sequential Structure: Start with the SELECT clause to retrieve the dataset names. Use the FROM clause to specify the dataset table. We will need to join the dataset table with the paperDataset table to link datasets to papers, and then join with the writes and paper tables to filter by the author. 2. Join Structure: Use JOINs to connect the dataset table with the paperDataset table on datasetId, then join the paperDataset table with the paper table on paperId, and finally join the paper table with the writes table to connect papers to authors. 3. Condition Structure: Use a WHERE clause to filter for the author named 'jitendra malik' by checking the authorName in the author table. 4. Aggregation Structure: Not needed, as we are simply retrieving dataset names without any aggregation.","943":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.year\" and the count of papers for each year. 2. Condition Structure: No specific filtering condition is needed, as we want to count all NIPS papers regardless of any other criteria. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to ensure we are only counting papers from the NIPS venue. 4. Aggregation Structure: Use COUNT to aggregate the number of papers per year and GROUP BY \"paper.year\" to group the results by year. Finally, use ORDER BY in descending order to find the year with the most papers and LIMIT 1 to get the top result.","944":"1. Sequential Structure: Start with the SELECT clause to retrieve the citations related to Daniel Jurafsky. We will need to select the citing paper IDs. The FROM clause will specify the writes table to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'Daniel Jurafsky' to ensure we are only looking at papers written by him. 3. Join Structure: Use JOIN clauses to connect the writes table with the cite table based on the paper IDs, allowing us to find citations for the papers authored by Daniel Jurafsky. 4. Aggregation Structure: Not needed, as we are simply retrieving the citing paper IDs without any aggregation.","945":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table. We will need to join with the paperKeyphrase table to link keyphrases to papers, and then join with the paper table to filter for papers authored by Dan Klein in the EMNLP venue. 2. Condition Structure: Use a WHERE clause to filter for papers that are associated with the venue 'emnlp' and authored by 'dan klein'. 3. Join Structure: Use INNER JOINs between the keyphrase, paperKeyphrase, and paper tables to connect keyphrases to the relevant papers. Additionally, join with the writes table to link papers to their authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","946":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs from the paper table. Use the FROM clause to specify the paper table and JOIN it with the paperDataset table to link papers with their datasets. 2. Condition Structure: Apply a WHERE clause to filter for datasets that have the name 'WebKB'. 3. Join Structure: Use an INNER JOIN between the paper and paperDataset tables based on paperId to connect papers with the datasets they used. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","947":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.state\" where the business name is \"Whataburger\". 2. Condition Structure: Use a WHERE clause to filter for businesses with the name \"Whataburger\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the states where \"Whataburger\" exists.","948":"1. Sequential Structure: Start with the SELECT clause to retrieve the year of publication. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Ye Cao' to focus on their publications. 3. Join Structure: Use an INNER JOIN between the writes and paper tables based on paperId to connect the authors with their published papers. 4. Aggregation Structure: Use GROUP BY to group the results by year and COUNT to determine the number of papers published each year. Finally, use ORDER BY to sort the results in descending order and limit the output to the top result to find the year with the most publications.","949":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name. Use the FROM clause to specify the venue table and join it with the paper table to link papers to their respective venues. 2. Condition Structure: Apply a WHERE clause to filter for papers presented in the year 2015 and at the venue named 'pldi'. 3. Join Structure: Use an INNER JOIN between the venue and paper tables based on the venueId to connect the papers with their venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","950":"1. Sequential Structure: Start with the SELECT clause to retrieve the total likes from the tip table. Use the FROM clause to specify the tip table and join it with the business table to filter tips related to \"Cafe Zinho\". 2. Condition Structure: Use the WHERE clause to filter for tips associated with the business name \"Cafe Zinho\". 3. Join Structure: Use an INNER JOIN between the tip and business tables based on the business_id to connect tips with their respective businesses. 4. Aggregation Structure: Use the SUM function to calculate the total likes from the tips related to \"Cafe Zinho\".","951":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and count of papers published. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for papers authored by 'jamie callan'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Use GROUP BY to group the results by year and COUNT to count the number of papers published each year by the specified author.","952":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers and the author's name. We will also need to include the author's ID in the SELECT clause to ensure proper identification. The query will count the number of papers published in the ACL venue.\n2. Condition Structure: We need to filter the papers to only include those published in the ACL venue. This will be done using a WHERE clause that checks the venue name.\n3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table to associate each paper with its corresponding author. Additionally, we will join the \"venue\" table to filter for ACL papers. Finally, we will join the \"author\" table to retrieve the author's name.\n4. Aggregation Structure: Use COUNT to aggregate the number of papers for each author and GROUP BY the author's ID and name to get the count per author.","953":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since the question is about semantic parsing datasets. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause, as we are interested in all datasets related to the papers. 3. Join Structure: Use JOIN clauses to connect the \"dataset\" table with the \"paperDataset\" table based on \"datasetId\" to link each dataset with its corresponding papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the datasets.","954":"1. Sequential Structure: Start with the SELECT clause to retrieve the business details. Use the FROM clause to specify the business table. 2. Join Structure: Join the business table with the review table on the business_id to link businesses with their ratings. Additionally, join the review table with the user table on user_id to filter by the specific user. 3. Condition Structure: Use the WHERE clause to filter for reviews where the rating is 5 and the user's name is 'Niloofar'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","955":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the restaurant names and their ratings. 2. Condition Structure: Use a WHERE clause to filter for restaurants with a rating greater than 3.5. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and ratings of restaurants that meet the specified rating condition.","956":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID, title, number of citations, and venue name. Use the FROM clause to specify the paper table and join it with the venue table to get the venue details. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to retrieve all top papers based on the number of citations. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: To identify the top papers, we will need to order the results by the number of citations in descending order.","957":"1. Sequential Structure: Start with the SELECT clause to specify the total count of reviews. 2. Condition Structure: Use a WHERE clause to filter for reviews that were written in March. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"review\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of reviews that meet the specified condition.","958":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically the \"paper.title\" and \"venue.venueName\" to identify the papers and their venues. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2014 and specifically in the venue \"ACL.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers from the specified venue in the specified year.","959":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and in the venue named 'pldi.' 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","960":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the writes table, which connects authors to their papers. 2. Join Structure: Use JOINs to connect the writes table with the paper table to get the title of the paper and with the venue table to filter by the venue name 'chi'. 3. Condition Structure: Apply a WHERE clause to filter for the author named 'Richard Ladner' and the venue named 'chi'. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","961":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"review.rating\" and \"review.text\" for the reviews, along with \"business.name\" for the restaurant name. Additionally, we need to join the `category` table to filter for businesses categorized as 'Italian'.\n2. Condition Structure: Apply a WHERE clause to filter for reviews written by \"Michelle\" (from the `user` table) and for businesses that are categorized as 'Italian' (from the `category` table).\n3. Join Structure: Use JOIN clauses to connect the `user` table with the `review` table based on `user.user_id` and `review.user_id`, then join the `business` table based on `review.business_id` and `business.business_id` to get the restaurant details. Additionally, join the `category` table based on `business.business_id` and `category.business_id` to filter for Italian restaurants.\n4. Aggregation Structure: No aggregation is needed here, as we are simply listing the reviews.","962":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers and the year. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the writes table on paperId to link papers to their authors. Additionally, join with the author table to filter by the specific author \"Jamie Callan\". 3. Condition Structure: Use a WHERE clause to filter for the author name \"Jamie Callan\". 4. Aggregation Structure: Use GROUP BY to group the results by year and COUNT to count the number of papers for each year.","963":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is \"user.uid\" for the user IDs of users named Michelle. 2. Condition Structure: Use a WHERE clause to filter for users whose name is 'Michelle'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"user\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving user IDs that meet the specified name condition.","964":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal names, specifically \"journal.journalName.\" 2. Condition Structure: Apply a WHERE clause to filter for the author named \"Linda Shapiro.\" 3. Join Structure: Use JOIN clauses to connect the \"author,\" \"writes,\" and \"paper\" tables based on their relationships, ensuring we can access the journal information associated with the papers written by the specified author. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be used to ensure that each journal name is listed only once.","965":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since we want to know the names of the datasets used for semantic parsing. 2. Condition Structure: We need to filter the datasets based on the context of \"semantic parsing.\" However, the schema does not provide a direct link to filter datasets specifically for semantic parsing, so we will assume we want all datasets linked to papers that might relate to semantic parsing. 3. Join Structure: Use a JOIN between the \"dataset\" and \"paperDataset\" tables based on \"dataset.datasetId\" to connect datasets with their corresponding papers. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to select distinct dataset names to avoid duplicates.","966":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.year\" and any other relevant fields such as the title of the paper. 2. Condition Structure: Apply a WHERE clause to filter for publications authored by \"jamie callan.\" This will involve checking the \"author.authorName\" field. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId\" to get the publication details. 4. Aggregation Structure: Since we want to list publications by year, we will group the results by \"paper.year\" and order them accordingly.","967":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the year and month from the \"tip\" table, along with the count of tips. 2. Condition Structure: No specific filtering condition is required since we want to count tips for each month. 3. Grouping Structure: Use GROUP BY on \"tip.year\" and \"tip.month\" to aggregate the results by each month of each year. 4. Aggregation Structure: Use COUNT to calculate the number of tips for each month. 5. Join Structure: No JOIN is required since all necessary information is contained within the \"tip\" table.","968":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.paperId\" and \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that used the \"WebKB\" dataset. 3. Join Structure: Use a JOIN between the \"paper\" and \"paperDataset\" tables based on \"paperId\" to link each paper with its corresponding dataset. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the papers that meet the condition.","969":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the journal information, specifically filtering for the venue 'NIPS'. 2. Condition Structure: Use a WHERE clause to filter for papers published in the venue 'NIPS'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the relevant foreign keys to connect authors to their published papers and the corresponding journal. 4. Aggregation Structure: Not required, as we are simply retrieving the names of authors without any aggregation.","970":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"paperDataset.datasetId\" since we are interested in datasets related to papers about semantic parsing. 2. Condition Structure: Apply a WHERE clause to filter for papers that are specifically about \"semantic parsing.\" This will likely involve checking the title of the paper for the keyword \"semantic parsing.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperDataset\" tables based on \"paper.paperId\" and \"paperDataset.paperId\" to link each paper with its corresponding datasets. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the titles and dataset IDs without needing to summarize the data.","971":"1. Sequential Structure: Begin with the SELECT clause to retrieve the total number of check-ins. Use the `SUM(checkin.count)` function to aggregate the total number of check-ins, as we are interested in the sum of check-ins rather than the count of rows.\n2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Los Angeles\" and check-ins that occurred on \"Friday.\" Additionally, filter for businesses that are categorized as both \"Moroccan\" and \"restaurant\" by using the `category_name` field from the `category` table.\n3. Join Structure: Use a JOIN between the `business` and `checkin` tables based on `business.business_id` and `checkin.business_id` to link check-ins to the corresponding businesses. Also, include a JOIN with the `category` table to filter for businesses that are categorized as \"Moroccan\" and \"restaurant.\"\n4. Aggregation Structure: Use the `SUM(checkin.count)` function to aggregate the total number of check-ins for the specified conditions.","972":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Additionally, join with the keyphrase table to access the keyphrase names. 3. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase 'WebKB'. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified condition without any aggregation.","973":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year.\" 2. Condition Structure: Use a WHERE clause to filter for papers that are from the year 2015 and the venue name 'pldi.' 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and years of the papers.","974":"1. Sequential Structure: Start with the SELECT clause to retrieve the datasets used in papers written by Jitendra Malik. The relevant field is \"paperDataset.datasetId.\" 2. Condition Structure: Apply a WHERE clause to filter for papers written by the author with the name \"Jitendra Malik.\" This will involve a condition on the \"author.authorName\" field. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paperDataset\" table based on \"paperId\" to link authors to their respective papers and datasets. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the dataset IDs without any need for summarization.","975":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. Then, join the keyphrase table to get the keyphrase names. Finally, apply a WHERE clause to filter for papers published in the year 2015 at NIPS. 2. Condition Structure: Use the WHERE clause to filter for papers from the year 2015 and specifically for the venue associated with NIPS. 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, and keyphrase tables based on their respective IDs to connect papers with their keyphrases. 4. Aggregation Structure: Use GROUP BY to group the results by keyphrase name and apply COUNT to determine the frequency of each keyphrase. Use ORDER BY to sort the results by the count in descending order to identify the most common topics.","976":"1. Sequential Structure: Start with the SELECT clause to retrieve the papers written by the author. Use the FROM clause to specify the writes table, which connects papers to authors. 2. Condition Structure: Apply a WHERE clause to filter for papers written by 'Su-In Lee' and ensure the year is before 2012. 3. Join Structure: Use an INNER JOIN between the writes table and the paper table on paperId to get the details of the papers written by the specified author. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","977":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to filter papers written by the author Ohad Shamir, and to ensure we can access the author information. 3. Condition Structure: Use a WHERE clause to filter for papers written by Ohad Shamir. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to get the highest cited paper.","978":"1. Sequential Structure: Start with the SELECT clause to specify the \"paperId\" of the papers published in the last year. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is equal to the current year (assuming the current year is 2023). 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the paper IDs that meet the specified condition.","979":"1. Sequential Structure: Begin with the `SELECT` clause to count the number of distinct papers. Use the `FROM` clause to specify the `paper` table as the main source of data. Additionally, join the `paperKeyphrase` and `keyphrase` tables to filter papers based on the keyphrase \"convolutional neural networks.\"\n2. Condition Structure: Apply a `WHERE` clause to filter papers that were written in the last year. The year condition should be dynamically calculated (e.g., `year = 2022` if the current year is 2023). Also, filter papers based on the keyphrase \"convolutional neural networks\" by checking the `keyphraseName` column in the `keyphrase` table.\n3. Join Structure: A join is required between the `paper`, `paperKeyphrase`, and `keyphrase` tables. The `paperKeyphrase` table links papers to keyphrases, and the `keyphrase` table contains the actual keyphrase names. The join should be based on the `paperId` and `keyphraseId` columns.\n4. Aggregation Structure: Use the `COUNT(DISTINCT paper.paperId)` function to count the number of distinct papers that meet the specified conditions, ensuring that duplicate papers are not counted multiple times.","980":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the year. Use the FROM clause to specify the paper table and join it with the paperDataset and dataset tables to link papers with their datasets. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2014 and that are associated with the dataset named 'ImageNet'. 3. Join Structure: Use INNER JOINs between the paper, paperDataset, and dataset tables based on their respective IDs to connect papers with the datasets they use. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","981":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID of the highest cited paper. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author named 'ohad shamir'. 3. Join Structure: Use an INNER JOIN between the writes and paper tables based on paperId to connect the author with their respective papers. 4. Aggregation Structure: Use the ORDER BY clause to sort the papers by the number of citations in descending order and limit the result to the top entry to find the highest cited paper.","982":"1. Sequential Structure: Begin with the SELECT clause to retrieve the `authorId` and the count of papers. Use the `COUNT` function to count the number of papers for each author. The `authorId` must be included in the SELECT clause to group the results by author.\n2. Condition Structure: Use a WHERE clause to filter papers that were published in the \"ACL\" venue. This requires joining the `venue` table to access the venue name and applying the condition `venue.venueName = 'ACL'`.\n3. Join Structure: Join the `paper`, `venue`, `writes`, and `author` tables. The `paper` table is joined with the `venue` table using the foreign key `paper.venueId = venue.venueId`. The `paper` table is also joined with the `writes` table using `paper.paperId = writes.paperId`, and the `writes` table is joined with the `author` table using `writes.authorId = author.authorId`.\n4. Aggregation Structure: Use the `COUNT` function to count the number of papers for each author. Group the results by `author.authorId` to ensure that the count is calculated per author.","983":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers with the most citations. 2. Condition Structure: No specific filtering condition is needed since we are looking for papers with the highest number of citations. 3. Join Structure: No JOIN is required, as all necessary information is available in the \"paper\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCiting\" to rank papers by the number of citations and apply LIMIT 1 to select the paper with the highest number of citations.","984":"1. Sequential Structure: Start with the SELECT clause to specify the count of restaurants in the Hazelwood district of Dallas. 2. Condition Structure: Use a WHERE clause to filter for businesses located in the \"Hazelwood\" district and the city \"Dallas\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of restaurants that meet the specified conditions.","985":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of authors. Use the FROM clause to specify the author table. 2. Join Structure: Use an INNER JOIN between the author table and the writes table on authorId to link authors with their papers. Additionally, join the writes table with the author table again to find co-authors of papers written by 'Noah A Smith'. 3. Condition Structure: Use a WHERE clause to filter for papers written by 'Noah A Smith' by checking the authorName. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","986":"1. Sequential Structure: Start with the SELECT clause to retrieve the required fields, specifically \"neighbourhood.neighbourhood_name\" and \"business.name\" to identify the neighbourhoods and the Italian restaurants. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Madison\" and belonging to the \"Italian\" category. 3. Join Structure: Use JOIN clauses to connect the \"business\" table with the \"neighbourhood\" and \"category\" tables based on the shared \"business_id\" to ensure we are only looking at relevant businesses. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are distinct to avoid duplicates.","987":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"business\" table since we want to list all businesses. 2. Condition Structure: Use a WHERE clause to filter for businesses with a rating of 3.5. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving businesses that meet the specified rating condition.","988":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names and the count of their occurrences. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. Additionally, join with the venue table to filter for the specific venue 'NIPS' and the year 2015. Finally, use GROUP BY to aggregate the results by keyphrase and ORDER BY to rank them by frequency.\n2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2015 and presented at the venue 'NIPS'. Also, ensure that the keyphrases are distinct to avoid duplicates.\n3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, venue, and keyphrase tables based on their respective keys to connect papers with their keyphrases and the venue information.\n4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with each keyphrase. Group the results by keyphrase and order them by the count in descending order to identify the most frequent (hot) topics.","989":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper ID and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to link papers to their authors based on the author ID. 3. Condition Structure: Apply a WHERE clause to filter for papers written by the author 'ohad shamir'. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to get the most cited paper.","990":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names and the count of papers they published. Use the FROM clause to specify the `writes` table, which connects authors to their papers. We will also need to join the `paper` table to filter by the venue name \"chi\" and the `author` table to retrieve the author names.\n2. Join Structure: Use JOINs to connect the `writes` table with the `paper` table on `paperId`, and then join the `paper` table with the `venue` table on `venueId` to filter for papers published at the venue \"chi\". Additionally, join the `author` table on `authorId` to retrieve the `authorName`.\n3. Aggregation Structure: Use `GROUP BY` to group the results by `authorId` and count the number of unique papers published by each author at \"chi\". Use `COUNT(DISTINCT paper.paperId)` to ensure that only unique papers are counted.\n4. Condition Structure: Use `ORDER BY` to sort the results by the count of papers in descending order and limit the results to the top author.","991":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table. We will also need to join the writes table to link authors with their papers. 2. Condition Structure: We need to filter the results to find coauthors of Noah A Smith. This will involve a WHERE clause to identify the authorId of Noah A Smith and ensure we are looking for other authors who have written papers with him. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to connect authors with their respective papers. We will also need to join the writes table again to find other authors who have coauthored the same papers. 4. Aggregation Structure: Not required, as we are simply retrieving names of coauthors without needing to aggregate data.","992":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the year of publication. Use the FROM clause to specify the paper table and join it with the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the author named 'Michael Stonebraker' and the title of the paper 'GIS Database'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the paper details with the authors who wrote them. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","993":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers published. Use the FROM clause to specify the writes table, which connects authors to their published papers. 2. Condition Structure: Use the WHERE clause to filter for the author named 'Michael I. Jordan' and the year 2016. 3. Join Structure: Use an INNER JOIN between the writes and paper tables based on paperId to link the authors with their respective papers. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers published by the specified author in the given year.","994":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal name and paper title. Use the FROM clause to specify the paper table and JOIN it with the journal and keyphrase tables to link papers to their journals and keyphrases. 2. Condition Structure: Use the WHERE clause to filter for keyphrases that match 'sensor fusion', ensuring we only get papers related to this specific topic. 3. Join Structure: Use INNER JOINs between the paper, journal, and keyphrase tables based on their respective foreign keys to connect papers with their journals and keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","995":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct user IDs or names of users who have written tips. 2. Condition Structure: Use a WHERE clause to filter for tips written in the year 2015 and for the business named \"Barrio Cafe.\" 3. Join Structure: Use a JOIN between the \"tip\" and \"business\" tables based on \"business_id\" to link tips to the corresponding business. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT is applied to ensure unique user names or IDs are returned.","996":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct authors who published papers in 2015. We will select \"author.authorName\" from the \"author\" table.\n2. Condition Structure: Use a WHERE clause to filter for records where \"paper.year\" is 2015.\n3. Join Structure: Use a JOIN between the \"writes\" and \"paper\" tables based on \"writes.paperId\" and \"paper.paperId\" to associate each author with their published papers. Additionally, join the \"author\" table with the \"writes\" table using \"writes.authorId = author.authorId\" to retrieve the author names.\n4. Aggregation Structure: Use DISTINCT to ensure that each author's name is returned only once, even if they published multiple papers in 2015.","997":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of businesses. Use the FROM clause to specify the business table and JOIN it with the category table to filter for restaurants. 2. Condition Structure: Use the WHERE clause to filter for categories that match 'restaurant'. 3. Join Structure: Use an INNER JOIN between the business and category tables based on the business_id to relate businesses with their categories. 4. Aggregation Structure: Use the COUNT function to aggregate the number of businesses that fall under the 'restaurant' category.","998":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields. We need to get the conference names, which are associated with the papers published in 2013. Therefore, we will select \"venue.venueName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2013. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue (conference). 4. Aggregation Structure: No aggregation is needed here, but we will use DISTINCT to ensure that we only get unique conference names.","999":"1. Sequential Structure: Start with the SELECT clause to retrieve the author details. Use the FROM clause to specify the author table. 2. Aggregation Structure: Use GROUP BY to group records by authorId to count the number of papers each author has written. 3. Condition Structure: Apply a HAVING clause to filter authors who have written at least 5 papers. 4. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to relate authors to their papers.","1000":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which is the \"paper.paperId\" of the papers that have more than 10 citations. 2. Condition Structure: Use a WHERE clause to filter papers where \"paper.numCitedBy\" is greater than 10. 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving papers that meet the specified citation condition.","1001":"1. Sequential Structure: Start with the SELECT clause to specify the count of users whose name is 'Michelle'. 2. Condition Structure: Use a WHERE clause to filter for users with the name 'Michelle'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"user\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of users that meet the specified condition.","1002":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the count of citations. Use the FROM clause to specify the `paper` table and join it with the `venue` and `cite` tables to filter by the venue name 'CVPR' and calculate the number of citations.\n2. Condition Structure: Apply a WHERE clause to filter papers that were published in the current year and are associated with the 'CVPR' venue.\n3. Join Structure: Use an INNER JOIN between the `paper` and `venue` tables based on `venueId` to connect papers with their respective venues. Additionally, join the `cite` table to count the number of times each paper has been cited.\n4. Aggregation Structure: Use `COUNT` to aggregate the number of citations for each paper. Use `GROUP BY` to group the results by paper title and `ORDER BY` to sort the results by the number of citations in descending order. Limit the results to the top entry to find the most popular paper.","1003":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of coauthors. Use the FROM clause to specify the author table. We will need to join with the writes table to find papers authored by \"Noah A Smith\" and then join again to find other authors of those papers. 2. Condition Structure: Use a WHERE clause to filter for the author name \"Noah A Smith\" to identify the papers he has authored. 3. Join Structure: Use JOINs between the author and writes tables based on authorId and paperId to connect authors with their papers. Then, join the writes table again to find other authors of the same papers. 4. Aggregation Structure: Use DISTINCT to ensure that we only get unique coauthor names and exclude \"Noah A Smith\" from the results.","1004":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" that we are interested in. 2. Condition Structure: We need to filter the results to only include papers written by \"Jitendra Malik.\" This will be done using a WHERE clause that checks the author's name. 3. Join Structure: We will use JOIN clauses to connect the \"dataset,\" \"writes,\" \"paper,\" and \"author\" tables. The \"writes\" table will link authors to their papers, and the \"paper\" table will be used to connect to the \"dataset\" through the \"paperDataset\" table. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the dataset names associated with the papers written by the specified author.","1005":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of authors. Use the FROM clause to specify the author table. 2. Join Structure: Use an INNER JOIN between the writes table and the author table based on authorId to link authors with the papers they have written. 3. Condition Structure: Apply a WHERE clause to filter for authors who have written papers with 'Noah A Smith'. This requires a subquery to find the paper IDs associated with 'Noah A Smith' and then filter the authors based on those paper IDs. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1006":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Join Structure: Join the writes table with the paper table to access the venue information for each paper. Additionally, join the paper table with the venue table to filter based on the venue name. 3. Condition Structure: Use a WHERE clause to filter for papers written by 'Samuel Madden' and exclude those that are published in the 'PVLDB' venue. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1007":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase associated with the papers written by Brian DeRenzi. Use the FROM clause to specify the necessary tables, and then apply an ORDER BY clause to sort the results based on the number of citations in descending order. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Brian DeRenzi' to ensure we are only looking at papers written by this specific author. 3. Join Structure: Use JOINs to connect the author table with the writes table to get the paper IDs, and then join with the paperKeyphrase table to get the keyphrases associated with those papers. Finally, join with the paper table to access the citation count. 4. Aggregation Structure: Use GROUP BY to group the results by keyphrase and apply an aggregate function to count the citations for each keyphrase. Use the ORDER BY clause to sort by the count of citations and limit the results to the top one to find the keyphrase with the most citations.","1008":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"neighbourhood.neighbourhood_name\" for the specified restaurant. 2. Condition Structure: Apply a WHERE clause to filter for the restaurant with the name \"Flat Top Grill.\" 3. Join Structure: Use a JOIN between the \"business\" and \"neighbourhood\" tables based on \"business.business_id\" to link the restaurant with its neighbourhood. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the neighbourhood name for the specified restaurant.","1009":"1. Sequential Structure: Start with the SELECT clause to retrieve the dataset IDs. Use the FROM clause to specify the paperDataset table, which links papers to datasets. 2. Join Structure: Join the paperDataset table with the paper table on the paperId to relate datasets to their respective papers. 3. Aggregation Structure: Use GROUP BY to group the results by datasetId, allowing us to count how many times each dataset is used across papers. 4. Condition Structure: Use ORDER BY to sort the results by the count of papers using each dataset in descending order, and limit the results to get the most used datasets.","1010":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the business name and full address of the breweries. 2. Condition Structure: Use a WHERE clause to filter for businesses located in \"Los Angeles\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and addresses of the breweries in the specified city.","1011":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the titles of the papers. Finally, join the paperKeyphrase table to filter papers based on keyphrases related to \"ImageNet\". 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"ImageNet\". This ensures that we only consider papers that are associated with this specific dataset. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective foreign keys to connect authors to their papers and the keyphrases associated with those papers. 4. Aggregation Structure: Use GROUP BY to group the results by author, and apply an aggregate function like COUNT to determine the number of papers each author has written related to \"ImageNet\". Use ORDER BY to sort the results in descending order based on the count of papers, allowing us to identify the top authors.","1012":"1. Sequential Structure: Start with the SELECT clause to count the number of papers that match the criteria. 2. Condition Structure: Use a WHERE clause to filter for papers with the title containing 'convolutional neural networks' and published in the year 2022. 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of papers that meet the specified conditions.","1013":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of tips. Use the FROM clause to specify the tip table. 2. Condition Structure: Apply a WHERE clause to filter tips written by Michelle in the year 2010. This will involve checking both the year and the user name. 3. Join Structure: Use a JOIN between the tip and user tables based on the user_id to link tips to the corresponding user. 4. Aggregation Structure: Use the COUNT function to aggregate the number of tips that meet the specified conditions.","1014":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers published in the year 2015 and in the journal 'nature communications'. 3. Join Structure: Use an INNER JOIN between the paper and journal tables based on journalId to connect papers with their respective journals. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1015":"1. Sequential Structure: Start with the SELECT clause to retrieve the title, year, number of citations, and number of times cited by other papers from the paper table. 2. Condition Structure: Use the WHERE clause to filter for papers that are associated with the keyphrase 'WebKB'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on the paperId to link papers with their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1016":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were published in the year 2015 and are associated with the journal \"Nature Communications\". 3. Join Structure: Use a JOIN clause to connect the paper table with the journal table based on the journalId to access the journal name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1017":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the writes table, which links papers to authors. 2. Condition Structure: Use a WHERE clause to filter for papers that were written by Ameet Soni and Ras Bodik. This will involve checking for the author IDs associated with these names. 3. Join Structure: Use a JOIN between the writes table and the author table to get the names of all authors who contributed to the same papers as Ameet Soni and Ras Bodik. 4. Aggregation Structure: Use GROUP BY to group the results by paper ID to ensure we are looking at the same papers, and then filter out Ameet Soni and Ras Bodik from the results to find other co-authors.","1018":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that won the \"PLDI Best Paper Award\" in the year 2015. 2. Condition Structure: Use a WHERE clause to filter for papers that were published in the year 2015. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers that meet the specified year condition.","1019":"1. Sequential Structure: Start with the SELECT clause to retrieve the `review_count` directly from the `business` table, as this field already contains the pre-aggregated number of reviews for each business.\n2. Condition Structure: Use a WHERE clause to filter for the business with the name 'Acacia Cafe'. To ensure an exact match, apply the `TRIM` and `LOWER` functions to handle potential formatting issues such as leading\/trailing spaces or case sensitivity.\n3. Join Structure: No JOIN is required, as all necessary information (i.e., `review_count` and `name`) is available in the `business` table.\n4. Aggregation Structure: No aggregation is needed, as the `review_count` is already pre-aggregated in the `business` table.","1020":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers published during the specified conference. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and at the venue named \"pldi.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1021":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper, the number of citations, and any other relevant fields such as the year and venue. 2. Condition Structure: Use a WHERE clause to filter for papers that contain \"parsing\" in their title. 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCitedBy\" to rank papers by the number of citations and apply LIMIT 1 to select the paper with the most citations.","1022":"1. Sequential Structure: Start with the SELECT clause to specify the \"business.full_address\" of Walmart locations in Los Angeles. 2. Condition Structure: Use a WHERE clause to filter for businesses that are located in \"Los Angeles\" and have the name \"Walmart\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving addresses that meet the specified conditions.","1023":"1. Sequential Structure: Start with the SELECT clause to count the number of papers published, which will use the COUNT function on the \"paper.paperId\" field. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and specifically in the ACL venue. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1024":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the paperKeyphrase table, which links papers to their keyphrases. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and specifically at the NIPS venue. 3. Join Structure: Use JOIN clauses to connect the paperKeyphrase table with the paper table on paperId to access the title and year, and then join with the keyphrase table to get the keyphrase names. 4. Aggregation Structure: Use GROUP BY to group the results by keyphrase name and COUNT to determine the popularity of each topic, and then use ORDER BY to sort the results by the count in descending order to identify the most popular topics.","1025":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were accepted in the year 2015 and at the venue 'Nature Communications'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1026":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year.\" 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2015 and in the venue \"pldi.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, but we will filter the results based on the specified conditions.","1027":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the venue table to link papers to their respective venues. 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2015 and specifically in the venue 'Nature Communications'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on venueId to connect papers with their venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1028":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, as it connects authors to their published papers. 2. Condition Structure: Use a WHERE clause to filter for the author named 'michael i. jordan' and the year 2016. 3. Join Structure: Use an INNER JOIN between the writes table and the paper table on paperId to link the authors to their respective papers. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers published by the specified author in the given year.","1029":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal name. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers with their authors. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Donald E Knuth' and to find his last paper based on the year. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the papers with their respective authors. 4. Aggregation Structure: Use ORDER BY to sort the papers by year in descending order and limit the result to the first entry to get the last paper published by the author.","1030":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal names. Use the FROM clause to specify the journal table. 2. Join Structure: Use JOINs to connect the journal table with the paper table on journalId, and then join the paper table with the writes table on paperId to link papers to their authors. Finally, join the writes table with the author table to filter by the specific author. 3. Condition Structure: Use a WHERE clause to filter for the author named 'Takashi Matsumoto'. 4. Aggregation Structure: Not needed, as we are simply retrieving journal names without any aggregation.","1031":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.paperId\" and the number of citations \"paper.numCitedBy\" for the parsing papers. 2. Condition Structure: Since we are looking for the most cited papers, we will need to apply an ORDER BY clause to sort the results based on \"paper.numCitedBy\" in descending order. 3. Join Structure: No JOIN is necessary since we are only interested in the \"paper\" table for this query. 4. Limiting Structure: Use LIMIT to retrieve only the top results, as we want the most cited parsing papers.","1032":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers accepted in the specified venue and year. 2. Condition Structure: Apply a WHERE clause to filter for papers that were accepted in the year 2015 and at the venue named 'pldi.' 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1033":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews. Use the FROM clause to specify the review table, as we want to count the number of reviews for a specific restaurant. 2. Condition Structure: Use the WHERE clause to filter reviews based on the restaurant name, city, and state to ensure we are counting reviews specifically for \"Texas de Brazil\" in Dallas, Texas. 3. Join Structure: Not required, as we can filter directly from the review table using the business_id from the business table to identify the correct restaurant. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews for the specified restaurant.","1034":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of papers. Use the `FROM` clause to specify the `paper` table. The query should focus on the `venue` table, as the user is asking about a specific venue (\"Nature Communications\"), not a journal.\n2. Condition Structure: Apply a `WHERE` clause to filter papers that were published in the last year and are associated with the venue \"Nature Communications\". The year should be dynamically calculated or provided, rather than using an undefined placeholder like `lastyear`.\n3. Join Structure: Use a `JOIN` between the `paper` and `venue` tables based on `venueId` to connect papers with their respective venues. This is necessary to filter papers by the venue name \"Nature Communications\".\n4. Aggregation Structure: Use the `COUNT` function to aggregate the number of papers that meet the specified conditions. The use of `DISTINCT` is not necessary in this case, as there is no indication of potential duplicate records.","1035":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers published in the year 2015 and in the journal \"Nature Communications\". 3. Join Structure: Use an INNER JOIN between the paper and journal tables based on journalId to connect papers with their respective journals. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1036":"1. Sequential Structure: Start with the SELECT clause to count the number of distinct neighbourhoods. Use the FROM clause to specify the neighbourhood table, as we want to count neighbourhoods. 2. Condition Structure: Use a WHERE clause to filter for businesses that have a rating of 5 and are located in Madison. 3. Join Structure: Use an INNER JOIN between the neighbourhood and business tables based on the business_id to relate neighbourhoods to their corresponding businesses. 4. Aggregation Structure: Use COUNT(DISTINCT neighbourhood.id) to count the unique neighbourhoods that meet the specified conditions.","1037":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the ACL papers that have less than 5 citations. 2. Condition Structure: Apply a WHERE clause to filter for papers where \"paper.numCitedBy\" is less than 5. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables to filter for ACL papers, which are typically published in a specific venue associated with ACL. 4. Aggregation Structure: No aggregation is needed here, as we are simply filtering based on the citation count.","1038":"1. Sequential Structure: Start with the SELECT clause to specify the count of Egyptian restaurants in Edinburgh. 2. Condition Structure: Use a WHERE clause to filter for businesses that are categorized as 'Egyptian' and located in 'Edinburgh'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of Egyptian restaurants that meet the specified conditions.","1039":"1. Sequential Structure: Start with the SELECT clause to retrieve the number of citations for the paper titled \"Genetic Identity\". Use the FROM clause to specify the paper table. 2. Condition Structure: Use a WHERE clause to filter for the specific paper by title and the author by name. 3. Join Structure: Use JOINs to connect the paper table with the writes table to find the correct paper authored by Dan Makumbi, and then join with the cite table to count the citations for that paper. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the specified paper.","1040":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that deal with the specified keyphrase. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase \"Semantic Data.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and another JOIN with the \"keyphrase\" table to access the keyphrase names. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only select papers that match the specified keyphrase.","1041":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the venue information. Finally, apply GROUP BY to group the results by author to count the number of papers written by each author. 2. Condition Structure: Use the WHERE clause to filter for papers that are associated with the venue named 'chi'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the relevant foreign keys to connect authors to their papers and the venues. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by each author and apply ORDER BY to sort the results in descending order, limiting the output to the author with the highest count.","1042":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Then, join with the keyphrase table to filter for keyphrases related to \"deep learning\". 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"deep learning\". Additionally, apply a condition to filter for recent papers, which can be defined as those published in the last few years (for example, papers from 2021 onwards). 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1043":"1. Sequential Structure: Start with the SELECT clause to retrieve the average rating from the review table. Use the FROM clause to specify the review table. 2. Condition Structure: Apply a WHERE clause to filter reviews specifically written by the user named 'Michelle'. 3. Join Structure: Use an INNER JOIN between the review and user tables based on the user_id to connect reviews to the corresponding users. 4. Aggregation Structure: Use the AVG function to calculate the average rating from the filtered reviews.","1044":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs of the papers that cite Daniel Jurafsky. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author name 'Daniel Jurafsky' to identify the papers written by him. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors, and then join with the cite table to find which papers cite these papers. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1045":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name and the count of their published papers. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, JOIN the paper table to filter by the specific venue and year. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2007 at the venue 'CVPR'. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the relevant foreign keys to connect authors with their published papers. 4. Aggregation Structure: Use GROUP BY to group the results by author, and apply COUNT to count the number of papers for each author. Finally, use ORDER BY to sort the results in descending order and limit the output to the top author.","1046":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. We will also need to join the venue and writes tables to filter by the specific venue and author. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2016 and in the venue 'ECCV'. Additionally, we will filter for papers written by the author 'Ali Farhadi'. 3. Join Structure: Use JOINs between the paper, venue, and writes tables based on the foreign key relationships to connect papers with their venues and authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1047":"1. Sequential Structure: Start with the SELECT clause to count the number of businesses named \"Target\" in the specified city. 2. Condition Structure: Use a WHERE clause to filter for businesses where the name is \"Target\" and the city is \"Los Angeles\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of \"Target\" businesses in \"Los Angeles\".","1048":"1. Sequential Structure: Start with the SELECT clause to retrieve user IDs from the user table. Use the FROM clause to specify the user table and join it with the review table to access the ratings associated with each user. 2. Aggregation Structure: Use the GROUP BY clause to group the results by user ID, allowing us to calculate the average rating for each user. 3. Condition Structure: Apply a HAVING clause to filter out users whose average review rating is below 3. 4. Join Structure: Use an INNER JOIN between the user and review tables based on the user ID to relate users with their reviews.","1049":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" which represents the conferences related to the keyphrase \"Trophic Cascade.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"keyphrase.keyphraseName\" matches \"Trophic Cascade.\" 3. Join Structure: Use JOINs to connect the \"keyphrase\" table with the \"paperKeyphrase\" table on \"keyphraseId,\" and then join the \"paper\" table on \"paperId\" to link papers with their keyphrases. Finally, join the \"venue\" table on \"venueId\" to get the conference names. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique conference names are returned.","1050":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"author.authorName\" and \"paper.title\" fields, as we want to know the authors and their respective papers related to sensor fusion. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"sensor fusion.\" This will help us identify the relevant papers. 3. Join Structure: Use JOINs to connect the \"author,\" \"paper,\" and \"paperKeyphrase\" tables. The \"paper\" table will be joined with \"paperKeyphrase\" on \"paperId,\" and \"paperKeyphrase\" will be joined with \"keyphrase\" on \"keyphraseId\" to filter by the specific keyphrase. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique author and paper combinations are returned.","1051":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers authored by Richard Ladner. We will select the \"paper.title\" field. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Richard Ladner\" and the venue name \"chi.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId\" and then join the \"paper\" table based on \"paperId.\" Additionally, join the \"venue\" table to filter by the venue name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for summarization.","1052":"1. Sequential Structure: Start with the SELECT clause to specify the count of restaurants in Texas. 2. Condition Structure: Use a WHERE clause to filter for businesses located in the state of Texas. 3. Join Structure: No JOIN is necessary since all required information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of restaurants that meet the specified condition.","1053":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers related to the dataset \"WebKB.\" 2. Condition Structure: Apply a WHERE clause to filter for the dataset name \"WebKB.\" 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperDataset\" table based on \"paperId\" and then join with the \"dataset\" table based on \"datasetId\" to access the dataset name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers.","1054":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of authors. Use the FROM clause to specify the author table. 2. Join Structure: Use an INNER JOIN between the author table and the writes table on authorId to link authors with their papers. 3. Condition Structure: Apply a WHERE clause to filter for the specific author 'Noah A Smith' by matching the authorName in the author table. 4. Aggregation Structure: Not needed, as we are simply retrieving the names of co-authors without any aggregation.","1055":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"year\" and \"title\" of the paper that proposed deep learning. 2. Condition Structure: Use a WHERE clause to filter for papers with the title containing \"deep learning\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the year and title of the specific paper.","1056":"1. Sequential Structure: Start with the SELECT clause to specify the count of distinct cities where \"Panda Express\" is located. 2. Condition Structure: Use a WHERE clause to filter for businesses with the name \"Panda Express\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT(DISTINCT business.city) to count the unique cities that have \"Panda Express\".","1057":"1. Sequential Structure: Start with the SELECT clause to specify the count of tips written in the year 2015. 2. Condition Structure: Use a WHERE clause to filter tips that were written in the year 2015. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"tip\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of tips that meet the specified condition.","1058":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of co-authors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors with their papers. 2. Condition Structure: Use a WHERE clause to filter for papers written by 'Noah A Smith' to identify the relevant papers. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to get the co-authors of the papers written by Noah A Smith. 4. Aggregation Structure: Use a WHERE clause to exclude 'Noah A Smith' from the results to ensure we only get the co-authors.","1059":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of escape games. We will use the COUNT function to get the total number of escape games. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Madison\" and categorized as \"escape games.\" 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business_id\" to link each business with its category. 4. Aggregation Structure: Use COUNT to aggregate the number of escape games that meet the specified conditions.","1060":"1. Sequential Structure: Begin with the SELECT clause to count the number of distinct papers. Use the FROM clause to specify the `paper` table and join it with the `paperKeyphrase` and `keyphrase` tables to link papers with their keyphrases. Ensure that the query handles the current year dynamically by using a function like `YEAR(CURDATE())` to retrieve the current year.\n2. Condition Structure: Use the WHERE clause to filter for papers written in the current year and that are associated with the keyphrase \"convolutional neural networks\". The keyphrase filter should be applied using the `keyphraseName` column.\n3. Join Structure: Use INNER JOINs between the `paper`, `paperKeyphrase`, and `keyphrase` tables based on `paperId` and `keyphraseId` to connect papers with their keyphrases. Use table aliases to improve readability and avoid ambiguity.\n4. Aggregation Structure: Use the COUNT function with the DISTINCT keyword to ensure that each paper is counted only once, even if it is associated with multiple keyphrases.","1061":"1. Sequential Structure: Start with the SELECT clause to specify the count of restaurants that meet the criteria. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are located in \"Pittsburgh\" and have a rating of 4.5. 3. Join Structure: No JOIN is necessary since all required information is available in the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of restaurants that meet the specified conditions.","1062":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically the paper ID and title from the paper table. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were published in the year 2014 and that have the keyphrase 'Jeopardy! Questions'. 3. Join Structure: Use JOIN clauses to connect the paper table with the paperKeyphrase table on paperId, and then join with the keyphrase table on keyphraseId to access the keyphrase name. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1063":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs of the papers that cite Daniel Jurafsky. Use the FROM clause to specify the cite table, as it contains the relationships between citing and cited papers. 2. Condition Structure: Use a WHERE clause to filter for papers that cite a specific author, which requires identifying the authorId for Daniel Jurafsky from the author table. 3. Join Structure: Use JOINs to connect the cite table with the paper table through the citedPaperId to get the details of the cited papers. Additionally, join the writes table to link papers to their authors. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1064":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Use a WHERE clause to filter papers that are published in the 'ACL' journal. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link papers to their authors. Additionally, join with the journal table to filter by journal name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers authored by each author in the ACL journal.","1065":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the paper ID, title, number of citations, and number of times cited by other papers. 2. Condition Structure: No specific filtering condition is required since we want to list the top papers for parsing based on their citation metrics. 3. Join Structure: No JOIN is necessary as all required information is available in the \"paper\" table. 4. Aggregation Structure: To determine the \"top\" papers, we will use ORDER BY to sort the results based on the number of citations (numCiting) and the number of times cited by other papers (numCitedBy) in descending order.","1066":"1. Sequential Structure: Start with the SELECT clause to specify the \"business.city\" where the business name is \"Taj Mahal\". 2. Condition Structure: Use a WHERE clause to filter for businesses with the name \"Taj Mahal\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the cities that have a business named \"Taj Mahal\".","1067":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" that corresponds to Eric C. Kerrigan. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Eric C. Kerrigan.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"paperId\" to link each paper with its respective author. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the title of the paper.","1068":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and join it with the paperDataset and venue tables to link papers with their datasets and venues. 2. Condition Structure: Use the WHERE clause to filter for papers that used the 'ImageNet' dataset and were published in the 'cvpr' venue. 3. Join Structure: Use INNER JOINs between the paper, paperDataset, and venue tables based on their respective IDs to connect papers with their datasets and venues. 4. Aggregation Structure: Use the COUNT function to aggregate the total number of papers that meet the specified conditions.","1069":"1. Sequential Structure: Start with the SELECT clause to specify the count of businesses named 'Starbucks' in the specified city and state. 2. Condition Structure: Use a WHERE clause to filter for businesses where the name is 'Starbucks', the city is 'Dallas', and the state is 'Texas'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of Starbucks locations that meet the specified conditions.","1070":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names associated with the author. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to access the keyphrases through the paperKeyphrase table. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Brian DeRenzi\", ensuring we only get keyphrases related to his work. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective IDs to connect authors to their papers and then to the keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1071":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs. Use the FROM clause to specify the paper table. 2. Aggregation Structure: Use GROUP BY to group the results by paper ID to count how many times each paper has been cited. 3. Condition Structure: Apply a HAVING clause to filter the results to only include papers that have been cited by at least 5 other papers. 4. Join Structure: Not required, as we can directly count the citations from the cite table based on the paper ID.","1072":"1. Sequential Structure: Start with the SELECT clause to count the number of papers, which will use the COUNT function on \"paper.paperId.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the journal named \"sigir.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"journal\" tables based on \"journalId\" to link each paper with its respective journal. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified condition.","1073":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that are related to deep learning. 2. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase \"deep learning.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to access the keyphrase names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that match the condition.","1074":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields. We need to get the business details, so we will select fields from the \"business\" table. 2. Condition Structure: Apply a WHERE clause to filter for reviews made by the user named 'Patrick' and ensure that the business category is 'Bars.' 3. Join Structure: Use JOIN clauses to connect the \"business,\" \"review,\" and \"user\" tables based on their relationships. We will also need to join the \"category\" table to filter by the category name. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","1075":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"journal.journalName\" for the journals published in March 2011. 2. Condition Structure: Use a WHERE clause to filter for records where \"paper.year\" is 2011 and the month of publication is March. Since the month is not directly available in the schema, we will assume that the year is sufficient for filtering. 3. Join Structure: Use a JOIN between the \"paper\" and \"journal\" tables based on \"paper.journalId\" to link each paper with its respective journal. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are distinct to avoid duplicates in case multiple papers are published in the same journal.","1076":"1. Sequential Structure: Start with the SELECT clause to count the number of papers written on convolutional neural networks in 2016. 2. Condition Structure: Use a WHERE clause to filter for papers where the title contains 'convolutional neural networks' and the year is 2016. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of papers that meet the specified conditions.","1077":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" associated with the paper titled \"Trophic Cascade.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific paper title \"Trophic Cascade.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on the \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the venue name for the specified paper.","1078":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the necessary tables, which include the author, writes, and cite tables. 2. Condition Structure: Use a WHERE clause to filter for the author \"Dan Klein\" in the writes table and \"Michael I. Jordan\" in the cite table. This will ensure we are only counting the papers written by Dan Klein that are cited by Michael I. Jordan. 3. Join Structure: Use JOINs to connect the author table with the writes table to get the papers written by Dan Klein, and then join the cite table to find out how many of those papers are cited by Michael I. Jordan. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1079":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" associated with the author \"Ranjit Jhala.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Ranjit Jhala.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"paper\" table based on \"paperId\" to link the author to their respective papers. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the title of the paper.","1080":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"neighbourhood.neighbourhood_name\" and the count of businesses. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Madison\" and that are currently open (is_open = true). 3. Join Structure: Use a JOIN between the \"neighbourhood\" and \"business\" tables based on the shared key \"business_id\" to link each neighbourhood with its respective businesses. 4. Aggregation Structure: Use COUNT to count the number of businesses per neighbourhood, then GROUP BY \"neighbourhood.neighbourhood_name\" to group results by neighbourhood. Finally, use ORDER BY in descending order to find the neighbourhood with the most businesses and LIMIT 1 to get the top result.","1081":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue names. Use the FROM clause to specify the venue table. 2. Condition Structure: Apply a WHERE clause to filter venues based on the keyphrase 'Neuroscience'. 3. Join Structure: Use JOIN clauses to connect the venue table with the paper table and the paperKeyphrase table based on their relationships. 4. Aggregation Structure: Not needed, as we are simply retrieving venue names without any aggregation.","1082":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"business.name\" and \"business.is_open.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Los Angeles\" and belonging to the \"Seafood\" category. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and open status of the restaurants that meet the criteria.","1083":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of authors. Use the FROM clause to specify the author table. 2. Join Structure: Use an INNER JOIN between the writes table and the author table based on authorId to link authors with their papers. 3. Condition Structure: Apply a WHERE clause to filter for papers written by 'Noah A Smith' to find co-authors. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1084":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" since we want to know the title and year of the papers. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the title containing \"Parsing papers using Jeopardy!\" and were published in the year 2014. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"journal\" and \"venue\" tables based on their respective foreign keys to get the journal and venue names. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered correctly based on the conditions specified.","1085":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.name\" of the Apple Stores. 2. Condition Structure: Apply a WHERE clause to filter for records where \"business.city\" is 'Los Angeles'. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" and \"category.business_id\" to ensure we are only looking at businesses that are categorized as Apple Stores. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the businesses that meet the criteria.","1086":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers published in the specified venue and year. 2. Condition Structure: Use a WHERE clause to filter for records where \"paper.year\" is 2015 and the venue name is 'pldi'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1087":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name from the business table. Use the FROM clause to specify the business table and join it with the review table to link reviews to businesses. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in 'Dallas' and reviewed by the user named 'Patrick'. 3. Join Structure: Use an INNER JOIN between the business and review tables based on the business_id to connect reviews to their respective businesses. Additionally, join the user table to filter by the user's name. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1088":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table. We will also need to join the paper table to access citation information and the venue table to filter for the specific venue \"CVPR\". 2. Join Structure: Use JOINs to connect the author table with the writes table (to link authors to their papers) and the paper table (to access citation counts and filter by venue). Additionally, join the venue table to filter for papers published in \"CVPR\". 3. Aggregation Structure: Use GROUP BY to group results by author, allowing us to count the number of citations for each author. We will use the SUM function to aggregate the citation counts from the paper table. 4. Condition Structure: Use a HAVING clause to filter for the author with the maximum number of citations, ensuring we only retrieve the most cited author at CVPR.","1089":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.city\" where the restaurant name matches \"MGM Grand Buffet\". 2. Condition Structure: Use a WHERE clause to filter for businesses with the name \"MGM Grand Buffet\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the cities that meet the specified condition.","1090":"1. Sequential Structure: Start with the SELECT clause to retrieve the total check-ins, which will involve the \"checkin.count\" field. 2. Condition Structure: Apply a WHERE clause to filter for the specific neighbourhood, \"Brighton Heights.\" 3. Join Structure: Use a JOIN between the \"checkin\" and \"neighbourhood\" tables based on \"business_id\" to link check-ins with their respective neighbourhoods. 4. Aggregation Structure: Use SUM to aggregate the check-in counts for businesses located in the \"Brighton Heights\" neighbourhood.","1091":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the SIGIR conference by checking the venue name. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers to their respective venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified condition.","1092":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"business.name\" and \"business.rating.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses that are open (is_open = 1), have a rating of at least 3.5, and are located in Dallas (city = 'Dallas'). 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" to ensure we only consider businesses that are categorized as 'Mexican.' 4. Aggregation Structure: No aggregation is needed here, as we are simply filtering the results based on the specified conditions.","1093":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that were published in the year 2015 and in the venue named 'pldi.' 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1094":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" and \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that were published in the year 2015 and specifically from the venue \"pldi.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1095":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields. We need to get the business details, so we will select fields from the \"business\" table. 2. Condition Structure: Apply a WHERE clause to filter for reviews that have a rating of at least 3 stars and are associated with the user named 'Patrick'. 3. Join Structure: Use JOIN clauses to connect the \"business,\" \"review,\" and \"user\" tables based on their relationships. We will join \"review\" with \"business\" on \"business_id\" and \"review\" with \"user\" on \"user_id.\" 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","1096":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since we want to know the names of the datasets. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are interested in all datasets used for evaluating semantic parsing. 3. Join Structure: Use a JOIN between the \"dataset\" and \"paperDataset\" tables based on \"datasetId\" to link each dataset with its corresponding papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the dataset names.","1097":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers published in the year 2015 and in the journal \"Nature Communications\". 3. Join Structure: Use a JOIN clause to connect the paper table with the journal table based on the journalId to filter by journal name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1098":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name. Use the FROM clause to specify the venue table and JOIN it with the paper table to link venues with their corresponding papers. Additionally, join the paperKeyphrase table to filter papers that mention the keyphrase 'ImageNet'. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'ImageNet'. 3. Join Structure: Use INNER JOINs between the venue, paper, and paperKeyphrase tables based on their respective foreign keys to connect the data. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1099":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles and years of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOINs to connect the paper table with the writes table to filter out papers based on authors, and then join with the author table to access author names. Additionally, join with the paperKeyphrase table and the keyphrase table to filter for papers related to \"syntactic parsing\". 3. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase \"syntactic parsing\" and exclude those written by \"Chris Dyer\". 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1100":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs or names. Use the FROM clause to specify the writes table, which links authors to their papers. 2. Join Structure: Join the writes table with the paper table on paperId to access the keyphrases associated with each paper. Then, join the paper table with the paperKeyphrase table to connect papers to their keyphrases, and finally join with the keyphrase table to filter for those related to \"Machine Learning\". 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Machine Learning\". 4. Aggregation Structure: Use GROUP BY to group the results by author and COUNT to determine the number of papers each author has written in the specified keyphrase.","1101":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. We will also need to join with the keyphrase table to filter for papers about \"Parsing\" and with the venue table to filter for papers published at \"ACL\" in 2014. 2. Condition Structure: Use the WHERE clause to filter for papers that have the keyphrase \"Parsing\" and were published in the year 2014 at the venue \"ACL\". Additionally, we will need to ensure that the papers are associated with the dataset \"Jeopardy! Questions\". 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, venue, and paperDataset tables based on their respective foreign keys to connect papers with their keyphrases, venues, and datasets. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1102":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews. Use the FROM clause to specify the review table, as we need to count the reviews for a specific restaurant. 2. Condition Structure: Use the WHERE clause to filter for reviews that belong to the restaurant \"Vintner Grill\" and are from the year 2010. 3. Join Structure: Use an INNER JOIN between the review and business tables based on the business_id to connect reviews to the corresponding restaurant. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews for the specified conditions.","1103":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs and the titles of the papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link authors to their papers. Additionally, join the paperKeyphrase and keyphrase tables to filter for papers that are associated with the keyphrase 'sensor fusion'. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'sensor fusion'. 3. Join Structure: Use INNER JOINs between the paper, writes, paperKeyphrase, and keyphrase tables based on their respective foreign keys to connect authors with their papers and the relevant keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1104":"1. Sequential Structure: Start with the SELECT clause to retrieve the business ID and name from the business table. Use the FROM clause to specify the business table. 2. Join Structure: Use an INNER JOIN between the business and review tables on the business_id to link businesses with their reviews. Additionally, join the user table to filter reviews by a specific user. 3. Condition Structure: Apply a WHERE clause to filter for reviews made by the user named 'Niloofar'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1105":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews. Use the FROM clause to specify the review table. 2. Join Structure: Join the review table with the neighbourhood table on the business_id to relate reviews to their respective businesses and neighborhoods. 3. Condition Structure: Use a WHERE clause to filter for businesses located in the \"South Summerlin\" neighbourhood. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews for the filtered businesses.","1106":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need from the \"review\" table, specifically all columns since we want all reviews. 2. Condition Structure: Apply a WHERE clause to filter for reviews where the rating is exactly 2.5. 3. Join Structure: Use a JOIN between the \"review\" and \"business\" tables based on \"business_id\" to link each review with its corresponding business. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the reviews that meet the specified condition.","1107":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the business ID and name of the breweries located in Los Angeles. 2. Condition Structure: Use a WHERE clause to filter for businesses located in the city of 'Los Angeles'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the breweries that meet the specified condition.","1108":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"venue.venueName\" associated with the paper titled \"Fracture of acrylic bone cement.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific paper title, which is \"Fracture of acrylic bone cement.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the venue name for the specified paper.","1109":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"author.authorId\" and potentially \"paper.title\" to provide context about the papers published. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2007 and specifically in the venue \"CVPR.\" 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"venue\" table based on \"venueId\" and the \"writes\" table to link authors to their respective papers. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique authors are returned.","1110":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of authors who wrote papers in 2015. We will select \"author.authorName\" from the \"author\" table.\n2. Condition Structure: Use a WHERE clause to filter for records where \"paper.year\" is 2015.\n3. Join Structure: First, join the \"writes\" table with the \"paper\" table based on \"writes.paperId\" and \"paper.paperId\" to associate each author with their respective papers. Then, join the \"author\" table with the \"writes\" table based on \"writes.authorId\" and \"author.authorId\" to retrieve the author names.\n4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique author names are returned.","1111":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the business name and full address of the restaurants in Pennsylvania. 2. Condition Structure: Use a WHERE clause to filter for businesses located in the state of Pennsylvania. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and addresses of the restaurants that meet the specified condition.","1112":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct user IDs or names of users who have written tips about businesses. 2. Condition Structure: Use a WHERE clause to filter for records where the business is located in \"Dallas.\" 3. Join Structure: Use JOINs to connect the \"user\" table with the \"tip\" table based on the user ID, and then join the \"tip\" table with the \"business\" table based on the business ID to link tips to the corresponding businesses. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT is applied to ensure unique user names or IDs are returned.","1113":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.year\" and the count of papers for each year. We will use the COUNT function to count the number of papers. 2. Condition Structure: No specific filtering condition is needed since we want to consider all years for NIPS papers. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to filter for NIPS papers by checking the \"venueName.\" 4. Aggregation Structure: Use GROUP BY to group the results by \"paper.year\" and ORDER BY the count of papers in descending order to find the year with the most NIPS papers. Finally, use LIMIT 1 to get the top result.","1114":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, which in this case will be \"paper.title\" to get the titles of the papers published. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 1995 and in the journal \"Academic radiology.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"journal\" tables based on \"journalId\" to link each paper with its respective journal. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1115":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.year\" and count the number of papers published in each year. 2. Condition Structure: No specific filtering condition is needed, as we want to consider all NIPS papers. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"venue\" table to filter for NIPS papers based on the venue name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers published per year, and then use ORDER BY to sort the results in descending order to find the year with the most publications. Finally, use LIMIT 1 to get the year with the highest count.","1116":"1. Sequential Structure: Start with the SELECT clause to retrieve the author details, specifically the authorId and authorName. Use the FROM clause to specify the author table. 2. Join Structure: Use an INNER JOIN between the author table and the writes table based on authorId to link authors to the papers they have written. 3. Condition Structure: Apply a WHERE clause to filter for authors who have written papers with the specific author name 'Noah A Smith'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1117":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the author names who cite Daniel A Reed. Use the `FROM` clause to specify the `cite` table, as this table contains the citation relationships. Additionally, use the `writes` table to link papers to their authors, as the `paper` table does not directly store author information.\n2. Condition Structure: Use a `WHERE` clause to filter for citations where the cited paper is authored by Daniel A Reed. This requires a subquery to find the `paperId` associated with Daniel A Reed by joining the `writes` and `author` tables.\n3. Join Structure: Use JOINs to connect the `cite` table with the `writes` table twice: once to get the authors of the cited papers (to filter for Daniel A Reed) and once to get the authors of the citing papers (to retrieve the names of those who cite him). Also, join with the `author` table to retrieve the author names.\n4. Aggregation Structure: Use `GROUP BY` to group the results by `authorId` and `COUNT` to determine how many times each author cites Daniel A Reed. Use `ORDER BY` to sort the results in descending order based on the count of citations. Ensure that `DISTINCT` is used to avoid counting duplicate citations multiple times.","1118":"1. Sequential Structure: Start with the SELECT clause to count the number of businesses that meet the criteria. We will use COUNT to get the total number of bars. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Dallas\" and having a rating greater than 3.5. 3. Join Structure: We need to join the \"business\" table with the \"category\" table to ensure we are only counting businesses that are categorized as \"Bars.\" 4. Aggregation Structure: Use COUNT to aggregate the number of bars that meet the specified conditions.","1119":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of businesses reviewed by Michelle. Use the FROM clause to specify the review table and JOIN it with the user table to link reviews to users. 2. Condition Structure: Use the WHERE clause to filter for reviews made in the year 2010 and specifically for the user named Michelle. 3. Join Structure: Use an INNER JOIN between the review and user tables based on user_id to connect reviews to the corresponding user. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews made by Michelle in the specified year.","1120":"1. Sequential Structure: Start with the SELECT clause to retrieve the tips related to \"Cafe Zinho\" in Texas. We will select the relevant fields from the \"tip\" table. 2. Condition Structure: Apply a WHERE clause to filter for the specific business name \"Cafe Zinho\" and the state \"Texas.\" 3. Join Structure: Use a JOIN between the \"business\" and \"tip\" tables based on the business_id to link tips to their respective businesses. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the tips without any summarization.","1121":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of escape games. We will use the COUNT function to get the total number of records that match our criteria. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Madison\" and belonging to the category \"escape games.\" 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business_id\" to link each business with its respective category. 4. Aggregation Structure: Use COUNT to aggregate the number of escape games that meet the specified conditions.","1122":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal name. Use the FROM clause to specify the journal table. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2010 and that are associated with the keyphrase 'Trophic Cascade'. 3. Join Structure: Use JOIN clauses to connect the journal table with the paper table on journalId, and the paper table with the paperKeyphrase table on paperId, and finally join with the keyphrase table on keyphraseId to filter by the specific keyphrase. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1123":"1. Sequential Structure: Start with the SELECT clause to count the number of businesses. Use the FROM clause to specify the review table, as we need to count reviews related to businesses. 2. Condition Structure: Use a WHERE clause to filter reviews based on the year (2010) and the user (Christine). We will also need to ensure that the businesses are located in San Diego. 3. Join Structure: Use JOIN clauses to connect the review table with the user table to filter by user name and with the business table to filter by city. 4. Aggregation Structure: Use the COUNT function to aggregate the number of distinct businesses reviewed by Christine in San Diego in 2010.","1124":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and number of citations of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOIN to connect the paper table with the paperKeyphrase table on the paperId to filter papers based on keyphrases. Additionally, join with the keyphrase table to access the keyphrase names. 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"parsing\". 4. Order Structure: Use ORDER BY to sort the results by the number of citations in descending order to get the most cited papers at the top.","1125":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase 'deep learning'. Additionally, we will order the results by year to get the most recent papers. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1126":"1. Sequential Structure: Start with the SELECT clause to count the number of papers published on convolutional neural networks in 2016. 2. Condition Structure: Use a WHERE clause to filter for papers where the title contains 'convolutional neural networks' and the year is 2016. 3. Join Structure: No JOIN is necessary since all required information is available in the \"paper\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of papers that meet the specified conditions.","1127":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the names of co-authors. Use the `FROM` clause to specify the `writes` table as the primary table, as it contains the relationships between authors and papers. \n2. Join Structure: Use JOINs to connect the `writes` table with the `author` table on `authorId` to find the author ID of \"Noah A Smith\". Then, join the `writes` table again to find other authors who have written the same papers. Finally, join the `author` table again to retrieve the names of these co-authors.\n3. Condition Structure: Apply a WHERE clause to filter for papers authored by \"Noah A Smith\" by matching the `authorName` in the `author` table. Additionally, ensure that the co-authors are distinct and exclude \"Noah A Smith\" from the result by comparing the author IDs.\n4. Aggregation Structure: No aggregation is needed, but we will use `DISTINCT` to ensure that each co-author is listed only once.","1128":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name, which is represented by \"author.authorId.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that were presented at \"NIPS,\" which is specified in the \"venue\" table. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. Additionally, join the \"writes\" table to connect authors to their papers. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique author names are returned.","1129":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the papers that are associated with the keyphrase \"WebKB.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific keyphrase \"WebKB.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"paperKeyphrase\" tables based on \"paperId\" to link each paper with its keyphrases, and then join with the \"keyphrase\" table to access the keyphrase names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that match the specified keyphrase.","1130":"1. Sequential Structure: Start with the SELECT clause to retrieve the total check-ins, which will involve summing the \"checkin.count\" field. We will also include \"checkin.day\" to group the results by day. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Los Angeles\" and having the category \"Moroccan.\" 3. Join Structure: Use a JOIN between the \"checkin\" and \"business\" tables based on \"business_id\" to link check-in records with their corresponding businesses. 4. Aggregation Structure: Use SUM to aggregate the check-in counts and GROUP BY \"checkin.day\" to get the total check-ins per day for the specified restaurants.","1131":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and in the journal 'nature communications'. 3. Join Structure: Use an INNER JOIN between the paper and journal tables based on journalId to connect papers with their respective journals. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1132":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication years of papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Pedro Domingos' to ensure we only get the years of papers published by this specific author. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the papers with their respective authors. 4. Aggregation Structure: Not required, as we are simply retrieving the years without needing to aggregate the data.","1133":"1. Sequential Structure: Start with the SELECT clause to specify the average rating of reviews. 2. Condition Structure: Use a WHERE clause to filter reviews that were written in the year 2014. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"review\" table. 4. Aggregation Structure: Use the AVG function to calculate the average rating from the filtered reviews.","1134":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant field, which is \"paper.paperId\" (or any other field from the paper table that is needed, such as title). 2. Condition Structure: No specific filtering condition is needed in the WHERE clause since we are interested in all papers that use the WebKB dataset. 3. Join Structure: Use a JOIN between the \"paper\" and \"paperDataset\" tables based on \"paper.paperId\" and \"paperDataset.paperId\" to link each paper with its corresponding dataset. 4. Aggregation Structure: No aggregation is needed here, but we will apply a WHERE clause to filter for the specific dataset, \"WebKB,\" by joining with the \"dataset\" table to ensure we only get papers associated with that dataset.","1135":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"review.rating,\" \"review.text,\" and \"review.business_id.\" 2. Condition Structure: Apply a WHERE clause to filter for reviews where the rating is greater than 4 and the user's name is 'Patrick.' 3. Join Structure: Use a JOIN between the \"review\" and \"user\" tables based on \"user.user_id\" and \"review.user_id\" to associate each review with the corresponding user. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the reviews that meet the specified conditions.","1136":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names that correspond to the papers written by Oren Etzioni. Use the FROM clause to specify the author and join it with the writes table to link authors to their papers. Then, join the paperKeyphrase table to get the keyphrases associated with those papers. 2. Condition Structure: Use a WHERE clause to filter for the author name 'Oren Etzioni' to ensure we are only looking at papers written by this specific author. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective foreign keys to connect authors to their papers and then to the keyphrases. 4. Aggregation Structure: Use GROUP BY to group the results by keyphrase name and apply COUNT to determine how many times each keyphrase appears, allowing us to identify the most frequently written about topics.","1137":"1. Sequential Structure: Start with the SELECT clause to retrieve the author ID and name. Use the FROM clause to specify the writes table, which links authors to papers. 2. Join Structure: Join the writes table with the paper table on paperId to access the year and venue information of the papers. Additionally, join the paper table with the venue table to filter for papers published in CVPR. 3. Condition Structure: Use a WHERE clause to filter for papers published in the year 2007 and in the venue 'CVPR'. 4. Aggregation Structure: Use GROUP BY to group the results by author, and use COUNT to count the number of papers each author wrote. Finally, apply the ORDER BY clause to sort the results in descending order based on the count of papers, and limit the results to get the author with the most papers.","1138":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and join it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for papers written by Dan Klein and to ensure that these papers cite Michael I. Jordan. 3. Join Structure: Use JOINs between the paper, writes, and cite tables based on paperId to connect the papers with their authors and citations. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1139":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of character recognition papers published before 2010. 2. Condition Structure: Use a WHERE clause to filter papers where \"paper.year\" is less than 2010. 3. Join Structure: A JOIN is necessary to connect the \"paper\" table with the \"paperKeyphrase\" and \"keyphrase\" tables to filter for character recognition papers. This will involve joining on \"paperKeyphrase.paperId = paper.paperId\" and \"paperKeyphrase.keyphraseId = keyphrase.keyphraseId\". 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the titles of the papers that meet the specified conditions.","1140":"1. Sequential Structure: Start with the SELECT clause to count the number of businesses that meet the criteria. We will use COUNT(*) to get the total number of bars. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Dallas\" and having a rating greater than 3.5. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables to ensure we are only counting businesses that are categorized as \"Bars.\" 4. Aggregation Structure: Use COUNT(*) to aggregate the results based on the specified conditions.","1141":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the business name and full address of the breweries. 2. Condition Structure: Use a WHERE clause to filter for businesses located in \"Los Angeles\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and addresses of the breweries that meet the specified condition.","1142":"1. Sequential Structure: Start with the SELECT clause to retrieve the dataset names. Use the FROM clause to specify the dataset table. We will need to join the dataset table with the paperDataset table to link datasets to papers, and then join with the paper table to filter by author. 2. Condition Structure: Use a WHERE clause to filter for papers written by the author 'jitendra malik'. 3. Join Structure: Use JOINs between the paper, paperDataset, and writes tables based on their respective foreign keys to connect authors to their papers and then to the datasets. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1143":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name and the count of citations. Use the FROM clause to specify the author table and join it with the writes and paper tables to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for papers published in the 'CVPR' venue. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the authorId and paperId to connect authors with their respective papers and citation counts. 4. Aggregation Structure: Use GROUP BY to group results by authorId and authorName, and use COUNT to aggregate the number of citations for each author. Finally, apply ORDER BY to sort by the number of citations in descending order and limit the result to the top author.","1144":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by year in descending order to get the latest publications first.","1145":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the distinct names of co-authors. Use the `FROM` clause to specify the `writes` table as the primary table, as it links authors to papers. \n2. Condition Structure: Apply a `WHERE` clause to filter for papers written by Noah A Smith. First, retrieve Noah A Smith's `authorId` by joining the `author` table. Then, ensure that Noah A Smith is excluded from the list of co-authors by adding a condition that the co-author's `authorId` is not equal to Noah A Smith's `authorId`.\n3. Join Structure: Use a self-join on the `writes` table to link co-authors with the same paper. The first instance of the `writes` table will represent Noah A Smith's papers, and the second instance will represent the co-authors. Then, join the `author` table to retrieve the co-authors' names.\n4. Aggregation Structure: Use `DISTINCT` to ensure that duplicate co-author names are not returned, as the same co-author may have collaborated on multiple papers with Noah A Smith.","1146":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper details, specifically the paper ID and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the paperKeyphrase table on the paperId to link papers with their keyphrases. Additionally, join with the keyphrase table to filter for keyphrases related to \"Artificial Intelligence\". 3. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Artificial Intelligence\". 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to the top entry to find the paper with the most citations.","1147":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" that Richard Ladner presented. 2. Condition Structure: Use a WHERE clause to filter for the specific author \"Richard Ladner\" and the venue \"chi.\" 3. Join Structure: Use JOINs to connect the \"writes\" table with the \"paper\" table based on \"paperId\" to find the papers written by the author, and also join with the \"venue\" table to filter by the venue name. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the title of the paper.","1148":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the author's name and the count of papers. Use the `FROM` clause to specify the `writes` table, which links authors to papers. We will also need to join the `paper` table to filter by the specific venue and year, and the `author` table to retrieve the author's name.\n2. Join Structure: Use `JOIN` clauses to connect the `writes` table with the `paper` table on `paperId`, and then join the `paper` table with the `venue` table on `venueId` to access the venue name. Additionally, join the `author` table on `authorId` to retrieve the author's name.\n3. Condition Structure: Apply a `WHERE` clause to filter for papers published in the year 2007 and specifically for the venue 'CVPR'. This ensures that only papers from CVPR 2007 are considered.\n4. Aggregation Structure: Use `GROUP BY` to group the results by `authorId`, and use `COUNT` to count the number of papers each author has written. Finally, apply the `ORDER BY` clause to sort the results in descending order based on the count of papers, and limit the results to get the author with the most papers.","1149":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs and their citation counts. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that have fewer than 5 citations. Additionally, we need to ensure that the citations are from papers published in the ACL venue. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to link papers with their respective venues. 4. Aggregation Structure: Not needed, as we are simply filtering based on the citation count without any aggregation.","1150":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"business.name\" and \"business.rating.\" 2. Condition Structure: Apply a WHERE clause to filter for businesses that are in the city of 'Dallas', have a rating above 3.5, and belong to the 'Mexican' category. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the filtering conditions are applied correctly to get the desired results.","1151":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference name (venueName) from the venue table. Use the FROM clause to specify the venue table and join it with the paper table to link the conference with the paper titled 'Trophic Cascade'. 2. Condition Structure: Use the WHERE clause to filter for the paper with the title 'Trophic Cascade'. 3. Join Structure: Use an INNER JOIN between the venue and paper tables based on the venueId to connect the paper with its corresponding conference. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1152":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name and the count of papers. Use the FROM clause to specify the paper table and JOIN it with the venue table to link papers to their respective venues. 2. Condition Structure: Use a WHERE clause to filter papers that are related to the keyphrase 'deep learning' by joining with the paperKeyphrase table and filtering on the keyphrase name. 3. Join Structure: Use INNER JOINs between the paper, venue, and paperKeyphrase tables based on the foreign keys to connect papers with their venues and keyphrases. 4. Aggregation Structure: Use GROUP BY to group the results by venue, and use COUNT to count the number of papers for each venue. Finally, apply ORDER BY to sort the results in descending order based on the count of papers and limit the result to the top venue.","1153":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are the review details from the \"review\" table. 2. Condition Structure: Apply a WHERE clause to filter for reviews related to \"Kabob Palace\" and for the year 2014. 3. Join Structure: Use a JOIN between the \"review\" and \"business\" tables based on \"business_id\" to link each review with its corresponding business. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the reviews that match the specified conditions.","1154":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use the WHERE clause to filter papers based on the year (between 2011 and 2016) and the keyphrase (specifically 'question answering'). 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their corresponding keyphrases. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1155":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers that use the keyphrase \"WebKB.\" 2. Condition Structure: Apply a WHERE clause to filter for records where the keyphrase is \"WebKB.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId\" to link each paper with its respective keyphrases. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only select the titles of the papers that match the specified keyphrase.","1156":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of authors. Use the FROM clause to specify the author table and join it with the writes table to link authors to their papers. Then, join the paper table to filter papers based on the year and keyphrase. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2012 and that are associated with the keyphrase 'Neutralizing Antibody'. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective foreign keys to connect authors to their papers and the keyphrases associated with those papers. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1157":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers written by the author Richard Ladner at the venue \"chi.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"Richard Ladner\" and the venue name \"chi.\" 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table based on \"paperId\" and \"authorId,\" and also join the \"venue\" table to filter by \"venueName.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for grouping or counting.","1158":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names. Use the FROM clause to specify the keyphrase table and join it with the paperKeyphrase table to link keyphrases to their respective papers. Then, join the paper table to filter papers by year and venue. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2015 and specifically at the venue 'NIPS'. 3. Join Structure: Use INNER JOINs between the paperKeyphrase and paper tables based on paperId, and between the paper and venue tables based on venueId to connect keyphrases with their corresponding papers and venues. 4. Aggregation Structure: Use GROUP BY to group the results by keyphrase name and apply an ORDER BY clause to sort the results by the count of occurrences of each keyphrase in descending order, indicating popularity.","1159":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers published since 2006, which means the year should be greater than or equal to 2006. 3. Join Structure: Use JOIN clauses to connect the paper table with the paperKeyphrase table and the keyphrase table to filter for specific keyphrases related to the topic of interest. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","1160":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.year\" and \"paper.title\" since we need to know when Michael Stonebraker published his paper and the title of that paper. 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Michael Stonebraker,\" and to ensure we are looking for the GIS Database paper. 3. Join Structure: Use a JOIN between the \"paper\" and \"writes\" tables based on \"paperId\" to link each paper with its respective authors, and another JOIN with the \"author\" table to filter by the author's name. 4. Aggregation Structure: No aggregation is needed here, as we are looking for specific records rather than summarizing data.","1161":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers published in the year 2015 and in the venue 'nature communications'. 3. Join Structure: Use a JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1162":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the titles of papers. Use the `FROM` clause to specify the `paper` table and join it with the `writes` table to link papers to their authors. Additionally, join the `venue` table to filter papers based on the venue name. Importantly, also join the `author` table to filter papers by the author's name. Use `DISTINCT` to avoid duplicate results.\n2. Condition Structure: Use the `WHERE` clause to filter for papers authored by 'Richard Ladner' and published at the venue 'chi'. Ensure that the `author` table is included in the query to access the `authorName` column.\n3. Join Structure: Use INNER JOINs between the `paper`, `writes`, `venue`, and `author` tables based on their respective foreign key relationships to connect authors to their papers and the papers to their venues.\n4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1163":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers that are cited by parsing papers. Use the FROM clause to specify the cite table, which contains the relationships between citing and cited papers. 2. Condition Structure: Use a WHERE clause to filter for papers that are cited by parsing papers. This requires identifying the paper IDs of parsing papers first. 3. Join Structure: Use JOINs to connect the cite table with the paper table to get the titles of the cited papers. The first join will be between the cite table and the paper table to get the cited papers' details. 4. Aggregation Structure: Not needed, as we are simply retrieving the titles of the cited papers without any aggregation.","1164":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.numCitedBy\" to get the titles of the publications and their citation counts. 2. Condition Structure: Use a WHERE clause to filter for keyphrases that match \"Artificial Intelligence.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"paperKeyphrase\" table on \"paperId\" and then join with the \"keyphrase\" table on \"keyphraseId\" to filter the papers based on the specified keyphrase. 4. Aggregation Structure: Use ORDER BY to sort the results by \"paper.numCitedBy\" in descending order to get the most cited publications at the top.","1165":"1. Sequential Structure: Start with the SELECT clause to retrieve the datasets used by the author \"Jitendra Malik.\" We will select the \"dataset.datasetName.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author by name, \"Jitendra Malik.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"paper\" table using \"paperId\" to link to the \"paperDataset\" table. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the dataset names associated with the specified author.","1166":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table. 2. Join Structure: Join the paper table with the writes table to link papers to their authors, and then join with the author table to filter by the specific author \"Ohad Shamir\". Additionally, join with the cite table to count the number of citations for each paper. 3. Condition Structure: Use a WHERE clause to filter for papers written by \"Ohad Shamir\". 4. Aggregation Structure: Use GROUP BY to group the results by paper ID and apply an ORDER BY clause to sort by the number of citations in descending order, limiting the result to the top entry to find the most cited paper.","1167":"1. Sequential Structure: Start with the SELECT clause to retrieve the total likes on tips, which will involve using the SUM function on the \"tip.likes\" field. 2. Condition Structure: Apply a WHERE clause to filter for tips made by the user \"Niloofar\" about the business \"Cafe Zinho.\" 3. Join Structure: Use JOIN clauses to connect the \"tip\" table with the \"user\" and \"business\" tables based on their respective foreign keys to ensure we are filtering the correct tips. 4. Aggregation Structure: Use SUM to aggregate the likes from the filtered tips.","1168":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication year from the paper table. Use the FROM clause to specify the paper table and JOIN it with the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the author named 'Luke S Zettlemoyer' to find the specific publication year associated with this author. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the papers with their respective authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1169":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews written by the user. Use the FROM clause to specify the review table, as it contains the reviews data. 2. Condition Structure: Use a WHERE clause to filter the reviews based on the user name 'Adrienne' by joining with the user table to find the corresponding user ID. 3. Join Structure: Use an INNER JOIN between the review and user tables based on the user ID to link reviews to the specific user. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews written by the user.","1170":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and JOIN it with the writes table to link papers to their authors. 2. Condition Structure: Use the WHERE clause to filter for papers authored by \"Michael I. Jordan\" in the year 2016. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect papers with their authors. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1171":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to papers. 2. Condition Structure: Apply a WHERE clause to filter for papers authored by Noah Smith since the year 2009. This involves checking the author's name and the year of the paper. 3. Join Structure: Use an INNER JOIN between the writes table and the author table to connect the author information with the papers they have co-authored. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers authored by Noah Smith since 2009.","1172":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name, which is specified as \"author.authorName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the venue \"NIPS.\" 3. Join Structure: Use JOINs to connect the \"paper\" table with the \"venue\" table based on \"venueId,\" and then join the \"writes\" table to link authors to their papers. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique author names are returned.","1173":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table. 2. Condition Structure: No specific condition is needed in the WHERE clause since we want to find the paper with the most citations. 3. Join Structure: Not required, as we can directly access the citation count from the paper table. 4. Aggregation Structure: Use ORDER BY to sort the papers by the number of citations in descending order and limit the result to the top entry to get the paper with the most citations.","1174":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that are related to the keyphrase 'syntactic parsing' and are not written by 'chris dyer'. 3. Join Structure: Use JOINs to connect the paper table with the paperKeyphrase and writes tables to filter based on the keyphrase and author. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1175":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the author who cites Daniel A Reed the most. Use the `FROM` clause to specify the `cite` table, as we are interested in citation counts. \n2. Join Structure: Join the `cite` table with the `paper` table to link citations to specific papers. Then, join the `writes` table twice: once to link the cited paper to the author being cited (Daniel A Reed) and once to link the citing paper to the author who is citing. Finally, join with the `author` table to get the citing author's name.\n3. Condition Structure: Use a `WHERE` clause to filter for the author named \"Daniel A Reed\" in the `author` and `writes` tables, ensuring we are counting citations of his papers.\n4. Aggregation Structure: Use `GROUP BY` to group the results by the citing author's ID and count the number of citations. Use `ORDER BY` to sort the results in descending order to find the author who cites Daniel A Reed the most.","1176":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name and the count of papers they have published. Use the FROM clause to specify the author table and join it with the writes and paperKeyphrase tables to link authors to their papers and the keyphrases associated with those papers. 2. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase 'chi', ensuring we only count papers related to this specific keyphrase. 3. Join Structure: Use INNER JOINs between the author, writes, paper, and paperKeyphrase tables based on their respective keys to connect authors to their published papers and the keyphrases associated with those papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers published by each author and GROUP BY to group the results by author. Finally, apply an ORDER BY clause to sort the results in descending order based on the count of papers, and limit the results to the top author.","1177":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.year\" for the papers published by Pedro Domingos. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Pedro Domingos.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table to link the author with their respective papers based on \"authorId.\" Additionally, join the \"paper\" table to access the publication years. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be applied to ensure unique years are returned.","1178":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"paper\" table. 2. Condition Structure: Use a WHERE clause to filter for papers where the \"paper.year\" is not equal to 2022. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving papers that meet the specified condition.","1179":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct user IDs or names of users who reviewed restaurants in 2010. 2. Condition Structure: Use a WHERE clause to filter for reviews made in the year 2010 and for businesses categorized as 'restaurant.' 3. Join Structure: Use JOINs to connect the \"user\" table with the \"review\" table based on \"user.uid\" and \"review.user_id,\" and then join the \"review\" table with the \"business\" table based on \"review.business_id.\" Additionally, join the \"business\" table with the \"category\" table based on \"business.business_id\" to filter by category. 4. Aggregation Structure: No aggregation is needed, but DISTINCT is applied to ensure unique user names are returned.","1180":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"keyphrase.keyphraseName\" which represents the keywords used by the papers. 2. Condition Structure: Apply a WHERE clause to filter for papers that are associated with the venue \"uist.\" 3. Join Structure: Use JOIN clauses to connect the \"paperKeyphrase\" table with the \"keyphrase\" table based on \"keyphraseId,\" and also join the \"paper\" table with the \"venue\" table based on \"venueId\" to ensure we are only considering papers from the specified venue. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be used to ensure that each keyword is listed only once.","1181":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the paper table and join it with the venue table to link papers to their respective venues. 2. Condition Structure: Use a WHERE clause to filter for papers published in the venue named 'sigir'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their venues. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified condition.","1182":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" for the publications. 2. Condition Structure: Use a WHERE clause to filter for the specific author, \"Donald E Knuth.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table based on \"authorId\" to link authors to their respective papers. Additionally, join the \"paper\" table to get the titles of the papers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers without any need for counting or summarizing.","1183":"1. Sequential Structure: Start with the SELECT clause to retrieve the year of the paper. Use the FROM clause to specify the paper table, as it contains the year information. 2. Condition Structure: Apply a WHERE clause to filter for papers that have the keyphrase 'deep learning'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by year in ascending order and limit the results to the first entry to find the earliest year.","1184":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers and the year they were published. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers that are related to deep learning, which will be identified through the keyphrase table. 3. Join Structure: Use JOINs to connect the paper table with the paperKeyphrase table on paperId, and then join with the keyphrase table to filter for the specific keyphrase \"deep learning\". 4. Aggregation Structure: Not needed, as we are simply retrieving titles and years without any aggregation.","1185":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since we are interested in the names of the datasets. 2. Condition Structure: We need to filter the datasets based on the keyphrase related to \"large-scale datasets used in semantic parsing.\" This will be done using a WHERE clause that checks for the relevant keyphrase. 3. Join Structure: Use a JOIN between the \"dataset\" and \"paperKeyphrase\" tables based on the \"paperId\" to link datasets with their corresponding papers and keyphrases. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the datasets that match the specified keyphrase.","1186":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.city\" where the restaurant name is \"Taj Mahal.\" 2. Condition Structure: Use a WHERE clause to filter for records where \"business.name\" is equal to \"Taj Mahal.\" 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" to ensure we are looking at the correct restaurant category. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT should be applied to ensure unique city names are returned.","1187":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of reviews. Use the FROM clause to specify the review table. 2. Condition Structure: Use the WHERE clause to filter reviews written in the year 2015 and by the user named 'Niloofar'. 3. Join Structure: Use a JOIN between the review and user tables to link reviews to the corresponding user based on user ID. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews written by the specified user in the specified year.","1188":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the \"paper\" table and join it with the \"writes\" table to link papers with their authors. 2. Condition Structure: Use the WHERE clause to filter for the paper with the title 'sensor fusion'. 3. Join Structure: Use an INNER JOIN between the \"paper\" and \"writes\" tables based on paperId to connect papers with their authors. Additionally, join the \"author\" table to get the author names. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1189":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the papers written on \"question answering\" this year. The query should also ensure that duplicate paper titles are not returned by using the DISTINCT keyword.\n2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is equal to the current year. Additionally, filter papers based on the keyphrase \"question answering\" by joining the `keyphrase` table and checking for the keyphrase name.\n3. Join Structure: A JOIN is necessary between the `paper`, `paperKeyphrase`, and `keyphrase` tables. The `paperKeyphrase` table links papers to keyphrases, and the `keyphrase` table contains the keyphrase \"question answering.\"\n4. Aggregation Structure: No aggregation is needed, but the DISTINCT keyword is used to avoid duplicate paper titles in the result.","1190":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" of the character recognition papers published before 2010. 2. Condition Structure: Use a WHERE clause to filter papers where \"paper.year\" is less than 2010. 3. Join Structure: A JOIN is necessary to connect the \"paper\" table with the \"paperKeyphrase\" and \"keyphrase\" tables to filter for character recognition papers. This will allow us to check if the keyphrase related to the paper is \"character recognition\". 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the titles of the papers that meet the specified conditions.","1191":"1. Sequential Structure: Start with the SELECT clause to count the distinct authors. Use the FROM clause to specify the paper table, and join it with the venue table to filter for the specific venue. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2010 and at the venue named 'sigcse'. 3. Join Structure: Use an INNER JOIN between the paper and venue tables based on the venueId to connect papers with their respective venues. 4. Aggregation Structure: Use COUNT(DISTINCT author.authorId) to count the unique authors who published papers at the specified venue in the given year.","1192":"1. Sequential Structure: Start with the SELECT clause to specify the count of escape games in Madison. 2. Condition Structure: Use a WHERE clause to filter for businesses located in the city of 'Madison'. 3. Join Structure: No JOIN is necessary since we are only querying the \"business\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of escape games in Madison, but we also need to filter for escape games specifically.","1193":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which is the \"paperId\" of the papers from the year 2014. 2. Condition Structure: Use a WHERE clause to filter for papers where \"paper.year\" is equal to 2014. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the paper IDs for the specified year.","1194":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"author.authorName\" since we want to list the titles of ACL papers along with their authors. 2. Condition Structure: Apply a WHERE clause to filter for papers that are specifically from the ACL venue. This will require a condition on the \"venue\" table to identify the ACL venue. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"writes\" table based on \"paperId\" and then join the \"author\" table based on \"authorId\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly to only include ACL papers.","1195":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and at the venue \"pldi.\" 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the papers that meet the specified conditions.","1196":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs of the papers that cite Daniel Jurafsky. Use the FROM clause to specify the cite table, which contains the citation relationships. 2. Condition Structure: Use a WHERE clause to filter for papers that cite Daniel Jurafsky by checking the authorId associated with his name in the writes table. 3. Join Structure: Use JOINs to connect the cite table with the writes table to find the papers written by Daniel Jurafsky, linking them through the paperId and authorId. 4. Aggregation Structure: Not needed, as we are simply retrieving the IDs of the citing papers without any aggregation.","1197":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name where Sergey Levine published his last paper. Use the FROM clause to specify the author and writes tables, and then join with the paper and venue tables to get the necessary details. 2. Condition Structure: Use a WHERE clause to filter for the author named 'Sergey Levine' and to find the paper with the maximum year, which indicates the last paper published. 3. Join Structure: Use JOINs between the author, writes, paper, and venue tables based on the foreign key relationships to connect the author to their papers and the papers to their venues. 4. Aggregation Structure: Use MAX to find the latest year of publication for the papers authored by Sergey Levine.","1198":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication year of the paper authored by \"ameet soni.\" We will select \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"ameet soni.\" 3. Join Structure: Use a JOIN between the \"writes\" table and the \"author\" table to link the author with their papers based on \"authorId.\" Additionally, join the \"paper\" table to access the publication year. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the year of publication for the specified author.","1199":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the journal name. 2. Condition Structure: No specific filtering condition is required since the question asks for all journals available today. 3. Join Structure: No JOIN is necessary as all relevant information is contained within the \"journal\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of the journals.","1200":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table. We will need to join the relevant tables to connect authors with the papers they wrote and the citations made by those papers. 2. Join Structure: Use JOINs to connect the author table with the writes table to get the paper IDs written by the authors. Then, join the cite table to find out which papers are cited by the papers written by Oren Etzioni. 3. Condition Structure: Use a WHERE clause to filter for the author name 'Oren Etzioni' to ensure we are only looking at citations from this specific author. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1201":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"journal.journalName\" for the journals related to the topic of \"Temporal Data.\" 2. Condition Structure: Apply a WHERE clause to filter for journals that are associated with papers that have \"Temporal Data\" in their title. 3. Join Structure: Use a JOIN between the \"journal\" and \"paper\" tables based on \"journal.journalId\" and \"paper.journalId\" to link each journal with its respective papers. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure that each journal name is listed only once.","1202":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"checkin.count\" for the specified business. 2. Condition Structure: Use a WHERE clause to filter for the specific business name \"Cafe Zinho\" and the day \"Friday.\" 3. Join Structure: Use a JOIN between the \"checkin\" and \"business\" tables based on \"business.business_id\" to link checkin records with the corresponding business. 4. Aggregation Structure: No aggregation is needed since we are directly retrieving the count of check-ins for the specified conditions.","1203":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper IDs of the papers that cite NIPS papers. Use the FROM clause to specify the cite table, which contains the relationships between citing and cited papers. 2. Condition Structure: Use a WHERE clause to filter for papers that cite NIPS papers. This requires a subquery to identify the paper IDs of NIPS papers from the paper table. 3. Join Structure: Not required, as we are only using the cite table and filtering based on the results of a subquery. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1204":"1. Sequential Structure: Start with the SELECT clause to count the number of escape games. Use the FROM clause to specify the business table, as it contains the relevant information about businesses. 2. Condition Structure: Use the WHERE clause to filter for businesses located in Madison and that belong to the category 'escape game'. 3. Join Structure: Use a JOIN between the business and category tables based on the business_id to relate businesses to their categories. 4. Aggregation Structure: Use the COUNT function to aggregate the number of escape games that meet the specified conditions.","1205":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"paper.title\" and \"paper.year.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published before the year 2010. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table and the \"keyphrase\" table to ensure we can filter papers based on the keyphrase related to \"character recognition.\" 4. Aggregation Structure: No aggregation is needed here, but we will filter the results based on the keyphrase name in the WHERE clause.","1206":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers written by Michael Armstrong in the 90s, which includes years from 1990 to 1999. 3. Join Structure: Use a JOIN between the paper and writes tables on paperId to connect papers with their authors. Additionally, join the author table to filter by the author's name. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1207":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter for papers that are not written by 'Chris Dyer'. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to link papers with their authors. Additionally, join the author table to filter out the specific author. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1208":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct user IDs. Use the FROM clause to specify the review table, as we need to count the reviews associated with the business. 2. Condition Structure: Use the WHERE clause to filter reviews for the specific business name 'Irish Pub' located in 'Dallas'. 3. Join Structure: Use an INNER JOIN between the review and business tables based on the business_id to link reviews to the corresponding business. 4. Aggregation Structure: Use COUNT(DISTINCT user_id) to count the number of unique users who have reviewed the specified business.","1209":"1. Sequential Structure: Start with the SELECT clause to retrieve the author names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their papers. Then, join the paper table to filter papers based on the venue. 2. Condition Structure: Use the WHERE clause to filter for papers that are published in the 'NIPS' venue. 3. Join Structure: Use INNER JOINs between the author, writes, and paper tables based on the paper ID to connect authors with their respective papers and then filter by the venue. 4. Aggregation Structure: Not required, as we are simply retrieving the names of authors without any aggregation.","1210":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.city\" of businesses that have a rating below 1.5. 2. Condition Structure: Use a WHERE clause to filter for businesses where \"business.rating\" is less than 1.5. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"business\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the cities of businesses that meet the specified rating condition.","1211":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication year of the paper. Use the FROM clause to specify the paper table and join it with the writes table to link authors to their papers. 2. Condition Structure: Use the WHERE clause to filter for the author named 'Michael Stonebraker' to find the specific paper associated with this author. 3. Join Structure: Use an INNER JOIN between the paper and writes tables based on paperId to connect the papers with their respective authors. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1212":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyphrase names that are associated with papers presented at NIPS in 2015. We will select \"keyphrase.keyphraseName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers from the year 2015. 3. Join Structure: Use JOIN clauses to connect the \"paper\" table with the \"paperKeyphrase\" table based on \"paperId,\" and then join with the \"keyphrase\" table based on \"keyphraseId\" to get the keyphrases for those papers. 4. Aggregation Structure: Since we want to find popular topics, we will use GROUP BY on \"keyphrase.keyphraseName\" and apply COUNT to determine the frequency of each keyphrase, then order the results by this count in descending order to highlight the most popular topics.","1213":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"review\" table since we want to list all reviews. 2. Condition Structure: Use a WHERE clause to filter reviews where \"review.rating\" is less than 1. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"review\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving reviews that meet the specified rating condition.","1214":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the paper ID and the number of citations (numCitedBy). 2. Condition Structure: No specific filtering condition is required since we want to find papers with the most citations. 3. Join Structure: No JOIN is necessary as all required information is available in the \"paper\" table. 4. Aggregation Structure: Use ORDER BY in descending order on \"paper.numCitedBy\" to rank papers by the number of citations and apply LIMIT 1 to select the paper with the highest number of citations.","1215":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the titles of the papers. 2. Condition Structure: Use a WHERE clause to filter for papers published in the year 2015. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the titles of the papers that meet the specified year condition.","1216":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"paper.title\" and \"paper.numCiting\" of the highly cited parsing papers. 2. Condition Structure: Use a WHERE clause to filter for papers that are highly cited, which can be defined as having a high value in \"paper.numCiting\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"paper\" table. 4. Aggregation Structure: No aggregation is needed, but we will likely want to order the results by the number of citations to identify the most highly cited papers.","1217":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"author.authorName.\" 2. Condition Structure: Apply a WHERE clause to filter for papers published in the journal \"NIPS.\" 3. Join Structure: Use a JOIN between the \"author\" and \"writes\" tables to connect authors to their papers, and another JOIN between the \"paper\" and \"journal\" tables to link papers to their respective journals. 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be used to ensure unique author names are returned.","1218":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the writes table, which links authors to papers. 2. Join Structure: Join the writes table with the paper table on paperId to access the year and title of the papers. Then, join the paper table with the author table to get the author's name. 3. Condition Structure: Use a WHERE clause to filter for papers that have the title containing 'semantic parsing' and were published after the year 2005. 4. Aggregation Structure: Use GROUP BY to group the results by authorId and authorName, and use COUNT to count the number of papers each author has written. Finally, apply an ORDER BY clause to sort the results in descending order based on the count of papers, and limit the results to get the author with the most papers.","1219":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of tips written by Michelle. Use the FROM clause to specify the tip table. 2. Condition Structure: Use the WHERE clause to filter tips written in the year 2010 and by the user named Michelle. 3. Join Structure: Use a JOIN between the tip and user tables to link tips to the corresponding user based on user_id. 4. Aggregation Structure: Use the COUNT function to aggregate the number of tips written by Michelle in the specified year.","1220":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of user reviews. Use the FROM clause to specify the review table, and then join it with the business table to link reviews to specific businesses. 2. Condition Structure: Use the WHERE clause to filter for reviews associated with the business named \"Sushi Too\" located in \"Pittsburgh\". 3. Join Structure: Use an INNER JOIN between the review and business tables based on the business_id to connect reviews to their respective businesses. 4. Aggregation Structure: Use the COUNT function to aggregate the number of reviews for the specified business.","1221":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Join Structure: We need to join the paper table with the cite table to find out which papers are cited by Oren Etzioni. Additionally, we will join the writes table to link authors to their papers. 3. Condition Structure: Use a WHERE clause to filter for the author name 'Oren Etzioni' and ensure we are looking for papers that he cites. 4. Aggregation Structure: Not needed, as we are simply retrieving titles without any aggregation.","1222":"1. Sequential Structure: Begin with the SELECT clause to retrieve the maximum publication year of the paper. Use the FROM clause to specify the `paper` table and JOIN it with the `writes` and `author` tables to link papers to their authors. The use of `MAX()` ensures that we get the most recent publication year.\n2. Condition Structure: Apply a WHERE clause to filter for the author named 'Mary Crainie' to ensure we are only looking at papers written by her.\n3. Join Structure: Use an INNER JOIN between the `writes` and `paper` tables based on `paperId` to connect the authors with their published papers. Additionally, join the `author` table to filter by the author's name.\n4. Aggregation Structure: Use the `MAX()` function to directly retrieve the latest publication year, which is more efficient than using `ORDER BY` and `LIMIT 1`. This also handles cases where no papers are found by returning `NULL`.","1223":"1. Sequential Structure: Start with the SELECT clause to count the number of articles published, which will use the COUNT function on the \"paper.paperId\" field. 2. Condition Structure: Apply a WHERE clause to filter for papers published in the year 2015 and in the \"Cell\" journal. 3. Join Structure: Use a JOIN between the \"paper\" and \"journal\" tables based on \"journalId\" to link each paper with its respective journal. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1224":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal names, specifically \"journal.journalName.\" 2. Condition Structure: Apply a WHERE clause to filter for the author named \"Takashi Matsumoto.\" This will involve a condition on the \"author\" table. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId.\" Finally, join the \"paper\" table with the \"journal\" table based on \"journalId\" to get the journal names. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the journal names associated with the specified author.","1225":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the paper and the number of citations. Use the FROM clause to specify the paper table. 2. Join Structure: Use JOIN to connect the paper table with the writes table on paperId to link papers with their authors. Additionally, join the author table to filter by the specific author, Ohad Shamir. 3. Condition Structure: Use a WHERE clause to filter for papers written by Ohad Shamir. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to the top one to get the paper with the most citations.","1226":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"business.name\" for the names of the restaurants. 2. Condition Structure: Apply a WHERE clause to filter for businesses located in \"Texas\" and belonging to the \"Moroccan\" category. 3. Join Structure: Use a JOIN between the \"business\" and \"category\" tables based on \"business.business_id\" and \"category.business_id\" to link each business with its respective category. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified conditions.","1227":"1. Sequential Structure: Start with the SELECT clause to retrieve the business ID and the total count of check-ins. Use the FROM clause to specify the checkin table, as it contains the count of check-ins per business. 2. Aggregation Structure: Use the SUM function to aggregate the count of check-ins for each business. 3. Grouping Structure: Apply GROUP BY on the business_id to group the check-in counts by each business. 4. Ordering Structure: Use ORDER BY to sort the results in descending order based on the total check-in count, and limit the results to get the business with the highest number of check-ins.","1228":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the papers. Use the FROM clause to specify the paper table. 2. Condition Structure: Apply a WHERE clause to filter papers that were written in the year 2016 and have the keyphrase 'question answering'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1229":"1. Sequential Structure: Start with the SELECT clause to retrieve the venue name where Peter Mertens publishes. We will select \"venue.venueName.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author, \"Peter Mertens,\" using the \"author.authorName\" field. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"authorId,\" and then join the \"writes\" table with the \"paper\" table based on \"paperId.\" Finally, join the \"paper\" table with the \"venue\" table based on \"venueId\" to get the publication venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the venue names associated with the specified author.","1230":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the papers. Use the FROM clause to specify the paper table. We will also need to join with the writes table to filter by author and the venue table to filter by the conference name (ACL). 2. Condition Structure: Use the WHERE clause to filter for papers published in the year 2016, authored by 'li dong', and presented at the venue 'acl'. 3. Join Structure: Use INNER JOINs between the paper, writes, and venue tables based on the foreign key relationships to connect papers with their authors and venues. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1231":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of tips. Use the FROM clause to specify the tip table. 2. Condition Structure: Use a WHERE clause to filter tips written by the user named 'Michelle'. 3. Join Structure: Use an INNER JOIN between the tip and user tables based on user_id to connect tips to the corresponding user. 4. Aggregation Structure: Use the COUNT function to aggregate the number of tips written by Michelle.","1232":"1. Sequential Structure: Start with the SELECT clause to count the number of papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase and keyphrase tables to filter papers based on keyphrases. 2. Condition Structure: Use a WHERE clause to filter for papers that are related to \"deep reinforcement learning\" and are published in the \"nips\" venue. 3. Join Structure: Use INNER JOINs between the paper, paperKeyphrase, and keyphrase tables to connect papers with their keyphrases, and also join with the venue table to filter by venue name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1233":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and number of citations of the papers. Use the FROM clause to specify the paper table and JOIN it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase 'parsing'. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order to get the most cited papers at the top.","1234":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the paper. Use the FROM clause to specify the paper table and join it with the paperKeyphrase table to link papers with their keyphrases. 2. Condition Structure: Use a WHERE clause to filter for papers that have the keyphrase 'deep learning'. Additionally, we will need to order the results by year to find the first paper. 3. Join Structure: Use an INNER JOIN between the paper and paperKeyphrase tables based on paperId to connect papers with their keyphrases. 4. Aggregation Structure: Use ORDER BY to sort the results by year in ascending order and limit the results to the first entry to get the earliest paper on deep learning.","1235":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of coauthors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors with their papers. 2. Condition Structure: Use a WHERE clause to filter for papers that have been coauthored with 'Noah A Smith'. This will involve a subquery to find the authorId of 'Noah A Smith'. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on authorId to get the coauthors of the papers written by 'Noah A Smith'. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1236":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"paper.title\" and \"paper.year\" for the papers from the specified venue. 2. Condition Structure: Use a WHERE clause to filter for papers that were published in the year 2015 and in the venue named 'pldi'. 3. Join Structure: Use a JOIN between the \"paper\" and \"venue\" tables based on \"venueId\" to link each paper with its respective venue. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and years of the papers.","1237":"1. Sequential Structure: Start with the SELECT clause to retrieve the average number of check-ins per day. Use the `AVG` function on the \"checkin.count\" field. Additionally, include a GROUP BY clause to group the check-ins by day, as the user query specifies the average per day.\n2. Condition Structure: Apply a WHERE clause to filter for the specific restaurant, \"Barrio Cafe.\" Also, ensure that the business is categorized as a \"restaurant\" by joining the `category` table and filtering for `category_name = 'restaurant'`.\n3. Join Structure: Use a JOIN between the `business` and `checkin` tables based on `business_id` to link the restaurant with its check-in records. Additionally, join the `category` table to ensure that the business is a restaurant.\n4. Aggregation Structure: Use the `AVG` function to calculate the average number of check-ins per day. Group the results by the `day` field to ensure the average is calculated per day.","1238":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"year\" of publication for the specified paper title. 2. Condition Structure: Use a WHERE clause to filter for the paper with the title \"A Switching Architecture For ISDN\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"paper\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","1239":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"dataset.datasetName\" since we are interested in the names of datasets. 2. Condition Structure: No specific filtering condition is needed in the WHERE clause, as we want to find all datasets related to the keyword \"semantic parsing.\" 3. Join Structure: Use a JOIN between the \"dataset\" and \"paperDataset\" tables based on \"datasetId\" to link datasets with their corresponding papers. 4. Aggregation Structure: No aggregation is needed here, but we will apply a WHERE clause to filter the results based on the presence of the keyword \"semantic parsing\" in the dataset names.","1240":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations per year. Use the FROM clause to specify the paper table, and join it with the writes table to link papers to their authors. 2. Condition Structure: Use a WHERE clause to filter for the author named 'luke zettlemoyer' to ensure we are only counting citations for this specific author. 3. Join Structure: Use JOINs between the writes and paper tables based on paperId to connect the author to their papers and then to the citations. 4. Aggregation Structure: Use GROUP BY to group the results by year and COUNT to calculate the number of citations for each year.","1241":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper details. Use the FROM clause to specify the paper table, as we need to filter papers based on their citation count. 2. Condition Structure: Use the WHERE clause to filter papers that have fewer than 5 citations. This will involve checking the numCitedBy column in the paper table. 3. Join Structure: We need to join the paper table with the cite table to ensure we are only considering citations from ACL papers. This will be done using the citingPaperId and citedPaperId. 4. Aggregation Structure: Not needed, as we are directly filtering based on the numCitedBy column without requiring any aggregation.","1242":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's ID and name. Use the FROM clause to specify the author table and join it with the writes and publication_keyword tables to link authors to their publications and the keywords associated with those publications. 2. Condition Structure: Use a WHERE clause to filter for publications that contain the keyword \"Relational Database\". 3. Join Structure: Use INNER JOINs between the author, writes, publication, and publication_keyword tables based on the author ID and publication ID to connect authors with their publications and the keywords associated with those publications. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and name, and use COUNT to count the number of papers for each author that contain the specified keyword. Finally, apply the ORDER BY clause to sort the results in descending order based on the count of papers, and limit the results to the top author.","1243":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"movie.title\" and \"movie.release_year.\" 2. Condition Structure: Apply a WHERE clause to filter for movies that were released in the year 2010 and belong to the Sci-Fi genre. 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"classification\" table on \"msid\" and then with the \"genre\" table on \"gid\" to ensure we can filter by genre. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the movies that meet the specified conditions.","1244":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names from the \"RESTAURANT\" table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food and are located in \"mountain view.\" 3. Join Structure: No JOIN is necessary here since the relevant information is contained within the \"RESTAURANT\" table, and the city name can be directly filtered. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the restaurants that meet the specified conditions.","1245":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. 2. Join Structure: Join the keyword table with the publication_keyword table on the kid field to link keywords to publications. Then, join the publication table to connect publications to journals using the jid field. Finally, join the journal table to filter for the journal named 'PVLDB'. 3. Condition Structure: Use a WHERE clause to filter for the journal name 'PVLDB'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1246":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the publication. Use the FROM clause to specify the publication table. We also need to join the journal table to filter for publications specifically in the 'PVLDB' journal. 2. Condition Structure: Use the WHERE clause to filter for publications that have more than 200 citations. 3. Join Structure: Use an INNER JOIN between the publication and journal tables based on the journal ID to connect publications with their respective journals. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","1247":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyword. Use the FROM clause to specify the keyword table. We will need to join it with the publication_keyword table to link keywords to publications, and then join with the publication table to filter for those associated with the VLDB conference. 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the VLDB conference by checking the conference.cid. 3. Join Structure: Use JOINs to connect the keyword table with the publication_keyword table on kid, and then join the publication table on pid to relate keywords to their respective publications. 4. Aggregation Structure: Use GROUP BY to group the results by keyword and COUNT to determine the number of papers associated with each keyword. Finally, use ORDER BY to sort the results in descending order and LIMIT to get the keyword with the highest count.","1248":"1. Sequential Structure: Start with the SELECT clause to specify the count of movies produced in the year 2013. 2. Condition Structure: Use a WHERE clause to filter for movies where \"movie.release_year\" is equal to 2013. 3. Join Structure: No JOIN is necessary since all required information is available in the \"movie\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of movies that meet the specified condition.","1249":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their publications. Then, join the publication table to filter for those publications that are in the journal 'PVLDB'. Finally, use GROUP BY to group the results by author ID to count the number of papers per author. 2. Condition Structure: No specific condition is needed in the WHERE clause for filtering authors, but we will filter publications to only include those from the journal 'PVLDB'. 3. Join Structure: Use INNER JOINs between the author, writes, and publication tables based on the author ID and publication ID to connect authors with their respective publications and filter by journal name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers for each author and apply ORDER BY to sort the results in descending order, limiting the output to the author(s) with the most papers.","1250":"1. Sequential Structure: Start with the SELECT clause to retrieve the references (cited publications) related to the title \"Making database systems usable\". Use the FROM clause to specify the cite table, as it contains the relationships between citing and cited publications. 2. Condition Structure: Use the WHERE clause to filter for the citing publication that matches the title \"Making database systems usable\". This will help us identify which publication's references we want to retrieve. 3. Join Structure: Use a JOIN between the cite table and the publication table to connect the citing publication with its corresponding cited publications based on the publication ID. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1251":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of restaurants named \"Denny\". Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants with the name \"Denny\" and located in the Bay Area, which can be identified by the REGION in the GEOGRAPHIC table. 3. Join Structure: Use an INNER JOIN between the RESTAURANT and GEOGRAPHIC tables based on the CITY_NAME to connect restaurant data with geographic regions. 4. Aggregation Structure: Use the COUNT function to aggregate the number of \"Denny\" restaurants in the specified region.","1252":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of keywords associated with the publication titled \"Making database systems usable\". Use the FROM clause to specify the publication table. 2. Condition Structure: Use a WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: Use JOIN clauses to connect the publication table with the publication_keyword table on the publication ID (pid) to access the associated keywords. 4. Aggregation Structure: Use the COUNT function to count the number of distinct keywords linked to the specified publication.","1253":"1. Sequential Structure: Start with the SELECT clause to count the number of Chinese restaurants. We will use the COUNT function on the \"RESTAURANT.NAME\" field. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve Chinese food and are located in the Bay Area. This will involve checking the \"FOOD_TYPE\" for 'Chinese' and the \"REGION\" for 'Bay Area'. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the \"CITY_NAME\" to ensure we are only counting restaurants in the specified region. 4. Aggregation Structure: Use COUNT to aggregate the number of Chinese restaurants that meet the specified conditions.","1254":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"release_year\" of the movie titled \"The Imitation Game\". 2. Condition Structure: Use a WHERE clause to filter for the movie with the title \"The Imitation Game\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"movie\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the release year of a specific movie.","1255":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. 2. Join Structure: Join the keyword table with the publication_keyword table on the kid field to link keywords to publications. Then, join the publication_keyword table with the writes table to connect publications to authors. Finally, join the writes table with the author table to filter by the author's name. 3. Condition Structure: Use the WHERE clause to filter for the author with the name \"H. V. Jagadish\". 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1256":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table, and join it with the conference table to filter by conference name. 2. Condition Structure: Use a WHERE clause to filter for the organization name 'University of Michigan' and the conference name 'PVLDB'. 3. Join Structure: Use JOINs between the publication and conference tables based on the conference ID, and also join with the domain_publication and organization tables to link publications to their respective organizations. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1257":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.CITY_NAME\" to identify the restaurant and its location. 2. Condition Structure: Apply a WHERE clause to filter for records where \"RESTAURANT.CITY_NAME\" matches 'alameda'. 3. Join Structure: No JOIN is necessary here since we are only querying the \"RESTAURANT\" table for restaurants located in 'alameda'. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the restaurants.","1258":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names and their ratings. We will select \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in \"Alameda.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered to show only the relevant restaurants in Alameda.","1259":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant names and their ratings. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated Arabic restaurant.","1260":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant columns, specifically the papers (titles) written by the authors. Use the FROM clause to specify the writes table, which connects authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the authors' names and the publication year. We need to ensure that the year is greater than 2005 and that the journal name is 'PVLDB'. 3. Join Structure: Use JOINs to connect the writes table with the author and publication tables. This will allow us to filter based on the authors' names and the journal. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1261":"1. Sequential Structure: Start with the SELECT clause to retrieve the citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Use the WHERE clause to filter for the specific publication title 'Making database systems usable' to find its citations. 3. Join Structure: An INNER JOIN is needed between the cite table and the publication table to link the citations to the correct publication based on the title. 4. Aggregation Structure: Not required, as we are simply retrieving citation records without any aggregation.","1262":"1. Sequential Structure: Start with the SELECT clause to count the number of distinct actors. Use the FROM clause to specify the `actor` table and join it with the `cast` table to link actors to the movies they acted in. Additionally, join the `movie` table to filter by the movie title \"Rush Hour 3\".\n2. Condition Structure: Use a WHERE clause to filter for actors whose nationality is \"China\" and to specify the movie title as \"Rush Hour 3\". The movie title is stored in the `movie` table, so we need to ensure the correct join path.\n3. Join Structure: Use an INNER JOIN between the `actor` and `cast` tables based on the actor ID (`aid`) to connect actors with their roles. Then, join the `movie` table to the `cast` table using `mid = msid` to filter by the movie title. This ensures the correct linkage between actors and the movie.\n4. Aggregation Structure: Use the `COUNT(DISTINCT)` function to count the number of unique actors that meet the specified conditions, ensuring that duplicate actor entries are not counted multiple times.","1263":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication ID (pid) and citation number (citation_num) from the publication table. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that were published after the year 2000. 3. Aggregation Structure: Use ORDER BY to sort the results by citation number in descending order to find the publication with the most citations. Additionally, use LIMIT to restrict the result to only the top entry. 4. Join Structure: Not required, as all necessary data is contained within the publication table.","1264":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields needed: \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve Arabic food, have a specific street name \"Buchanan,\" and are located in \"San Francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will filter the results based on the conditions specified.","1265":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct authors. Use the FROM clause to specify the publication table, and then join it with the writes table to link authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: Use an INNER JOIN between the publication and writes tables based on the publication ID (pid) to connect authors to the specific publication. 4. Aggregation Structure: Use the COUNT function to count the distinct authors associated with the specified publication.","1266":"1. Sequential Structure: Start with the SELECT clause to specify the \"conference.homepage\" that we want to retrieve. 2. Condition Structure: Use a WHERE clause to filter for the conference name that matches 'VLDB'. 3. Join Structure: No JOIN is necessary since all required information is available in the \"conference\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the homepage of the specified conference.","1267":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of citations. Use the FROM clause to specify the cite table, as it contains the citation information. 2. Condition Structure: Apply a WHERE clause to filter citations for the publication titled \"Making database systems usable\" and ensure the year is before 2010. 3. Join Structure: Use a JOIN between the cite table and the publication table to link citations to their respective publications based on the publication ID (pid). 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the specified publication.","1268":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, which in this case will be the \"publication\" details such as title and year. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the VLDB conference and have a year greater than 2000. 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the conference ID (cid) to link publications to their respective conferences. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant publication records based on the specified conditions.","1269":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the directors, specifically \"director.name.\" 2. Condition Structure: We need to filter the results based on the keywords related to \"nuclear weapons.\" This will be done using a WHERE clause that checks for the relevant keyword in the tags associated with the movies. 3. Join Structure: Use JOINs to connect the \"movie,\" \"directed_by,\" and \"director\" tables. The \"movie\" table will be joined with the \"directed_by\" table on \"movie.mid,\" and the \"directed_by\" table will be joined with the \"director\" table on \"directed_by.did.\" 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the keywords associated with nuclear weapons.","1270":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names that serve Arabic food. We will select \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that have a food type of 'arabic' and are located on 'buchanan' street in 'san francisco.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its location details. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified conditions.","1271":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table, and join it with the conference and publication_keyword tables to filter based on the conference and keyword. 2. Condition Structure: Use a WHERE clause to filter for the conference name 'VLDB' and the keyword 'Information Retrieval'. 3. Join Structure: Use JOINs between the conference, publication, and publication_keyword tables based on their respective keys to connect the conference with its publications and the publications with their keywords. 4. Aggregation Structure: Use the COUNT function to aggregate the number of publications that meet the specified conditions.","1272":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the actors who were born in Tehran. 2. Condition Structure: Use a WHERE clause to filter for actors whose \"actor.birth_city\" is 'Tehran'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors based on a specific condition.","1273":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.birth_city\" for the actor named \"Kevin Spacey\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is \"Kevin Spacey\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth city of the specified actor.","1274":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper (publication) details. Use the FROM clause to specify the publication table. 2. Aggregation Structure: Use the COUNT function to count the number of citations for each publication. 3. Grouping Structure: Use GROUP BY to group the results by publication ID to aggregate citation counts for each paper. 4. Condition Structure: Use ORDER BY to sort the results by the citation count in descending order and limit the results to the top one to get the paper with the most citations.","1275":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.birth_year\" for the actor named \"Benedict Cumberbatch\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is \"Benedict Cumberbatch\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth year of a specific actor.","1276":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct keywords. Use the `FROM` clause to specify the `publication_keyword` table, which links publications to keywords. Then, join the necessary tables to filter for publications associated with the \"University of Michigan.\"\n2. Condition Structure: Use a `WHERE` clause to filter for publications written by authors affiliated with the \"University of Michigan.\" This requires joining the `author` table with the `organization` table via the `oid` column, and then joining the `writes` table to link authors to publications.\n3. Join Structure: Use INNER JOINs between the `publication`, `publication_keyword`, `writes`, `author`, and `organization` tables. The `organization` table is joined with the `author` table via the `oid` column, and the `writes` table is used to link authors to publications. The `publication_keyword` table is joined to count the keywords associated with the filtered publications.\n4. Aggregation Structure: Use the `COUNT(DISTINCT keyword.kid)` function to count the distinct keywords associated with the publications from the \"University of Michigan.\" The `DISTINCT` keyword ensures that only unique keywords are counted, avoiding duplicates.","1277":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"movie.budget\" for the movie titled \"Juno\" released in 2007. 2. Condition Structure: Use a WHERE clause to filter for the movie title \"Juno\" and the release year \"2007\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"movie\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a specific budget value based on the conditions.","1278":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper title from the publication table. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that have more than 200 citations. 3. Join Structure: Not required, as we only need data from the publication table to check the citation count. 4. Aggregation Structure: Not needed, as we are directly filtering based on the citation number without any aggregation.","1279":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"domain.name\" where the author \"H. V. Jagadish\" is focused. 2. Condition Structure: Use a WHERE clause to filter for the specific author name \"H. V. Jagadish.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"domain_author\" table based on \"aid,\" and then join the \"domain\" table based on \"did\" to get the corresponding domain. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the domain name associated with the specified author.","1280":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' information. Use the FROM clause to specify the author table. 2. Condition Structure: Apply a WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: Use an INNER JOIN between the author and writes tables based on the author ID to link authors to their publications. Additionally, join the publication table to access the title. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1281":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"movie.title\" for the titles of the movies written by Matt Damon. 2. Condition Structure: Apply a WHERE clause to filter for records where the writer's name is \"Matt Damon.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"written_by\" table based on \"msid\" to link each movie with its respective writers. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the movies without any summarization.","1282":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant columns, specifically the papers (publications) authored by \"H. V. Jagadish\" that are published in the journal \"PVLDB\". The FROM clause will specify the publication table, and we will need to join it with the writes and journal tables to filter based on the author's name and journal name. 2. Condition Structure: Use the WHERE clause to filter for the author's name as \"H. V. Jagadish\" and the journal name as \"PVLDB\". 3. Join Structure: Use INNER JOINs between the writes table and the author table to link authors to their publications, and between the publication table and the journal table to link publications to their respective journals. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1283":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"RESTAURANT.NAME\" of the restaurants that serve Arabic food. 2. Condition Structure: Apply a WHERE clause to filter for restaurants where \"RESTAURANT.FOOD_TYPE\" is 'Arabic' and \"RESTAURANT.CITY_NAME\" is 'Mountain View.' 3. Join Structure: No JOIN is necessary since all required information is available within the \"RESTAURANT\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the restaurants that meet the specified conditions.","1284":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct journals. Use the FROM clause to specify the journal table. 2. Condition Structure: Use a WHERE clause to filter for authors with the name 'H. V. Jagadish' by joining the author and writes tables to link authors to their publications. 3. Join Structure: Use JOINs between the author, writes, and publication tables to connect authors to their papers and then to the journals. 4. Aggregation Structure: Use COUNT(DISTINCT journal.jid) to count the number of unique journals that have papers authored by 'H. V. Jagadish'.","1285":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of keywords. Use the FROM clause to specify the keyword table. 2. Join Structure: Join the keyword table with the publication_keyword table on the keyword ID to link keywords to publications. Then, join the publication table with the conference table to filter for publications associated with the conference 'PVLDB'. 3. Condition Structure: Use a WHERE clause to filter for publications that belong to the conference with the name 'PVLDB'. 4. Aggregation Structure: Use the COUNT function to count the number of distinct keywords associated with the publications from the specified conference.","1286":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations, which will involve using the SUM function on the \"publication.citation_num\" field. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the conference named \"PVLDB.\" 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the \"cid\" to link each publication with its respective conference. 4. Aggregation Structure: Use SUM to aggregate the citation numbers for all publications that meet the specified condition.","1287":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. We will use the COUNT function to get the total number of papers. 2. Condition Structure: Apply a WHERE clause to filter for the specific conference name, which is \"VLDB.\" 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the conference ID (cid) to link publications to their respective conferences. 4. Aggregation Structure: Use COUNT to aggregate the number of publications associated with the VLDB conference.","1288":"1. Sequential Structure: Start with the SELECT clause to count the number of actors. 2. Condition Structure: Use a WHERE clause to filter actors who were born in \"Los Angeles\" and after the year 2000. 3. Join Structure: No JOIN is necessary since all relevant information is in the \"actor\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of actors that meet the specified conditions.","1289":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"producer.pid\" and the count of distinct directors they have worked with. 2. Condition Structure: No specific filtering condition is needed, as we want to find the producer with the maximum number of directors. 3. Join Structure: Use JOIN clauses to connect the \"producer\" table with the \"made_by\" table on \"producer.pid\" and the \"directed_by\" table on \"made_by.msid\" to link producers with directors. 4. Aggregation Structure: Use COUNT with DISTINCT to count the number of unique directors for each producer, and then use ORDER BY in descending order to rank them. Finally, use LIMIT 1 to get the producer who has worked with the most directors.","1290":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of movies. Use the FROM clause to specify the movie table. 2. Join Structure: Use an INNER JOIN between the movie table and the directed_by table on the movie ID (msid) to connect movies with their directors. 3. Condition Structure: Use a WHERE clause to filter for the director of the movie \"Revolutionary Road\" by matching the director ID (did) from the directed_by table. 4. Aggregation Structure: Not required, as we are simply retrieving movie titles based on the director's ID without any aggregation.","1291":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations, which will involve using the SUM function on the \"publication.citation_num\" field. 2. Condition Structure: Apply a WHERE clause to filter for publications from the year 2005 and those that are associated with the conference named \"PVLDB.\" 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the \"cid\" to link each publication with its respective conference. 4. Aggregation Structure: Use SUM to aggregate the citation numbers for the filtered publications.","1292":"1. Sequential Structure: Start with the SELECT clause to retrieve the business ID and the count of categories. Use the FROM clause to specify the business table and JOIN it with the category table to link businesses with their categories. 2. Aggregation Structure: Use COUNT to count the number of categories for each business and GROUP BY to group the results by business ID. 3. Condition Structure: Use the ORDER BY clause to sort the results in descending order based on the count of categories, and limit the results to get the business with the most categories. 4. Join Structure: Use an INNER JOIN between the business and category tables based on business_id to relate businesses to their categories.","1293":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" since we want to know the name of a good restaurant and its rating. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in \"Alameda\" and having a good rating. We can define a good rating as being above a certain threshold, for example, greater than or equal to 4. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will filter based on the rating condition in the WHERE clause.","1294":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference details. Use the FROM clause to specify the conference table. 2. Join Structure: Join the conference table with the publication table on the conference ID (cid) to link conferences with their respective publications. Then, join the publication table with the publication_keyword table to connect publications with their keywords. 3. Aggregation Structure: Use GROUP BY to group the results by conference ID, allowing us to count the number of papers associated with the keyword \"Relational Database\". 4. Condition Structure: Apply a HAVING clause to filter groups where the count of papers is greater than 60, ensuring we only get conferences with more than 60 papers containing the specified keyword.","1295":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie title and budget. Use the FROM clause to specify the movie table. 2. Join Structure: Join the movie table with the made_by table on the msid to connect movies with their producers. Then, join the made_by table with the producer table on the pid to get the producer's name. 3. Condition Structure: Use a WHERE clause to filter for movies produced by \"Quentin Tarantino\". Additionally, to get the latest movie, we will need to order the results by the release year in descending order and limit the results to the top one. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1296":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant columns, specifically the publication ID (pid) and any other desired fields from the publication table. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that have more than 200 citations and are authored by \"H. V. Jagadish\" in the journal \"PVLDB\". 3. Join Structure: Use JOIN clauses to connect the author table with the publication table through the writes relationship, and also join the publication table with the journal table to filter by journal name. 4. Aggregation Structure: Not needed, as we are filtering based on specific conditions without requiring aggregation.","1297":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyword. Use the FROM clause to specify the keyword table. We will also need to join with the publication_keyword table to link keywords to publications, and then join with the writes table to connect publications to authors. 2. Condition Structure: We will apply a WHERE clause to filter for publications written by the author \"H. V. Jagadish\". 3. Join Structure: Use INNER JOINs to connect the keyword table with the publication_keyword table on the keyword ID, and then join the publication_keyword table with the writes table on the publication ID to relate keywords to the specific author's publications. 4. Aggregation Structure: Use GROUP BY to group the results by keyword and COUNT to determine the number of papers associated with each keyword. Finally, use ORDER BY to sort the results in descending order based on the count and limit the results to get the keyword with the highest count.","1298":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best restaurant for French food. 2. Condition Structure: Use a WHERE clause to filter for records where \"RESTAURANT.CITY_NAME\" is 'san francisco' and \"RESTAURANT.FOOD_TYPE\" is 'french'. 3. Join Structure: No JOIN is necessary since the relevant information can be accessed directly from the \"RESTAURANT\" table based on the city name. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated French restaurant. Use LIMIT 1 to get only the top result.","1299":"1. Sequential Structure: Start with the SELECT clause to count the number of movies. Use the FROM clause to specify the `movie` table. Alias the tables to avoid ambiguity and improve readability.\n2. Join Structure: Join the `movie` table with the `directed_by` table using `movie.mid = directed_by.msid` to link movies with their directors. Then, join the `director` table using `directed_by.did = director.did` to filter for the director \"Asghar Farhadi\". Similarly, join the `cast` table using `movie.mid = cast.msid` to link movies with their actors, and then join the `actor` table using `cast.aid = actor.aid` to filter for the actor \"Taraneh Alidoosti\".\n3. Condition Structure: Use a WHERE clause to filter for movies directed by \"Asghar Farhadi\" and featuring \"Taraneh Alidoosti\". Ensure that the conditions are applied to the correct columns in the `director` and `actor` tables.\n4. Aggregation Structure: Use the COUNT function to count the number of movies that meet the specified conditions.","1300":"1. Sequential Structure: Start with the SELECT clause to retrieve the year of release and the count of movies directed by \"Woody Allen.\" We will need to include the release year from the \"movie\" table and the count of movie IDs. 2. Condition Structure: We will apply a WHERE clause to filter for the director's name, specifically \"Woody Allen.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"directed_by\" table based on the movie ID (msid) and then join with the \"director\" table based on the director ID (did) to link each movie with its respective director. 4. Aggregation Structure: Use COUNT to count the number of movies per year and GROUP BY the release year to summarize the results by year.","1301":"1. Sequential Structure: Start with the SELECT clause to count the number of restaurants. We will use the COUNT function on the restaurant ID. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Chinese\" food and are located in the \"Bay Area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only counting restaurants in the specified region. 4. Aggregation Structure: Use COUNT to aggregate the number of Chinese restaurants in the Bay Area.","1302":"1. Sequential Structure: Start with the SELECT clause to specify the count of organizations in the \"Databases\" area. 2. Condition Structure: Use a WHERE clause to filter organizations that are in the \"Databases\" area. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"organization\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of organizations that meet the specified condition.","1303":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs and names. Use the FROM clause to specify the author table. 2. Join Structure: Join the author table with the writes table on the author ID to link authors to their publications. Then, join the publication table with the journal table to filter for publications in the journal \"PVLDB\". 3. Aggregation Structure: Use GROUP BY to group the results by author ID and name, allowing us to count the number of papers each author has published in \"PVLDB\". 4. Condition Structure: Apply a HAVING clause to filter for authors who have more than 10 publications in \"PVLDB\".","1304":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name and rating. Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve 'American' food and are located in the 'Bay Area'. 3. Join Structure: Not required, as all necessary data can be accessed directly from the RESTAURANT table with the given conditions. 4. Aggregation Structure: Use ORDER BY to sort the results by rating in descending order and limit the results to get the best restaurant.","1305":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING\" for the desired output. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"Mountain View\" and have a \"FOOD_TYPE\" of \"Arabic.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered to show only the relevant restaurants.","1306":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in the regions of \"Yosemite\" or \"Mono Lake.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified regions. 4. Aggregation Structure: No aggregation is needed here, but we will apply ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurants.","1307":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"publication.pid\" which represents the papers written by the authors. 2. Condition Structure: Use a WHERE clause to filter for the specific authors \"H. V. Jagadish\" and \"Divesh Srivastava.\" 3. Join Structure: Use JOIN clauses to connect the \"writes\" table with the \"author\" table based on \"author.aid\" and \"writes.aid\" to link each paper with its respective authors. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to select distinct papers written by either of the authors.","1308":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name from the \"RESTAURANT\" table. 2. Condition Structure: Use a WHERE clause to filter for the specific street name \"bethel island rd\" and city name \"bethel island.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its location details. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the name of the restaurant that matches the specified conditions.","1309":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their publications. Then, JOIN the publication table to connect publications to the conference table. Finally, apply GROUP BY to group the results by author ID. 2. Condition Structure: Use the HAVING clause to filter for authors who have more than 10 publications in the VLDB conference. 3. Join Structure: Use INNER JOINs between the author, writes, publication, and conference tables based on the relevant foreign keys to connect authors to their publications and the corresponding conference. 4. Aggregation Structure: Use COUNT to aggregate the number of publications per author and filter those with a count greater than 10.","1310":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers written by the specified authors. Use the FROM clause to specify the writes table, which links authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the authors whose names are \"H. V. Jagadish\", \"Yunyao Li\", and \"Cong Yu\". 3. Join Structure: Use an INNER JOIN between the writes table and the author table based on the author ID to connect authors with their written papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified authors.","1311":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the organization name, continent, homepage, and oid. 2. Condition Structure: No specific filtering condition is required since we want to return all organizations. 3. Join Structure: No JOIN is needed as all necessary information is available in the \"organization\" table. 4. Aggregation Structure: No aggregation is required since we are retrieving all records without summarization.","1312":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"publication.year\" for the specific title \"Making database systems usable\". 2. Condition Structure: Use a WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","1313":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' names. Use the FROM clause to specify the author table. 2. Join Structure: Use JOIN to connect the author table with the writes table on the author ID (aid) to find publications written by the authors. 3. Condition Structure: Use a WHERE clause to filter for authors who have written publications with both \"H. V. Jagadish\" and \"Divesh Srivastava\". This will require subqueries to ensure that the authors have collaborated with both specified authors. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and apply a HAVING clause to ensure that the count of distinct authors they have collaborated with is at least 2 (for both authors).","1314":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"publication.year\" for the specific title \"Making database systems usable\". 2. Condition Structure: Use a WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","1315":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" Ensure that the query filters for restaurants that serve \"Arabic\" food, are located on \"Buchanan\" street, and are in the city of \"San Francisco.\" Additionally, filter for restaurants with a rating greater than 2.5 to meet the user's request for \"good\" places.\n2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food (`RESTAURANT.FOOD_TYPE = 'Arabic'`), are located on \"Buchanan\" street (`LOCATION.STREET_NAME = 'Buchanan'`), and are in the city of \"San Francisco\" (`LOCATION.CITY_NAME = 'San Francisco'`). Also, add a condition to filter for restaurants with a rating greater than 2.5 (`RESTAURANT.RATING > 2.5`).\n3. Join Structure: Use a JOIN clause to connect the `RESTAURANT` and `LOCATION` tables based on the `RESTAURANT.ID` and `LOCATION.RESTAURANT_ID` fields, as this is the correct foreign key relationship between the two tables.\n4. Aggregation Structure: No aggregation is needed, but we ensure that the results are filtered based on the specified conditions, including the rating filter.","1316":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"publication.title\" and \"publication.year\" for the papers published after the year 2000 in the journal \"PVLDB.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"publication.year\" is greater than 2000 and the journal name is \"PVLDB.\" 3. Join Structure: Use a JOIN between the \"publication\" and \"journal\" tables based on \"publication.jid = journal.jid\" to link each publication with its respective journal. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and years of the publications that meet the specified conditions.","1317":"1. Sequential Structure: Start with the SELECT clause to retrieve the papers (publications) authored by \"H. V. Jagadish\" that contain the keyword \"User Study\". The FROM clause will specify the publication table, and we will need to join it with the writes and keyword tables to filter based on the author's name and the keyword. 2. Condition Structure: Use a WHERE clause to filter for the author's name \"H. V. Jagadish\" and the keyword \"User Study\". 3. Join Structure: Use JOIN clauses to connect the author table with the writes table (to get the publications written by the author) and the publication table (to get the publication details). Additionally, join the publication table with the publication_keyword table to link publications with their keywords. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1318":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant names and their ratings. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve \"Arabic\" food and have a \"good\" rating. The term \"good\" can be interpreted as a rating above a certain threshold, which we will assume to be greater than or equal to 4 (this threshold can be adjusted based on the context). 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"CITY_NAME\" to ensure we are only looking at restaurants in \"Mountain View.\" Additionally, we will join the \"GEOGRAPHIC\" table to confirm the city name. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered correctly based on the conditions specified.","1319":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conference.name\" and \"conference.homepage\" for the conference named \"PVLDB\". 2. Condition Structure: Use a WHERE clause to filter for the conference where \"conference.name\" is equal to 'PVLDB'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"conference\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of the specified conference.","1320":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located on \"buchanan\" street, and are in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated restaurant.","1321":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also ensure the city matches \"Mountain View\" through the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated Arabic restaurant.","1322":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best American restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve \"American\" food and are located in the \"Bay Area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant, and apply LIMIT 1 to get only the top result.","1323":"1. Sequential Structure: Start with the SELECT clause to specify the count of organizations in the \"North America\" continent within the \"Databases\" area. 2. Condition Structure: Use a WHERE clause to filter organizations that are located in \"North America\". 3. Join Structure: No JOIN is necessary since the relevant information is contained within the \"organization\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of organizations that meet the specified condition.","1324":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER\" and \"LOCATION.STREET_NAME\" to provide the address of the restaurant. 2. Condition Structure: Apply a WHERE clause to filter for the specific restaurant name \"jamerican cuisine\" and the city \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to get the location details of the restaurant. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the location details of the specified restaurant.","1325":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and join it with the writes and publication tables to access the relevant papers and their citation counts. 2. Condition Structure: Apply a WHERE clause to filter for authors whose homepage is 'University of Michigan' and to ensure that the papers are in the 'Databases' area by checking the keyword. 3. Join Structure: Use JOINs to connect the author table with the writes table (to link authors to their publications) and the publication table (to access citation numbers). Additionally, join with the domain_publication and domain_keyword tables to filter publications based on the specified keyword. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and SUM to calculate the total citations for each author. Finally, use ORDER BY to sort the results by total citations in descending order and limit the output to the top result.","1326":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct movie titles. Use the `FROM` clause to specify the relevant tables, beginning with the `actor` table to find the actor's ID. The `DISTINCT` keyword is necessary in the `COUNT` function to ensure that only unique movie titles are counted.\n2. Condition Structure: Use a `WHERE` clause to filter for the actor named 'Jennifer Aniston' and to ensure that the release year of the movies is greater than 2010. Additionally, use table aliases to improve clarity and avoid potential syntax errors.\n3. Join Structure: Use `JOIN` clauses to connect the `actor` table with the `cast` table on `aid` (actor ID), and then join the `cast` table directly with the `movie` table on `msid` (movie ID). The `copyright` table is not needed for this query, as the `cast` and `movie` tables can be joined directly.\n4. Aggregation Structure: Use the `COUNT(DISTINCT)` function to aggregate the number of unique movie titles that meet the specified conditions.","1327":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal name. Use the FROM clause to specify the journal table. We will also need to join with the publication and publication_keyword tables to link journals with their respective publications and keywords. 2. Condition Structure: Use a WHERE clause to filter for publications that contain the keyword \"Relational Database\". 3. Join Structure: Use JOINs between the journal, publication, and publication_keyword tables based on their respective keys to connect journals with their publications and the keywords associated with those publications. 4. Aggregation Structure: Use GROUP BY to group the results by journal ID and COUNT to count the number of publications for each journal that contain the specified keyword. Finally, use ORDER BY to sort the results in descending order based on the count and limit the result to the top journal.","1328":"1. Sequential Structure: Start with the SELECT clause to retrieve the director's name. We will select \"director.name.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific movie title \"James Bond.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"copyright\" table on \"msid,\" and then join the \"directed_by\" table to link to the \"director\" table using \"did.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the director's name for the specified movie.","1329":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best American restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are American and located in the Bay Area. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order and LIMIT 1 to get the best-rated American restaurant.","1330":"1. Sequential Structure: Start with the SELECT clause to retrieve the author details. Use the FROM clause to specify the author table. 2. Condition Structure: Use a WHERE clause to filter for authors who have cooperated with 'H. V. Jagadish' by checking the writes table for publications associated with this author. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on author IDs to find the publications written by 'H. V. Jagadish' and then join with the writes table again to find other authors who have written those publications. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1331":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.FOOD_TYPE.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the \"Bay Area.\" This will involve checking the \"GEOGRAPHIC.REGION\" for the \"Bay Area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to link each restaurant with its geographic region. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and food types of the restaurants.","1332":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of keywords. Use the FROM clause to specify the conference table. 2. Condition Structure: Apply a WHERE clause to filter for the conference with the name 'VLDB'. 3. Join Structure: Use JOINs to connect the conference table with the domain_conference and domain_keyword tables based on the conference ID and domain ID. 4. Aggregation Structure: Use COUNT to aggregate the number of keywords associated with the VLDB conference.","1333":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the publication ID (pid) of the papers that meet the criteria. 2. Condition Structure: Use a WHERE clause to filter for publications with a year greater than 2000 and citation numbers greater than 200. 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the publication IDs that meet the specified conditions.","1334":"1. Sequential Structure: Begin with the SELECT clause to retrieve the actor's name who plays the role of \"Olivia Pope\" in the series \"Scandal.\" Use the FROM clause to reference the relevant tables: `cast`, `actor`, and `tv_series`. Aliasing the tables will improve clarity and avoid potential syntax errors.\n2. Condition Structure: Use a WHERE clause to filter for the specific role \"Olivia Pope\" and the title of the series \"Scandal.\" Ensure that the `msid` in the `cast` table is directly linked to the `sid` in the `tv_series` table.\n3. Join Structure: Use JOIN clauses to connect the `cast` table with the `actor` table based on the actor's ID (`aid`) and the `tv_series` table based on the series ID (`sid`). This ensures the correct linkage between the actor, their role, and the series.\n4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the name of the actor.","1335":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the names of actors. Use the `FROM` clause to specify the `actor` table and join it with the `cast` table to link actors to their roles in movies. Additionally, join the `movie` table to filter for the latest movie directed by Quentin Tarantino. The query should order the movies by release year and limit the result to the latest one.\n2. Condition Structure: Use a `WHERE` clause to filter for movies directed by Quentin Tarantino. Instead of using `MAX(release_year)`, apply an `ORDER BY` clause on the release year and limit the result to the latest movie.\n3. Join Structure: Use `JOIN` clauses between the `actor`, `cast`, `movie`, `directed_by`, and `director` tables. The `actor` table should be joined with the `cast` table using `cast.aid = actor.aid`, and the `cast` table should be joined with the `movie` table using `cast.msid = movie.mid`. Additionally, join the `directed_by` and `director` tables to filter for Quentin Tarantino as the director.\n4. Aggregation Structure: No aggregation is needed. Instead, use `ORDER BY` on the release year and `LIMIT 1` to get the latest movie.","1336":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"organization.name\" of the organizations in the specified domain. 2. Condition Structure: Use a WHERE clause to filter for records where the keyword is 'Databases.' 3. Join Structure: Use JOINs to connect the \"organization\" table with the \"domain\" table through the \"domain_keyword\" and \"keyword\" tables to ensure we are only selecting organizations related to the 'Databases' keyword. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of organizations without any summarization.","1337":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best French restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are located in \"San Francisco\" and have a \"FOOD_TYPE\" of \"French.\" 3. Join Structure: Use JOINs to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"CITY_NAME\" and then with the \"GEOGRAPHIC\" table to ensure we are only considering restaurants in \"San Francisco.\" 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated French restaurant, and apply LIMIT 1 to get only the top result.","1338":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"American\" food and are located in the \"Bay Area.\" This will involve checking the \"FOOD_TYPE\" and ensuring the \"CITY_NAME\" corresponds to the Bay Area. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the Bay Area. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant, and apply LIMIT 1 to get only the top result.","1339":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the movie titles from the `movie` table. Use the `FROM` clause to specify the `cast` table and join it with the `actor` table to filter for the specific actors. Additionally, join the `cast` table with the `movie` table to retrieve the movie details.\n2. Join Structure: Use INNER JOINs between the `cast` and `actor` tables based on the actor ID (`aid`) to link actors to their respective roles in movies. Perform a self-join on the `cast` table to ensure that both actors are in the same movie. Also, join the `cast` table with the `movie` table to retrieve the movie titles.\n3. Condition Structure: Use a WHERE clause to filter for both actors, \"Woody Strode\" and \"Jason Robards\". Ensure that both actors are present in the same movie by using two separate conditions (one for each actor) and linking them with the movie ID (`msid`).\n4. Aggregation Structure: No aggregation is needed, as we are retrieving specific records without any summary or aggregate functions.","1340":"1. Sequential Structure: Begin with the SELECT clause to retrieve the actor's name from the \"actor\" table. Use table aliases to improve readability and avoid ambiguity. The FROM clause will include the necessary tables, and the WHERE clause will filter for the specific movie title \"The Imitation Game\" and the role \"Alan Turing.\"\n2. Condition Structure: Apply a WHERE clause to filter for the movie title \"The Imitation Game\" and the role \"Alan Turing.\" Ensure that the string matching is case-sensitive and exact to avoid potential issues with the query returning no results.\n3. Join Structure: Use JOIN clauses to connect the \"actor\" table with the \"cast\" table based on \"cast.aid = actor.aid\" and the \"cast\" table with the \"movie\" table based on \"cast.msid = copyright.msid\" and \"movie.mid = copyright.msid.\" Alias the tables to avoid ambiguity and improve readability.\n4. Aggregation Structure: No aggregation is needed, as we are directly retrieving the actor's name based on the specified conditions.","1341":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, their food type, and rating. We will select \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in either \"Yosemite\" or \"Mono Lake.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified geographic areas. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered correctly based on the conditions specified.","1342":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table, and join it with the writes table to link authors to their publications. Additionally, join the conference table to filter by conference name. 2. Condition Structure: Use the WHERE clause to filter for publications authored by \"H. V. Jagadish\" and those published in the \"VLDB\" conference after the year 2000. 3. Join Structure: Use INNER JOINs between the publication, writes, and conference tables based on the appropriate foreign keys to connect authors with their publications and the corresponding conference. 4. Aggregation Structure: Use COUNT to aggregate the number of publications that meet the specified conditions.","1343":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant field, which is the `movie.title` to get the names of the films in which the actor participated. \n2. Condition Structure: Apply a WHERE clause to filter for the specific actor \"Rowan Atkinson\" and the role \"Mr. Bean.\" \n3. Join Structure: Use JOIN clauses to connect the `cast` table with the `actor` table based on `cast.aid = actor.aid` and with the `movie` table based on `cast.msid = movie.mid` to link the actor's role to the films.\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the list of films.","1344":"1. Sequential Structure: Start with the SELECT clause to count the number of restaurants that serve French food. We will use the COUNT function to get the total number of places. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that have a food type of 'French' and are located in 'Palo Alto.' 3. Join Structure: No JOIN is necessary here since the relevant information can be found directly in the \"RESTAURANT\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of restaurants that meet the specified conditions.","1345":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name and its rating. We will also need to include the house number and street name for the specific location. 2. Condition Structure: Apply a WHERE clause to filter for the specific street name \"Bethel Island Rd\" and the city name \"Bethel Island.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the restaurant's ID and the location's restaurant ID, and also join with the \"GEOGRAPHIC\" table to ensure the city matches. 4. Aggregation Structure: No aggregation is needed here, but we will filter for restaurants with a good rating, which we can assume to be above a certain threshold (e.g., 4 or higher).","1346":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table and JOIN it with the conference table to link publications to their respective conferences. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the VLDB conference and have a year greater than 2000. 3. Join Structure: Use an INNER JOIN between the publication and conference tables based on the conference ID (cid) to connect publications to the VLDB conference. 4. Aggregation Structure: Use the COUNT function to aggregate the number of publications that meet the specified conditions.","1347":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of publications. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications authored by \"H. V. Jagadish\" and published after the year 2000. 3. Join Structure: Use an INNER JOIN between the publication and writes tables to connect publications with their authors based on the author ID. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1348":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference details. Use the FROM clause to specify the conference table. 2. Join Structure: Join the conference table with the publication table on the conference ID (cid) to link conferences with their respective papers. Then, join the publication table with the writes table to connect papers with their authors. 3. Condition Structure: Use a WHERE clause to filter for papers written by the author \"H. V. Jagadish\". 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1349":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the \"actor.name\" of the female actors from Austin. 2. Condition Structure: Use a WHERE clause to filter for actors whose gender is 'female' and whose birth city is 'Austin'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of the actors that meet the specified conditions.","1350":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"LOCATION.CITY_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific restaurant name \"Jamerican Cuisine.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the relationship between \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to link each restaurant with its location. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the location of the specified restaurant.","1351":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names that serve Arabic food. We will select \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve Arabic food, located on \"Buchanan\" street in \"San Francisco.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city and street. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified conditions.","1352":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant columns from the publication table. Use the FROM clause to specify the publication table and join it with the domain_publication table to filter by the domain related to Databases. 2. Condition Structure: Use the WHERE clause to filter for publications that are in the Databases area (by checking the domain) and have a year greater than 2000 and more than 200 citations. 3. Join Structure: Use an INNER JOIN between the publication and domain_publication tables based on the publication ID to relate publications to their respective domains. 4. Aggregation Structure: Not needed, as we are filtering based on specific conditions without requiring aggregation.","1353":"1. Sequential Structure: Start with the SELECT clause to retrieve the citations of each paper, which will be the \"cite.citing\" field. We also need to include the \"publication.pid\" to identify which paper the citation belongs to. 2. Condition Structure: Apply a WHERE clause to filter for records where the conference name is 'VLDB'. 3. Join Structure: Use a JOIN between the \"conference\" and \"publication\" tables based on \"conference.cid\" and \"publication.cid\" to link each publication to its respective conference. Additionally, join the \"cite\" table to get the citations for those publications. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the citations for each paper.","1354":"1. Sequential Structure: Begin with the SELECT clause to retrieve the \"cast.role\" and \"actor.name\" for the specified movie title. The FROM clause should start with the \"cast\" table, as it contains the roles, and the \"actor\" table, as it contains the actor names.\n2. Condition Structure: Apply a WHERE clause to filter for the movie title \"Daddy Long Legs.\" This requires joining the \"movie\" table to filter by the movie title.\n3. Join Structure: Use JOIN clauses to connect the \"cast\" table with the \"actor\" table based on \"aid\" to retrieve the actor names. Then, join the \"cast\" table with the \"copyright\" table based on \"msid,\" and finally join the \"copyright\" table with the \"movie\" table based on \"mid\" to link the roles to the correct movie.\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the roles and actor names associated with the specified movie.","1355":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the publications. Use the FROM clause to specify the publication table. 2. Join Structure: Join the publication table with the journal table to filter for publications in the journal 'PVLDB'. Additionally, join with the publication_keyword table to link publications with their keywords, and then join with the keyword table to filter for the specific keyword 'Keyword search'. 3. Condition Structure: Use a WHERE clause to filter for the journal name 'PVLDB' and the keyword 'Keyword search'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1356":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication details. Use the FROM clause to specify the publication table. We will also need to join the conference table to filter for the VLDB conference. 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the VLDB conference by checking the conference name. 3. Join Structure: Use an INNER JOIN between the publication and conference tables based on the conference ID (cid) to relate publications to their respective conferences. 4. Aggregation Structure: Use ORDER BY to sort the results by citation number in descending order and limit the results to the top one to get the paper with the most citations.","1357":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names from the \"RESTAURANT\" table. 2. Condition Structure: Use a WHERE clause to filter for records where the street name is 'bethel island rd' and the city name is 'bethel island.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its location. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified conditions.","1358":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal ID, homepage, and name. Use the FROM clause to specify the journal table. 2. Join Structure: Join the journal table with the publication_keyword table on the journal ID to link journals with their publications. Then, join with the keyword table to filter for the specific keyword \"Relational Database\". 3. Aggregation Structure: Use GROUP BY to group the results by journal ID, allowing us to count the number of papers associated with the keyword for each journal. 4. Condition Structure: Apply a HAVING clause to filter for journals that have more than 60 papers containing the specified keyword.","1359":"1. Sequential Structure: Start with the SELECT clause to retrieve the citations for each paper. We will need to select the \"cite.cited\" field to show which papers are cited by others. 2. Condition Structure: We need to filter the results to include only those publications that are associated with the \"PVLDB\" journal. This will be done using a WHERE clause that checks if the \"publication.jid\" matches the journal ID for \"PVLDB.\" 3. Join Structure: We will use JOIN clauses to connect the \"publication\" table with the \"cite\" table based on the publication ID. This will allow us to link each publication with its citations. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the citations for each paper.","1360":"1. Sequential Structure: Start with the SELECT clause to specify the count of organizations in \"North America\". 2. Condition Structure: Use a WHERE clause to filter organizations where \"organization.continent\" is equal to \"North America\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"organization\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of organizations that meet the specified condition.","1361":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles. Use the FROM clause to specify the movie table. \n2. Join Structure: Join the movie table with the copyright table on the movie ID (mid) to link movies with their cast. Then, join the cast table twice with the actor table to connect both actors (\"Jason Robards\" and \"Woody Strode\") to their roles in the same movie. This ensures that both actors are associated with the same movie.\n3. Condition Structure: Use a WHERE clause to filter for movies that feature both \"Jason Robards\" and \"Woody Strode\". This will require two separate conditions in the WHERE clause, one for each actor, after joining the cast table twice.\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1362":"1. Sequential Structure: Start with the SELECT clause to retrieve the author ID (aid) from the author table. Use the FROM clause to specify the author table and join it with the publication table to link authors to their papers. Then, join the publication table with the conference table to filter for papers specifically in the VLDB conference. 2. Condition Structure: Use a WHERE clause to filter for the conference name that matches 'VLDB'. 3. Join Structure: Use INNER JOINs between the author, publication, and conference tables based on the appropriate foreign keys to connect authors to their publications and the corresponding conference. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and COUNT to count the number of papers for each author. Finally, use ORDER BY to sort the results in descending order based on the count of papers and limit the result to the top author.","1363":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication details, specifically the title and citation number. Use the FROM clause to specify the publication table and join it with the domain_publication table to filter by the domain. 2. Condition Structure: Use the WHERE clause to filter for publications that are from the year 2000 or later and belong to the 'Databases' domain. 3. Join Structure: Use JOIN clauses to connect the publication table with the domain_publication table based on the publication ID (pid) and the domain ID (did). This will allow us to filter publications based on their domain. 4. Aggregation Structure: Use ORDER BY to sort the results by citation number in descending order to get the publication with the most citations at the top. Limit the results to 1 to return only the top publication.","1364":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are in \"Mountain View\" and have a \"FOOD_TYPE\" of \"Arabic.\" 3. Join Structure: Use JOINs to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"CITY_NAME,\" and also ensure that the \"CITY_NAME\" matches with the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered based on the specified conditions.","1365":"1. Sequential Structure: Start with the SELECT clause to specify the count of keywords, which will be derived from the \"keyword\" table. 2. Condition Structure: No specific filtering condition is needed since we want the total number of keywords. 3. Join Structure: No JOIN is required as all necessary information is contained within the \"keyword\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of keywords available in the \"keyword\" table.","1366":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the restaurant name and rating. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve 'arabic' food and are located in 'mountain view'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"RESTAURANT\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and ratings of the restaurants that meet the specified conditions.","1367":"1. Sequential Structure: Start with the SELECT clause to retrieve the necessary fields. We need the publication details, so we will select fields from the \"publication\" table, specifically \"publication.pid\" and any other relevant fields like \"publication.title\" or \"publication.year\" if needed. 2. Condition Structure: Apply a WHERE clause to filter for publications that are after the year 2000 and have more than 200 citations. We will also filter for publications that are associated with the journal \"PVLDB.\" 3. Join Structure: Use JOIN clauses to connect the \"publication\" table with the \"domain_publication\" and \"domain_journal\" tables to ensure we can filter by the journal name \"PVLDB.\" 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the conditions in the WHERE clause are met for the results to be returned.","1368":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER\" and \"LOCATION.STREET_NAME\" to provide the address of the restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"jamerican\" cuisine and are located in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to get the location details for each restaurant. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and addresses of the restaurants that meet the specified conditions.","1369":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name, food type, and rating. We will also include the city name to identify the location. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in either \"Yosemite\" or \"Mono Lake.\" 3. Join Structure: Use JOINs to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also join with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are filtering by the correct cities. 4. Aggregation Structure: No aggregation is needed, but we will apply ORDER BY to sort the results by rating in descending order to find the best-rated French restaurants.","1370":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal name. Use the FROM clause to specify the journal table. 2. Join Structure: Join the journal table with the publication table on the journal ID (jid) to connect journals with their publications. Then, join the publication table with the publication_keyword table on the publication ID (pid) to link publications with their keywords. Finally, join the publication_keyword table with the keyword table to filter for the specific keyword \"Relational Database\". 3. Aggregation Structure: Use GROUP BY to group the results by journal name, allowing us to count the number of publications associated with the keyword for each journal. 4. Condition Structure: Use the ORDER BY clause to sort the results by the count of publications in descending order and limit the results to the top entry to get the journal with the most papers containing the specified keyword.","1371":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER,\" \"LOCATION.STREET_NAME,\" and \"GEOGRAPHIC.CITY_NAME\" to provide the location details of the restaurant. 2. Condition Structure: Apply a WHERE clause to filter for the restaurant named \"denny\" and to ensure that the region is \"bay area.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also join the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to get the region information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the location details of the specified restaurant.","1372":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct actors. Use the `FROM` clause to specify the `actor` table, as it contains the actor details, and the `cast` table, which links actors to movies.\n2. Condition Structure: Use a `WHERE` clause to filter for the specific movie title \"Saving Private Ryan\" by joining with the `movie` table to ensure we are counting actors for the correct movie.\n3. Join Structure: Use an `INNER JOIN` between the `cast` and `movie` tables based on the movie's ID (`msid`) to link actors to the specific movie. Additionally, join the `actor` table using the `aid` field to retrieve actor details.\n4. Aggregation Structure: Use the `COUNT(DISTINCT actor.aid)` function to ensure that only unique actors are counted, avoiding any potential duplicates.","1373":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference details. Use the FROM clause to specify the conference table. We will also need to join with the publication and publication_keyword tables to link conferences with their respective papers and keywords. 2. Condition Structure: Use a WHERE clause to filter for papers that contain the keyword \"Relational Database\". 3. Join Structure: Use JOINs to connect the conference table with the publication table on the conference ID (cid) and then join the publication table with the publication_keyword table to link papers with their keywords. 4. Aggregation Structure: Use GROUP BY to group the results by conference ID and COUNT to count the number of papers for each conference that contain the specified keyword. Finally, use ORDER BY to sort the results in descending order based on the count and limit the result to the top conference.","1374":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"movie\" table since we want to retrieve all information about the movies produced in 2015. 2. Condition Structure: Use a WHERE clause to filter for movies where \"movie.release_year\" is equal to 2015. 3. Join Structure: No JOIN is necessary since all required information is contained within the \"movie\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the movies that meet the specified condition.","1375":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best French restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"San Francisco\" and have a \"FOOD_TYPE\" of \"French.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order and LIMIT 1 to get the best-rated French restaurant.","1376":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the publications. Use the FROM clause to specify the writes table, which connects authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the authors \"H. V. Jagadish\" and \"Yunyao Li\". This will involve checking the author names in the author table. 3. Join Structure: Use JOINs to connect the writes table with the author table to get the author names and with the publication table to get the publication titles. 4. Aggregation Structure: Not needed, as we are simply retrieving titles based on the specified authors without any aggregation.","1377":"1. Sequential Structure: Start with the SELECT clause to retrieve the keyword. Use the FROM clause to specify the keyword table and join it with the publication_keyword table to link keywords to publications. Then, join with the publication table to filter for publications associated with the journal 'PVLDB'. Finally, use GROUP BY to group the results by keyword to count the number of papers associated with each keyword. 2. Condition Structure: No specific condition is needed in the WHERE clause other than filtering for the journal name 'PVLDB'. 3. Join Structure: Use INNER JOINs between the keyword, publication_keyword, and publication tables based on their respective keys to connect keywords to the publications in the specified journal. 4. Aggregation Structure: Use COUNT to aggregate the number of publications for each keyword and apply ORDER BY to sort the results in descending order based on the count. Finally, use LIMIT to return only the keyword with the highest count.","1378":"1. Sequential Structure: Start with the SELECT clause to specify the \"publication.abstract\" that we want to retrieve. 2. Condition Structure: Use a WHERE clause to filter for the specific title \"Making database systems usable\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the abstract for a specific publication title.","1379":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located in \"san francisco,\" and are on \"buchanan\" street. 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"CITY_NAME\" to ensure we are looking at the correct city and to get the street and house number information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant restaurant details based on the specified conditions.","1380":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. We will need to join with the publication_keyword table to link keywords to publications, and then join with the publication table to filter by conference name. 2. Condition Structure: Use the HAVING clause to filter for keywords that are associated with more than 100 publications. This will be done after grouping the results by keyword. 3. Join Structure: Use INNER JOINs between the keyword, publication_keyword, and publication tables to connect keywords to their respective publications and filter by the conference name 'PVLDB'. 4. Aggregation Structure: Use COUNT to aggregate the number of publications associated with each keyword and filter those counts in the HAVING clause.","1381":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles from the `movie` table. Use the FROM clause to specify the `cast` table, which links actors to movies. \n2. Join Structure: Use JOINs to connect the `cast` table with the `actor` table based on the actor IDs (`aid`) to filter for the specific actors \"Woody Strode\" and \"Jason Robards\". Additionally, perform a self-join on the `cast` table to ensure that both actors are part of the same movie. Finally, join the `movie` table to retrieve the movie titles.\n3. Condition Structure: Use a WHERE clause to filter for records where the actor names match \"Woody Strode\" and \"Jason Robards\". Ensure that both actors are in the same movie by matching the movie IDs (`msid`) in the self-join.\n4. Aggregation Structure: Aggregation is not necessary in this case. The query can be efficiently handled by using a self-join and applying conditions in the WHERE clause to ensure both actors are in the same movie.","1382":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the actors. 2. Condition Structure: Use a WHERE clause to filter actors based on their nationality being 'Italy' and their birth year being greater than 1980. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified conditions.","1383":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, which in this case will be the details of the papers (publications) authored by \"H. V. Jagadish.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"H. V. Jagadish\" and the conference name \"VLDB.\" 3. Join Structure: Use JOIN clauses to connect the \"author,\" \"writes,\" \"publication,\" and \"conference\" tables based on their relationships, ensuring we can access the necessary data across these tables. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the records of the papers without any summarization.","1384":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"movie.title\" and \"movie.release_year.\" 2. Condition Structure: Apply a WHERE clause to filter for movies released after 2006 and directed by \"Steven Spielberg.\" 3. Join Structure: Use a JOIN between the \"movie\" and \"directed_by\" tables based on \"movie.mid\" and \"directed_by.msid\" to link each movie with its director. Additionally, join the \"director\" table to filter by the director's name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and release years of the movies that meet the specified conditions.","1385":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant names and their ratings. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in the \"Yosemite\" or \"Mono Lake\" areas. This will involve checking the \"FOOD_TYPE\" for \"French\" and the \"CITY_NAME\" for the specified areas. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified geographic areas. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to prioritize higher-rated restaurants.","1386":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.birth_year\" for the actor named \"Kevin Spacey\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is 'Kevin Spacey'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth year of a specific actor.","1387":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" \"RESTAURANT.CITY_NAME,\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the city of \"Alameda.\" 3. Join Structure: No JOIN is necessary since the required information is available within the \"RESTAURANT\" table, and the city condition can be directly applied. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the restaurant details without any summarization.","1388":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, which is represented by \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: No JOIN is necessary here since the relevant information can be accessed directly from the \"RESTAURANT\" table, as the city name is already specified in the WHERE clause. 4. Aggregation Structure: No aggregation is needed, but we will ensure that the results are filtered based on the specified conditions.","1389":"1. Sequential Structure: Start with the SELECT clause to count the number of Italian restaurants. We will use the COUNT function on the restaurant ID. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are Italian and located in Yolo County. 3. Join Structure: Use a JOIN between the RESTAURANT and GEOGRAPHIC tables based on CITY_NAME to link the restaurants with their respective counties. 4. Aggregation Structure: Use COUNT to aggregate the number of Italian restaurants that meet the specified conditions.","1390":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of publication IDs (papers). Use the FROM clause to specify the publication table and join it with the publication_keyword table to link publications with their keywords. Additionally, join the writes table to connect authors to their publications. Finally, apply a WHERE clause to filter for the specific author and keyword. 2. Condition Structure: Use the WHERE clause to filter for publications written by 'H. V. Jagadish' and that contain the keyword 'User Study'. 3. Join Structure: Use INNER JOINs between the publication, publication_keyword, and writes tables based on their respective keys to connect authors with their publications and the keywords associated with those publications. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that meet the specified conditions.","1391":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table and join it with the publication_keyword and keyword tables to filter based on the keyword. 2. Condition Structure: Use a WHERE clause to filter for the keyword \"Keyword search\" and ensure that the conference name is 'PVLDB'. 3. Join Structure: Use INNER JOINs between the publication, publication_keyword, and keyword tables to connect the papers with their associated keywords. Additionally, join the publication table with the conference table to filter by conference name. 4. Aggregation Structure: Use COUNT to aggregate the number of papers that match the specified conditions.","1392":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields from the publication table. Since the question asks for papers related to the VLDB conference, we will select the fields from the publication table. 2. Condition Structure: Apply a WHERE clause to filter the records where the conference name is 'VLDB'. 3. Join Structure: Use a JOIN between the publication and conference tables based on the conference ID (cid) to link each publication with its respective conference. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the records that match the condition.","1393":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"actor.name\" of actors from Afghanistan. 2. Condition Structure: Use a WHERE clause to filter actors where \"actor.nationality\" is 'Afghanistan'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified nationality condition.","1394":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles. Use the FROM clause to specify the movie table. We will need to join other tables to filter the results based on the director and the actor. Table aliasing is crucial for improving readability and avoiding potential conflicts in complex queries involving multiple joins.\n2. Join Structure: Use JOINs to connect the movie table (aliased as `m`) with the copyright table (aliased as `c`), the cast table (aliased as `ca`), the actor table (aliased as `a`), the directed_by table (aliased as `db`), and the director table (aliased as `d`). This will allow us to link movies with their directors and the actors who played in them.\n3. Condition Structure: Use a WHERE clause to filter for movies directed by \"Asghar Farhadi\" and where \"Taraneh Alidoosti\" is listed as an actor in the cast. Ensure that the conditions are applied to the correct tables (i.e., `d.name` for the director and `a.name` for the actor).\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1395":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"author.name\" for the names of the researchers. 2. Condition Structure: Apply a WHERE clause to filter for researchers in the \"Databases\" area and associated with the \"University of Michigan.\" 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"domain_author\" table based on \"author.aid\" and then join with the \"domain\" table based on \"domain_author.did\" to filter by the specific domain. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the researchers without any summarization.","1396":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of movies. Use the FROM clause to specify the movie table and join it with the copyright and tags tables to filter based on the Iraq war theme and the release year. 2. Condition Structure: Use the WHERE clause to filter for movies released in the year 2015 and that are tagged with the Iraq war keyword. 3. Join Structure: Use JOINs between the movie, copyright, and tags tables based on the foreign key relationships to connect movies with their tags. 4. Aggregation Structure: Use COUNT to aggregate the number of movies that meet the specified conditions.","1397":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME\" and \"RESTAURANT.FOOD_TYPE.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the \"Bay Area.\" This will involve checking the \"GEOGRAPHIC.REGION\" for the value that corresponds to the Bay Area. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the \"CITY_NAME\" to ensure we are only selecting restaurants that are in the specified region. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the restaurants that meet the criteria.","1398":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, specifically \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in the \"Bay Area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names of the restaurants that meet the criteria.","1399":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of conferences. Use the FROM clause to specify the conference table. 2. Join Structure: Join the conference table with the publication table using the conference ID (cid) to link papers to their respective conferences. Then, join the publication table with the writes table to connect publications to their authors. 3. Condition Structure: Use a WHERE clause to filter for the author named \"H. V. Jagadish\" to ensure we only count conferences that have papers authored by this individual. 4. Aggregation Structure: Use the COUNT function to aggregate the number of distinct conferences that meet the criteria.","1400":"1. Sequential Structure: Start with the SELECT clause to retrieve the `citation_num` directly from the `publication` table, as it already stores the number of citations for each publication.\n2. Condition Structure: Use a WHERE clause to filter for the specific publication titled \"Making database systems usable\" in the `publication` table.\n3. Join Structure: No join is required, as all necessary information is contained within the `publication` table.\n4. Aggregation Structure: No aggregation is needed, as the `citation_num` field already provides the precomputed citation count.","1401":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which is the \"actor.name\" of the actors born in Tehran. 2. Condition Structure: Use a WHERE clause to filter for actors whose \"actor.birth_city\" is 'Tehran'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified condition.","1402":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant field, which is the \"publication\" title or any other relevant information about the papers. 2. Condition Structure: Apply a WHERE clause to filter for the specific author name \"H. V. Jagadish.\" 3. Join Structure: Use a JOIN between the \"author\" and \"writes\" tables based on \"author.aid\" and \"writes.aid\" to link authors to their publications. Then, join the \"writes\" table with the \"publication\" table using \"writes.pid\" and \"publication.pid\" to access the publication details. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the papers associated with the specified author.","1403":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to ensure we are looking at the correct restaurant locations. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated Arabic restaurants.","1404":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.birth_year\" for the actor named \"Benedict Cumberbatch\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is 'Benedict Cumberbatch'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth year of a specific actor.","1405":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' names. Use the FROM clause to specify the author table. 2. Join Structure: Use JOINs to connect the author table with the writes and cite tables based on the author ID and publication ID. This will allow us to find authors who have cited papers written by \"H. V. Jagadish\". 3. Condition Structure: Apply a WHERE clause to filter for the authors who have cited publications authored by \"H. V. Jagadish\". This involves a subquery to find the publication IDs of papers written by \"H. V. Jagadish\". 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1406":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"publication.title\" and \"publication.citation_num\" since we want to return the paper title and its citation count. 2. Condition Structure: Apply a WHERE clause to filter for publications that have more than 200 citations and are associated with the VLDB conference. 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the \"cid\" to link each publication with its respective conference. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to filter the results based on the citation count in the WHERE clause.","1407":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING\" to provide information about the restaurants. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to prioritize higher-rated restaurants.","1408":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. We will need to join with the publication_keyword table to link keywords to publications, and then join with the writes table to connect publications to authors. Finally, we will apply a GROUP BY clause to group the results by keyword. 2. Condition Structure: Use the HAVING clause to filter for keywords that are associated with more than 10 publications written by the author \"H. V. Jagadish\". 3. Join Structure: Use INNER JOINs between the keyword, publication_keyword, and writes tables based on their respective keys to connect keywords to the publications they are associated with and to the authors who wrote those publications. 4. Aggregation Structure: Use COUNT to aggregate the number of publications associated with each keyword and filter those with a count greater than 10 in the HAVING clause.","1409":"1. Sequential Structure: Begin with the SELECT clause to retrieve the restaurant name, house number, and street name from the `RESTAURANT` and `LOCATION` tables. The city name filter should be applied directly from the `LOCATION` table, not the `GEOGRAPHIC` table, as the latter is unnecessary for this query.\n2. Condition Structure: Apply a WHERE clause to filter for the specific street name \"buchanan,\" the city \"san francisco,\" the food type \"arabic,\" and a rating threshold. Since the user did not specify what constitutes a \"good\" rating, we will use a reasonable threshold of 2.5, which is more inclusive.\n3. Join Structure: Use an INNER JOIN to connect the `RESTAURANT` and `LOCATION` tables based on the `RESTAURANT_ID`. The `GEOGRAPHIC` table is not needed, as the city name can be filtered directly from the `LOCATION` table.\n4. Aggregation Structure: No aggregation is needed, as the query is asking for specific restaurant details rather than a summary or count.","1410":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"genre\" of the movie. 2. Condition Structure: Apply a WHERE clause to filter for the specific movie title \"Jurassic Park.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"copyright\" table on \"msid,\" and then join the \"classification\" table on \"msid\" to link to the genre. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the genre for the specified movie.","1411":"1. Sequential Structure: Start with the SELECT clause to count the number of movies directed by Quentin Tarantino. Use the FROM clause to specify the relevant tables, and then apply the WHERE clause to filter the movies based on the release year. 2. Condition Structure: Use the WHERE clause to filter for movies directed by Quentin Tarantino that were released before 2002 and after 2010. 3. Join Structure: Use JOIN clauses to connect the director table with the directed_by table and then with the copyright and movie tables to access the necessary information about the movies directed by Quentin Tarantino. 4. Aggregation Structure: Use the COUNT function to aggregate the number of movies that meet the specified conditions.","1412":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table, which contains the papers, and join it with the conference table to link papers to their respective conferences. 2. Condition Structure: Use a WHERE clause to filter for the conference name 'VLDB' and to ensure that the papers are associated with the University of Michigan. 3. Join Structure: Use an INNER JOIN between the publication and conference tables based on the conference ID (cid) to relate the papers to the VLDB conference. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers associated with the specified conference and university.","1413":"1. Sequential Structure: Begin with the SELECT clause to retrieve the actor's name from the `actor` table, as we are interested in the actor who played the role of \"Mr. Bean.\" The FROM clause should start with the `cast` table, as the role information is stored there. Aliasing the tables is necessary to avoid ambiguity and improve readability.\n2. Condition Structure: Use a WHERE clause to filter for the specific role \"Mr. Bean\" in the `cast` table. Ensure that the role is matched exactly as it appears in the database.\n3. Join Structure: Use an INNER JOIN between the `cast` and `actor` tables based on the foreign key relationship `cast.aid = actor.aid` to link the cast information with the actor details. Aliases should be used for both tables to avoid confusion and improve clarity.\n4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the name of the actor who played the role.","1414":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the movie title and the count of distinct actors. Use the `FROM` clause to specify the `movie` table. Aliasing the tables is necessary to avoid ambiguity and improve clarity.\n2. Join Structure: Join the `movie` table with the `cast` table on the movie ID (`msid`) to link movies with their actors. Then, join the `cast` table with the `actor` table on the actor ID (`aid`) to filter actors based on nationality. Proper aliasing of the tables is crucial to avoid syntax errors.\n3. Condition Structure: Use a `WHERE` clause to filter for actors whose nationality is 'China'. This ensures that only Chinese actors are considered in the count.\n4. Aggregation Structure: Use `GROUP BY` to group the results by movie title and `COUNT(DISTINCT actor.aid)` to count the number of unique Chinese actors in each movie. This avoids counting the same actor multiple times if they appear in multiple roles or entries. Finally, use `ORDER BY` to sort the results in descending order based on the count of actors and limit the result to the top entry to find the movie with the most Chinese actors.","1415":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles from the movie table. Use the FROM clause to specify the movie table and JOIN it with the tags table to link movies with their keywords. 2. Condition Structure: Use a WHERE clause to filter for keywords that match 'nuclear weapons'. 3. Join Structure: Use an INNER JOIN between the movie and tags tables based on the movie ID and keyword ID to connect movies with their associated keywords. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1416":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the author's ID, homepage, and name. 2. Condition Structure: Use a WHERE clause to filter for authors associated with the \"University of Michigan\". 3. Join Structure: No JOIN is necessary since all relevant information is in the \"author\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of the authors.","1417":"1. Sequential Structure: Begin with the SELECT clause to retrieve the movie titles from the `movie` table. Alias the tables for clarity and to avoid ambiguity. \n2. Condition Structure: Use a WHERE clause to filter for movies that feature \"Robin Wright\" by joining the `actor` table and filtering on the `name` column.\n3. Join Structure: Use the correct foreign key relationships to join the `movie`, `cast`, and `actor` tables. Specifically, join `movie.mid` with `cast.msid` and `cast.aid` with `actor.aid`.\n4. Aggregation Structure: No aggregation is needed since we are simply retrieving the titles of the movies that meet the specified condition.","1418":"1. Sequential Structure: Start with the SELECT clause to count the number of restaurants that serve Chinese food. We will use the COUNT function to get the total number of places. 2. Condition Structure: Apply a WHERE clause to filter for restaurants where the food type is 'Chinese' and the city is in the 'Bay Area' region. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only counting restaurants located in the Bay Area. 4. Aggregation Structure: Use COUNT to aggregate the number of Chinese restaurants in the specified region.","1419":"1. Sequential Structure: Start with the `cast` table in the FROM clause, as it directly links actors to movies. Then, join the `actor` table to filter for \"Brad Pitt\" and the `movie` table to retrieve the release year.\n2. Join Structure: Join the `cast` table with the `actor` table on `aid` to filter for \"Brad Pitt\". Then, join the `cast` table with the `copyright` table on `msid`, and finally join the `copyright` table with the `movie` table on `mid` to retrieve the release year. Use table aliases to improve readability and avoid ambiguity.\n3. Condition Structure: Use a WHERE clause to filter for the actor's name being \"Brad Pitt\". Ensure that the name is matched exactly.\n4. Aggregation Structure: Use `GROUP BY` to group the results by release year and `COUNT(DISTINCT movie.mid)` to count the number of distinct movies for each year, ensuring that duplicate movie entries are not counted multiple times.","1420":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper (publication) details, specifically the publication ID (pid) and citation number (citation_num). Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that belong to the 'Databases' area by joining with the domain_publication and domain tables to ensure the domain name matches 'Databases'. 3. Join Structure: Use JOIN clauses to connect the publication table with the domain_publication table on pid and then join with the domain table on did to filter by the domain name. 4. Aggregation Structure: Use ORDER BY to sort the results by citation number in descending order and limit the results to the top entry to get the publication with the most citations.","1421":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the count of organizations. 2. Condition Structure: No specific filtering condition is required since we want the total number of organizations. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"organization\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of organizations.","1422":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.birth_year\" for the actor named \"Kevin Spacey\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is \"Kevin Spacey\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth year of a specific actor.","1423":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct authors. Use the FROM clause to specify the author table and join it with the writes and publication tables to link authors to their papers. 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the journal named 'PVLDB'. 3. Join Structure: Use INNER JOINs between the author, writes, and publication tables based on the author ID and publication ID, and then join the publication table with the journal table based on the journal ID. 4. Aggregation Structure: Use COUNT(DISTINCT author.aid) to count the number of unique authors who have published papers in the specified journal.","1424":"1. Sequential Structure: Start with the SELECT clause to retrieve the director's name, which is specified as \"director.name.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific movie title, which is \"James Bond.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"copyright\" table on \"msid,\" and then join the \"directed_by\" table on \"msid\" to link to the \"director\" table using \"did.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the name of the director for the specified movie.","1425":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant's name and its rating. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the \"bay area,\" which is specified in the \"GEOGRAPHIC.REGION\" column. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Since we are looking for a \"good\" restaurant, we can apply an ORDER BY clause to sort the results by \"RESTAURANT.RATING\" in descending order, and we may want to limit the results to the top-rated restaurant.","1426":"1. Sequential Structure: Start with the SELECT clause to count the distinct authors who have written papers for the VLDB conference. We will use COUNT(DISTINCT author.aid) to ensure we count each author only once. 2. Condition Structure: We need to filter the results to include only those publications that are associated with the VLDB conference. This will be done using a WHERE clause that checks if the conference name is 'VLDB'. 3. Join Structure: We will use JOIN clauses to connect the \"author,\" \"writes,\" and \"publication\" tables. The \"writes\" table links authors to their publications, and the \"publication\" table links to the \"conference\" table based on the conference ID. 4. Aggregation Structure: Use COUNT with DISTINCT to count the unique authors who have papers in the VLDB conference.","1427":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference details. Use the FROM clause to specify the conference table. We will also need to join with the publication and publication_keyword tables to link conferences with their respective papers and keywords. 2. Condition Structure: Use a WHERE clause to filter for papers that contain the keyword \"Relational Database\". 3. Join Structure: Use JOINs between the conference, publication, and publication_keyword tables based on their respective keys to connect the conference with the publications that contain the specified keyword. 4. Aggregation Structure: Use GROUP BY to group the results by conference ID and COUNT to count the number of papers for each conference. Finally, use ORDER BY to sort the results in descending order based on the count of papers and limit the result to the top conference.","1428":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the Arabic restaurants. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are in \"Mountain View\" and have a \"FOOD_TYPE\" of \"Arabic.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the names and ratings of the restaurants that meet the criteria.","1429":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant papers. Use the FROM clause to specify the publication table, as it contains the papers. 2. Condition Structure: Use a WHERE clause to filter for papers that are associated with the VLDB conference and contain the keyword \"Information Retrieval\". 3. Join Structure: Use JOIN clauses to connect the publication table with the conference and keyword tables through their respective foreign keys. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1430":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.nationality\" for the actor named \"Kevin Spacey\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is \"Kevin Spacey\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the nationality of a specific actor.","1431":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct authors. Use the FROM clause to specify the cite table, as we are interested in citations. 2. Condition Structure: Use a WHERE clause to filter for citations of papers authored by \"H. V. Jagadish\". This will involve a subquery to find the publication IDs (pid) of papers written by this author. 3. Join Structure: Use JOINs to connect the author table with the writes table to get the publication IDs associated with \"H. V. Jagadish\", and then join with the cite table to find the citing authors. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the number of unique authors who have cited the specified papers.","1432":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant and its rating. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are of the \"Arabic\" food type and located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to ensure we are looking at the correct restaurant locations. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated Arabic restaurant.","1433":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the `movie.title` for the movie that features the character \"Daffy Duck.\" The character name should be filtered using the `cast.role` column, as \"Daffy Duck\" is a character, not an actor.\n2. Condition Structure: Use a `WHERE` clause to filter for the specific character name \"Daffy Duck\" in the `cast.role` column.\n3. Join Structure: Join the `movie` table with the `copyright` table on `movie.mid = copyright.msid`, and then join the `cast` table on `cast.msid = copyright.msid` to link the movie with its cast. No need to join the `actor` table, as we are only interested in the character role.\n4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the movie title that features the specified character.","1434":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, which is represented by \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered based on the specified conditions.","1435":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of publications. We will use the COUNT function to get the total number of papers. 2. Condition Structure: Apply a WHERE clause to filter for publications that are from the year 2000 onwards and are associated with the \"University of Michigan.\" 3. Join Structure: Use JOIN clauses to connect the \"publication\" table with the \"domain_publication\" table based on \"pid\" and then join with the \"domain\" table to filter by the organization name. 4. Aggregation Structure: Use COUNT to aggregate the number of publications that meet the specified conditions.","1436":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the journal named 'PVLDB'. 3. Join Structure: Use an INNER JOIN between the publication and journal tables based on the journal ID to connect publications to their respective journals. 4. Aggregation Structure: Use the COUNT function to aggregate the number of publications that meet the specified condition.","1437":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"actor.name\" of actors from Afghanistan. 2. Condition Structure: Use a WHERE clause to filter actors where \"actor.nationality\" is 'Afghanistan'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified nationality condition.","1438":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve \"american\" food and are located in the \"bay area.\" This will involve checking the \"GEOGRAPHIC.REGION\" for \"bay area\" and the \"RESTAURANT.FOOD_TYPE\" for \"american.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant, and apply LIMIT 1 to get only the top result.","1439":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the actor's name. Use the `FROM` clause to specify the tables involved, which are the `actor`, `cast`, and `movie` tables. The `actor` table contains the actor's details, the `cast` table links actors to their roles, and the `movie` table provides the movie title.\n2. Condition Structure: Apply a `WHERE` clause to filter for the specific movie title \"The Imitation Game\" and the role \"Alan Turing\". This ensures that we retrieve the actor who played this role in the specified movie.\n3. Join Structure: Use `JOIN` clauses to connect the `actor` table with the `cast` table on `aid` (actor ID) and the `cast` table with the `movie` table on `msid` (movie ID). This allows us to filter by both the role and the movie title.\n4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1440":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"movie.title\" since we want to know the titles of the movies related to nuclear weapons. 2. Condition Structure: We need to filter the results based on the keyword related to nuclear weapons. This will be done using a WHERE clause that checks for the relevant keyword. 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"copyright\" table on \"copyright.msid = movie.mid\" and then join the \"tags\" table on \"tags.msid = copyright.msid\" to link the tags to the movies. 4. Aggregation Structure: No aggregation is needed here, but we will filter the results based on the keyword associated with nuclear weapons.","1441":"1. Sequential Structure: Begin with the SELECT clause to retrieve the writer's name, which is \"writer.name.\" Then, use the FROM clause to specify the relevant tables, starting with the \"movie\" table.\n2. Condition Structure: Apply a WHERE clause to filter for the specific movie title, \"The Truman Show.\"\n3. Join Structure: Use a JOIN between the \"movie\" and \"written_by\" tables based on the correct column, which is \"movie.mid\" and \"written_by.msid.\" Then, join the \"written_by\" table with the \"writer\" table based on \"written_by.wid\" and \"writer.wid\" to get the writer's details.\n4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the writer's name for the specified movie.","1442":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and the count of citations. Use the FROM clause to specify the publication table, as it contains the title and year information. 2. Condition Structure: Use a WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: Not required, as we can directly count citations from the cite table based on the publication's ID. 4. Aggregation Structure: Use COUNT to aggregate the number of citations for the specified publication, and GROUP BY to group the results by year.","1443":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table and join it with the publication_keyword table to link keywords to publications. Then, join with the domain_publication table to connect publications to their respective domains. Finally, join with the domain_author table to link authors to their organizations. 2. Condition Structure: Use a WHERE clause to filter for publications associated with the organization \"University of Michigan\". This will involve checking the organization name in the organization table. 3. Join Structure: Use INNER JOINs to connect the keyword, publication_keyword, domain_publication, domain_author, and author tables based on their respective foreign keys. 4. Aggregation Structure: Not required, as we are simply retrieving the keywords without any aggregation.","1444":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations, which will involve the \"publication.citation_num\" field. We will use the SUM function to aggregate the citation numbers. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the \"VLDB\" conference and were published in the year 2005. 3. Join Structure: Use a JOIN between the \"conference\" and \"publication\" tables based on the conference ID (cid) to link the conference with its respective publications. 4. Aggregation Structure: Use SUM to aggregate the citation numbers for the filtered publications.","1445":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. We will need to join with the publication_keyword table to link keywords to publications, and then join with the publication table to filter for those associated with the VLDB conference. 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the VLDB conference by checking the conference.cid. 3. Join Structure: Use JOINs between the keyword, publication_keyword, and publication tables based on their relationships to connect keywords to the relevant publications and the conference. 4. Aggregation Structure: Use GROUP BY to group the results by keyword and COUNT to count the number of papers associated with each keyword. Finally, apply a HAVING clause to filter for keywords that have been contained in more than 100 papers.","1446":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will filter based on the conditions specified in the WHERE clause.","1447":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name. Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve 'American' food and are located in the 'bay area'. 3. Join Structure: Use an INNER JOIN between the RESTAURANT and GEOGRAPHIC tables based on CITY_NAME to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by rating in descending order and limit the results to get the best restaurant.","1448":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which is the \"publication.pid\" for the paper with more than 200 citations. 2. Condition Structure: Use a WHERE clause to filter for publications where \"publication.citation_num\" is greater than 200. 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the paper IDs that meet the specified citation condition.","1449":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their publications. Then, join the publication table to access the keywords associated with each publication. Finally, join the keyword table to filter for the specific keyword \"Relational Database\". 2. Condition Structure: Use the WHERE clause to filter for publications that contain the keyword \"Relational Database\". 3. Join Structure: Use INNER JOINs between the author, writes, publication, and publication_keyword tables to connect authors to their publications and the keywords associated with those publications. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and apply the HAVING clause to filter for authors who have more than 10 publications containing the specified keyword.","1450":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the actors. 2. Condition Structure: Use a WHERE clause to filter actors who were born in \"Austin\" and after the year 1980. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified conditions.","1451":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of producers. Use the FROM clause to specify the `producer` table. Additionally, include the `movie` table to ensure that only movies are considered, as the user question specifically asks for movies.\n2. Join Structure: Use JOINs to connect the `producer` table with the `made_by` table on the producer ID, and then join with the `copyright` table on the movie ID. Next, join with the `cast` table on the movie ID to link to the actor. Finally, join the `actor` table to filter for 'Kate Winslet' and the `movie` table to ensure only movies are included.\n3. Condition Structure: Use a WHERE clause to filter for records where the actor's name is 'Kate Winslet'. Additionally, ensure that the media type is restricted to movies by filtering on the `movie` table.\n4. Aggregation Structure: Not needed, as we are simply retrieving the names of producers without any aggregation.","1452":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to publications. 2. Condition Structure: Use a WHERE clause to filter for the author named \"H. V. Jagadish\" to ensure we only count papers written by this specific author. 3. Join Structure: Use an INNER JOIN between the writes table and the author table based on the author ID to connect the author with their publications. 4. Aggregation Structure: Use the COUNT function to aggregate the number of publications associated with the specified author.","1453":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"San Francisco\" and serve \"French\" food. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant, and use LIMIT 1 to get only the top result.","1454":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the count of distinct paper titles. Use the `FROM` clause to specify the `publication` table, and join it with the `writes`, `author`, and `organization` tables to filter based on the organization name. The `COUNT(DISTINCT)` function will ensure that only unique papers are counted.\n2. Condition Structure: Use a `WHERE` clause to filter for the organization name \"University of Michigan\". This will be applied after joining the `organization` table with the `author` table.\n3. Join Structure: Use a series of joins to connect the `organization` table to the `author` table via the `oid` field, then join the `author` table to the `writes` table via the `aid` field, and finally join the `writes` table to the `publication` table via the `pid` field. This ensures that we correctly link the organization to the papers written by its authors.\n4. Aggregation Structure: Use `COUNT(DISTINCT t4.title)` to aggregate the number of unique papers associated with the specified organization. This ensures that only distinct papers are counted, avoiding any potential duplicates.","1455":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, which is \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in the regions of \"Yosemite\" or \"Mono Lake.\" 3. Join Structure: Use JOINs to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are filtering by the correct regions. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered correctly based on the specified conditions.","1456":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication IDs. Use the FROM clause to specify the publication table and JOIN it with the conference table to link publications to their respective conferences. Then, JOIN with the writes table to connect authors to their publications. Finally, apply a WHERE clause to filter for the specific author and the conference name, as well as the year condition. 2. Condition Structure: Use the WHERE clause to filter for publications authored by \"H. V. Jagadish\", those associated with the \"VLDB\" conference, and published after the year 2000. 3. Join Structure: Use INNER JOINs between the publication, conference, and writes tables based on the relevant keys to connect authors with their publications and the conferences those publications belong to. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1457":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant names and their ratings. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered based on the specified conditions.","1458":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"movie.title\" and \"movie.release_year.\" 2. Condition Structure: Use a WHERE clause to filter for movies released in the year 2010 and belonging to the Sci-Fi genre. 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"classification\" table on \"movie.mid\" and \"classification.msid,\" and then join the \"classification\" table with the \"genre\" table on \"classification.gid\" and \"genre.gid\" to filter by genre. 4. Aggregation Structure: No aggregation is needed here, but we will apply the necessary filters in the WHERE clause to ensure we only get Sci-Fi movies from 2010.","1459":"1. Sequential Structure: Start with the SELECT clause to specify the count of researchers (author IDs) associated with the \"University of Michigan\". 2. Condition Structure: Use a WHERE clause to filter authors whose homepage contains \"University of Michigan\". 3. Join Structure: No JOIN is necessary since all relevant information is in the \"author\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of unique researchers from the filtered results.","1460":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"organization.name\" for the organization associated with \"H. V. Jagadish\". 2. Condition Structure: Use a WHERE clause to filter for the organization name that matches 'H. V. Jagadish'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"organization\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the organization name based on the specified condition.","1461":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the actor's name and birth city. 2. Condition Structure: Use a WHERE clause to filter for actors whose birth city is \"Tehran\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified condition.","1462":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER\" and \"LOCATION.STREET_NAME\" to provide the address of the restaurant. 2. Condition Structure: Apply a WHERE clause to filter for the specific cuisine type \"jamerican cuisine\" and the city \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to get the location details of the restaurant. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the details of the restaurant that matches the criteria.","1463":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" and \"LOCATION.HOUSE_NUMBER.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food and are located on \"buchanan\" street in \"san francisco.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city for the restaurants. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and ratings of the restaurants that meet the specified conditions.","1464":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"movie.mid\" and \"movie.title\" from the \"movie\" table. We will also alias the tables for clarity and to avoid conflicts.\n2. Condition Structure: Apply a WHERE clause to filter for records where the actor's name is \"Robin Wright.\" This condition should be applied to the \"actor\" table.\n3. Join Structure: Use a JOIN between the \"movie\" and \"cast\" tables based on \"movie.mid\" and \"cast.msid\" to link each movie with its cast members. Additionally, join the \"actor\" table to filter by the actor's name, using the relationship between \"cast.aid\" and \"actor.aid.\"\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving movie details without any need for summary functions.","1465":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of actors. Use the FROM clause to specify the actor table and JOIN it with the cast table to link actors with the movies they acted in. 2. Condition Structure: Use a WHERE clause to filter for actors who acted in the same movie as 'Tom Hanks'. This involves finding the movie IDs (msid) associated with 'Tom Hanks' and then selecting other actors who acted in those same movies. 3. Join Structure: Use an INNER JOIN between the actor and cast tables based on the actor ID (aid) to get the names of actors who acted in the same movies. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1466":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which connects authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the author named \"H. V. Jagadish\" and to ensure that the publications are associated with the journal \"PVLDB\". 3. Join Structure: Use JOINs to connect the writes table with the author and publication tables based on the author ID and publication ID, respectively. Additionally, join the publication table with the journal table to filter by the journal name. 4. Aggregation Structure: Use the COUNT function to aggregate the number of publications by the specified author in the specified journal.","1467":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.FOOD_TYPE.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"RESTAURANT.CITY_NAME\" matches 'alameda.' 3. Join Structure: No JOIN is necessary since the relevant information is contained within the \"RESTAURANT\" table, and we are only interested in restaurants located in 'alameda.' 4. Aggregation Structure: No aggregation is needed as we are simply listing the names and food types of the restaurants.","1468":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper details (specifically the publication ID) from the publication table. Use the FROM clause to specify the publication table and join it with the writes table to link authors to their publications. 2. Condition Structure: Use the WHERE clause to filter for the author named 'H. V. Jagadish' and to ensure that the citation number is greater than 200. 3. Join Structure: Use an INNER JOIN between the publication and writes tables based on the author ID to connect authors with their respective publications. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","1469":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"American\" food and are located in the \"Bay Area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated American restaurant, and use LIMIT 1 to get only the top result.","1470":"1. Sequential Structure: Begin with the SELECT clause to retrieve the movie ID (`movie.mid`) and title (`movie.title`). The `movie` table should be joined directly with the `cast` table using the `msid` field, which represents the movie or series ID.\n2. Condition Structure: Apply a WHERE clause to filter for records where the actor's name is 'Robin Wright'. This ensures that only movies featuring this actor are returned.\n3. Join Structure: Use a JOIN between the `movie` and `cast` tables based on `cast.msid = movie.mid` to link movies with their cast. Then, use another JOIN between `cast` and `actor` based on `cast.aid = actor.aid` to associate actors with their roles in the movies.\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the movies featuring the specified actor.","1471":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best American restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are in the \"Bay Area\" region and have a \"FOOD_TYPE\" of 'American'. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants located in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated American restaurant, and apply LIMIT 1 to get only the top result.","1472":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, specifically \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food and are located in \"mountain view.\" 3. Join Structure: No JOIN is necessary here, as the relevant information can be obtained directly from the \"RESTAURANT\" table using the city name from the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed since we are simply listing the names of the restaurants that meet the criteria.","1473":"1. Sequential Structure: Start with the SELECT clause to retrieve the homepage and journal ID from the journal table. Use the FROM clause to specify the journal table. 2. Join Structure: Use JOIN clauses to connect the journal table with the publication table on the journal ID, and then join the publication table with the writes table on the publication ID. Finally, join the writes table with the author table on the author ID to filter by the author's name. 3. Condition Structure: Apply a WHERE clause to filter for the author with the name 'H. V. Jagadish'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1474":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference details. Use the FROM clause to specify the conference table. 2. Condition Structure: Apply a WHERE clause to filter for the conference that published the specific title \"Making database systems usable\". 3. Join Structure: Use a JOIN between the conference and publication tables based on the conference ID (cid) to connect the conference with its published publications. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1475":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located in \"san francisco,\" and are on \"buchanan\" street. 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered to show only good restaurants, which we can assume means those with a higher rating.","1476":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct actors. Use the `FROM` clause to specify the `cast` table, as it contains the relationship between movies and actors. Additionally, include the `actor` table to retrieve actor details for counting.\n2. Condition Structure: Use a `WHERE` clause to filter for the specific movie titled \"Saving Private Ryan\" by joining with the `movie` table. Ensure that the movie title is correctly enclosed in single quotes (as required by SQL syntax for string literals).\n3. Join Structure: Use an `INNER JOIN` between the `cast` and `movie` tables based on the `msid` field to relate the cast entries to the specific movie. Also, use an `INNER JOIN` between the `cast` and `actor` tables based on the `aid` field to retrieve actor details.\n4. Aggregation Structure: Use the `COUNT` function to count distinct actor IDs associated with the movie, ensuring that the count is based on actual actor records rather than just the `cast` table entries.","1477":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal name. Use the FROM clause to specify the journal table. We will also need to join with the publication and writes tables to link journals with their respective papers and authors. 2. Condition Structure: We will apply a HAVING clause to filter for journals that have the maximum number of papers authored by \"H. V. Jagadish\". 3. Join Structure: Use JOINs between the journal, publication, and writes tables based on the journal ID and publication ID to connect journals with their papers and the authors who wrote them. 4. Aggregation Structure: Use COUNT to aggregate the number of papers per journal and GROUP BY to group the results by journal ID. The HAVING clause will then filter for the journal(s) with the highest count of papers.","1478":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table and join it with the author and conference tables to filter the results based on the author's name and the conference name. 2. Condition Structure: Use a WHERE clause to filter for the author's name 'H. V. Jagadish' and the conference name 'VLDB'. 3. Join Structure: Use JOINs between the publication, writes, and conference tables based on the relationships defined in the schema to connect authors to their publications and the corresponding conference. 4. Aggregation Structure: Use COUNT to aggregate the number of papers authored by 'H. V. Jagadish' for the 'VLDB' conference.","1479":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and the count of papers published. We will use the COUNT function to count the number of publications for each year. 2. Condition Structure: No specific filtering condition is needed beyond ensuring we are only counting publications associated with the VLDB conference. 3. Join Structure: Use a JOIN between the \"conference\" and \"publication\" tables based on \"cid\" to link each publication to its respective conference. 4. Aggregation Structure: Use GROUP BY to group the results by year, allowing us to count the number of publications for each year associated with the VLDB conference.","1480":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to provide the names and ratings of the restaurants. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the \"Bay Area.\" This will involve checking the \"GEOGRAPHIC.REGION\" for the value that corresponds to the Bay Area. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the \"CITY_NAME\" to link each restaurant with its geographic region. 4. Aggregation Structure: No aggregation is needed here, but we may want to apply an ORDER BY clause to sort the results by \"RESTAURANT.RATING\" to prioritize the good restaurants.","1481":"1. Sequential Structure: Start with the SELECT clause to retrieve the actor's name from the `actor` table. We also need to retrieve the movie title from the `movie` table to ensure we are filtering for the correct movie.\n2. Condition Structure: Apply a WHERE clause to filter for the specific movie title \"The Imitation Game\" and the role \"Alan Turing\" in the `cast` table. The condition should be `movie.title = 'The Imitation Game'` and `cast.role = 'Alan Turing'`.\n3. Join Structure: Use JOIN clauses to connect the `actor`, `cast`, and `movie` tables. Specifically, join the `actor` and `cast` tables on `cast.aid = actor.aid`, and join the `cast` and `movie` tables on `cast.msid = movie.mid`. Aliasing the tables will improve clarity and avoid potential syntax errors.\n4. Aggregation Structure: No aggregation is needed here, as we are looking for a specific actor who played a specific role in a specific movie.","1482":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct authors. Use the FROM clause to specify the author table and join it with the publication table through the writes table to link authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for publications that contain the keyword \"Relational Database\" by joining with the publication_keyword and keyword tables. 3. Join Structure: Use INNER JOINs between the author, writes, publication, and publication_keyword tables to connect authors to their publications and the keywords associated with those publications. 4. Aggregation Structure: Use COUNT(DISTINCT author.aid) to count the number of unique authors who have written papers containing the specified keyword.","1483":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication_keyword table, which links publications to keywords. 2. Condition Structure: Use the WHERE clause to filter for entries where the keyword matches 'Natural Language'. 3. Join Structure: Use an INNER JOIN between the publication_keyword and keyword tables based on the keyword ID to relate publications to their keywords. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that contain the specified keyword.","1484":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers published, which will be done using the COUNT function on the \"publication\" table. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the VLDB conference and published before the year 2000. 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the conference ID (cid) to link each publication with its respective conference. 4. Aggregation Structure: Use COUNT to aggregate the number of publications that meet the specified conditions.","1485":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"publication.pid,\" \"publication.title,\" \"publication.abstract,\" \"publication.year,\" \"publication.citation_num,\" and \"publication.reference_num.\" 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the conference \"PVLDB\" and are linked to the \"University of Michigan.\" 3. Join Structure: Use JOIN clauses to connect the \"publication\" table with the \"conference\" table based on \"publication.cid = conference.cid.\" Additionally, we need to join with the \"writes\" table to link authors to their publications and then join with the \"author\" table to filter by the \"University of Michigan.\" 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","1486":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" \"RESTAURANT.CITY_NAME,\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the city of \"Alameda.\" 3. Join Structure: No JOIN is necessary since the information we need is available in the \"RESTAURANT\" table, and we are only filtering based on the city name. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the restaurant details without any summarization.","1487":"1. Sequential Structure: Start with the SELECT clause to count the number of French restaurants. We will use the COUNT function on the restaurant ID. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are of the food type 'French' and located in 'Palo Alto.' 3. Join Structure: No JOIN is necessary here since the relevant information can be found within the \"RESTAURANT\" table, which includes the city name and food type. 4. Aggregation Structure: Use COUNT to aggregate the number of French restaurants that meet the specified conditions.","1488":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which is the \"actor.aid\" for identifying the actors. 2. Condition Structure: Use a WHERE clause to filter actors who were born in the year 1984. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the actors that meet the specified birth year condition.","1489":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' IDs. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their publications. Then, join the publication table to the conference table to filter for the VLDB conference. Finally, apply a WHERE clause to filter the publication years between 1995 and 2002. 2. Condition Structure: Use the WHERE clause to filter for publications that are in the VLDB conference and have a year greater than 1995 and less than 2002. 3. Join Structure: Use INNER JOINs between the author, writes, publication, and conference tables based on their respective foreign keys to connect authors to their publications and the conferences. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1490":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best French restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are in \"San Francisco\" and have a \"FOOD_TYPE\" of \"French.\" 3. Join Structure: No JOIN is necessary here since the relevant information is contained within the \"RESTAURANT\" table, and the filtering can be done directly. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated French restaurant. Use LIMIT 1 to get only the top result.","1491":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to publications. 2. Condition Structure: Apply a WHERE clause to filter for the author named \"H. V. Jagadish\" and ensure the publication year is greater than 2000. 3. Join Structure: Use JOINs to connect the writes table with the author and publication tables based on their relationships, specifically linking author IDs and publication IDs. Additionally, join with the conference table to filter for publications associated with PVLDB. 4. Aggregation Structure: Use the COUNT function to aggregate the number of publications that meet the specified conditions.","1492":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"author.aid\" and \"author.name.\" 2. Condition Structure: Apply a WHERE clause to filter for publications that are from the journal \"PVLDB\" and from the year 2010. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"author.aid\" and \"publication.pid\" to link authors to their publications. Additionally, join the \"publication\" table with the \"journal\" table to filter by journal name. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only get distinct authors who meet the criteria.","1493":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the keyword itself. 2. Condition Structure: No specific filtering condition is required since we want to retrieve all keywords. 3. Join Structure: No JOIN is necessary as all required information is contained within the \"keyword\" table. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving all keywords without any summarization.","1494":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the series titles where Scott Foley is an actor. We will select `tv_series.title`. Additionally, we will use table aliases to improve readability and avoid ambiguity.\n2. Condition Structure: Use a `WHERE` clause to filter for records where `actor.name` is 'Scott Foley'. Ensure that the correct table (`actor`) is referenced in the `WHERE` clause.\n3. Join Structure: Use `JOIN` clauses to connect the `actor` table with the `cast` table on `actor.aid = cast.aid`, then join the `cast` table with the `copyright` table on `cast.msid = copyright.msid`, and finally join the `copyright` table with the `tv_series` table on `tv_series.sid = copyright.msid`. Use table aliases to make the query more readable.\n4. Aggregation Structure: No aggregation is needed, as we are simply retrieving the titles of the series in which Scott Foley appears.","1495":"1. Sequential Structure: Start with the SELECT clause to retrieve the relevant fields, specifically the publication ID (pid) and title of the papers. Use the FROM clause to specify the publication table and join it with the author and conference tables to filter the results based on the author's name and the conference name. 2. Condition Structure: Use the WHERE clause to filter for publications authored by 'H. V. Jagadish' and those that are associated with the 'VLDB' conference. Additionally, filter for publications that have more than 200 citations. 3. Join Structure: Use JOIN clauses to connect the author table with the writes table (to link authors to their publications) and the publication table with the conference table (to link publications to the conference). 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","1496":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication IDs and titles from the publication table. Use the FROM clause to specify the publication table. 2. Join Structure: Join the publication table with the domain_publication table on the publication ID to link publications with their respective domains. Then, join the domain table with the organization table to connect domains to organizations. 3. Condition Structure: Use a WHERE clause to filter for organizations with the name 'University of Michigan'. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1497":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of directors. 2. Condition Structure: Use a WHERE clause to filter for directors whose nationality is 'Afghanistan'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"director\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of directors that meet the specified condition.","1498":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of restaurants. Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that have the food type 'jamerican cuisine' and are located in 'santa cruz county'. 3. Join Structure: Use a JOIN between the RESTAURANT and GEOGRAPHIC tables based on the CITY_NAME to relate the restaurant data with the county information. 4. Aggregation Structure: Use the COUNT function to aggregate the number of restaurants that meet the specified conditions.","1499":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication IDs (pid) of the papers. Use the FROM clause to specify the publication table and join it with the writes table to link authors to their publications. 2. Condition Structure: Apply a WHERE clause to filter for the authors \"H. V. Jagadish\" and \"Divesh Srivastava\" and ensure the publication year is before 2000. 3. Join Structure: Use an INNER JOIN between the writes and author tables based on author IDs to connect authors with their respective publications. 4. Aggregation Structure: Not needed, as we are retrieving specific records based on the conditions without any aggregation.","1500":"1. Sequential Structure: Start with the SELECT clause to retrieve the director's name. 2. Condition Structure: Apply a WHERE clause to filter for the specific TV series title \"House of Cards\" and the release year 2013. 3. Join Structure: Use JOIN clauses to connect the \"tv_series\" table with the \"directed_by\" table based on the shared key \"msid\" and then join with the \"director\" table based on \"did\" to get the director's information. 4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the director's name for the specified TV series.","1501":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of movies directed by Steven Spielberg. Use the FROM clause to specify the directed_by table, which links directors to movies. 2. Condition Structure: Use a WHERE clause to filter for the director's name, specifically looking for \"Steven Spielberg\". 3. Join Structure: Use an INNER JOIN between the directed_by table and the director table on the director ID (did) to connect the director's name to the movies they directed. 4. Aggregation Structure: Use the COUNT function to aggregate the number of movies directed by the specified director.","1502":"1. Sequential Structure: Start with the SELECT clause to retrieve the nationality and birth city of the director. Use the FROM clause to specify the director table and join it with the directed_by table to link directors to their movies. Then, join with the movie table to filter for the specific movie titled \"The Past\". 2. Condition Structure: Use the WHERE clause to filter for the movie with the title \"The Past\". 3. Join Structure: Use INNER JOINs between the movie, directed_by, and director tables based on their respective keys to connect the movie to its director. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1503":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are of the \"arabic\" food type and are located on \"buchanan\" street in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered to show only good restaurants, which we can assume means those with a higher rating.","1504":"1. Sequential Structure: Start with the SELECT clause to retrieve the required field, which is \"movie.mid\" (or potentially \"movie.title\" if we want the titles instead). 2. Condition Structure: Apply a WHERE clause to filter for directors whose birth city is \"Los Angeles.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"directed_by\" table on \"msid\" and then join the \"directed_by\" table with the \"director\" table on \"did\" to link each movie with its respective director. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the list of movies directed by the specified directors.","1505":"1. Sequential Structure: Start with the SELECT clause to specify the \"actor.name\" of the actors who were born in \"New York City\" in 1984. 2. Condition Structure: Use a WHERE clause to filter for actors whose \"actor.birth_city\" is 'New York City' and \"actor.birth_year\" is 1984. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names of actors that meet the specified conditions.","1506":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the restaurant name, food type, and rating. 2. Condition Structure: Use a WHERE clause to filter for restaurants located in the city of 'Alameda'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"RESTAURANT\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of restaurants that meet the specified condition.","1507":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated restaurant.","1508":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"business.business_id\" and the count of reviews. We will use COUNT on \"review.rid\" to get the total number of reviews for each business. 2. Condition Structure: Apply a WHERE clause to filter for reviews that occurred in April, which corresponds to \"review.month = 4.\" 3. Join Structure: Use a JOIN between the \"review\" and \"business\" tables based on \"review.business_id\" and \"business.business_id\" to link each review to its respective business. 4. Aggregation Structure: Use GROUP BY on \"business.business_id\" to group the results by each business and ORDER BY the count of reviews in descending order to find the business with the most reviews. Use LIMIT 1 to select the top business.","1509":"1. Sequential Structure: Start with the SELECT clause to count the number of restaurants named \"buttercup kitchen\" in the specified city. We will use the COUNT function. 2. Condition Structure: Apply a WHERE clause to filter for restaurants with the name \"buttercup kitchen\" and located in \"san francisco.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only counting restaurants in the correct city. 4. Aggregation Structure: Use COUNT to aggregate the number of restaurants that meet the specified conditions.","1510":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie title and its ID. Use the FROM clause to specify the movie table. 2. Join Structure: Join the movie table with the copyright table on the movie ID (mid) and then join with the classification table on the msid to relate movies to their classifications. 3. Aggregation Structure: Use GROUP BY to group the results by movie ID and title, allowing us to count the number of genres associated with each movie. 4. Condition Structure: Use the HAVING clause to filter for the movie that has the maximum count of genres, ensuring we only get the movie classified in the most number of genres.","1511":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper (publication title) and the citation number. Use the FROM clause to specify the publication table and join it with the writes table to link authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the author with the name 'H. V. Jagadish'. 3. Join Structure: Use an INNER JOIN between the writes and publication tables based on the publication ID (pid) to connect authors with their respective papers. 4. Aggregation Structure: Use ORDER BY to sort the results by citation number in descending order and limit the results to the top one to get the paper with the most citations.","1512":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER\" and \"LOCATION.STREET_NAME\" to provide the address of the restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the city of \"Alameda.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to link each restaurant with its respective location. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and addresses of the restaurants.","1513":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.birth_city\" for the actor named \"Kevin Spacey\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is \"Kevin Spacey\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the birth city of the specified actor.","1514":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the count of distinct movie titles. Use the `FROM` clause to specify the `movie` table as the primary source of data. \n2. Condition Structure: Apply a `WHERE` clause to filter for movies released after 1990 and that are tagged with the keyword \"Persians\". This requires filtering based on the `keyword` table.\n3. Join Structure: Use `JOIN` clauses to connect the `movie`, `tags`, and `keyword` tables. The `tags` table is joined with the `movie` table using `msid` from `tags` and `mid` from `movie`. The `tags` table is also joined with the `keyword` table using `kid` from `tags` and `id` from `keyword`.\n4. Aggregation Structure: Use the `COUNT(DISTINCT)` function to count distinct movie titles that meet the specified conditions, ensuring no duplicates are counted.","1515":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME\" and \"RESTAURANT.FOOD_TYPE.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located on \"Buchanan\" street in \"San Francisco.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified criteria.","1516":"1. Sequential Structure: Start with the SELECT clause to retrieve the titles of the publications. Use the FROM clause to specify the publication table and JOIN it with the writes table to link authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for publications written by \"H. V. Jagadish\" and \"Divesh Srivastava\". 3. Join Structure: Use INNER JOIN between the publication and writes tables based on the publication ID and author ID to connect authors with their respective publications. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order, and limit the results to get the publication with the most citations.","1517":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of directors, specifically \"director.name.\" Since we want to avoid duplicate results, we will use the `DISTINCT` keyword to ensure that each director is listed only once. Additionally, we need to reference the `movie` table to ensure that we are dealing with movies, not other media types like TV series.\n2. Condition Structure: Apply a WHERE clause to filter for actors with the name \"Kate Winslet.\" This will ensure that we only retrieve directors of movies in which \"Kate Winslet\" has acted. We will also ensure that the actor's name is matched exactly, though case sensitivity may depend on the database settings.\n3. Join Structure: Use JOINs to connect the `actor` table with the `cast` table based on `actor.aid` and `cast.aid`. Then, join the `cast` table with the `copyright` table based on `cast.msid` to get the movies. Next, join the `directed_by` table with the `copyright` table to link the movies to their directors. Finally, join the `director` table to retrieve the director's name. Additionally, we will join the `movie` table to ensure that we are working with movies and not other media types.\n4. Aggregation Structure: No aggregation is needed here, as we are only retrieving distinct records of directors without performing any summary operations.","1518":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the movie titles (`movie.title`). Use the `FROM` clause to reference the `movie` table and join it with the `directed_by`, `director`, `cast`, and `actor` tables. Table aliasing is crucial to avoid ambiguity and improve readability, especially when multiple tables are involved.\n2. Condition Structure: Use the `WHERE` clause to filter the results to include only movies directed by \"Asghar Farhadi\" and featuring \"Taraneh Alidoosti.\" Ensure that the filtering conditions are applied to the correct tables, specifically the `director` and `actor` tables.\n3. Join Structure: Use `JOIN` clauses to connect the `movie` table with the `directed_by` table (on `movie.mid = directed_by.msid`), the `director` table (on `directed_by.did = director.did`), the `cast` table (on `movie.mid = cast.msid`), and the `actor` table (on `cast.aid = actor.aid`). Use table aliases to make the joins clear and unambiguous.\n4. Aggregation Structure: No aggregation is needed, as the task is to retrieve specific movie titles rather than summarize data.","1519":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the organization name and homepage. 2. Condition Structure: Use a WHERE clause to filter organizations that are located in \"North America\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"organization\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the organizations that meet the specified condition.","1520":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" since we want to know the name of a good restaurant and its rating. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the \"bay area.\" This will involve checking the \"GEOGRAPHIC.REGION\" for \"bay area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to prioritize higher-rated restaurants. We can also use LIMIT 1 to get the top-rated restaurant.","1521":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names and their ratings. We will also include the house number and street name for more detailed information about the location. 2. Condition Structure: Apply a WHERE clause to filter for records where the street name is 'bethel island rd' and the city name is 'bethel island.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its respective location. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the specified conditions.","1522":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.CITY_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for records where \"GEOGRAPHIC.REGION\" is 'Bay Area.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to link each restaurant with its geographic region. 4. Aggregation Structure: No aggregation is needed here, as we are simply listing the restaurants that meet the criteria.","1523":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper identifiers (pid) from the publication table. Use the FROM clause to specify the publication table and join it with the publication_keyword table to link publications with their keywords. 2. Condition Structure: Use the WHERE clause to filter for keywords that match \"Natural Language\". 3. Join Structure: Use an INNER JOIN between the publication and publication_keyword tables based on pid to connect publications with their keywords. Additionally, join with the keyword table to access the keyword text. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1524":"1. Sequential Structure: Begin with the SELECT clause to retrieve the \"actor.name\" field, which is the main information requested. Alias the tables for clarity and to avoid conflicts. \n2. Condition Structure: Apply a WHERE clause to filter for female actors and the specific movie title \"Saving Private Ryan.\" Ensure that the movie title is matched using the correct alias for the \"movie\" table.\n3. Join Structure: Use JOIN clauses to connect the \"actor\" and \"cast\" tables based on \"cast.aid = actor.aid.\" Then, join the \"movie\" table using \"cast.msid = movie.mid\" to ensure we are looking at the correct movie. The \"copyright\" table is not needed for this query, so it should be excluded.\n4. Aggregation Structure: No aggregation is needed, as the query is simply retrieving specific records without any need for summary functions.","1525":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table and join it with the writes table to link authors to their publications. 2. Condition Structure: Apply a WHERE clause to filter for authors affiliated with 'University of Michigan' and to ensure that the total citations for their publications exceed 5000. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on the author ID to connect authors with their respective publications. 4. Aggregation Structure: Use GROUP BY to group the results by author ID and name, and use the SUM function to calculate the total citations for each author. The HAVING clause will filter out authors whose total citations are less than or equal to 5000.","1526":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the restaurant names and their ratings. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve 'French' food. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"RESTAURANT\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and ratings of restaurants that meet the specified food type condition.","1527":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best French restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"San Francisco\" and serve \"French\" food. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order and LIMIT 1 to get the best-rated French restaurant.","1528":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table and join it with the writes table to link authors to their publications. 2. Condition Structure: Use the WHERE clause to filter for publications authored by \"H. V. Jagadish\" and published after the year 2000. 3. Join Structure: Use an INNER JOIN between the writes and publication tables based on the publication ID to connect authors with their respective papers. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1529":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of distinct authors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors with their publications. 2. Condition Structure: Use a WHERE clause to filter for the author named 'H. V. Jagadish' to ensure we are only counting collaborations involving this specific author. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on the author ID to connect authors with their respective publications. 4. Aggregation Structure: Use COUNT(DISTINCT) to count the number of unique authors who have collaborated with 'H. V. Jagadish'.","1530":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct movies. Use the `FROM` clause to specify the `cast` table, as it contains the relationship between actors and movies. Additionally, include the `movie` table to ensure that we are counting distinct movies.\n2. Condition Structure: Use a `WHERE` clause to filter for the actor named \"Shahab Hosseini\" by joining with the `actor` table. This ensures that we are only counting movies in which this specific actor has acted.\n3. Join Structure: Use an INNER JOIN between the `cast` and `actor` tables based on the actor's ID (`aid`) to link the actor to their roles in movies. Additionally, join the `movie` table using the `msid` from the `cast` table and the `mid` from the `movie` table to ensure that we are counting distinct movies.\n4. Aggregation Structure: Use the `COUNT` function to count the number of distinct movies (`mid`) that the actor has acted in. This ensures that we are counting unique movies rather than just entries in the `cast` table.","1531":"1. Sequential Structure: Start with the SELECT clause to specify the \"journal.homepage\" that we want to retrieve. 2. Condition Structure: Use a WHERE clause to filter for the journal with the name 'PVLDB'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"journal\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the homepage of the specified journal.","1532":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"organization.name\". 2. Condition Structure: Use a WHERE clause to filter organizations that are located in \"North America\". 3. Join Structure: A JOIN is necessary to connect the \"organization\" table with the \"domain\" table to filter organizations specifically in the \"Databases\" area. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names of organizations that meet the specified conditions.","1533":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located in \"san francisco,\" and are on \"buchanan\" street. 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also join with the \"GEOGRAPHIC\" table to ensure the city matches. 4. Aggregation Structure: No aggregation is needed here, but we will filter based on the conditions specified.","1534":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and release year of the movie. Use the FROM clause to specify the movie table. 2. Join Structure: Join the movie table with the directed_by table on the msid to connect movies with their directors. Then, join the directed_by table with the director table on the did to get the director's name. 3. Condition Structure: Use a WHERE clause to filter for movies directed by \"Jim Jarmusch\". 4. Aggregation Structure: Use ORDER BY to sort the results by release year in descending order and limit the results to the top one to get the latest movie.","1535":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication ID (pid) and citation number (citation_num) from the publication table. Use the FROM clause to specify the publication table and join it with the conference table to filter for the VLDB conference. 2. Condition Structure: Use a WHERE clause to filter for publications that are from the year 2000 or later and are associated with the VLDB conference. 3. Join Structure: Use an INNER JOIN between the publication and conference tables based on the conference ID (cid) to relate publications to their respective conferences. 4. Aggregation Structure: Use ORDER BY to sort the results by citation number in descending order and limit the results to the top entry to get the publication with the most citations.","1536":"1. Sequential Structure: Start with the SELECT clause to count the number of movies directed by Quentin Tarantino. Use the FROM clause to specify the directed_by table, which links directors to movies. 2. Condition Structure: Use a WHERE clause to filter for records where the director's name is 'Quentin Tarantino' and the release year of the movies is greater than 2010. 3. Join Structure: Use JOIN clauses to connect the directed_by table with the director and movie tables based on their respective keys (did and msid). 4. Aggregation Structure: Use the COUNT function to aggregate the number of movies directed by Quentin Tarantino after 2010.","1537":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of actors, specifically \"actor.name.\" Use table aliases to improve readability and avoid potential syntax issues. The FROM clause will specify the \"actor\" table, and subsequent JOINs will connect the relevant tables.\n2. Condition Structure: Apply a WHERE clause to filter actors whose nationality is \"Canada\" and who acted in movies with titles containing \"James Bond.\" Use the `LIKE` operator to account for partial matches in the movie title.\n3. Join Structure: Use JOIN clauses to connect the \"actor\" table (aliased as `a`) with the \"cast\" table (aliased as `c`) based on \"c.aid = a.aid.\" Then, join the \"cast\" table with the \"copyright\" table (aliased as `cp`) using \"c.msid = cp.msid.\" Finally, join the \"copyright\" table with the \"movie\" table (aliased as `m`) using \"cp.msid = m.mid.\"\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the actors that meet the specified conditions.","1538":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the restaurant's name and its rating. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated restaurant.","1539":"1. Sequential Structure: Start with the SELECT clause to retrieve the paper (title) from the publication table. Use the FROM clause to specify the publication table and join it with the journal table to filter for papers published in PVLDB. Finally, use ORDER BY to sort the results by citation number in descending order to get the most cited paper. 2. Condition Structure: Use a WHERE clause to filter for publications that are in the journal named 'PVLDB'. 3. Join Structure: Use an INNER JOIN between the publication and journal tables based on the journal ID to connect publications with their respective journals. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation, but we will limit the results to the top one to get the most cited paper.","1540":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"actor\" table for the actors born in Austin after 1980. 2. Condition Structure: Use a WHERE clause to filter for actors whose \"actor.birth_city\" is 'Austin' and \"actor.birth_year\" is greater than 1980. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving all relevant actor records that meet the specified conditions.","1541":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING\" for the Arabic restaurants. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that have a \"FOOD_TYPE\" of 'Arabic' and are located in the city 'Mountain View.' 3. Join Structure: No JOIN is necessary here, as the required information is available within the \"RESTAURANT\" table, and the city condition can be directly applied. 4. Aggregation Structure: No aggregation is needed since we are simply retrieving the names and ratings of the restaurants that meet the criteria.","1542":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, their food type, and rating. We will select \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in either the \"Yosemite\" or \"Mono Lake\" area. This will involve checking the \"GEOGRAPHIC.REGION\" for the specified areas. 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on the \"CITY_NAME\" to ensure we are only considering restaurants in the specified regions. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered correctly based on the conditions specified.","1543":"1. Sequential Structure: Start with the SELECT clause to retrieve all columns from the \"publication\" table and the \"name\" of the journal from the \"journal\" table. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the journal named \"PVLDB.\" 3. Join Structure: Use a JOIN between the \"publication\" and \"journal\" tables based on the \"jid\" to link each publication with its respective journal. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant publication records.","1544":"1. Sequential Structure: Start with the SELECT clause to retrieve the papers (publications) written by the authors \"H. V. Jagadish\" and \"Divesh Srivastava\". Use the FROM clause to specify the publication table and JOIN it with the writes table to link authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the authors' names and to ensure that the citation number is greater than 200. 3. Join Structure: Use INNER JOIN between the writes and author tables to connect authors with their respective publications. 4. Aggregation Structure: Not needed, as we are filtering based on specific conditions without requiring aggregation.","1545":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"conference.homepage\" of the VLDB conference. 2. Condition Structure: Use a WHERE clause to filter for the conference name that matches 'VLDB'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"conference\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the homepage of the specified conference.","1546":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the writes table, which links authors to publications. 2. Condition Structure: Use a WHERE clause to filter for the authors \"H. V. Jagadish\" and \"Divesh Srivastava\" and to ensure the publication year is before 2000. 3. Join Structure: Use JOIN to connect the writes table with the author table based on the author ID (aid) to filter by author names. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified authors.","1547":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" since we want to find a good restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in \"Alameda.\" We will also include a condition to filter for a good rating, which we can assume to be above a certain threshold (e.g., 4). 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will use ORDER BY to sort the results by rating in descending order to prioritize higher-rated restaurants.","1548":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the actor's name from the `actor` table. Use the `FROM` clause to specify the `cast` table, which contains the relationship between actors and movies. Additionally, include the `movie` table to filter by the movie title.\n2. Condition Structure: Use the `WHERE` clause to filter for the specific role \"Alan Turing\" and the movie title \"The Imitation Game\". Ensure that the correct table aliases are used to avoid ambiguity.\n3. Join Structure: Use an `INNER JOIN` between the `cast` and `actor` tables based on the actor ID (`aid`) to retrieve the actor's name. Also, use an `INNER JOIN` between the `cast` and `movie` tables based on the movie ID (`msid`) to filter by the movie title. Proper aliasing of tables is essential to avoid syntax errors.\n4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1549":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"tv_series.title\" and \"tv_series.release_year.\" 2. Condition Structure: Apply a WHERE clause to filter for records where the writer's name is \"Shonda Rhimes.\" 3. Join Structure: Use JOINs to connect the \"tv_series\" table with the \"written_by\" table on \"tv_series.sid\" and \"written_by.msid,\" and then join with the \"writer\" table on \"written_by.wid\" to link each TV series with its respective writer. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles and release years of the TV series.","1550":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. We will need to join this with the publication_keyword table to link keywords to their respective publications, and then join with the publication table to filter by the specific title. 2. Condition Structure: Use the WHERE clause to filter for the publication with the title \"Making database systems usable\". 3. Join Structure: Use INNER JOINs between the publication, publication_keyword, and keyword tables based on their respective keys to connect the keywords to the publication title. 4. Aggregation Structure: Not required, as we are simply retrieving the keywords without any aggregation.","1551":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of restaurants. Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve 'French' food and are located in 'Palo Alto'. 3. Join Structure: Not required, as all necessary data is available in the RESTAURANT table, and the city name can be directly filtered. 4. Aggregation Structure: Use the COUNT function to aggregate the number of French restaurants in Palo Alto.","1552":"1. Sequential Structure: Start with the SELECT clause to specify the \"organization.homepage\" that we want to retrieve. 2. Condition Structure: Use a WHERE clause to filter for the organization with the name \"University of Michigan\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"organization\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the homepage of a specific organization.","1553":"1. Sequential Structure: Start with the SELECT clause to specify the count of papers published on PVLDB before the year 2000. 2. Condition Structure: Use a WHERE clause to filter for publications where the \"publication.year\" is less than 2000 and the title contains \"PVLDB\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of publications that meet the specified conditions.","1554":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of movies directed by Quentin Tarantino. Use the FROM clause to specify the directed_by table, which links directors to movies. 2. Condition Structure: Apply a WHERE clause to filter for movies directed by Quentin Tarantino and released before 2010. 3. Join Structure: Use an INNER JOIN between the directed_by and movie tables based on the msid to connect the director's records with the corresponding movies. 4. Aggregation Structure: Use the COUNT function to aggregate the number of movies directed by Quentin Tarantino that meet the specified conditions.","1555":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve \"American\" food and are located in the \"Bay Area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best restaurant, and apply LIMIT 1 to get only the top-rated restaurant.","1556":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the publication ID (pid) of the papers published after the year 2000. 2. Condition Structure: Use a WHERE clause to filter for publications where \"publication.year\" is greater than 2000. 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the publication IDs that meet the specified condition.","1557":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the restaurants in the Bay Area. 2. Condition Structure: Apply a WHERE clause to filter for restaurants located in the Bay Area. This will involve checking the \"CITY_NAME\" against the relevant cities in the Bay Area, which can be inferred from the \"GEOGRAPHIC\" table. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: No aggregation is needed here, but we may want to filter for restaurants with a good rating, which can be defined as a rating above a certain threshold (e.g., 4.0).","1558":"1. Sequential Structure: Start with the SELECT clause to retrieve the year and the count of papers published. We will use COUNT to get the number of publications for each year. 2. Condition Structure: We need to filter the results to include only those publications that are associated with the journal \"PVLDB.\" This will be done using a WHERE clause. 3. Join Structure: We will use a JOIN between the \"publication\" and \"journal\" tables based on the journal ID to link publications to their respective journals. 4. Aggregation Structure: We will use GROUP BY to group the results by year, allowing us to count the number of publications for each year.","1559":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.nationality\" of the actor named \"Christoph Waltz\". 2. Condition Structure: Use a WHERE clause to filter for the actor whose name is \"Christoph Waltz\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","1560":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name, which is \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"San Francisco\" and serve \"French\" food. This will involve checking both the \"CITY_NAME\" and \"FOOD_TYPE\" fields. 3. Join Structure: No JOIN is necessary since the relevant information can be found within the \"RESTAURANT\" table, and the city condition can be directly applied. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant. Use LIMIT 1 to select only the top restaurant.","1561":"1. Sequential Structure: Start with the SELECT clause to specify the \"author.homepage\" that we want to retrieve. 2. Condition Structure: Use a WHERE clause to filter for the author whose name matches 'H. V. Jagadish'. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"author\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the homepage of a specific author.","1562":"1. Sequential Structure: Start with the SELECT clause to retrieve all fields from the \"publication\" table since we want all papers after 2000. 2. Condition Structure: Apply a WHERE clause to filter for publications with a year greater than 2000. Additionally, we need to filter for publications associated with the \"University of Michigan.\" 3. Join Structure: Use JOIN clauses to connect the \"publication\" table with the \"domain_publication\" table on \"pid\" and then join with the \"domain\" table on \"did\" to link to the \"organization\" table based on the organization name. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","1563":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of keywords. Use the FROM clause to specify the keyword table. 2. Join Structure: Join the keyword table with the domain_keyword table to link keywords to their respective domains. Additionally, join with the domain table to filter by the specific domain name 'Databases'. 3. Condition Structure: Use a WHERE clause to filter for the domain name 'Databases'. 4. Aggregation Structure: Use the COUNT function to aggregate the number of keywords associated with the 'Databases' domain.","1564":"1. Sequential Structure: Begin with the SELECT clause to retrieve the director's name from the \"director\" table. Use table aliases to improve clarity and avoid potential syntax issues. \n2. Condition Structure: Apply a WHERE clause to filter for the specific movie title \"Joy\" and the release year 2015. Ensure that string literals are enclosed in double quotes (e.g., `\"Joy\"`).\n3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"directed_by\" table based on \"mid\" and \"msid,\" and then join the \"directed_by\" table to the \"director\" table using \"did.\" Use table aliases to avoid ambiguity and improve readability.\n4. Aggregation Structure: No aggregation is needed here, as we are directly retrieving the director's name for the specified movie.","1565":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the actor's ID, gender, name, nationality, birth city, and birth year. 2. Condition Structure: Use a WHERE clause to filter for actors whose nationality is 'Afghanistan'. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the details of actors from Afghanistan.","1566":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles. Use the FROM clause to specify the movie table. We will need to join the cast table to link movies with their actors. Alias the tables appropriately to avoid ambiguity when joining the same table multiple times.\n2. Join Structure: Use JOINs to connect the movie table with the cast table on the `msid` (movie ID). Join the actor table twice, once for each actor, and alias both instances of the actor and cast tables to differentiate between them.\n3. Condition Structure: Use a WHERE clause to filter for movies that feature both actors, Woody Strode and Jason Robards. This can be done by checking for the actor names in the respective joined actor tables.\n4. Aggregation Structure: No aggregation is needed. The query can be solved by simply joining the cast and actor tables twice and using a WHERE clause to filter for the two specific actors.","1567":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name from the \"RESTAURANT\" table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"Mountain View\" and serve \"Arabic\" food. Additionally, we will filter for restaurants with a good rating, which we can assume means a rating above a certain threshold (e.g., greater than 3). 3. Join Structure: No JOIN is necessary since all required information is available in the \"RESTAURANT\" table, and the city name is already specified in the WHERE clause. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of restaurants that meet the specified conditions.","1568":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names and their corresponding city names. We will select \"RESTAURANT.NAME\" and \"RESTAURANT.CITY_NAME.\" 2. Condition Structure: We need to filter the results to only include restaurants located in the \"Bay Area.\" This will be done using a WHERE clause that checks if the \"GEOGRAPHIC.REGION\" is equal to 'Bay Area.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the common column \"CITY_NAME\" to link each restaurant with its geographic information. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants without any summarization.","1569":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located on \"buchanan,\" and are in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"RESTAURANT_ID\" and also ensure that the city matches \"san francisco\" through the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered based on the specified conditions.","1570":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations, which will involve the \"publication.citation_num\" field. We will also need to include \"publication.year\" to group the results by year. 2. Condition Structure: We will apply a WHERE clause to filter the records to only include publications from the conference named 'PVLDB'. 3. Join Structure: We will use a JOIN between the \"publication\" and \"conference\" tables based on the conference ID to link each publication with its respective conference. 4. Aggregation Structure: We will use SUM to aggregate the citation numbers for each year and GROUP BY \"publication.year\" to summarize the total citations per year.","1571":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of researchers. Use the FROM clause to specify the author table. 2. Condition Structure: Apply a WHERE clause to filter authors based on their association with the \"Databases\" domain and the \"University of Michigan\" organization. 3. Join Structure: Use JOIN clauses to connect the author table with the domain_author table to filter by domain and with the organization table to filter by university. 4. Aggregation Structure: Use the COUNT function to aggregate the number of researchers that meet the specified conditions.","1572":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"genre.genre\" field, which represents the genres of the movies. 2. Condition Structure: We need to filter the results to only include movies directed by \"Asghar Farhadi.\" This will be done using a WHERE clause on the \"director.name.\" 3. Join Structure: Use JOIN clauses to connect the \"director\" table with the \"directed_by\" table based on \"did,\" and then join the \"classification\" table to link the movies with their genres through the \"msid.\" 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the genres without any need for counting or summarizing.","1573":"1. Sequential Structure: Start with the SELECT clause to retrieve all columns from the \"publication\" table since the question asks for all papers. 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the \"VLDB\" conference. 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the \"cid\" to link each publication with its respective conference. 4. Aggregation Structure: No aggregation is needed, but we will also need to filter for the \"University of Michigan\" in the organization table, which requires another JOIN.","1574":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name. Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve French food and are located in San Francisco. 3. Join Structure: Use a JOIN between the RESTAURANT and LOCATION tables based on CITY_NAME to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: Use ORDER BY to sort the results by rating in descending order to find the best restaurant, and limit the results to the top one.","1575":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct movie titles. Use the `FROM` clause to specify the `cast` table, as it contains the relationship between actors and movies. Additionally, include the `movie` table to ensure that only movies (and not TV series) are counted.\n2. Condition Structure: Use a `WHERE` clause to filter for the actor named \"Shahab Hosseini\" by joining with the `actor` table to match the actor's name. Ensure that only distinct movie titles are counted to avoid over-counting if the actor has multiple roles in the same movie.\n3. Join Structure: Use an INNER JOIN between the `cast` and `actor` tables based on the actor's ID (`aid`) to link the actor to their respective movie roles. Additionally, join the `movie` table on `cast.msid = movie.mid` to ensure that only movies are counted.\n4. Aggregation Structure: Use the `COUNT(DISTINCT movie.title)` function to aggregate the number of distinct movies the specified actor has acted in, ensuring that multiple roles in the same movie are not double-counted.","1576":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best French restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are located in \"San Francisco\" and serve \"French\" food. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant, and apply LIMIT 1 to get only the top result.","1577":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food and are located on \"buchanan\" street in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and addresses of the restaurants that meet the specified conditions.","1578":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers written by the specified authors. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the authors \"H. V. Jagadish\" and \"Divesh Srivastava\". This will ensure that we only count the papers written by these two authors. 3. Join Structure: Use an INNER JOIN between the author and writes tables based on the author ID to connect authors with their written papers. 4. Aggregation Structure: Use COUNT to aggregate the number of papers written by the specified authors.","1579":"1. Sequential Structure: Start with the SELECT clause to specify the \"movie.budget\" for the movie titled \"Finding Nemo\". 2. Condition Structure: Use a WHERE clause to filter for the movie with the title \"Finding Nemo\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"movie\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single budget value for the specified movie.","1580":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields needed, which are \"RESTAURANT.NAME,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific conditions: the restaurant's food type must be 'arabic,' the street name must be 'buchanan,' and the city name must be 'san francisco.' 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"CITY_NAME\" to ensure we are looking at the correct location for the restaurant. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving specific records based on the conditions.","1581":"1. Sequential Structure: Start with the SELECT clause to count the number of restaurants that serve Chinese food. We will use the COUNT function to get the total number of places. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that have a food type of 'Chinese' and are located in the 'Bay Area.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on the \"CITY_NAME\" to ensure we are only counting restaurants in the specified region. 4. Aggregation Structure: Use COUNT to aggregate the number of Chinese restaurants in the Bay Area.","1582":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best American restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve \"American\" food and are located in the \"Bay Area.\" The Bay Area can be identified by the relevant cities in the GEOGRAPHIC table. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the Bay Area. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated restaurant, and apply LIMIT 1 to get only the top result.","1583":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are all columns from the \"actor\" table for the female actors. 2. Condition Structure: Use a WHERE clause to filter for actors who are female, born in \"New York City\", and born after the year 1980. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the records that meet the specified conditions.","1584":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"publication.pid,\" \"publication.title,\" and \"publication.year.\" 2. Condition Structure: Apply a WHERE clause to filter for publications that are from the conference \"PVLDB\" and have a year greater than 2000. We will also need to ensure that the organization name is \"University of Michigan.\" 3. Join Structure: Use JOIN clauses to connect the \"publication\" table with the \"conference\" table based on \"publication.cid = conference.cid\" and then join with the \"organization\" table to filter by the organization name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant records based on the specified conditions.","1585":"1. Sequential Structure: Begin with the `SELECT` clause to retrieve the series titles featuring \"Scott Foley.\" We will select the `tv_series.title`. To avoid ambiguity and improve clarity, we will use table aliases for all involved tables.\n2. Condition Structure: Use a `WHERE` clause to filter for the actor's name, specifically looking for \"Scott Foley.\" We will ensure that the `actor.name` is correctly referenced using the alias for the `actor` table.\n3. Join Structure: Use `JOIN` clauses to connect the `actor` table with the `cast` table based on `aid`, and then join the `cast` table with the `copyright` table based on `msid`. Finally, join the `copyright` table with the `tv_series` table to get the series information. We will use table aliases to ensure clarity and avoid ambiguity in the joins.\n4. Aggregation Structure: No aggregation is needed here, as we are only retrieving the titles of the series featuring the specified actor.","1586":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve 'American' food and are located in the 'Bay Area.' 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order and LIMIT 1 to get the best restaurant.","1587":"1. Sequential Structure: Start with the SELECT clause to retrieve the keywords. Use the FROM clause to specify the keyword table. 2. Join Structure: Join the conference table with the publication table on the conference ID (cid) to link conferences to their publications. Then, join the publication table with the publication_keyword table on the publication ID (pid) to connect publications to their keywords. 3. Condition Structure: Use a WHERE clause to filter for the conference name 'VLDB' to ensure we only get keywords associated with that specific conference. 4. Aggregation Structure: Not needed, as we are simply retrieving the keywords without any aggregation.","1588":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names from the \"RESTAURANT\" table. We will also need to include the house number and street name from the \"LOCATION\" table. 2. Condition Structure: Apply a WHERE clause to filter for records where the street name is 'bethel island rd' and the city name is 'bethel island'. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its corresponding location. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and addresses of the restaurants that meet the specified conditions.","1589":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations. Use the FROM clause to specify the publication table, and join it with the conference table to relate publications to their respective conferences. 2. Condition Structure: Use the WHERE clause to filter for publications that are associated with the VLDB conference and have a year less than 2005. 3. Join Structure: Use an INNER JOIN between the publication and conference tables based on the conference ID (cid) to connect publications to the VLDB conference. 4. Aggregation Structure: Use the SUM function to calculate the total number of citations for the filtered publications.","1590":"1. Sequential Structure: Start with the SELECT clause to retrieve the actor's name from the \"actor\" table. Use the FROM clause to reference the \"actor\" table and join it with the \"cast\" and \"movie\" tables. Aliasing the tables will improve readability and avoid potential syntax errors.\n2. Condition Structure: Apply a WHERE clause to filter for the specific movie title \"The Imitation Game\" and the role \"Alan Turing.\" Ensure that the conditions are applied in a way that avoids ambiguity between the tables by using proper table aliases.\n3. Join Structure: Use JOIN clauses to connect the \"actor\" table with the \"cast\" table based on \"cast.aid = actor.aid\" and the \"cast\" table with the \"movie\" table based on \"cast.msid = movie.mid.\" Aliasing the tables will streamline the joins and avoid potential syntax errors.\n4. Aggregation Structure: No aggregation is needed here, as we are looking for a specific actor's name based on the conditions provided.","1591":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct actors. Use the `FROM` clause to specify the `actor` table. Additionally, include the `movie` table to ensure proper linkage between the `cast` and `directed_by` tables through the `msid` (movie series ID).\n2. Condition Structure: Apply a `WHERE` clause to filter actors based on their nationality being 'Iran' and their involvement in movies directed by 'Jim Jarmusch'. This requires filtering on the `director` table for the director's name and on the `actor` table for the nationality.\n3. Join Structure: Use `JOIN` clauses to connect the `actor`, `cast`, `movie`, and `directed_by` tables. The `actor` table is joined with the `cast` table through `cast.aid = actor.aid`, the `cast` table is joined with the `movie` table through `cast.msid = movie.mid`, and the `movie` table is joined with the `directed_by` table through `directed_by.msid = movie.mid`. Finally, the `directed_by` table is joined with the `director` table through `directed_by.did = director.did`.\n4. Aggregation Structure: Use the `COUNT` function to aggregate the number of distinct actors that meet the criteria. The aggregation should be done on a unique identifier, such as the actor's `aid`, to ensure an accurate count.","1592":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names that serve French food. We will select \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that have a food type of 'French' and are located in the regions of 'Yosemite' or 'Mono Lake.' 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on the \"CITY_NAME\" to ensure we are only considering restaurants in the specified regions. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the criteria.","1593":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant name from the \"RESTAURANT\" table. We will also need to include the house number and street name from the \"LOCATION\" table to provide the full address. 2. Condition Structure: Apply a WHERE clause to filter for the specific street name \"bethel island rd\" and the city name \"bethel island.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its location details. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and addresses of the restaurants that meet the specified conditions.","1594":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located on \"buchanan\" street, and are in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also ensure that the city matches \"san francisco\" from the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered based on the specified conditions.","1595":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant's name and rating, which are found in the \"RESTAURANT\" table. 2. Condition Structure: Use a WHERE clause to filter for the specific street name \"bethel island rd\" and the city name \"bethel island.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its location details. 4. Aggregation Structure: No aggregation is needed, but we will filter for restaurants with a good rating, which we can assume means a rating above a certain threshold (e.g., 3 or higher).","1596":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication IDs of papers authored by \"H. V. Jagadish\". Use the FROM clause to specify the \"publication\" table and join it with the \"writes\" table to link authors to their publications. 2. Condition Structure: Apply a WHERE clause to filter for publications authored by \"H. V. Jagadish\" and published after the year 2000 in the journal \"PVLDB\". 3. Join Structure: Use an INNER JOIN between the \"writes\" and \"author\" tables based on author ID to connect authors with their respective publications. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1597":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names that serve Arabic food. We will select \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"Mountain View\" and serve \"Arabic\" food. This will involve checking the \"RESTAURANT.CITY_NAME\" and \"RESTAURANT.FOOD_TYPE.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are only considering restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only select restaurants with a good rating, which we can assume means a rating above a certain threshold (e.g., 3 or 4). However, since the question does not specify a rating threshold, we will just filter for Arabic restaurants in Mountain View.","1598":"1. Sequential Structure: Start with the SELECT clause to retrieve the title of the movie. Use the FROM clause to specify the `movie` table as the primary table. Alias the tables to avoid ambiguity and improve clarity.\n2. Join Structure: Join the `movie` table with the `cast` table on `movie.mid = cast.msid` to connect movies with their corresponding cast information. Then, join the `cast` table with the `actor` table on `cast.aid = actor.aid` to link actors to their roles in movies.\n3. Condition Structure: Use a WHERE clause to filter for the actor named \"Gabriele Ferzetti\" by referencing `actor.name`. Ensure that the `release_year` field is correctly referenced in the ORDER BY clause to sort the results by the latest movie.\n4. Aggregation Structure: Use `ORDER BY` to sort the results by `release_year` in descending order and limit the results to one to get the latest movie.","1599":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"release_year\" of the movie titled \"The Imitation Game\". 2. Condition Structure: Use a WHERE clause to filter for the movie with the title \"The Imitation Game\". 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"movie\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the release year of a specific movie.","1600":"1. Sequential Structure: Start with the SELECT clause to count the number of female actors. 2. Condition Structure: Use a WHERE clause to filter for actors who are female, were born in \"New York City\", and were born after 1980. 3. Join Structure: No JOIN is necessary since all relevant information is contained within the \"actor\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of female actors that meet the specified conditions.","1601":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations, which will involve using the SUM function on the \"publication.citation_num\" field. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the \"VLDB\" conference. 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on \"publication.cid\" and \"conference.cid\" to link each publication with its respective conference. 4. Aggregation Structure: Use SUM to aggregate the citation numbers for all publications related to the VLDB conference.","1602":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference name. Use the FROM clause to specify the conference table. We will also need to join with the publication and writes tables to link authors to their publications and then to the conferences. 2. Condition Structure: We will apply a WHERE clause to filter for publications written by the author \"H. V. Jagadish\". 3. Join Structure: Use JOINs to connect the conference table with the publication table on the conference ID, and the publication table with the writes table on the publication ID to relate authors to their papers. 4. Aggregation Structure: Use GROUP BY to group the results by conference ID and COUNT to count the number of papers for each conference. Finally, use ORDER BY to sort the results in descending order based on the count of papers and limit the result to the top conference.","1603":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that are in the journal \"PVLDB\" and published after the year 2000. 3. Join Structure: Use JOIN clauses to connect the publication table with the journal table to filter by journal name and ensure the correct relationship between the two tables. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1604":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"San Francisco,\" on the street \"Buchanan,\" and serve \"Arabic\" food. 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are only looking at restaurants in the specified city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to filter for the highest rating if needed.","1605":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the actor's name and their ID. 2. Condition Structure: Use a WHERE clause to filter actors who were born in \"Austin\" and after the year \"1980\". 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the actors that meet the specified conditions.","1606":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the `movie.title` of the movies directed by Asghar Farhadi featuring Taraneh Alidoosti. Ensure that the correct columns are used for the joins, specifically using `msid` from the `movie` table for the joins, not `mid`.\n2. Condition Structure: Apply a `WHERE` clause to filter for the specific director's name ('Asghar Farhadi') and the actor's name ('Taraneh Alidoosti'). Use table aliases to avoid ambiguity in column references.\n3. Join Structure: Use `JOIN` clauses to connect the `movie` table with the `cast` table based on `msid`, and then join the `cast` table with the `actor` table based on `aid` to ensure we are only considering movies that feature the specified actor. Additionally, join the `directed_by` table with the `director` table based on `did` and `msid` to filter by the specified director. Use table aliases to improve readability and avoid column name conflicts.\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the titles of the movies that meet the specified conditions.","1607":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct movie titles. Use the `FROM` clause to specify the `cast` table, as it contains the relationship between actors and movies. Additionally, join the `movie` table to ensure that the count is based on unique movie titles.\n2. Condition Structure: Use a `WHERE` clause to filter for the actor named \"Shahab Hosseini\" by checking the `name` field in the `actor` table.\n3. Join Structure: Use an `INNER JOIN` between the `cast` and `actor` tables based on the actor's ID (`aid`) to link the actor's name to the movies they acted in. Also, join the `movie` table on the `msid` to retrieve the movie titles and ensure that the count is based on distinct movies.\n4. Aggregation Structure: Use `COUNT(DISTINCT movie.title)` to aggregate the number of unique movies in which the actor has acted, ensuring that multiple roles in the same movie are not counted more than once.","1608":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"actor.nationality\" of the actress named \"Christoph Waltz\". 2. Condition Structure: Use a WHERE clause to filter for the specific actress by name. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"actor\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","1609":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names and food types. We will also include the house number and street name for the location details. 2. Condition Structure: Apply a WHERE clause to filter for records where the street name is 'bethel island rd' and the city name is 'bethel island'. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on the restaurant ID to link each restaurant with its respective location. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the details of the restaurants that meet the specified conditions.","1610":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields needed: \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"Arabic\" food, are located on \"Buchanan\" street, and are in \"San Francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also ensure the city matches \"San Francisco\" from the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed, but we will order the results by \"RESTAURANT.RATING\" to find the best-rated restaurant.","1611":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations. Use the FROM clause to specify the publication table, and join it with the domain_publication and domain tables to link publications to their respective organizations. 2. Condition Structure: Use a WHERE clause to filter for organizations with the name \"University of Michigan\". 3. Join Structure: Use JOINs between the domain_publication and domain tables to connect publications with their organizations based on the domain ID. 4. Aggregation Structure: Use SUM to calculate the total citations from the publication table, grouping by the organization to ensure we get the total for the specified organization.","1612":"1. Sequential Structure: Start with the SELECT clause to retrieve the publication ID (pid) of the paper. Use the FROM clause to specify the publication table and join it with the journal table to filter for the specific journal name \"PVLDB\". 2. Condition Structure: Use the WHERE clause to filter for publications that were published after the year 2000 and are in the journal \"PVLDB\". 3. Join Structure: Use an INNER JOIN between the publication and journal tables based on the journal ID (jid) to connect publications with their respective journals. 4. Aggregation Structure: Use ORDER BY to sort the results by the number of citations in descending order and limit the results to the top one to get the paper with the most citations.","1613":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles, along with the names of the writers and producers. We will select \"movie.title,\" \"writer.name,\" and \"producer.name.\" 2. Condition Structure: We need to filter the results to include only those movies written and produced by \"Woody Allen.\" This will involve using WHERE clauses for both the writer and producer names. 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"written_by\" table to find the writers, and then join with the \"writer\" table to get the writer's name. Similarly, join the \"movie\" table with the \"made_by\" table to find the producers, and then join with the \"producer\" table to get the producer's name. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the relevant movie titles and names without any need for counting or summarizing.","1614":"1. Sequential Structure: Start with the SELECT clause to specify the count of papers published on PVLDB after the year 2000. 2. Condition Structure: Use a WHERE clause to filter for publications where the \"publication.year\" is greater than 2000 and the title contains \"PVLDB\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of publications that meet the specified conditions.","1615":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs and names. Use the FROM clause to specify the author table. 2. Join Structure: Join the author table with the writes table to link authors to their publications, and then join with the publication_keyword table to connect publications to keywords. Finally, join with the keyword table to filter for the specific keyword \"Relational Database\". 3. Condition Structure: Use a WHERE clause to filter for the keyword \"Relational Database\" in the keyword table. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1616":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of keywords. Use the FROM clause to specify the keyword table. We will need to join with the publication_keyword table to link keywords to publications, and then join with the writes table to connect authors to their publications. 2. Condition Structure: Use a WHERE clause to filter for the author named \"H. V. Jagadish\" to ensure we are only counting keywords related to this specific author. 3. Join Structure: Use INNER JOINs between the writes, publication, and publication_keyword tables to connect authors to their publications and then to the keywords associated with those publications. 4. Aggregation Structure: Use COUNT to aggregate the number of distinct keywords related to the publications written by the specified author.","1617":"1. Sequential Structure: Start with the SELECT clause to specify the field needed, which is the \"publication.citation_num\" for the publication titled \"Making database systems usable\". 2. Condition Structure: Use a WHERE clause to filter for the specific title \"Making database systems usable\". 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: No aggregation is needed as we are retrieving a single field based on a specific condition.","1618":"1. Sequential Structure: Start with the SELECT clause to retrieve the movie titles. Use the FROM clause to specify the movie table. 2. Join Structure: Join the movie table with the directed_by table on the msid to connect movies with their directors. Then, join the directed_by table with the director table on the did to get the director's details. 3. Condition Structure: Use a WHERE clause to filter for the director with the name 'Alfred Hitchcock'. 4. Aggregation Structure: Not required, as we are simply retrieving titles without any aggregation.","1619":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers written by the author \"H. V. Jagadish\" for each year. Use the FROM clause to specify the writes table, which connects authors to publications. 2. Join Structure: Join the writes table with the author table to filter for the specific author by name. Additionally, join with the publication table to access the year of each publication. 3. Aggregation Structure: Use GROUP BY to group the results by year, allowing us to count the number of papers written in each year. The COUNT function will be used to aggregate the number of publications per year. 4. Condition Structure: Use a WHERE clause to filter for the author with the name \"H. V. Jagadish\".","1620":"1. Sequential Structure: Start with the SELECT clause to specify the count of movies produced in the year 2013. 2. Condition Structure: Use a WHERE clause to filter for movies where \"movie.release_year\" is equal to 2013. 3. Join Structure: No JOIN is necessary since all required information is available in the \"movie\" table. 4. Aggregation Structure: Use COUNT to calculate the total number of movies that meet the specified condition.","1621":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME,\" \"RESTAURANT.FOOD_TYPE,\" and \"RESTAURANT.RATING\" to provide information about the restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve French food and are located in the Yosemite and Mono Lake area. This will involve checking the \"GEOGRAPHIC.REGION\" for the specified areas. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to link each restaurant with its geographic information. 4. Aggregation Structure: No aggregation is needed here, but we will apply a condition to ensure that the restaurant's food type is French and that it is located in the specified regions.","1622":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of directors associated with the movie titled \"James Bond.\" 2. Condition Structure: Use a WHERE clause to filter for the specific movie title \"James Bond.\" 3. Join Structure: Use JOINs to connect the \"movie\" table with the \"directed_by\" table on \"mid\" and then with the \"director\" table on \"did\" to link each movie with its respective directors. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only get the distinct names of directors for the specified movie.","1623":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names, specifically \"RESTAURANT.NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in \"Mountain View.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to ensure we are looking at the correct locations for the restaurants. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the restaurants that meet the specified conditions.","1624":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food and are located on \"buchanan\" street in \"san francisco.\" This will involve checking both the food type and the street name. 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","1625":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations. Use the FROM clause to specify the publication table, and then join it with the publication_keyword table to link publications with their keywords. 2. Condition Structure: Use a WHERE clause to filter for publications that contain the keyword \"Natural Language\". 3. Join Structure: Use INNER JOIN between the publication and publication_keyword tables based on the publication ID (pid) to connect publications with their associated keywords. Additionally, join with the keyword table to filter by the specific keyword. 4. Aggregation Structure: Use the SUM function to calculate the total citations from the publication table for the filtered results.","1626":"1. Sequential Structure: Start with the SELECT clause to count the number of French restaurants. We will use the COUNT function on the restaurant ID. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are of the food type 'French' and located in 'Palo Alto.' 3. Join Structure: No JOIN is necessary here since the relevant information can be found within the \"RESTAURANT\" table, and the city name is directly referenced. 4. Aggregation Structure: Use COUNT to aggregate the number of French restaurants that meet the specified conditions.","1627":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the conference named 'PVLDB' and have a year before 2005. 3. Join Structure: Use a JOIN between the publication and conference tables based on the conference ID (cid) to relate publications to their respective conferences. 4. Aggregation Structure: Use the SUM function to calculate the total citations for the filtered publications.","1628":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name and homepage. Use the FROM clause to specify the author table. 2. Join Structure: Join the author table with the writes table to link authors to their publications, and then join with the publication table to access citation numbers. 3. Condition Structure: Use a WHERE clause to filter for authors affiliated with 'University of Michigan' and to ensure that the total citations for their papers exceed 5000. 4. Aggregation Structure: Use GROUP BY to group the results by author and SUM to calculate the total citations for each author, applying a HAVING clause to filter for those with more than 5000 citations.","1629":"1. Sequential Structure: Start with the SELECT clause to specify the count of papers (publications) after the year 2000. 2. Condition Structure: Use a WHERE clause to filter for publications where \"publication.year\" is greater than 2000. 3. Join Structure: No JOIN is necessary since all required information is available in the \"publication\" table. 4. Aggregation Structure: Use COUNT to aggregate the number of publications that meet the specified condition.","1630":"1. Sequential Structure: Start with the SELECT clause to retrieve the restaurant names. Use the FROM clause to specify the RESTAURANT table. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve French food and are located in either Yosemite or Mono Lake. 3. Join Structure: Use a JOIN clause to connect the RESTAURANT table with the GEOGRAPHIC table based on the CITY_NAME to ensure we are only considering restaurants in the specified cities. 4. Aggregation Structure: Not needed, as we are simply retrieving names based on the specified conditions without any aggregation.","1631":"1. Sequential Structure: Start with the SELECT clause to retrieve the journal information. Use the FROM clause to specify the journal table. 2. Join Structure: Join the journal table with the publication table on the journal ID to link journals with their respective publications. Additionally, join the publication table with the writes table to connect publications with their authors. 3. Condition Structure: Use a WHERE clause to filter for publications written by the author \"H. V. Jagadish\". 4. Aggregation Structure: Use GROUP BY to group the results by journal ID and apply a HAVING clause to filter for journals that have more than 10 associated publications.","1632":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify good restaurants. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve \"French\" food and are located in either \"Yosemite\" or \"Mono Lake.\" 3. Join Structure: Use JOIN to connect the \"RESTAURANT\" table with the \"GEOGRAPHIC\" table based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified areas. 4. Aggregation Structure: Since we are looking for a good restaurant, we can apply an ORDER BY clause to sort the results by \"RESTAURANT.RATING\" in descending order to prioritize higher-rated restaurants.","1633":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' names, specifically \"author.name.\" 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the journal named 'PVLDB.' 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"author.aid\" and \"publication\" table on \"publication.pid,\" and then join the \"publication\" table with the \"journal\" table on \"publication.jid.\" 4. Aggregation Structure: No aggregation is needed here, but DISTINCT can be applied to ensure unique author names are returned.","1634":"1. Sequential Structure: Start with the SELECT clause to retrieve the title and year of the publications. Use the FROM clause to specify the publication table and join it with the writes table to link authors to their publications. 2. Condition Structure: Use the WHERE clause to filter for publications written after the year 2005 and by the specified authors \"H. V. Jagadish\" and \"Yunyao Li\". 3. Join Structure: Use an INNER JOIN between the publication and writes tables based on the publication ID to connect authors with their respective papers. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation.","1635":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are the details of the publications. We will select all columns from the \"publication\" table. 2. Condition Structure: Apply a WHERE clause to filter for publications that are from the year greater than 2000 and have more than 200 citations. 3. Join Structure: Use a JOIN between the \"publication\" and \"conference\" tables based on the conference ID (cid) to ensure we are only looking at publications from the VLDB conference. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the conditions in the WHERE clause are met for the specific criteria of year and citation count.","1636":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" for the best American restaurant. 2. Condition Structure: Use a WHERE clause to filter for restaurants that are of the \"American\" food type and located in the \"bay area.\" 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"GEOGRAPHIC\" tables based on \"CITY_NAME\" to ensure we are only considering restaurants in the specified region. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order and apply LIMIT 1 to get the best-rated American restaurant.","1637":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct authors' information, specifically \"author.aid\" and \"author.name.\" 2. Condition Structure: Apply a WHERE clause to filter for publications that are in the journal \"PVLDB\" and have a year greater than 2010. 3. Join Structure: Use JOIN clauses to connect the \"author\" table with the \"writes\" table based on \"author.aid\" and \"publication.pid\" to link authors to their publications. Additionally, join the \"publication\" table with the \"journal\" table to filter by the journal name. 4. Aggregation Structure: No aggregation is needed, but DISTINCT is applied to ensure unique authors are returned.","1638":"1. Sequential Structure: Start with the SELECT clause to retrieve the authors' names, specifically \"author.name.\" 2. Condition Structure: Apply a WHERE clause to filter for publications that are associated with the VLDB conference and were published in the year 2002. 3. Join Structure: Use JOIN clauses to connect the \"author,\" \"publication,\" and \"conference\" tables based on their relationships, specifically linking \"author.aid\" to \"writes.aid\" and \"publication.cid\" to \"conference.cid.\" 4. Aggregation Structure: No aggregation is needed here, but we will ensure that we only return distinct author names.","1639":"1. Sequential Structure: Start with the SELECT clause to retrieve the author's name. Use the FROM clause to specify the author table. We will need to join with the writes table to link authors to their publications, and then join with the publication table to access citation information. 2. Condition Structure: Use a WHERE clause to filter for authors affiliated with the \"University of Michigan\". 3. Join Structure: Use INNER JOINs between the author, writes, and publication tables based on the appropriate foreign keys to connect authors to their publications and the citation data. 4. Aggregation Structure: Use GROUP BY to group the results by author ID, and use SUM to calculate the total citations for each author. Finally, apply an ORDER BY clause to sort the results by total citations in descending order and limit the result to the top author.","1640":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food and are located on \"buchanan\" street in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" and \"LOCATION\" tables based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names and addresses of the restaurants that meet the criteria.","1641":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER\" and \"LOCATION.STREET_NAME\" to identify the restaurant's location. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"mountain view\" and serve \"arabic\" food. Additionally, we will filter for restaurants with a good rating, which we can assume means a rating above a certain threshold (e.g., 4 or higher). 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to get the location details of the restaurant. 4. Aggregation Structure: No aggregation is needed here, but we will ensure to filter based on the rating condition in the WHERE clause.","1642":"1. Sequential Structure: Start with the `SELECT` clause to retrieve the count of distinct movies. We will use the `COUNT(DISTINCT)` function to ensure that only unique movies featuring the actor \"Shahab Hosseini\" are counted.\n2. Condition Structure: Apply a `WHERE` clause to filter for the specific actor by name, \"Shahab Hosseini.\" This ensures that only movies featuring this actor are considered.\n3. Join Structure: Use `JOIN` clauses to connect the `actor` table with the `cast` table based on `aid`, and then join the `cast` table with the `copyright` table using `msid` to link to the `movie` table. Aliases will be used for better readability and to avoid ambiguity.\n4. Aggregation Structure: Use `COUNT(DISTINCT)` to aggregate the number of distinct movies associated with the actor, ensuring that each movie is counted only once, even if the actor appears in multiple roles or credits.","1643":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best French restaurant. 2. Condition Structure: Apply a WHERE clause to filter for restaurants that are located in \"San Francisco\" and serve \"French\" food. This will involve checking the \"CITY_NAME\" and \"FOOD_TYPE\" fields. 3. Join Structure: Use a JOIN between the \"RESTAURANT\" and \"LOCATION\" tables based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID\" to ensure we are looking at the correct restaurant locations. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated French restaurant. We can also use LIMIT 1 to get only the top result.","1644":"1. Sequential Structure: Start with the SELECT clause to retrieve the writer's name, which is \"writer.name.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific movie title, \"The Truman Show.\" 3. Join Structure: Use JOIN clauses to connect the \"movie\" table with the \"copyright\" table on \"movie.mid\" and \"copyright.msid,\" and then join the \"written_by\" table on \"copyright.msid\" to link to the writer. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the writer's name for the specified movie.","1645":"1. Sequential Structure: Start with the `SELECT` clause to count the number of distinct movie titles. Use the `FROM` clause to specify the `cast` table, as it links actors to movies. The `DISTINCT` keyword is necessary to ensure that only unique movie titles are counted.\n2. Condition Structure: Use a `WHERE` clause to filter for the actor named \"Humphrey Bogart\" and to ensure that the release year of the movies is before 1942. The actor's name should be enclosed in double quotes to handle spaces correctly.\n3. Join Structure: Use `JOIN` clauses to connect the `cast` table with the `actor` and `movie` tables. The `actor` table is joined to filter by the actor's name, and the `movie` table is joined to access the release year and title. Table aliases should be used to improve readability and avoid ambiguity.\n4. Aggregation Structure: Use `COUNT(DISTINCT)` to aggregate the number of unique movie titles that meet the specified conditions. This ensures that duplicate entries for the same movie are not counted multiple times.","1646":"1. Sequential Structure: Start with the SELECT clause to retrieve the distinct authors' information, specifically \"author.aid\" and \"author.name.\" 2. Condition Structure: Use a WHERE clause to filter for publications that are associated with the \"VLDB\" conference. 3. Join Structure: Use JOINs to connect the \"author\" table with the \"writes\" table on \"author.aid\" and the \"publication\" table on \"writes.pid\" to link authors to their publications. Then, join the \"publication\" table with the \"conference\" table on \"publication.cid\" to filter by the conference name. 4. Aggregation Structure: No aggregation is needed, but DISTINCT is applied to ensure unique authors are returned.","1647":"1. Sequential Structure: Start with the SELECT clause to retrieve the \"keyword.keyword\" field, which contains the keywords we are interested in. 2. Condition Structure: Apply a WHERE clause to filter for records where the domain name is 'Databases'. 3. Join Structure: Use JOIN clauses to connect the \"keyword\" table with the \"domain_keyword\" table based on the \"kid\" field, and then join the \"domain\" table based on the \"did\" field to ensure we are only getting keywords associated with the 'Databases' domain. 4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the keywords without any need for summarization.","1648":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs and names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors to their publications. Then, join the publication table to the conference table to filter by conference name and year. 2. Condition Structure: Use the WHERE clause to filter for publications associated with the VLDB conference and restrict the year to be less than 2002. 3. Join Structure: Use INNER JOINs between the author, writes, publication, and conference tables based on their respective foreign key relationships to connect authors to their publications and the conferences those publications are associated with. 4. Aggregation Structure: Not needed, as we are retrieving specific records without any aggregation.","1649":"1. Sequential Structure: Start with the SELECT clause to retrieve the names of the actors. We will select \"actor.name\". Additionally, aliasing the tables will improve readability and avoid ambiguity.\n2. Condition Structure: Apply a WHERE clause to filter for the specific movie title, which is \"Camp X-Ray\". This will be done by joining the `movie` table with the `copyright` table using `movie.mid = copyright.msid` and then filtering by `movie.title = 'Camp X-Ray'`.\n3. Join Structure: Use JOIN clauses to connect the `movie` table with the `copyright` table based on `movie.mid = copyright.msid`. Then, join the `cast` table with the `actor` table based on `cast.aid = actor.aid` to get the actor details. Finally, join the `cast` table with the `copyright` table using `cast.msid = copyright.msid` to ensure the correct movie is selected.\n4. Aggregation Structure: No aggregation is needed here, as we are simply retrieving the names of the actors without any summarization.","1650":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields \"RESTAURANT.NAME\" and \"RESTAURANT.RATING\" to identify the best French restaurant. 2. Condition Structure: Use a WHERE clause to filter for records where \"RESTAURANT.CITY_NAME\" is 'san francisco' and \"RESTAURANT.FOOD_TYPE\" is 'french'. 3. Join Structure: No JOIN is necessary since the relevant information can be accessed directly from the \"RESTAURANT\" table, as the city name is already specified in the WHERE clause. 4. Aggregation Structure: Use ORDER BY to sort the results by \"RESTAURANT.RATING\" in descending order to find the best-rated French restaurant.","1651":"1. Sequential Structure: Start with the SELECT clause to specify the fields needed, which are the restaurant names and their ratings. 2. Condition Structure: Use a WHERE clause to filter for restaurants that serve 'French' food. 3. Join Structure: No JOIN is necessary since all relevant information is available in the \"RESTAURANT\" table. 4. Aggregation Structure: No aggregation is needed as we are simply retrieving the names and ratings of restaurants that meet the specified food type condition.","1652":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME\" and \"LOCATION.HOUSE_NUMBER\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for the specific street name \"Buchanan,\" the city \"San Francisco,\" and the food type \"Arabic\" with a rating that indicates it is \"Good.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" and \"LOCATION\" tables based on the \"RESTAURANT_ID\" and also ensure that the \"CITY_NAME\" matches \"San Francisco\" from the \"GEOGRAPHIC\" table. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered correctly based on the conditions specified.","1653":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, specifically \"RESTAURANT.NAME\" and \"RESTAURANT.RATING.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"French\" food and are located in either \"Yosemite\" or \"Mono Lake.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on \"RESTAURANT.ID\" and \"LOCATION.RESTAURANT_ID,\" and also join with the \"GEOGRAPHIC\" table to filter by city names. 4. Aggregation Structure: No aggregation is needed here, but we will ensure the results are filtered correctly based on the specified conditions.","1654":"1. Sequential Structure: Start with the SELECT clause to retrieve the conference IDs. Use the FROM clause to specify the conference table. We will also need to join with the publication and writes tables to count the number of papers associated with the author \"H. V. Jagadish\". 2. Condition Structure: Use a HAVING clause to filter for conferences that have more than 10 papers written by the specified author. 3. Join Structure: Use JOINs between the conference, publication, and writes tables based on their relationships to connect conferences with their respective publications and authors. 4. Aggregation Structure: Use COUNT to aggregate the number of papers per conference and filter those counts in the HAVING clause.","1655":"1. Sequential Structure: Start with the SELECT clause to retrieve the fields we need, which are \"RESTAURANT.NAME,\" \"RESTAURANT.RATING,\" \"LOCATION.HOUSE_NUMBER,\" and \"LOCATION.STREET_NAME.\" 2. Condition Structure: Apply a WHERE clause to filter for restaurants that serve \"arabic\" food, are located on \"buchanan\" street, and are in \"san francisco.\" 3. Join Structure: Use JOIN clauses to connect the \"RESTAURANT\" table with the \"LOCATION\" table based on the \"CITY_NAME\" to ensure we are looking at the correct city. 4. Aggregation Structure: No aggregation is needed here, but we will ensure that the results are filtered based on the specified conditions.","1656":"1. Sequential Structure: Start with the SELECT clause to retrieve the total citations and the year. We will use the SUM function on \"publication.citation_num\" to get the total citations for each year. 2. Condition Structure: We need to filter the results to include only those publications that are associated with the \"VLDB\" conference. This will be done using a WHERE clause. 3. Join Structure: We will use a JOIN between the \"publication\" and \"conference\" tables based on the conference ID (cid) to link publications to their respective conferences. 4. Aggregation Structure: We will use GROUP BY to group the results by \"publication.year\" to get the total citations for each year.","1657":"1. Sequential Structure: Start with the SELECT clause to retrieve the count of papers. Use the FROM clause to specify the publication table. 2. Condition Structure: Apply a WHERE clause to filter for publications associated with the \"University of Michigan\" and the \"Databases\" area. 3. Join Structure: Use JOIN clauses to connect the publication table with the domain_publication and organization tables based on their relationships. 4. Aggregation Structure: Use the COUNT function to aggregate the number of papers that meet the specified conditions.","1658":"1. Sequential Structure: Start with the SELECT clause to retrieve the author IDs and names. Use the FROM clause to specify the author table and JOIN it with the writes table to link authors with their publications. Then, JOIN the publication table to filter based on the publication year. 2. Condition Structure: Use the WHERE clause to filter for publications authored by 'H. V. Jagadish' and ensure the publication year is greater than 2000. 3. Join Structure: Use INNER JOINs between the author, writes, and publication tables based on the author ID and publication ID to connect authors with their works. 4. Aggregation Structure: Not required, as we are retrieving specific records without any aggregation."},"score":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":0,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":0,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":0,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"527":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":0,"572":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1,"589":1,"590":1,"591":1,"592":1,"593":1,"594":0,"595":1,"596":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"603":1,"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1,"611":1,"612":1,"613":1,"614":1,"615":1,"616":1,"617":1,"618":1,"619":1,"620":1,"621":1,"622":1,"623":1,"624":1,"625":1,"626":1,"627":1,"628":1,"629":1,"630":1,"631":1,"632":1,"633":1,"634":1,"635":1,"636":1,"637":1,"638":1,"639":1,"640":1,"641":1,"642":1,"643":1,"644":1,"645":1,"646":1,"647":1,"648":1,"649":1,"650":1,"651":1,"652":1,"653":1,"654":1,"655":1,"656":1,"657":1,"658":1,"659":1,"660":1,"661":1,"662":1,"663":1,"664":1,"665":1,"666":1,"667":1,"668":1,"669":1,"670":1,"671":1,"672":1,"673":1,"674":1,"675":1,"676":1,"677":1,"678":1,"679":1,"680":1,"681":1,"682":1,"683":1,"684":1,"685":1,"686":1,"687":1,"688":1,"689":1,"690":1,"691":1,"692":1,"693":1,"694":1,"695":1,"696":1,"697":1,"698":1,"699":1,"700":1,"701":1,"702":1,"703":1,"704":1,"705":1,"706":1,"707":1,"708":1,"709":1,"710":1,"711":1,"712":1,"713":1,"714":1,"715":1,"716":1,"717":1,"718":1,"719":1,"720":1,"721":1,"722":1,"723":1,"724":1,"725":1,"726":1,"727":1,"728":1,"729":1,"730":1,"731":1,"732":1,"733":1,"734":1,"735":1,"736":1,"737":1,"738":1,"739":1,"740":1,"741":1,"742":1,"743":1,"744":1,"745":1,"746":1,"747":1,"748":1,"749":1,"750":1,"751":1,"752":1,"753":1,"754":1,"755":1,"756":1,"757":1,"758":1,"759":1,"760":1,"761":1,"762":1,"763":1,"764":1,"765":1,"766":1,"767":1,"768":1,"769":1,"770":1,"771":1,"772":1,"773":1,"774":1,"775":1,"776":1,"777":1,"778":1,"779":1,"780":1,"781":1,"782":1,"783":1,"784":1,"785":1,"786":1,"787":1,"788":1,"789":1,"790":1,"791":1,"792":1,"793":1,"794":1,"795":1,"796":1,"797":1,"798":1,"799":1,"800":1,"801":1,"802":1,"803":1,"804":1,"805":1,"806":1,"807":1,"808":1,"809":1,"810":1,"811":1,"812":1,"813":1,"814":1,"815":1,"816":1,"817":1,"818":1,"819":1,"820":1,"821":1,"822":1,"823":1,"824":1,"825":1,"826":1,"827":1,"828":1,"829":1,"830":1,"831":1,"832":1,"833":1,"834":1,"835":1,"836":1,"837":1,"838":1,"839":1,"840":1,"841":1,"842":1,"843":1,"844":1,"845":1,"846":1,"847":1,"848":1,"849":1,"850":1,"851":1,"852":1,"853":1,"854":1,"855":1,"856":1,"857":1,"858":1,"859":1,"860":1,"861":1,"862":1,"863":1,"864":1,"865":1,"866":1,"867":1,"868":1,"869":1,"870":1,"871":1,"872":1,"873":1,"874":1,"875":1,"876":1,"877":1,"878":1,"879":1,"880":1,"881":1,"882":1,"883":1,"884":1,"885":1,"886":1,"887":1,"888":1,"889":1,"890":1,"891":1,"892":1,"893":1,"894":1,"895":1,"896":1,"897":0,"898":1,"899":1,"900":1,"901":1,"902":1,"903":1,"904":1,"905":1,"906":1,"907":1,"908":1,"909":1,"910":1,"911":1,"912":1,"913":1,"914":1,"915":1,"916":1,"917":1,"918":1,"919":1,"920":1,"921":1,"922":1,"923":1,"924":0,"925":1,"926":1,"927":1,"928":1,"929":1,"930":1,"931":1,"932":1,"933":1,"934":1,"935":1,"936":1,"937":1,"938":1,"939":1,"940":1,"941":1,"942":1,"943":1,"944":1,"945":1,"946":1,"947":1,"948":1,"949":1,"950":1,"951":1,"952":1,"953":1,"954":1,"955":1,"956":1,"957":1,"958":1,"959":1,"960":1,"961":1,"962":1,"963":1,"964":1,"965":1,"966":1,"967":1,"968":1,"969":1,"970":1,"971":1,"972":1,"973":1,"974":1,"975":1,"976":1,"977":1,"978":1,"979":0,"980":1,"981":1,"982":1,"983":1,"984":1,"985":1,"986":1,"987":1,"988":1,"989":1,"990":1,"991":1,"992":1,"993":1,"994":1,"995":1,"996":1,"997":1,"998":1,"999":1,"1000":1,"1001":1,"1002":0,"1003":1,"1004":1,"1005":1,"1006":1,"1007":1,"1008":1,"1009":1,"1010":1,"1011":1,"1012":1,"1013":1,"1014":1,"1015":1,"1016":1,"1017":1,"1018":1,"1019":1,"1020":1,"1021":1,"1022":1,"1023":1,"1024":1,"1025":1,"1026":1,"1027":1,"1028":1,"1029":1,"1030":1,"1031":1,"1032":1,"1033":1,"1034":0,"1035":1,"1036":1,"1037":1,"1038":1,"1039":1,"1040":1,"1041":1,"1042":1,"1043":1,"1044":1,"1045":1,"1046":1,"1047":1,"1048":1,"1049":1,"1050":1,"1051":1,"1052":1,"1053":1,"1054":1,"1055":1,"1056":1,"1057":1,"1058":1,"1059":1,"1060":1,"1061":1,"1062":1,"1063":1,"1064":1,"1065":1,"1066":1,"1067":1,"1068":1,"1069":1,"1070":1,"1071":1,"1072":1,"1073":1,"1074":1,"1075":1,"1076":1,"1077":1,"1078":1,"1079":1,"1080":1,"1081":1,"1082":1,"1083":1,"1084":1,"1085":1,"1086":1,"1087":1,"1088":1,"1089":1,"1090":1,"1091":1,"1092":1,"1093":1,"1094":1,"1095":1,"1096":1,"1097":1,"1098":1,"1099":1,"1100":1,"1101":1,"1102":1,"1103":1,"1104":1,"1105":1,"1106":1,"1107":1,"1108":1,"1109":1,"1110":1,"1111":1,"1112":1,"1113":1,"1114":1,"1115":1,"1116":1,"1117":1,"1118":1,"1119":1,"1120":1,"1121":1,"1122":1,"1123":1,"1124":1,"1125":1,"1126":1,"1127":1,"1128":1,"1129":1,"1130":1,"1131":1,"1132":1,"1133":1,"1134":1,"1135":1,"1136":1,"1137":1,"1138":1,"1139":1,"1140":1,"1141":1,"1142":1,"1143":1,"1144":1,"1145":1,"1146":1,"1147":1,"1148":1,"1149":1,"1150":1,"1151":1,"1152":1,"1153":1,"1154":1,"1155":1,"1156":1,"1157":1,"1158":1,"1159":1,"1160":1,"1161":1,"1162":1,"1163":1,"1164":1,"1165":1,"1166":1,"1167":1,"1168":1,"1169":1,"1170":1,"1171":1,"1172":1,"1173":1,"1174":1,"1175":1,"1176":1,"1177":1,"1178":1,"1179":1,"1180":1,"1181":1,"1182":1,"1183":1,"1184":1,"1185":1,"1186":1,"1187":1,"1188":1,"1189":0,"1190":1,"1191":1,"1192":1,"1193":1,"1194":1,"1195":1,"1196":1,"1197":1,"1198":1,"1199":1,"1200":1,"1201":1,"1202":1,"1203":1,"1204":1,"1205":1,"1206":1,"1207":1,"1208":1,"1209":1,"1210":1,"1211":1,"1212":1,"1213":1,"1214":1,"1215":1,"1216":1,"1217":1,"1218":1,"1219":1,"1220":1,"1221":1,"1222":1,"1223":1,"1224":1,"1225":1,"1226":1,"1227":1,"1228":1,"1229":1,"1230":1,"1231":1,"1232":1,"1233":1,"1234":1,"1235":1,"1236":1,"1237":1,"1238":1,"1239":1,"1240":1,"1241":1,"1242":1,"1243":1,"1244":1,"1245":1,"1246":1,"1247":1,"1248":1,"1249":1,"1250":1,"1251":1,"1252":1,"1253":1,"1254":1,"1255":1,"1256":1,"1257":1,"1258":1,"1259":1,"1260":1,"1261":1,"1262":1,"1263":1,"1264":1,"1265":1,"1266":1,"1267":1,"1268":1,"1269":1,"1270":1,"1271":1,"1272":1,"1273":1,"1274":1,"1275":1,"1276":1,"1277":1,"1278":1,"1279":1,"1280":1,"1281":1,"1282":1,"1283":1,"1284":1,"1285":1,"1286":1,"1287":1,"1288":1,"1289":1,"1290":1,"1291":1,"1292":1,"1293":1,"1294":1,"1295":1,"1296":1,"1297":1,"1298":1,"1299":0,"1300":1,"1301":1,"1302":1,"1303":1,"1304":1,"1305":1,"1306":1,"1307":1,"1308":1,"1309":1,"1310":1,"1311":1,"1312":1,"1313":1,"1314":1,"1315":1,"1316":1,"1317":1,"1318":1,"1319":1,"1320":1,"1321":1,"1322":1,"1323":1,"1324":1,"1325":1,"1326":1,"1327":1,"1328":1,"1329":1,"1330":1,"1331":1,"1332":1,"1333":1,"1334":1,"1335":0,"1336":1,"1337":1,"1338":1,"1339":1,"1340":1,"1341":1,"1342":1,"1343":0,"1344":1,"1345":1,"1346":1,"1347":1,"1348":1,"1349":1,"1350":1,"1351":1,"1352":1,"1353":1,"1354":1,"1355":1,"1356":1,"1357":1,"1358":1,"1359":1,"1360":1,"1361":1,"1362":1,"1363":1,"1364":1,"1365":1,"1366":1,"1367":1,"1368":1,"1369":1,"1370":1,"1371":1,"1372":0,"1373":1,"1374":1,"1375":1,"1376":1,"1377":1,"1378":1,"1379":1,"1380":1,"1381":1,"1382":1,"1383":1,"1384":1,"1385":1,"1386":1,"1387":1,"1388":1,"1389":1,"1390":1,"1391":1,"1392":1,"1393":1,"1394":1,"1395":1,"1396":1,"1397":1,"1398":1,"1399":1,"1400":1,"1401":1,"1402":1,"1403":1,"1404":1,"1405":1,"1406":1,"1407":1,"1408":1,"1409":1,"1410":1,"1411":1,"1412":1,"1413":1,"1414":1,"1415":1,"1416":1,"1417":1,"1418":1,"1419":1,"1420":1,"1421":1,"1422":1,"1423":1,"1424":1,"1425":1,"1426":1,"1427":1,"1428":1,"1429":1,"1430":1,"1431":1,"1432":1,"1433":0,"1434":1,"1435":1,"1436":1,"1437":1,"1438":1,"1439":1,"1440":1,"1441":1,"1442":1,"1443":1,"1444":1,"1445":1,"1446":1,"1447":1,"1448":1,"1449":1,"1450":1,"1451":1,"1452":1,"1453":1,"1454":1,"1455":1,"1456":1,"1457":1,"1458":1,"1459":1,"1460":1,"1461":1,"1462":1,"1463":1,"1464":1,"1465":1,"1466":1,"1467":1,"1468":1,"1469":1,"1470":0,"1471":1,"1472":1,"1473":1,"1474":1,"1475":1,"1476":0,"1477":1,"1478":1,"1479":1,"1480":1,"1481":1,"1482":1,"1483":1,"1484":1,"1485":1,"1486":1,"1487":1,"1488":1,"1489":1,"1490":1,"1491":1,"1492":1,"1493":1,"1494":1,"1495":1,"1496":1,"1497":1,"1498":1,"1499":1,"1500":1,"1501":1,"1502":1,"1503":1,"1504":1,"1505":1,"1506":1,"1507":1,"1508":1,"1509":1,"1510":1,"1511":1,"1512":1,"1513":1,"1514":1,"1515":1,"1516":1,"1517":1,"1518":1,"1519":1,"1520":1,"1521":1,"1522":1,"1523":1,"1524":1,"1525":1,"1526":1,"1527":1,"1528":1,"1529":1,"1530":0,"1531":1,"1532":1,"1533":1,"1534":1,"1535":1,"1536":1,"1537":1,"1538":1,"1539":1,"1540":1,"1541":1,"1542":1,"1543":1,"1544":1,"1545":1,"1546":1,"1547":1,"1548":1,"1549":1,"1550":1,"1551":1,"1552":1,"1553":1,"1554":1,"1555":1,"1556":1,"1557":1,"1558":1,"1559":1,"1560":1,"1561":1,"1562":1,"1563":1,"1564":1,"1565":1,"1566":1,"1567":1,"1568":1,"1569":1,"1570":1,"1571":1,"1572":1,"1573":1,"1574":1,"1575":1,"1576":1,"1577":1,"1578":1,"1579":1,"1580":1,"1581":1,"1582":1,"1583":1,"1584":1,"1585":1,"1586":1,"1587":1,"1588":1,"1589":1,"1590":1,"1591":0,"1592":1,"1593":1,"1594":1,"1595":1,"1596":1,"1597":1,"1598":1,"1599":1,"1600":1,"1601":1,"1602":1,"1603":1,"1604":1,"1605":1,"1606":1,"1607":0,"1608":1,"1609":1,"1610":1,"1611":1,"1612":1,"1613":1,"1614":1,"1615":1,"1616":1,"1617":1,"1618":1,"1619":1,"1620":1,"1621":1,"1622":1,"1623":1,"1624":1,"1625":1,"1626":1,"1627":1,"1628":1,"1629":1,"1630":1,"1631":1,"1632":1,"1633":1,"1634":1,"1635":1,"1636":1,"1637":1,"1638":1,"1639":1,"1640":1,"1641":1,"1642":1,"1643":1,"1644":1,"1645":1,"1646":1,"1647":1,"1648":1,"1649":1,"1650":1,"1651":1,"1652":1,"1653":1,"1654":1,"1655":1,"1656":1,"1657":1,"1658":1},"error":{"0":null,"1":null,"2":null,"3":null,"4":null,"5":null,"6":null,"7":null,"8":null,"9":null,"10":null,"11":null,"12":null,"13":null,"14":null,"15":null,"16":null,"17":null,"18":null,"19":null,"20":null,"21":null,"22":null,"23":null,"24":null,"25":null,"26":null,"27":null,"28":null,"29":null,"30":null,"31":null,"32":null,"33":null,"34":null,"35":null,"36":null,"37":null,"38":null,"39":null,"40":null,"41":null,"42":null,"43":null,"44":null,"45":null,"46":null,"47":null,"48":null,"49":null,"50":null,"51":null,"52":null,"53":null,"54":null,"55":null,"56":null,"57":null,"58":null,"59":null,"60":null,"61":null,"62":null,"63":null,"64":null,"65":null,"66":null,"67":null,"68":null,"69":null,"70":null,"71":null,"72":null,"73":null,"74":null,"75":null,"76":null,"77":null,"78":null,"79":null,"80":null,"81":null,"82":null,"83":null,"84":null,"85":null,"86":null,"87":null,"88":null,"89":null,"90":null,"91":null,"92":null,"93":null,"94":null,"95":null,"96":null,"97":null,"98":null,"99":null,"100":null,"101":null,"102":null,"103":null,"104":null,"105":null,"106":null,"107":null,"108":null,"109":null,"110":null,"111":null,"112":null,"113":null,"114":null,"115":null,"116":null,"117":null,"118":null,"119":null,"120":null,"121":null,"122":null,"123":null,"124":null,"125":null,"126":null,"127":null,"128":null,"129":null,"130":null,"131":null,"132":null,"133":null,"134":null,"135":null,"136":null,"137":null,"138":null,"139":null,"140":null,"141":null,"142":null,"143":null,"144":null,"145":null,"146":null,"147":null,"148":null,"149":null,"150":null,"151":null,"152":null,"153":null,"154":null,"155":null,"156":null,"157":null,"158":null,"159":null,"160":null,"161":null,"162":null,"163":null,"164":null,"165":null,"166":null,"167":null,"168":null,"169":null,"170":null,"171":null,"172":null,"173":null,"174":null,"175":null,"176":null,"177":null,"178":null,"179":null,"180":null,"181":null,"182":null,"183":null,"184":null,"185":null,"186":null,"187":null,"188":null,"189":null,"190":null,"191":null,"192":null,"193":null,"194":null,"195":null,"196":null,"197":null,"198":null,"199":null,"200":null,"201":null,"202":null,"203":null,"204":null,"205":null,"206":null,"207":null,"208":null,"209":null,"210":null,"211":null,"212":null,"213":null,"214":null,"215":null,"216":null,"217":null,"218":null,"219":null,"220":null,"221":null,"222":null,"223":null,"224":null,"225":null,"226":null,"227":null,"228":null,"229":null,"230":null,"231":null,"232":null,"233":null,"234":null,"235":null,"236":null,"237":null,"238":null,"239":null,"240":null,"241":null,"242":null,"243":null,"244":null,"245":null,"246":null,"247":null,"248":null,"249":null,"250":null,"251":null,"252":null,"253":null,"254":null,"255":null,"256":null,"257":null,"258":null,"259":null,"260":null,"261":null,"262":null,"263":null,"264":null,"265":null,"266":null,"267":null,"268":null,"269":null,"270":null,"271":null,"272":null,"273":null,"274":null,"275":null,"276":null,"277":null,"278":null,"279":null,"280":null,"281":null,"282":null,"283":null,"284":null,"285":null,"286":null,"287":null,"288":null,"289":null,"290":null,"291":null,"292":null,"293":null,"294":null,"295":null,"296":null,"297":null,"298":null,"299":null,"300":null,"301":null,"302":null,"303":null,"304":null,"305":null,"306":null,"307":null,"308":null,"309":null,"310":null,"311":null,"312":null,"313":null,"314":null,"315":null,"316":null,"317":null,"318":null,"319":null,"320":null,"321":null,"322":null,"323":null,"324":null,"325":null,"326":null,"327":null,"328":null,"329":null,"330":null,"331":null,"332":null,"333":null,"334":null,"335":null,"336":null,"337":null,"338":null,"339":null,"340":null,"341":null,"342":null,"343":null,"344":null,"345":null,"346":null,"347":null,"348":null,"349":null,"350":null,"351":null,"352":null,"353":null,"354":null,"355":null,"356":null,"357":null,"358":null,"359":null,"360":null,"361":null,"362":null,"363":null,"364":null,"365":null,"366":null,"367":null,"368":null,"369":null,"370":null,"371":null,"372":null,"373":null,"374":null,"375":null,"376":null,"377":null,"378":null,"379":null,"380":null,"381":null,"382":null,"383":null,"384":null,"385":null,"386":null,"387":null,"388":null,"389":null,"390":null,"391":null,"392":null,"393":null,"394":null,"395":null,"396":null,"397":null,"398":null,"399":null,"400":null,"401":null,"402":null,"403":null,"404":null,"405":null,"406":null,"407":null,"408":null,"409":null,"410":null,"411":null,"412":null,"413":null,"414":null,"415":null,"416":null,"417":null,"418":null,"419":null,"420":null,"421":null,"422":null,"423":null,"424":null,"425":null,"426":null,"427":null,"428":null,"429":null,"430":null,"431":null,"432":null,"433":null,"434":null,"435":null,"436":null,"437":null,"438":null,"439":null,"440":null,"441":null,"442":null,"443":null,"444":null,"445":null,"446":null,"447":null,"448":null,"449":null,"450":null,"451":null,"452":null,"453":null,"454":null,"455":null,"456":null,"457":null,"458":null,"459":null,"460":null,"461":null,"462":null,"463":null,"464":null,"465":null,"466":null,"467":null,"468":null,"469":null,"470":null,"471":null,"472":null,"473":null,"474":null,"475":null,"476":null,"477":null,"478":null,"479":null,"480":null,"481":null,"482":null,"483":null,"484":null,"485":null,"486":null,"487":null,"488":null,"489":null,"490":null,"491":null,"492":null,"493":null,"494":null,"495":null,"496":null,"497":null,"498":null,"499":null,"500":null,"501":null,"502":null,"503":null,"504":null,"505":null,"506":null,"507":null,"508":null,"509":null,"510":null,"511":null,"512":null,"513":null,"514":null,"515":null,"516":null,"517":null,"518":null,"519":null,"520":null,"521":null,"522":null,"523":null,"524":null,"525":null,"526":null,"527":null,"528":null,"529":null,"530":null,"531":null,"532":null,"533":null,"534":null,"535":null,"536":null,"537":null,"538":null,"539":null,"540":null,"541":null,"542":null,"543":null,"544":null,"545":null,"546":null,"547":null,"548":null,"549":null,"550":null,"551":null,"552":null,"553":null,"554":null,"555":null,"556":null,"557":null,"558":null,"559":null,"560":null,"561":null,"562":null,"563":null,"564":null,"565":null,"566":null,"567":null,"568":null,"569":null,"570":null,"571":null,"572":null,"573":null,"574":null,"575":null,"576":null,"577":null,"578":null,"579":null,"580":null,"581":null,"582":null,"583":null,"584":null,"585":null,"586":null,"587":null,"588":null,"589":null,"590":null,"591":null,"592":null,"593":null,"594":null,"595":null,"596":null,"597":null,"598":null,"599":null,"600":null,"601":null,"602":null,"603":null,"604":null,"605":null,"606":null,"607":null,"608":null,"609":null,"610":null,"611":null,"612":null,"613":null,"614":null,"615":null,"616":null,"617":null,"618":null,"619":null,"620":null,"621":null,"622":null,"623":null,"624":null,"625":null,"626":null,"627":null,"628":null,"629":null,"630":null,"631":null,"632":null,"633":null,"634":null,"635":null,"636":null,"637":null,"638":null,"639":null,"640":null,"641":null,"642":null,"643":null,"644":null,"645":null,"646":null,"647":null,"648":null,"649":null,"650":null,"651":null,"652":null,"653":null,"654":null,"655":null,"656":null,"657":null,"658":null,"659":null,"660":null,"661":null,"662":null,"663":null,"664":null,"665":null,"666":null,"667":null,"668":null,"669":null,"670":null,"671":null,"672":null,"673":null,"674":null,"675":null,"676":null,"677":null,"678":null,"679":null,"680":null,"681":null,"682":null,"683":null,"684":null,"685":null,"686":null,"687":null,"688":null,"689":null,"690":null,"691":null,"692":null,"693":null,"694":null,"695":null,"696":null,"697":null,"698":null,"699":null,"700":null,"701":null,"702":null,"703":null,"704":null,"705":null,"706":null,"707":null,"708":null,"709":null,"710":null,"711":null,"712":null,"713":null,"714":null,"715":null,"716":null,"717":null,"718":null,"719":null,"720":null,"721":null,"722":null,"723":null,"724":null,"725":null,"726":null,"727":null,"728":null,"729":null,"730":null,"731":null,"732":null,"733":null,"734":null,"735":null,"736":null,"737":null,"738":null,"739":null,"740":null,"741":null,"742":null,"743":null,"744":null,"745":null,"746":null,"747":null,"748":null,"749":null,"750":null,"751":null,"752":null,"753":null,"754":null,"755":null,"756":null,"757":null,"758":null,"759":null,"760":null,"761":null,"762":null,"763":null,"764":null,"765":null,"766":null,"767":null,"768":null,"769":null,"770":null,"771":null,"772":null,"773":null,"774":null,"775":null,"776":null,"777":null,"778":null,"779":null,"780":null,"781":null,"782":null,"783":null,"784":null,"785":null,"786":null,"787":null,"788":null,"789":null,"790":null,"791":null,"792":null,"793":null,"794":null,"795":null,"796":null,"797":null,"798":null,"799":null,"800":null,"801":null,"802":null,"803":null,"804":null,"805":null,"806":null,"807":null,"808":null,"809":null,"810":null,"811":null,"812":null,"813":null,"814":null,"815":null,"816":null,"817":null,"818":null,"819":null,"820":null,"821":null,"822":null,"823":null,"824":null,"825":null,"826":null,"827":null,"828":null,"829":null,"830":null,"831":null,"832":null,"833":null,"834":null,"835":null,"836":null,"837":null,"838":null,"839":null,"840":null,"841":null,"842":null,"843":null,"844":null,"845":null,"846":null,"847":null,"848":null,"849":null,"850":null,"851":null,"852":null,"853":null,"854":null,"855":null,"856":null,"857":null,"858":null,"859":null,"860":null,"861":null,"862":null,"863":null,"864":null,"865":null,"866":null,"867":null,"868":null,"869":null,"870":null,"871":null,"872":null,"873":null,"874":null,"875":null,"876":null,"877":null,"878":null,"879":null,"880":null,"881":null,"882":null,"883":null,"884":null,"885":null,"886":null,"887":null,"888":null,"889":null,"890":null,"891":null,"892":null,"893":null,"894":null,"895":null,"896":null,"897":null,"898":null,"899":null,"900":null,"901":null,"902":null,"903":null,"904":null,"905":null,"906":null,"907":null,"908":null,"909":null,"910":null,"911":null,"912":null,"913":null,"914":null,"915":null,"916":null,"917":null,"918":null,"919":null,"920":null,"921":null,"922":null,"923":null,"924":null,"925":null,"926":null,"927":null,"928":null,"929":null,"930":null,"931":null,"932":null,"933":null,"934":null,"935":null,"936":null,"937":null,"938":null,"939":null,"940":null,"941":null,"942":null,"943":null,"944":null,"945":null,"946":null,"947":null,"948":null,"949":null,"950":null,"951":null,"952":null,"953":null,"954":null,"955":null,"956":null,"957":null,"958":null,"959":null,"960":null,"961":null,"962":null,"963":null,"964":null,"965":null,"966":null,"967":null,"968":null,"969":null,"970":null,"971":null,"972":null,"973":null,"974":null,"975":null,"976":null,"977":null,"978":null,"979":null,"980":null,"981":null,"982":null,"983":null,"984":null,"985":null,"986":null,"987":null,"988":null,"989":null,"990":null,"991":null,"992":null,"993":null,"994":null,"995":null,"996":null,"997":null,"998":null,"999":null,"1000":null,"1001":null,"1002":null,"1003":null,"1004":null,"1005":null,"1006":null,"1007":null,"1008":null,"1009":null,"1010":null,"1011":null,"1012":null,"1013":null,"1014":null,"1015":null,"1016":null,"1017":null,"1018":null,"1019":null,"1020":null,"1021":null,"1022":null,"1023":null,"1024":null,"1025":null,"1026":null,"1027":null,"1028":null,"1029":null,"1030":null,"1031":null,"1032":null,"1033":null,"1034":null,"1035":null,"1036":null,"1037":null,"1038":null,"1039":null,"1040":null,"1041":null,"1042":null,"1043":null,"1044":null,"1045":null,"1046":null,"1047":null,"1048":null,"1049":null,"1050":null,"1051":null,"1052":null,"1053":null,"1054":null,"1055":null,"1056":null,"1057":null,"1058":null,"1059":null,"1060":null,"1061":null,"1062":null,"1063":null,"1064":null,"1065":null,"1066":null,"1067":null,"1068":null,"1069":null,"1070":null,"1071":null,"1072":null,"1073":null,"1074":null,"1075":null,"1076":null,"1077":null,"1078":null,"1079":null,"1080":null,"1081":null,"1082":null,"1083":null,"1084":null,"1085":null,"1086":null,"1087":null,"1088":null,"1089":null,"1090":null,"1091":null,"1092":null,"1093":null,"1094":null,"1095":null,"1096":null,"1097":null,"1098":null,"1099":null,"1100":null,"1101":null,"1102":null,"1103":null,"1104":null,"1105":null,"1106":null,"1107":null,"1108":null,"1109":null,"1110":null,"1111":null,"1112":null,"1113":null,"1114":null,"1115":null,"1116":null,"1117":null,"1118":null,"1119":null,"1120":null,"1121":null,"1122":null,"1123":null,"1124":null,"1125":null,"1126":null,"1127":null,"1128":null,"1129":null,"1130":null,"1131":null,"1132":null,"1133":null,"1134":null,"1135":null,"1136":null,"1137":null,"1138":null,"1139":null,"1140":null,"1141":null,"1142":null,"1143":null,"1144":null,"1145":null,"1146":null,"1147":null,"1148":null,"1149":null,"1150":null,"1151":null,"1152":null,"1153":null,"1154":null,"1155":null,"1156":null,"1157":null,"1158":null,"1159":null,"1160":null,"1161":null,"1162":null,"1163":null,"1164":null,"1165":null,"1166":null,"1167":null,"1168":null,"1169":null,"1170":null,"1171":null,"1172":null,"1173":null,"1174":null,"1175":null,"1176":null,"1177":null,"1178":null,"1179":null,"1180":null,"1181":null,"1182":null,"1183":null,"1184":null,"1185":null,"1186":null,"1187":null,"1188":null,"1189":null,"1190":null,"1191":null,"1192":null,"1193":null,"1194":null,"1195":null,"1196":null,"1197":null,"1198":null,"1199":null,"1200":null,"1201":null,"1202":null,"1203":null,"1204":null,"1205":null,"1206":null,"1207":null,"1208":null,"1209":null,"1210":null,"1211":null,"1212":null,"1213":null,"1214":null,"1215":null,"1216":null,"1217":null,"1218":null,"1219":null,"1220":null,"1221":null,"1222":null,"1223":null,"1224":null,"1225":null,"1226":null,"1227":null,"1228":null,"1229":null,"1230":null,"1231":null,"1232":null,"1233":null,"1234":null,"1235":null,"1236":null,"1237":null,"1238":null,"1239":null,"1240":null,"1241":null,"1242":null,"1243":null,"1244":null,"1245":null,"1246":null,"1247":null,"1248":null,"1249":null,"1250":null,"1251":null,"1252":null,"1253":null,"1254":null,"1255":null,"1256":null,"1257":null,"1258":null,"1259":null,"1260":null,"1261":null,"1262":null,"1263":null,"1264":null,"1265":null,"1266":null,"1267":null,"1268":null,"1269":null,"1270":null,"1271":null,"1272":null,"1273":null,"1274":null,"1275":null,"1276":null,"1277":null,"1278":null,"1279":null,"1280":null,"1281":null,"1282":null,"1283":null,"1284":null,"1285":null,"1286":null,"1287":null,"1288":null,"1289":null,"1290":null,"1291":null,"1292":null,"1293":null,"1294":null,"1295":null,"1296":null,"1297":null,"1298":null,"1299":null,"1300":null,"1301":null,"1302":null,"1303":null,"1304":null,"1305":null,"1306":null,"1307":null,"1308":null,"1309":null,"1310":null,"1311":null,"1312":null,"1313":null,"1314":null,"1315":null,"1316":null,"1317":null,"1318":null,"1319":null,"1320":null,"1321":null,"1322":null,"1323":null,"1324":null,"1325":null,"1326":null,"1327":null,"1328":null,"1329":null,"1330":null,"1331":null,"1332":null,"1333":null,"1334":null,"1335":null,"1336":null,"1337":null,"1338":null,"1339":null,"1340":null,"1341":null,"1342":null,"1343":null,"1344":null,"1345":null,"1346":null,"1347":null,"1348":null,"1349":null,"1350":null,"1351":null,"1352":null,"1353":null,"1354":null,"1355":null,"1356":null,"1357":null,"1358":null,"1359":null,"1360":null,"1361":null,"1362":null,"1363":null,"1364":null,"1365":null,"1366":null,"1367":null,"1368":null,"1369":null,"1370":null,"1371":null,"1372":null,"1373":null,"1374":null,"1375":null,"1376":null,"1377":null,"1378":null,"1379":null,"1380":null,"1381":null,"1382":null,"1383":null,"1384":null,"1385":null,"1386":null,"1387":null,"1388":null,"1389":null,"1390":null,"1391":null,"1392":null,"1393":null,"1394":null,"1395":null,"1396":null,"1397":null,"1398":null,"1399":null,"1400":null,"1401":null,"1402":null,"1403":null,"1404":null,"1405":null,"1406":null,"1407":null,"1408":null,"1409":null,"1410":null,"1411":null,"1412":null,"1413":null,"1414":null,"1415":null,"1416":null,"1417":null,"1418":null,"1419":null,"1420":null,"1421":null,"1422":null,"1423":null,"1424":null,"1425":null,"1426":null,"1427":null,"1428":null,"1429":null,"1430":null,"1431":null,"1432":null,"1433":null,"1434":null,"1435":null,"1436":null,"1437":null,"1438":null,"1439":null,"1440":null,"1441":null,"1442":null,"1443":null,"1444":null,"1445":null,"1446":null,"1447":null,"1448":null,"1449":null,"1450":null,"1451":null,"1452":null,"1453":null,"1454":null,"1455":null,"1456":null,"1457":null,"1458":null,"1459":null,"1460":null,"1461":null,"1462":null,"1463":null,"1464":null,"1465":null,"1466":null,"1467":null,"1468":null,"1469":null,"1470":null,"1471":null,"1472":null,"1473":null,"1474":null,"1475":null,"1476":null,"1477":null,"1478":null,"1479":null,"1480":null,"1481":null,"1482":null,"1483":null,"1484":null,"1485":null,"1486":null,"1487":null,"1488":null,"1489":null,"1490":null,"1491":null,"1492":null,"1493":null,"1494":null,"1495":null,"1496":null,"1497":null,"1498":null,"1499":null,"1500":null,"1501":null,"1502":null,"1503":null,"1504":null,"1505":null,"1506":null,"1507":null,"1508":null,"1509":null,"1510":null,"1511":null,"1512":null,"1513":null,"1514":null,"1515":null,"1516":null,"1517":null,"1518":null,"1519":null,"1520":null,"1521":null,"1522":null,"1523":null,"1524":null,"1525":null,"1526":null,"1527":null,"1528":null,"1529":null,"1530":null,"1531":null,"1532":null,"1533":null,"1534":null,"1535":null,"1536":null,"1537":null,"1538":null,"1539":null,"1540":null,"1541":null,"1542":null,"1543":null,"1544":null,"1545":null,"1546":null,"1547":null,"1548":null,"1549":null,"1550":null,"1551":null,"1552":null,"1553":null,"1554":null,"1555":null,"1556":null,"1557":null,"1558":null,"1559":null,"1560":null,"1561":null,"1562":null,"1563":null,"1564":null,"1565":null,"1566":null,"1567":null,"1568":null,"1569":null,"1570":null,"1571":null,"1572":null,"1573":null,"1574":null,"1575":null,"1576":null,"1577":null,"1578":null,"1579":null,"1580":null,"1581":null,"1582":null,"1583":null,"1584":null,"1585":null,"1586":null,"1587":null,"1588":null,"1589":null,"1590":null,"1591":null,"1592":null,"1593":null,"1594":null,"1595":null,"1596":null,"1597":null,"1598":null,"1599":null,"1600":null,"1601":null,"1602":null,"1603":null,"1604":null,"1605":null,"1606":null,"1607":null,"1608":null,"1609":null,"1610":null,"1611":null,"1612":null,"1613":null,"1614":null,"1615":null,"1616":null,"1617":null,"1618":null,"1619":null,"1620":null,"1621":null,"1622":null,"1623":null,"1624":null,"1625":null,"1626":null,"1627":null,"1628":null,"1629":null,"1630":null,"1631":null,"1632":null,"1633":null,"1634":null,"1635":null,"1636":null,"1637":null,"1638":null,"1639":null,"1640":null,"1641":null,"1642":null,"1643":null,"1644":null,"1645":null,"1646":null,"1647":null,"1648":null,"1649":null,"1650":null,"1651":null,"1652":null,"1653":null,"1654":null,"1655":null,"1656":null,"1657":null,"1658":null}}