medium pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY airlines.Airline HAVING count(*)  >=  10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

hard pred: SELECT singer.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Age  >  (SELECT avg(Age) FROM singer)
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

hard pred: SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId  =  car_names.MakeId GROUP BY car_names.MakeId ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

extra pred: SELECT airlines.Abbreviation,  airlines.Country FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY flights.Airline ORDER BY count(*) LIMIT 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

extra pred: SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker WHERE car_makers.FullName  =  "General Motors" OR cars_data.Weight  >  3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

extra pred: SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  'Dog' EXCEPT SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  'Cat'
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

medium pred: SELECT stadium.Name,  stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY avg(concert.Attendance) DESC LIMIT 1
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1

extra pred: SELECT car_makers.Maker,  cars_data.Year FROM car_makers JOIN cars_data ON car_makers.Id  =  cars_data.Id ORDER BY cars_data.Year ASC LIMIT 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

medium pred: SELECT weight FROM Pets WHERE pet_age  =  (SELECT min(pet_age) FROM Pets)
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1

hard pred: SELECT StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

extra pred: SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId WHERE cars_data.Weight  <  3500 EXCEPT SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "Ford Motor Company"
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

easy pred: SELECT DISTINCT Year FROM cars_data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight  >  3000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;

extra pred: SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >=  2 INTERSECT SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id  =  car_names.MakeId GROUP BY car_makers.Id HAVING count(*)  >  3
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;

hard pred: SELECT singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Age  >  40 INTERSECT SELECT singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Age  <  30
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30

extra pred: SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY countries.CountryName ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;

extra pred: SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country WHERE countries.Continent  =  'Europe' GROUP BY countries.CountryName HAVING count(*)  >=  3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

hard pred: SELECT singer.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID  =  concert.concert_ID WHERE singer.Age  >  (SELECT avg(Age) FROM singer)
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)

extra pred: SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId WHERE cars_data.Weight  <  3500 EXCEPT SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "Ford Motor Company"
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';

hard pred: SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

extra pred: SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId WHERE countries.Continent  =  "Europe" GROUP BY countries.CountryName HAVING count(*)  >=  3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;

extra pred: SELECT car_names.Make,  cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId ORDER BY cars_data.Year ASC LIMIT 1
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);

hard pred: SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId  =  car_names.MakeId GROUP BY car_names.Model ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;

medium pred: SELECT countries.CountryName,  count(*) FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY countries.CountryName HAVING count(*)  >  2
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

extra pred: SELECT airlines.Abbreviation,  airlines.Country FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY flights.Airline ORDER BY count(*) LIMIT 1
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1

hard pred: SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;

extra pred: SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  <  4 EXCEPT SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Horsepower  =  (SELECT min(Horsepower) FROM cars_data)
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;

extra pred: SELECT Student.Fname,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Dog" EXCEPT SELECT Student.Fname,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

medium pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY airlines.Airline HAVING count(*)  >=  10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10

medium pred: SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY car_makers.Country HAVING count(*)  >  2
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2

extra pred: SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1

extra pred: SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) EXCEPT SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  >  3
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;

hard pred: SELECT count(*) FROM car_names
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';

extra pred: SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >=  2 INTERSECT SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >  3
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;

extra pred: SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker WHERE car_makers.Maker  =  "General Motors" OR cars_data.Weight  >  3500
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;

extra pred: SELECT DISTINCT Student.Major,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID EXCEPT SELECT DISTINCT Student.Major,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

extra pred: SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country GROUP BY countries.CountryId HAVING count(*)  >  3 UNION SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_names ON countries.CountryId  =  car_names.MakeId WHERE car_names.Model  =  "fiat"
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';

extra pred: SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country GROUP BY countries.CountryId HAVING count(*)  >  3 UNION SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_names ON countries.CountryId  =  car_names.MakeId WHERE car_names.Model  =  "fiat"
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';

hard pred: SELECT Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)

hard pred: SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );

extra pred: SELECT Major,  Age FROM Student WHERE StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat")
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')

medium pred: SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY flights.Airline HAVING count(*)  <  200
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200

hard pred: SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

hard pred: SELECT StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'

hard pred: SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT DestAirport FROM flights) AND AirportCode NOT IN (SELECT SourceAirport FROM flights)
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)

hard pred: SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Paragraphs.Paragraph_Text  =  "Brazil" INTERSECT SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Paragraphs.Paragraph_Text  =  "Ireland"
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'

easy pred: SELECT max(loser_rank) FROM matches
easy gold: SELECT min(loser_rank) FROM matches

medium pred: SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID HAVING count(*)  >=  2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

hard pred: SELECT Template_ID FROM Templates EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

easy pred: SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_ID HAVING count(*)  >  1
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

hard pred: SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2013 INTERSECT SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

hard pred: SELECT Name FROM teacher EXCEPT SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)

hard pred: SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Documents
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id

hard pred: SELECT players.first_name,  players.country_code,  players.birth_date FROM players JOIN matches ON players.player_id  =  matches.winner_id GROUP BY matches.winner_id ORDER BY sum(matches.winner_rank_points) DESC LIMIT 1
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

medium pred: SELECT shop.Manager_name,  shop.District FROM shop JOIN product ON shop.Shop_ID  =  product.Shop_ID GROUP BY shop.Shop_ID ORDER BY count(*) DESC LIMIT 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

hard pred: SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID EXCEPT SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID  =  course.Course_ID
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)

hard pred: SELECT players.first_name,  players.country_code,  players.birth_date FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches)
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1

hard pred: SELECT battle.id,  battle.name FROM battle JOIN death ON battle.id  =  death.caused_by_ship_id GROUP BY battle.id HAVING sum(death.killed)  >  10
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10

hard pred: SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "Australian Open" ORDER BY matches.winner_rank_points DESC LIMIT 1
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1

hard pred: SELECT Name FROM museum EXCEPT SELECT museum.Name FROM museum JOIN visit ON museum.Museum_ID  =  visit.Museum_ID
hard gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)

medium pred: SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id OR players.player_id  =  matches.loser_id ORDER BY matches.minutes DESC LIMIT 1
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1

hard pred: SELECT players.first_name,  players.last_name,  rankings.ranking_points FROM rankings JOIN players ON rankings.player_id  =  players.player_id WHERE rankings.ranking  =  (SELECT max(ranking) FROM rankings)
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT shop.Manager_name,  shop.District FROM shop JOIN evaluation ON shop.Shop_ID  =  evaluation.Shop_ID GROUP BY shop.Shop_ID ORDER BY sum(evaluation.Number_products) DESC LIMIT 1
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1

easy pred: SELECT avg(Age) FROM visitor WHERE Level_of_membership  >  4
easy gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4

medium pred: SELECT count(DISTINCT players.first_name) FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "WTA Championships" INTERSECT SELECT count(DISTINCT players.first_name) FROM players JOIN matches ON players.player_id  =  matches.loser_id WHERE matches.tourney_name  =  "WTA Championships" AND players.hand  =  "L"
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'

hard pred: SELECT Name FROM employee EXCEPT SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

hard pred: SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2013 INTERSECT SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016

medium pred: SELECT players.first_name,  players.last_name,  matches.winner_rank FROM players JOIN matches ON players.player_id  =  matches.winner_id ORDER BY matches.winner_age ASC LIMIT 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID HAVING count(*)  >=  2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2

easy pred: SELECT count(DISTINCT Templates.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
easy gold: SELECT count(DISTINCT template_id) FROM Documents

extra pred: SELECT ship.id,  ship.name FROM ship JOIN death ON ship.id  =  death.caused_by_ship_id GROUP BY death.caused_by_ship_id ORDER BY sum(death.injured) DESC LIMIT 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT players.first_name,  players.country_code FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1

extra pred: SELECT battle.name,  battle.result,  battle.bulgarian_commander FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.location  =  "English Channel"
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'

extra pred: SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY sum(evaluation.Bonus) DESC LIMIT 1
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1

easy pred: SELECT loser_rank FROM matches ORDER BY loser_rank_points DESC LIMIT 1
easy gold: SELECT min(loser_rank) FROM matches

hard pred: SELECT players.first_name,  players.last_name,  rankings.ranking_points FROM rankings JOIN players ON rankings.player_id  =  players.player_id WHERE rankings.ranking  =  (SELECT max(ranking) FROM rankings)
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT visitor.Name,  visitor.Age FROM visitor JOIN visit ON visitor.ID  =  visit.visitor_ID GROUP BY visitor.ID ORDER BY sum(Num_of_Ticket) DESC LIMIT 1
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1

easy pred: SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_ID HAVING count(*)  >  1
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1

medium pred: SELECT players.first_name,  players.last_name,  rankings.ranking FROM rankings JOIN players ON rankings.player_id  =  players.player_id WHERE rankings.ranking_date  =  (SELECT min(ranking_date) FROM rankings) ORDER BY players.birth_date ASC LIMIT 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3

medium pred: SELECT employee.City FROM employee JOIN hiring ON employee.Employee_ID  =  hiring.Employee_ID WHERE employee.Age  <  30 GROUP BY employee.City HAVING count(*)  >  1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1

extra pred: SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year  >  2010))
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)

hard pred: SELECT Template_ID FROM Templates EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents

hard pred: SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID WHERE evaluation.Bonus  =  (SELECT max(Bonus) FROM evaluation)
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1

hard pred: SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID EXCEPT SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID WHERE evaluation.Bonus  >  0
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)

extra pred: SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND city.Population  =  ( SELECT MAX ( city.Population ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' );
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

easy pred: SELECT COUNT (DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" INTERSECT SELECT COUNT (DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Dutch"
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

hard pred: SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id  =  Addresses.address_id WHERE country  =  "Haiti" UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  09700166582
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

extra pred: SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

easy pred: SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id  =  TV_series.Channel GROUP BY TV_Channel.id HAVING count(*)  >  2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

hard pred: SELECT Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID  =  poker_player.People_ID
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

medium pred: SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Afghanistan" AND countrylanguage.IsOfficial  =  1;
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

hard pred: SELECT count(*),  student_enrolment_id FROM Transcript_Contents GROUP BY student_enrolment_id ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Population  =  ( SELECT MAX ( country.Population ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' );
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1

medium pred: SELECT Students.first_name,  Students.middle_name,  Students.last_name,  Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id  =  Degree_Programs.degree_program_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id  =  Student_Enrolment_Courses.student_enrolment_id GROUP BY Students.student_id HAVING count(*)  =  2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

extra pred: SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  =  "Masters") INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  =  "Bachelors")
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

medium pred: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.HeadOfState  =  "Beatrix";
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

hard pred: SELECT semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id  =  Student_Enrolment.semester_id
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

extra pred: SELECT Students.first_name,  Students.middle_name,  Students.last_name,  Student_Enrolment.student_id,  count(*) FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

extra pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'French'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

hard pred: SELECT semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id  =  Student_Enrolment.semester_id
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )

hard pred: SELECT Money_Rank FROM poker_player ORDER BY people.Height DESC LIMIT 1
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1

extra pred: SELECT avg(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' AND countrylanguage.IsOfficial  =  'False'
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

easy pred: SELECT country.Continent FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" AND country.Name  =  "Anguilla";
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"

hard pred: SELECT Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

hard pred: SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID  =  poker_player.People_ID
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)

medium pred: SELECT Students.first_name,  Students.middle_name,  Students.last_name,  Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id  =  Degree_Programs.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id  =  Semesters.semester_id GROUP BY Students.student_id HAVING count(*)  =  2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2

extra pred: SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county  =  "North Carolina") EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id

hard pred: SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel EXCEPT SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

hard pred: SELECT Courses.course_id,  count(*) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id  =  Transcript_Contents.student_course_id GROUP BY Courses.course_id ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT Semesters.semester_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id  =  Semesters.semester_id WHERE Degree_Programs.degree_summary_name  =  "Bachelor" INTERSECT SELECT Semesters.semester_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id  =  Semesters.semester_id WHERE Degree_Programs.degree_summary_name  =  "Master"
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'

extra pred: SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')

easy pred: SELECT COUNT (DISTINCT country.Name) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" INTERSECT SELECT COUNT (DISTINCT country.Name) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Dutch"
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")

medium pred: SELECT SUM ( country.Population ),  MAX ( country.GNP ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"

extra pred: SELECT Addresses.address_id,  Addresses.line_1,  Addresses.line_2,  Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id  =  Students.current_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT sum(country.Population) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= 'English'
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

extra pred: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Aruba" AND countrylanguage.IsOfficial  =  1 GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1

hard pred: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

hard pred: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")

medium pred: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.HeadOfState  =  "Beatrix";
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"

hard pred: SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel EXCEPT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Written_by  =  "Todd Casey"
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'

medium pred: SELECT Courses.course_name,  Courses.course_id FROM Courses JOIN Sections ON Courses.course_id  =  Sections.course_id GROUP BY Courses.course_id HAVING count(*)  <  2
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2

extra pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" OR countrylanguage.Language  =  "Dutch"
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"

medium pred: SELECT sum(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Aruba";
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"

easy pred: SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2

extra pred: SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state  =  VOTES.state WHERE VOTES.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name  =  "Tabatha Gehling") INTERSECT SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state  =  VOTES.state WHERE VOTES.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name  =  "Kelly Clauss")
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'

hard pred: SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country  =  "Haiti") OR cell_mobile_number  =  09700166582
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'

hard pred: SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id  =  TV_series.Channel EXCEPT SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'

medium pred: SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Afghanistan" AND countrylanguage.IsOfficial  =  1;
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"

extra pred: SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  "English" AND IsOfficial  =  1)
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")

extra pred: SELECT SUM ( country.Population ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English";
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")

hard pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Chinese' AND country.Continent  =  'Asia' ORDER BY country.LifeExpectancy ASC LIMIT 1
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1

extra pred: SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'French'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"

hard pred: SELECT country.Name,  country.Population,  country.LifeExpectancy FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Chinese' AND country.Region  =  'Asia' AND country.SurfaceArea  =  ( SELECT MAX ( SurfaceArea ) FROM country WHERE Region  =  'Asia' );
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1

medium pred: SELECT GovernmentForm,  sum(Population) FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

extra pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Spanish' ORDER BY countrylanguage.Percentage DESC LIMIT 1;
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

hard pred: SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id JOIN Owners ON Dogs.owner_id  =  Owners.owner_id EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id JOIN Owners ON Dogs.owner_id  =  Owners.owner_id WHERE Treatments.cost_of_treatment  >  1000
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

hard pred: SELECT singer.Name FROM singer EXCEPT SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

hard pred: SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode EXCEPT SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' AND country.GovernmentForm  =  'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

extra pred: SELECT email_address,  role_code,  first_name,  last_name FROM Professionals EXCEPT SELECT Professionals.email_address,  Professionals.role_code,  Professionals.first_name,  Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

hard pred: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT Owners.owner_id,  Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id GROUP BY Owners.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT DISTINCT PROFESSIONALS.professional_id,  PROFESSIONALS.last_name,  PROFESSIONALS.cell_number FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id WHERE PROFESSIONALS.state  =  "Indiana" UNION SELECT DISTINCT PROFESSIONALS.professional_id,  PROFESSIONALS.last_name,  PROFESSIONALS.cell_number FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id GROUP BY PROFESSIONALS.professional_id HAVING count(*)  >  2
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

hard pred: SELECT Orchestra FROM orchestra EXCEPT SELECT orchestra.Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

hard pred: SELECT property_name FROM Properties WHERE property_type_code  =  "house" OR property_type_code  =  "apartment" AND room_count  >  1
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1

extra pred: SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id  =  Owners.owner_id ORDER BY Dogs.age ASC LIMIT 1
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

medium pred: SELECT country.Name,  country.IndepYear,  country.SurfaceArea FROM country WHERE country.Population  =  ( SELECT MIN ( country.Population ) FROM country );
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

hard pred: SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id HAVING count(*)  >=  2 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id GROUP BY Likes.student_id HAVING count(*)  >=  2 AND Highschooler.grade  >  5
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

hard pred: SELECT name FROM Highschooler EXCEPT SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.student_id  =  Highschooler.ID EXCEPT SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id  =  Highschooler.ID
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id

extra pred: SELECT email_address,  role_code FROM Professionals EXCEPT SELECT Professionals.email_address,  Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id

hard pred: SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English" AND country.GovernmentForm!= "Republic";
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

medium pred: SELECT GovernmentForm,  sum(Population) FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72

medium pred: SELECT country.Name,  count(*) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name HAVING count(*)  >=  3
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

hard pred: SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.friend_id
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

hard pred: SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  <  1945 INTERSECT SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  >  1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

extra pred: SELECT Breeds.breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code  =  Breeds.breed_code GROUP BY Dogs.breed_code ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

medium pred: SELECT country.Code,  countrylanguage.Language,  max(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Code,  countrylanguage.Language
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

medium pred: SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING count(*)  >  1
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

hard pred: SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Continent  =  'Europe' EXCEPT SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND countrylanguage.IsOfficial  =  1
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

easy pred: SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

hard pred: SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

medium pred: SELECT countrylanguage.Language,  max(countrylanguage.Percentage),  country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode

extra pred: SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Continent  =  'Europe' EXCEPT SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Continent  =  'Europe' AND countrylanguage.IsOfficial  =  1
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')

medium pred: SELECT count(*) FROM Friend WHERE student_id  =  (SELECT ID FROM Highschooler WHERE name  =  "Kyle")
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"

extra pred: SELECT Dogs.name,  Treatments.date_of_treatment FROM Treatments JOIN Dogs ON Treatments.dog_id  =  Dogs.dog_id WHERE Dogs.breed_code  =  (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) DESC LIMIT 1)
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )

extra pred: SELECT Owners.owner_id,  Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Charges ON Dogs.dog_id  =  Charges.charge_id GROUP BY Owners.owner_id ORDER BY sum(charge_amount) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1

medium pred: SELECT avg(LifeExpectancy),  sum(Population),  Continent FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

extra pred: SELECT Owners.owner_id,  Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id GROUP BY Owners.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1

extra pred: SELECT DISTINCT Professionals.professional_id,  Professionals.last_name,  Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id WHERE Professionals.state  =  "Indiana" OR Treatments.treatment_id  >  2
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2

hard pred: SELECT orchestra.Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID EXCEPT SELECT orchestra.Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)

extra pred: SELECT Breeds.breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code  =  Breeds.breed_code GROUP BY Dogs.breed_code ORDER BY count(*) DESC LIMIT 1
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1

hard pred: SELECT Name FROM singer EXCEPT SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)

hard pred: SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes

extra pred: SELECT country.Name FROM country JOIN city ON country.Code  =  city.CountryCode WHERE country.Continent  =  'Africa' AND city.Population  <  (SELECT min(city.Population) FROM country JOIN city ON country.Code  =  city.CountryCode WHERE country.Continent  =  'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")

medium pred: SELECT Name,  IndepYear,  SurfaceArea FROM country WHERE Population  =  ( SELECT MIN ( Population ) FROM country );
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1

extra pred: SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id  =  Owners.owner_id WHERE Dogs.age  =  (SELECT min(age) FROM Dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )

extra pred: SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"

extra pred: SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

extra pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Africa' AND country.Population  <  (SELECT MAX (country.Population) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")

medium pred: SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*)  >  1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

medium pred: SELECT Continent,  sum(Population),  avg(LifeExpectancy) FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72

hard pred: SELECT avg(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT avg(Highschooler.grade) FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)

hard pred: SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id WHERE Treatments.cost_of_treatment  >  1000
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )

hard pred: SELECT DISTINCT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  <  1945 INTERSECT SELECT DISTINCT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  >  1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955

hard pred: SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id HAVING count(*)  >=  2 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id WHERE Highschooler.grade  >  5
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2

extra pred: SELECT COUNT (DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Spanish'
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

medium pred: SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*)  >  1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1

hard pred: SELECT avg(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )

hard pred: SELECT sum(country.Population),  avg(country.SurfaceArea) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'North America' AND country.SurfaceArea  >  3000;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000

easy pred: SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"

medium pred: SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING count(*)  >  1
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1

medium pred: SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY sum(orchestra.Year_of_Founded) DESC LIMIT 1
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1

medium pred: SELECT country.Name,  count(*) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name HAVING count(*)  >  2;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2

medium pred: SELECT country.Name,  country.Population,  country.HeadOfState FROM country WHERE country.SurfaceArea  =  ( SELECT MAX ( country.SurfaceArea ) FROM country );
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1

extra pred: SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia' AND country.Population  >  (SELECT MAX (country.Population) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Africa')
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")

medium pred: SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Spanish' ORDER BY countrylanguage.Percentage DESC LIMIT 1
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode

easy pred: SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
easy gold: SELECT max(charge_amount) FROM Charges

                     easy                 medium               hard                 extra                all                 
count                36                   118                  130                  155                  439                 
=====================   EXECUTION ACCURACY     =====================
execution            0.806                0.703                0.546                0.600                0.629               

====================== EXACT MATCHING ACCURACY =====================
exact match          0.583                0.636                0.400                0.568                0.538               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.861                0.887                0.953                0.935                0.921               
select(no AGG)       0.944                0.887                0.953                0.935                0.928               
where                0.286                0.776                0.635                0.583                0.642               
where(no OP)         0.571                0.776                0.731                0.679                0.716               
group(no Having)     0.867                0.783                0.808                0.904                0.850               
group                0.867                0.587                0.808                0.877                0.781               
order                0.000                0.824                0.893                0.865                0.851               
and/or               1.000                0.975                0.992                0.940                0.970               
IUEN                 0.000                0.000                0.345                0.487                0.386               
keywords             0.792                0.894                0.712                0.832                0.811               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.861                0.864                0.931                0.935                0.909               
select(no AGG)       0.944                0.864                0.931                0.935                0.916               
where                0.400                0.918                0.471                0.563                0.611               
where(no OP)         0.800                0.918                0.543                0.655                0.682               
group(no Having)     0.867                0.783                0.808                0.892                0.845               
group                0.867                0.587                0.808                0.865                0.776               
order                0.000                0.609                0.714                0.889                0.792               
and/or               0.972                1.000                0.953                0.959                0.970               
IUEN                 0.000                0.000                0.488                0.576                0.527               
keywords             0.950                0.871                0.685                0.832                0.803               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.861                0.876                0.942                0.935                0.915               
select(no AGG)       0.944                0.876                0.942                0.935                0.922               
where                0.333                0.841                0.541                0.573                0.626               
where(no OP)         0.667                0.841                0.623                0.667                0.699               
group(no Having)     0.867                0.783                0.808                0.898                0.847               
group                0.867                0.587                0.808                0.871                0.779               
order                1.000                0.700                0.794                0.877                0.821               
and/or               0.986                0.987                0.972                0.949                0.970               
IUEN                 1.000                1.000                0.404                0.528                0.446               
keywords             0.864                0.882                0.698                0.832                0.807               
