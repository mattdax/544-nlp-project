SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY airlines.Airline HAVING count(*)  >=  10
SELECT singer.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Age  >  (SELECT avg(Age) FROM singer)
SELECT CountryName FROM countries EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode  =  flights.SourceAirport OR airports.AirportCode  =  flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) LIMIT 1
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId  =  car_names.MakeId GROUP BY car_names.MakeId ORDER BY count(*) DESC LIMIT 1
SELECT airlines.Abbreviation,  airlines.Country FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY flights.Airline ORDER BY count(*) LIMIT 1
SELECT car_makers.FullName,  car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >  3
SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker WHERE car_makers.FullName  =  "General Motors" OR cars_data.Weight  >  3500
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  'Dog' EXCEPT SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  'Cat'
SELECT stadium.Name,  stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID GROUP BY concert.Stadium_ID ORDER BY avg(concert.Attendance) DESC LIMIT 1
SELECT car_makers.Maker,  cars_data.Year FROM car_makers JOIN cars_data ON car_makers.Id  =  cars_data.Id ORDER BY cars_data.Year ASC LIMIT 1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  =  4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT weight FROM Pets WHERE pet_age  =  (SELECT min(pet_age) FROM Pets)
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat" AND pet_age  =  3
SELECT StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID WHERE Student.Age  >  20
SELECT count(*) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT stadium.Name,  stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID  =  stadium.Stadium_ID WHERE concert.Year  =  2014 INTERSECT SELECT stadium.Name,  stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID  =  stadium.Stadium_ID WHERE concert.Year  =  2015
SELECT PetType,  weight FROM Pets ORDER BY pet_age ASC LIMIT 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId WHERE cars_data.Weight  <  3500 EXCEPT SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "Ford Motor Company"
SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "American Motor Company"
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR Year  <  1980
SELECT weight FROM Pets ORDER BY pet_age ASC LIMIT 1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  =  4 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT DISTINCT Year FROM cars_data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight  >  3000
SELECT Song_Name,  Song_release_year FROM singer ORDER BY Age ASC LIMIT 1
SELECT Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE concert.Year  =  2014
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  "Cat" INTERSECT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  "Dog"
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  'APG' INTERSECT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  'CVO'
SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >=  2 INTERSECT SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id  =  car_names.MakeId GROUP BY car_makers.Id HAVING count(*)  >  3
SELECT singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Age  >  40 INTERSECT SELECT singer.Country FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID WHERE singer.Age  <  30
SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE car_names.Model  =  "volvo" ORDER BY cars_data.Accelerate ASC LIMIT 1
SELECT car_makers.FullName,  car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >  3
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY countries.CountryName ORDER BY count(*) DESC LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country WHERE countries.Continent  =  'Europe' GROUP BY countries.CountryName HAVING count(*)  >=  3
SELECT singer.Song_Name FROM singer JOIN singer_in_concert ON singer.Singer_ID  =  singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID  =  concert.concert_ID WHERE singer.Age  >  (SELECT avg(Age) FROM singer)
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  "cat" OR Pets.PetType  =  "dog"
SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId WHERE cars_data.Weight  <  3500 EXCEPT SELECT DISTINCT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId JOIN model_list ON car_names.MakeId  =  model_list.ModelId JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "Ford Motor Company"
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode  =  flights.DestAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data)
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  "CVO" EXCEPT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  "APG"
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId ORDER BY cars_data.Horsepower ASC LIMIT 1
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId WHERE countries.Continent  =  "Europe" GROUP BY countries.CountryName HAVING count(*)  >=  3
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  "Cat" OR Pets.PetType  =  "Dog"
SELECT car_names.Make,  cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId ORDER BY cars_data.Year ASC LIMIT 1
SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId  =  car_names.MakeId GROUP BY car_names.Model ORDER BY count(*) DESC LIMIT 1
SELECT Student.Fname,  Student.Sex FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING count(*)  >  1
SELECT Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID WHERE concert.Year  =  2014
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  "APG" INTERSECT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  "CVO"
SELECT avg(Edispl) FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE car_names.Model  =  "volvo"
SELECT Student.StuID,  count(*) FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID GROUP BY Student.StuID
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat" AND pet_age  =  3
SELECT countries.CountryName,  count(*) FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY countries.CountryName HAVING count(*)  >  2
SELECT airlines.Abbreviation,  airlines.Country FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY flights.Airline ORDER BY count(*) LIMIT 1
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country EXCEPT SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country
SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  <  4 EXCEPT SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Horsepower  =  (SELECT min(Horsepower) FROM cars_data)
SELECT Student.Fname,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Dog" EXCEPT SELECT Student.Fname,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY airlines.Airline HAVING count(*)  >=  10
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY car_makers.Country HAVING count(*)  >  2
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker  =  car_makers.Id WHERE car_makers.FullName  =  "American Motor Company"
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) LIMIT 1
SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Horsepower  >  (SELECT min(Horsepower) FROM cars_data) EXCEPT SELECT car_names.MakeId,  car_names.Make FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  >  3
SELECT stadium.Name,  stadium.Capacity FROM concert JOIN stadium ON concert.Stadium_ID  =  stadium.Stadium_ID WHERE concert.Year  >  2013 GROUP BY concert.Stadium_ID ORDER BY count(*) DESC LIMIT 1
SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID WHERE Student.LName  =  'Smith'
SELECT count(*) FROM car_names
SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country  =  countries.CountryId GROUP BY car_makers.Country ORDER BY count(*) DESC LIMIT 1
SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >=  2 INTERSECT SELECT car_makers.Id,  car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker GROUP BY car_makers.Id HAVING count(*)  >  3
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Weight  <  (SELECT avg(Weight) FROM cars_data)
SELECT airports.AirportCode FROM airports JOIN flights ON airports.AirportCode  =  flights.SourceAirport OR airports.AirportCode  =  flights.DestAirport GROUP BY airports.AirportCode ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Student.Sex  =  "female" AND Pets.PetType  =  "dog"
SELECT DISTINCT model_list.Model FROM car_makers JOIN model_list ON car_makers.Id  =  model_list.Maker WHERE car_makers.Maker  =  "General Motors" OR cars_data.Weight  >  3500
SELECT stadium.Name,  stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID  =  stadium.Stadium_ID WHERE concert.Year  =  2014 INTERSECT SELECT stadium.Name,  stadium.Location FROM concert JOIN stadium ON concert.Stadium_ID  =  stadium.Stadium_ID WHERE concert.Year  =  2015
SELECT DISTINCT Student.Major,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID EXCEPT SELECT DISTINCT Student.Major,  Student.Age FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
SELECT DISTINCT Student.Fname,  Student.Sex FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID GROUP BY Has_Pet.StuID HAVING count(*)  >  1
SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country GROUP BY countries.CountryId HAVING count(*)  >  3 UNION SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_names ON countries.CountryId  =  car_names.MakeId WHERE car_names.Model  =  "fiat"
SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country GROUP BY countries.CountryId HAVING count(*)  >  3 UNION SELECT countries.CountryId,  countries.CountryName FROM countries JOIN car_names ON countries.CountryId  =  car_names.MakeId WHERE car_names.Model  =  "fiat"
SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID WHERE Student.LName  =  'Smith'
SELECT Name FROM stadium EXCEPT SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID  =  concert.Stadium_ID
SELECT countries.CountryName,  countries.CountryId FROM countries JOIN car_makers ON countries.CountryId  =  car_makers.Country GROUP BY countries.CountryId HAVING count(*)  >=  1
SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Weight  <  (SELECT avg(Weight) FROM cars_data)
SELECT car_names.Make,  cars_data.Horsepower FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE cars_data.Cylinders  =  3 ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode  =  flights.SourceAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Horsepower) FROM cars_data)
SELECT max(MPG) FROM cars_data WHERE Cylinders  =  8 OR YEAR  <  1980
SELECT Major,  Age FROM Student WHERE StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat")
SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline GROUP BY flights.Airline HAVING count(*)  <  200
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)
SELECT count(*) FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID WHERE Student.Age  >  20
SELECT count(*) FROM concert WHERE Stadium_ID  =  (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT Song_Name,  Song_release_year FROM singer ORDER BY Age ASC LIMIT 1
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  "Cat" INTERSECT SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID  =  Has_Pet.StuID JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE Pets.PetType  =  "Dog"
SELECT StuID FROM Student EXCEPT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID  =  Pets.PetID WHERE PetType  =  "Cat"
SELECT cars_data.Cylinders FROM cars_data JOIN car_names ON cars_data.Id  =  car_names.MakeId WHERE car_names.Model  =  "volvo" ORDER BY cars_data.Accelerate ASC LIMIT 1
SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*)  >=  2
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT DestAirport FROM flights) AND AirportCode NOT IN (SELECT SourceAirport FROM flights)
SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Paragraphs.Paragraph_Text  =  "Brazil" INTERSECT SELECT Documents.Document_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Paragraphs.Paragraph_Text  =  "Ireland"
SELECT Documents.Document_Name FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID WHERE Templates.Template_Type_Code  =  "BK"
SELECT Templates.Template_ID,  Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY count(*) DESC LIMIT 1
SELECT max(loser_rank) FROM matches
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID HAVING count(*)  >=  2
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) ASC LIMIT 1
SELECT avg(winner_age),  avg(loser_age) FROM matches
SELECT players.first_name,  players.country_code FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "WTA Championships" INTERSECT SELECT players.first_name,  players.country_code FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "Australian Open"
SELECT Template_ID FROM Templates EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) BETWEEN 1 AND 2
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_ID HAVING count(*)  >  1
SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2013 INTERSECT SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2016
SELECT Name FROM teacher EXCEPT SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID
SELECT Template_Type_Code FROM Templates EXCEPT SELECT Template_Type_Code FROM Documents
SELECT Templates.Template_ID,  Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY count(*) DESC LIMIT 1
SELECT players.first_name,  players.country_code,  players.birth_date FROM players JOIN matches ON players.player_id  =  matches.winner_id GROUP BY matches.winner_id ORDER BY sum(matches.winner_rank_points) DESC LIMIT 1
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT visitor.ID,  visitor.Name,  visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID  =  visit.visitor_ID GROUP BY visitor.ID ORDER BY sum(visit.Total_spent) DESC LIMIT 1
SELECT shop.Manager_name,  shop.District FROM shop JOIN product ON shop.Shop_ID  =  product.Shop_ID GROUP BY shop.Shop_ID ORDER BY count(*) DESC LIMIT 1
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) BETWEEN 1 AND 2
SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage  =  225)
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID EXCEPT SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID  =  course.Course_ID
SELECT avg(loser_age),  avg(winner_age) FROM matches
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT players.first_name,  players.country_code,  players.birth_date FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.winner_rank_points  =  (SELECT max(winner_rank_points) FROM matches)
SELECT Departments.department_name,  Degree_Programs.department_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id  =  Departments.department_id GROUP BY Degree_Programs.department_id ORDER BY count(*) DESC LIMIT 1
SELECT battle.id,  battle.name FROM battle JOIN death ON battle.id  =  death.caused_by_ship_id GROUP BY battle.id HAVING sum(death.killed)  >  10
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY count(*) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*)  >=  2
SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "Australian Open" ORDER BY matches.winner_rank_points DESC LIMIT 1
SELECT Name FROM museum WHERE Num_of_Staff  >  (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year  >  2010)
SELECT battle.id,  battle.name FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.ship_type  =  "Brig"
SELECT battle.name,  battle.date FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.name  =  "Lettice" INTERSECT SELECT battle.name,  battle.date FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.name  =  "HMS Atalanta"
SELECT Documents.Document_ID ,  Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID  =  Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM museum EXCEPT SELECT museum.Name FROM museum JOIN visit ON museum.Museum_ID  =  visit.Museum_ID
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT count(*) FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID WHERE Templates.Template_Type_Code  =  "PPT"
SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id OR players.player_id  =  matches.loser_id ORDER BY matches.minutes DESC LIMIT 1
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text  =  "Brazil" INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text  =  "Ireland"
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*)  <  3
SELECT players.first_name,  players.last_name,  rankings.ranking_points FROM rankings JOIN players ON rankings.player_id  =  players.player_id WHERE rankings.ranking  =  (SELECT max(ranking) FROM rankings)
SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*)  >=  2
SELECT museum.Name,  museum.Museum_ID FROM museum JOIN visit ON museum.Museum_ID  =  visit.Museum_ID GROUP BY visit.Museum_ID ORDER BY count(*) DESC LIMIT 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
SELECT shop.Manager_name,  shop.District FROM shop JOIN evaluation ON shop.Shop_ID  =  evaluation.Shop_ID GROUP BY shop.Shop_ID ORDER BY sum(evaluation.Number_products) DESC LIMIT 1
SELECT avg(Age) FROM visitor WHERE Level_of_membership  >  4
SELECT count(DISTINCT players.first_name) FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "WTA Championships" INTERSECT SELECT count(DISTINCT players.first_name) FROM players JOIN matches ON players.player_id  =  matches.loser_id WHERE matches.tourney_name  =  "WTA Championships" AND players.hand  =  "L"
SELECT Documents.Document_ID,  Documents.Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID  =  Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY count(*) DESC LIMIT 1
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) ASC LIMIT 1
SELECT visitor.ID,  visitor.Name,  visitor.Age FROM visitor JOIN visit ON visitor.ID  =  visit.visitor_ID GROUP BY visitor.ID HAVING count(*)  >  1
SELECT players.country_code,  players.first_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "WTA Championships" INTERSECT SELECT players.country_code,  players.first_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.tourney_name  =  "Australian Open"
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM employee EXCEPT SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID
SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID  =  hiring.Shop_ID GROUP BY hiring.Shop_ID ORDER BY count(*) DESC LIMIT 1
SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2013 INTERSECT SELECT players.first_name,  players.last_name FROM players JOIN matches ON players.player_id  =  matches.winner_id WHERE matches.year  =  2016
SELECT players.first_name,  players.last_name,  matches.winner_rank FROM players JOIN matches ON players.player_id  =  matches.winner_id ORDER BY matches.winner_age ASC LIMIT 3
SELECT count(*) FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID WHERE Templates.Template_Type_Code  =  "PPT"
SELECT Name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)
SELECT avg(injured) FROM death
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*)  <  3
SELECT teacher.Name FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID  =  teacher.Teacher_ID GROUP BY course_arrange.Teacher_ID HAVING count(*)  >=  2
SELECT count(DISTINCT Templates.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
SELECT ship.id,  ship.name FROM ship JOIN death ON ship.id  =  death.caused_by_ship_id GROUP BY death.caused_by_ship_id ORDER BY sum(death.injured) DESC LIMIT 1
SELECT players.first_name,  players.country_code FROM players JOIN rankings ON players.player_id  =  rankings.player_id GROUP BY players.player_id ORDER BY count(*) DESC LIMIT 1
SELECT battle.name,  battle.result,  battle.bulgarian_commander FROM battle JOIN ship ON battle.id  =  ship.lost_in_battle WHERE ship.location  =  "English Channel"
SELECT avg(winner_rank) FROM matches
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID GROUP BY evaluation.Employee_ID ORDER BY sum(evaluation.Bonus) DESC LIMIT 1
SELECT loser_rank FROM matches ORDER BY loser_rank_points DESC LIMIT 1
SELECT players.first_name,  players.last_name,  rankings.ranking_points FROM rankings JOIN players ON rankings.player_id  =  players.player_id WHERE rankings.ranking  =  (SELECT max(ranking) FROM rankings)
SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID  =  employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID  =  hiring.Shop_ID GROUP BY hiring.Shop_ID ORDER BY count(*) DESC LIMIT 1
SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID  =  visit.Museum_ID JOIN visitor ON visit.visitor_ID  =  visitor.ID WHERE museum.Open_Year  <  2009 INTERSECT SELECT visitor.Name FROM museum JOIN visit ON museum.Museum_ID  =  visit.Museum_ID JOIN visitor ON visit.visitor_ID  =  visitor.ID WHERE museum.Open_Year  >  2011
SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000
SELECT visitor.Name,  visitor.Age FROM visitor JOIN visit ON visitor.ID  =  visit.visitor_ID GROUP BY visitor.ID ORDER BY sum(Num_of_Ticket) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID GROUP BY Templates.Template_ID HAVING count(*)  >  1
SELECT players.first_name,  players.last_name,  rankings.ranking FROM rankings JOIN players ON rankings.player_id  =  players.player_id WHERE rankings.ranking_date  =  (SELECT min(ranking_date) FROM rankings) ORDER BY players.birth_date ASC LIMIT 3
SELECT employee.City FROM employee JOIN hiring ON employee.Employee_ID  =  hiring.Employee_ID WHERE employee.Age  <  30 GROUP BY employee.City HAVING count(*)  >  1
SELECT avg(winner_rank) FROM matches
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*)  >=  2
SELECT count(*) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year  >  2010))
SELECT count(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Documents.Document_Name  =  "Summer Show"
SELECT Template_ID FROM Templates EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Documents ON Templates.Template_ID  =  Documents.Template_ID
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID WHERE evaluation.Bonus  =  (SELECT max(Bonus) FROM evaluation)
SELECT count(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID  =  Documents.Document_ID WHERE Documents.Document_Name  =  "Summer Show"
SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID EXCEPT SELECT employee.Name FROM employee JOIN evaluation ON employee.Employee_ID  =  evaluation.Employee_ID WHERE evaluation.Bonus  >  0
SELECT Name FROM shop WHERE Number_products  >  (SELECT avg(Number_products) FROM shop)
SELECT Nationality FROM people GROUP BY Nationality HAVING count(*)  >=  2
SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND city.Population  =  ( SELECT MAX ( city.Population ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' );
SELECT COUNT (DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" INTERSECT SELECT COUNT (DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Dutch"
SELECT avg(GNP),  sum(Population) FROM country WHERE GovernmentForm  =  'US Territory'
SELECT last_name FROM Students JOIN Addresses ON Students.permanent_address_id  =  Addresses.address_id WHERE state_province_county  =  "North Carolina" EXCEPT SELECT last_name FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id
SELECT Production_code,  Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.GovernmentForm  =  'Republic' GROUP BY countrylanguage.Language HAVING count(*)  =  1
SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id  =  Addresses.address_id WHERE country  =  "Haiti" UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  09700166582
SELECT country.Region FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Dutch' OR countrylanguage.Language  =  'English'
SELECT COUNT (DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Aruba";
SELECT country.Region FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" OR countrylanguage.Language  =  "Dutch"
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY count(*) DESC LIMIT 1
SELECT COUNT (DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Chinese";
SELECT Country FROM TV_Channel EXCEPT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Written_by  =  "Todd Casey"
SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id  =  TV_series.Channel GROUP BY TV_Channel.id HAVING count(*)  >  2
SELECT Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID  =  poker_player.People_ID
SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Afghanistan" AND countrylanguage.IsOfficial  =  1;
SELECT avg(GNP),  sum(Population) FROM country WHERE GovernmentForm  =  'United States'
SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'
SELECT COUNT (DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.IndepYear  <  1930 AND countrylanguage.IsOfficial  =  1
SELECT count(*),  student_enrolment_id FROM Transcript_Contents GROUP BY student_enrolment_id ORDER BY count(*) DESC LIMIT 1
SELECT Transcripts.transcript_date,  Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id  =  Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING count(*)  >=  2
SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Population  =  ( SELECT MAX ( country.Population ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' );
SELECT Students.first_name,  Students.middle_name,  Students.last_name,  Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id  =  Degree_Programs.degree_program_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id  =  Student_Enrolment_Courses.student_enrolment_id GROUP BY Students.student_id HAVING count(*)  =  2
SELECT Semesters.semester_name,  Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id  =  Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY count(*) DESC LIMIT 1
SELECT Addresses.line_1,  Addresses.line_2,  Addresses.address_id FROM Addresses JOIN Students ON Addresses.address_id  =  Students.permanent_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1
SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  =  "Masters") INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name  =  "Bachelors")
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.HeadOfState  =  "Beatrix";
SELECT semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id  =  Student_Enrolment.semester_id
SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.IndepYear  <  1930 AND countrylanguage.IsOfficial  =  1
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID  =  poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT Students.first_name,  Students.middle_name,  Students.last_name,  Student_Enrolment.student_id,  count(*) FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY count(*) DESC LIMIT 1
SELECT Money_Rank FROM poker_player ORDER BY Height DESC LIMIT 1
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'French'
SELECT semester_name FROM Semesters EXCEPT SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id  =  Student_Enrolment.semester_id
SELECT Money_Rank FROM poker_player ORDER BY people.Height DESC LIMIT 1
SELECT avg(country.LifeExpectancy) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' AND countrylanguage.IsOfficial  =  'False'
SELECT COUNT (DISTINCT country.Continent) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Chinese"
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia' GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1
SELECT SUM (Population),  MAX (GNP) FROM country WHERE Continent  =  'Asia';
SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE TV_Channel.series_name  =  "Sky Radio"
SELECT Country,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1
SELECT country.Continent FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Continent ORDER BY count(*) DESC LIMIT 1
SELECT first_name,  middle_name,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT country.Continent FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" AND country.Name  =  "Anguilla";
SELECT Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
SELECT people.Name FROM people EXCEPT SELECT people.Name FROM people JOIN poker_player ON people.People_ID  =  poker_player.People_ID
SELECT Students.first_name,  Students.middle_name,  Students.last_name,  Students.student_id FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id  =  Degree_Programs.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id  =  Semesters.semester_id GROUP BY Students.student_id HAVING count(*)  =  2
SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county  =  "North Carolina") EXCEPT SELECT Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'French'
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id
SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel EXCEPT SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Written_by  =  "Todd Casey"
SELECT Language,  count(*) FROM TV_Channel GROUP BY Language ORDER BY count(*) ASC LIMIT 1
SELECT Courses.course_id,  count(*) FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id  =  Transcript_Contents.student_course_id GROUP BY Courses.course_id ORDER BY count(*) DESC LIMIT 1
SELECT Transcripts.transcript_date,  Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id  =  Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id HAVING count(*)  >=  2
SELECT Semesters.semester_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id  =  Semesters.semester_id WHERE Degree_Programs.degree_summary_name  =  "Bachelor" INTERSECT SELECT Semesters.semester_id FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id JOIN Semesters ON Student_Enrolment.semester_id  =  Semesters.semester_id WHERE Degree_Programs.degree_summary_name  =  "Master"
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id  =  Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY count(*) DESC LIMIT 1
SELECT TV_Channel.series_name,  TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones" INTERSECT SELECT TV_Channel.series_name,  TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Michael Chang"
SELECT Degree_Programs.degree_program_id,  Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1
SELECT Package_Option FROM TV_Channel EXCEPT SELECT TV_Channel.Package_Option FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
SELECT count(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id  =  Departments.department_id WHERE Departments.department_name  =  "engineering"
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY count(*) DESC LIMIT 1
SELECT Departments.department_name,  Degree_Programs.department_id FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id  =  Departments.department_id GROUP BY Degree_Programs.department_id ORDER BY count(*) DESC LIMIT 1
SELECT COUNT (DISTINCT country.Name) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" INTERSECT SELECT COUNT (DISTINCT country.Name) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "Dutch"
SELECT SUM ( country.Population ),  MAX ( country.GNP ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia'
SELECT Addresses.address_id,  Addresses.line_1,  Addresses.line_2,  Addresses.line_3 FROM Addresses JOIN Students ON Addresses.address_id  =  Students.current_address_id GROUP BY Addresses.address_id ORDER BY count(*) DESC LIMIT 1
SELECT Degree_Programs.degree_program_id,  Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1
SELECT Students.student_id,  Students.first_name,  Students.middle_name,  Students.last_name,  count(*),  Student_Enrolment.student_id FROM Students JOIN Student_Enrolment ON Students.student_id  =  Student_Enrolment.student_id GROUP BY Student_Enrolment.student_id ORDER BY count(*) DESC LIMIT 1
SELECT sum(country.Population) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= 'English'
SELECT count(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id  =  Departments.department_id WHERE Departments.department_name  =  "engineering"
SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID  =  people.People_ID WHERE people.Height  >  200
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Aruba" AND countrylanguage.IsOfficial  =  1 GROUP BY countrylanguage.Language ORDER BY SUM(countrylanguage.Percentage) DESC LIMIT 1
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')
SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.HeadOfState  =  "Beatrix";
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel EXCEPT SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Written_by  =  "Todd Casey"
SELECT Courses.course_name,  Courses.course_id FROM Courses JOIN Sections ON Courses.course_id  =  Sections.course_id GROUP BY Courses.course_id HAVING count(*)  <  2
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name ORDER BY count(*) DESC LIMIT 1
SELECT SUM (SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe'
SELECT CONTESTANTS.contestant_number,  CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number  =  VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number ORDER BY count(*) ASC LIMIT 1
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  "English" OR countrylanguage.Language  =  "Dutch"
SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Written_by  =  "Todd Casey"
SELECT Nationality FROM people GROUP BY Nationality HAVING count(*)  >=  2
SELECT sum(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Aruba";
SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic'
SELECT VOTES.created,  VOTES.state,  VOTES.phone_number FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number  =  VOTES.contestant_number WHERE CONTESTANTS.contestant_name  =  "Tabatha Gehling"
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state  =  VOTES.state GROUP BY AREA_CODE_STATE.area_code ORDER BY count(*) DESC LIMIT 1
SELECT id FROM TV_Channel GROUP BY id HAVING count(*)  >  2
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'French'
SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state  =  VOTES.state WHERE VOTES.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name  =  "Tabatha Gehling") INTERSECT SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state  =  VOTES.state WHERE VOTES.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name  =  "Kelly Clauss")
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country  =  "Haiti") OR cell_mobile_number  =  09700166582
SELECT country.Continent FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Continent ORDER BY count(*) DESC LIMIT 1
SELECT Transcripts.transcript_date,  Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id  =  Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID  =  poker_player.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT Language,  count(*) FROM TV_Channel GROUP BY Language ORDER BY count(*) ASC LIMIT 1
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia' GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1
SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id  =  TV_series.Channel EXCEPT SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones"
SELECT Transcripts.transcript_date,  Transcripts.transcript_id FROM Transcripts JOIN Transcript_Contents ON Transcripts.transcript_id  =  Transcript_Contents.transcript_id GROUP BY Transcripts.transcript_id ORDER BY count(*) ASC LIMIT 1
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.GovernmentForm  =  'Republic' GROUP BY countrylanguage.Language HAVING count(*)  =  1
SELECT CONTESTANTS.contestant_number,  CONTESTANTS.contestant_name FROM CONTESTANTS JOIN VOTES ON CONTESTANTS.contestant_number  =  VOTES.contestant_number GROUP BY CONTESTANTS.contestant_number HAVING count(*)  >=  2
SELECT count(DISTINCT countrylanguage.Language) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Name  =  "Afghanistan" AND countrylanguage.IsOfficial  =  1;
SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  "English" AND IsOfficial  =  1)
SELECT SUM ( country.Population ) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English";
SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID  =  people.People_ID WHERE people.Height  >  200
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Chinese' AND country.Continent  =  'Asia' ORDER BY country.LifeExpectancy ASC LIMIT 1
SELECT TV_Channel.series_name,  TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Ben Jones" INTERSECT SELECT TV_Channel.series_name,  TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id  =  Cartoon.Channel WHERE Cartoon.Directed_by  =  "Michael Chang"
SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id  =  Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY count(*) DESC LIMIT 1
SELECT count(DISTINCT department_id) FROM Degree_Programs
SELECT Courses.course_name,  Courses.course_id FROM Courses JOIN Sections ON Courses.course_id  =  Sections.course_id GROUP BY Courses.course_id HAVING count(*)  <=  2
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' INTERSECT SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'French'
SELECT Semesters.semester_name,  Semesters.semester_id FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id  =  Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY count(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1
SELECT country.Name,  country.Population,  country.LifeExpectancy FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Chinese' AND country.Region  =  'Asia' AND country.SurfaceArea  =  ( SELECT MAX ( SurfaceArea ) FROM country WHERE Region  =  'Asia' );
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING count(*)  >  1
SELECT GovernmentForm,  sum(Population) FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Spanish' ORDER BY countrylanguage.Percentage DESC LIMIT 1;
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id JOIN Owners ON Dogs.owner_id  =  Owners.owner_id EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id JOIN Owners ON Dogs.owner_id  =  Owners.owner_id WHERE Treatments.cost_of_treatment  >  1000
SELECT Name,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT singer.Name FROM singer EXCEPT SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID
SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode EXCEPT SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'English' AND country.GovernmentForm  =  'Republic'
SELECT Name FROM country WHERE Continent  =  'Asia' AND Population  >  (SELECT MAX (Population) FROM country WHERE Continent  =  'Africa')
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
SELECT email_address,  role_code,  first_name,  last_name FROM Professionals EXCEPT SELECT Professionals.email_address,  Professionals.role_code,  Professionals.first_name,  Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1
SELECT Owners.owner_id,  Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id GROUP BY Owners.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT DISTINCT PROFESSIONALS.professional_id,  PROFESSIONALS.last_name,  PROFESSIONALS.cell_number FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id WHERE PROFESSIONALS.state  =  "Indiana" UNION SELECT DISTINCT PROFESSIONALS.professional_id,  PROFESSIONALS.last_name,  PROFESSIONALS.cell_number FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id GROUP BY PROFESSIONALS.professional_id HAVING count(*)  >  2
SELECT DISTINCT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
SELECT Orchestra FROM orchestra EXCEPT SELECT orchestra.Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1
SELECT property_name FROM Properties WHERE property_type_code  =  "house" OR property_type_code  =  "apartment" AND room_count  >  1
SELECT count(*) FROM Likes JOIN Highschooler ON Likes.liked_id  =  Highschooler.ID WHERE Highschooler.name  =  "Kyle"
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING count(*)  >  1
SELECT count(*) FROM Friend JOIN Highschooler ON Friend.student_id  =  Highschooler.ID WHERE Highschooler.name  =  "Kyle"
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code  =  Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_code ORDER BY sum(Treatments.cost_of_treatment) LIMIT 1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY count(*) DESC LIMIT 1
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id  =  Owners.owner_id ORDER BY Dogs.age ASC LIMIT 1
SELECT country.Name,  country.IndepYear,  country.SurfaceArea FROM country WHERE country.Population  =  ( SELECT MIN ( country.Population ) FROM country );
SELECT name FROM Highschooler EXCEPT SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id
SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code  =  Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name  =  "AirCon"
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT count(DISTINCT dog_id) FROM Treatments
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id HAVING count(*)  >=  2 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id GROUP BY Likes.student_id HAVING count(*)  >=  2 AND Highschooler.grade  >  5
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id HAVING count(*)  >=  3
SELECT name FROM Highschooler EXCEPT SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.student_id  =  Highschooler.ID EXCEPT SELECT Highschooler.name FROM Friend JOIN Highschooler ON Friend.friend_id  =  Highschooler.ID
SELECT email_address,  role_code FROM Professionals EXCEPT SELECT Professionals.email_address,  Professionals.role_code FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id ORDER BY count(*) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.liked_id GROUP BY Likes.liked_id ORDER BY count(*) DESC LIMIT 1
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.liked_id  =  Highschooler.ID GROUP BY Likes.liked_id ORDER BY count(*) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id
SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English" AND country.GovernmentForm!= "Republic";
SELECT GovernmentForm,  sum(Population) FROM country WHERE LifeExpectancy  >  72 GROUP BY GovernmentForm
SELECT country.Name,  count(*) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name HAVING count(*)  >=  3
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY count(*) DESC LIMIT 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.friend_id
SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  <  1945 INTERSECT SELECT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  >  1955
SELECT Breeds.breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code  =  Breeds.breed_code GROUP BY Dogs.breed_code ORDER BY count(*) DESC LIMIT 1
SELECT Owners.owner_id,  Owners.first_name,  Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id GROUP BY Owners.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT country.Code,  countrylanguage.Language,  max(countrylanguage.Percentage) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Code,  countrylanguage.Language
SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING count(*)  >  1
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id  =  Highschooler.ID GROUP BY Likes.student_id HAVING count(*)  >=  2
SELECT countrylanguage.Language FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY countrylanguage.Language ORDER BY count(*) DESC LIMIT 1
SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Continent  =  'Europe' EXCEPT SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND countrylanguage.IsOfficial  =  1
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
SELECT Record_Company,  count(*) FROM orchestra GROUP BY Record_Company
SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id ORDER BY count(*) DESC LIMIT 1
SELECT Record_Company FROM orchestra WHERE YEAR_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE YEAR_of_Founded  >  2003
SELECT countrylanguage.Language,  max(countrylanguage.Percentage),  country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name
SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Continent  =  'Europe' EXCEPT SELECT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE countrylanguage.Language  =  'English' AND country.Continent  =  'Europe' AND countrylanguage.IsOfficial  =  1
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
SELECT count(*) FROM Friend WHERE student_id  =  (SELECT ID FROM Highschooler WHERE name  =  "Kyle")
SELECT Dogs.name,  Treatments.date_of_treatment FROM Treatments JOIN Dogs ON Treatments.dog_id  =  Dogs.dog_id WHERE Dogs.breed_code  =  (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) DESC LIMIT 1)
SELECT Owners.owner_id,  Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Charges ON Dogs.dog_id  =  Charges.charge_id GROUP BY Owners.owner_id ORDER BY sum(charge_amount) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id HAVING count(*)  >=  3
SELECT avg(LifeExpectancy),  sum(Population),  Continent FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent
SELECT Owners.owner_id,  Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id GROUP BY Owners.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT DISTINCT Professionals.professional_id,  Professionals.last_name,  Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id WHERE Professionals.state  =  "Indiana" OR Treatments.treatment_id  >  2
SELECT Treatment_Types.treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code  =  Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_code ORDER BY sum(Treatments.cost_of_treatment) ASC LIMIT 1
SELECT orchestra.Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID EXCEPT SELECT orchestra.Orchestra FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
SELECT Professionals.professional_id,  Professionals.role_code,  Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id GROUP BY Treatments.professional_id HAVING count(*)  >=  2
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT Breeds.breed_name FROM Dogs JOIN Breeds ON Dogs.breed_code  =  Breeds.breed_code GROUP BY Dogs.breed_code ORDER BY count(*) DESC LIMIT 1
SELECT Highschooler.name FROM Likes JOIN Highschooler ON Likes.student_id  =  Highschooler.ID GROUP BY Likes.student_id HAVING count(*)  >=  2
SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend
SELECT count(DISTINCT professional_id) FROM Treatments
SELECT count(*) FROM Dogs WHERE age  <  (SELECT avg(age) FROM Dogs)
SELECT DISTINCT PROFESSIONALS.first_name,  PROFESSIONALS.last_name FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id WHERE Treatments.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments)
SELECT Name FROM singer EXCEPT SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT Highschooler.ID FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT Highschooler.ID FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id
SELECT country.Name FROM country JOIN city ON country.Code  =  city.CountryCode WHERE country.Continent  =  'Africa' AND city.Population  <  (SELECT min(city.Population) FROM country JOIN city ON country.Code  =  city.CountryCode WHERE country.Continent  =  'Asia')
SELECT Name,  IndepYear,  SurfaceArea FROM country WHERE Population  =  ( SELECT MIN ( Population ) FROM country );
SELECT Owners.last_name FROM Dogs JOIN Owners ON Dogs.owner_id  =  Owners.owner_id WHERE Dogs.age  =  (SELECT min(age) FROM Dogs)
SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT DISTINCT PROFESSIONALS.professional_id,  PROFESSIONALS.cell_number FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id GROUP BY Treatments.professional_id HAVING count(*)  >=  2
SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
SELECT Professionals.professional_id,  cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id GROUP BY Treatments.professional_id HAVING count(*)  >=  2
SELECT Professionals.professional_id,  Professionals.role_code,  Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id  =  Treatments.professional_id GROUP BY Treatments.professional_id HAVING count(*)  >=  2
SELECT count(*),  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
SELECT Owners.owner_id,  Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id GROUP BY Owners.owner_id ORDER BY sum(Treatments.cost_of_treatment) DESC LIMIT 1
SELECT count(DISTINCT professional_id) FROM Treatments
SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Africa' AND country.Population  <  (SELECT MAX (country.Population) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia')
SELECT DISTINCT PROFESSIONALS.first_name,  PROFESSIONALS.last_name FROM Treatments JOIN PROFESSIONALS ON Treatments.professional_id  =  PROFESSIONALS.professional_id WHERE Treatments.cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments)
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*)  >  1
SELECT Continent,  sum(Population),  avg(LifeExpectancy) FROM country WHERE LifeExpectancy  <  72 GROUP BY Continent
SELECT avg(Highschooler.grade) FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id INTERSECT SELECT avg(Highschooler.grade) FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id EXCEPT SELECT Dogs.name FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id WHERE Treatments.cost_of_treatment  >  1000
SELECT DISTINCT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  <  1945 INTERSECT SELECT DISTINCT singer.Citizenship FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID WHERE singer.Birth_Year  >  1955
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Friend ON Highschooler.ID  =  Friend.student_id GROUP BY Friend.student_id HAVING count(*)  >=  2 INTERSECT SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID  =  Likes.student_id WHERE Highschooler.grade  >  5
SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)
SELECT COUNT (DISTINCT country.Code) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Spanish'
SELECT Owners.owner_id,  Owners.first_name,  Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id  =  Dogs.owner_id GROUP BY Owners.owner_id ORDER BY count(*) DESC LIMIT 1
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID  =  song.Singer_ID GROUP BY singer.Singer_ID HAVING count(*)  >  1
SELECT avg(Dogs.age) FROM Dogs JOIN Treatments ON Dogs.dog_id  =  Treatments.dog_id
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
SELECT count(*) FROM Likes JOIN Highschooler ON Likes.liked_id  =  Highschooler.ID WHERE Highschooler.name  =  "Kyle"
SELECT sum(country.Population),  avg(country.SurfaceArea) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'North America' AND country.SurfaceArea  >  3000;
SELECT countrylanguage.CountryCode FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language!= "English"
SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID  =  performance.Orchestra_ID GROUP BY orchestra.Year_of_Founded HAVING count(*)  >  1
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID  =  orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY sum(orchestra.Year_of_Founded) DESC LIMIT 1
SELECT country.Name,  count(*) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode GROUP BY country.Name HAVING count(*)  >  2;
SELECT country.Name,  country.Population,  country.HeadOfState FROM country WHERE country.SurfaceArea  =  ( SELECT MAX ( country.SurfaceArea ) FROM country );
SELECT country.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Asia' AND country.Population  >  (SELECT MAX (country.Population) FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE country.Continent  =  'Africa')
SELECT country.Code FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode WHERE countrylanguage.Language  =  'Spanish' ORDER BY countrylanguage.Percentage DESC LIMIT 1
SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)
SELECT DISTINCT city.Name FROM country JOIN countrylanguage ON country.Code  =  countrylanguage.CountryCode JOIN city ON city.CountryCode  =  country.Code WHERE country.Continent  =  'Asia' AND countrylanguage.Language  =  'Chinese' AND countrylanguage.IsOfficial  =  1
SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1
SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend
SELECT max(Share),  min(Share) FROM performance WHERE TYPE!= "Live final"
SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  'CVO' EXCEPT SELECT airlines.Airline FROM airlines JOIN flights ON airlines.Airline  =  flights.Airline WHERE flights.SourceAirport  =  'APG'
SELECT count(DISTINCT current_address_id) FROM Students
